
NUCLEO-G474RE-AEI_Base_TP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f0a8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000910  0800f288  0800f288  0001f288  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fb98  0800fb98  0002020c  2**0
                  CONTENTS
  4 .ARM          00000008  0800fb98  0800fb98  0001fb98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fba0  0800fba0  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fba0  0800fba0  0001fba0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fba4  0800fba4  0001fba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  0800fba8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000418  2000020c  0800fdb4  0002020c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000624  0800fdb4  00020624  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dc9b  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003939  00000000  00000000  0003ded7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016b0  00000000  00000000  00041810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001528  00000000  00000000  00042ec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a922  00000000  00000000  000443e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ba78  00000000  00000000  0006ed0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00114155  00000000  00000000  0008a782  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019e8d7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000769c  00000000  00000000  0019e928  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000020c 	.word	0x2000020c
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800f270 	.word	0x0800f270

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000210 	.word	0x20000210
 800021c:	0800f270 	.word	0x0800f270

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2iz>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d215      	bcs.n	8000bfe <__aeabi_d2iz+0x36>
 8000bd2:	d511      	bpl.n	8000bf8 <__aeabi_d2iz+0x30>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d912      	bls.n	8000c04 <__aeabi_d2iz+0x3c>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d105      	bne.n	8000c10 <__aeabi_d2iz+0x48>
 8000c04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	bf08      	it	eq
 8000c0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_d2uiz>:
 8000c18:	004a      	lsls	r2, r1, #1
 8000c1a:	d211      	bcs.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c20:	d211      	bcs.n	8000c46 <__aeabi_d2uiz+0x2e>
 8000c22:	d50d      	bpl.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c2c:	d40e      	bmi.n	8000c4c <__aeabi_d2uiz+0x34>
 8000c2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c3a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c3e:	4770      	bx	lr
 8000c40:	f04f 0000 	mov.w	r0, #0
 8000c44:	4770      	bx	lr
 8000c46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c4a:	d102      	bne.n	8000c52 <__aeabi_d2uiz+0x3a>
 8000c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c50:	4770      	bx	lr
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_d2f>:
 8000c58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c60:	bf24      	itt	cs
 8000c62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c6a:	d90d      	bls.n	8000c88 <__aeabi_d2f+0x30>
 8000c6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c80:	bf08      	it	eq
 8000c82:	f020 0001 	biceq.w	r0, r0, #1
 8000c86:	4770      	bx	lr
 8000c88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c8c:	d121      	bne.n	8000cd2 <__aeabi_d2f+0x7a>
 8000c8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c92:	bfbc      	itt	lt
 8000c94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c98:	4770      	bxlt	lr
 8000c9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ca2:	f1c2 0218 	rsb	r2, r2, #24
 8000ca6:	f1c2 0c20 	rsb	ip, r2, #32
 8000caa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cae:	fa20 f002 	lsr.w	r0, r0, r2
 8000cb2:	bf18      	it	ne
 8000cb4:	f040 0001 	orrne.w	r0, r0, #1
 8000cb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cc4:	ea40 000c 	orr.w	r0, r0, ip
 8000cc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000ccc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cd0:	e7cc      	b.n	8000c6c <__aeabi_d2f+0x14>
 8000cd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cd6:	d107      	bne.n	8000ce8 <__aeabi_d2f+0x90>
 8000cd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cdc:	bf1e      	ittt	ne
 8000cde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ce2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ce6:	4770      	bxne	lr
 8000ce8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_uldivmod>:
 8000cf8:	b953      	cbnz	r3, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfa:	b94a      	cbnz	r2, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	bf08      	it	eq
 8000d00:	2800      	cmpeq	r0, #0
 8000d02:	bf1c      	itt	ne
 8000d04:	f04f 31ff 	movne.w	r1, #4294967295
 8000d08:	f04f 30ff 	movne.w	r0, #4294967295
 8000d0c:	f000 b9aa 	b.w	8001064 <__aeabi_idiv0>
 8000d10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d18:	f000 f83c 	bl	8000d94 <__udivmoddi4>
 8000d1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d24:	b004      	add	sp, #16
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_d2lz>:
 8000d28:	b538      	push	{r3, r4, r5, lr}
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	4604      	mov	r4, r0
 8000d30:	460d      	mov	r5, r1
 8000d32:	f7ff ff0b 	bl	8000b4c <__aeabi_dcmplt>
 8000d36:	b928      	cbnz	r0, 8000d44 <__aeabi_d2lz+0x1c>
 8000d38:	4620      	mov	r0, r4
 8000d3a:	4629      	mov	r1, r5
 8000d3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d40:	f000 b80a 	b.w	8000d58 <__aeabi_d2ulz>
 8000d44:	4620      	mov	r0, r4
 8000d46:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d4a:	f000 f805 	bl	8000d58 <__aeabi_d2ulz>
 8000d4e:	4240      	negs	r0, r0
 8000d50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d54:	bd38      	pop	{r3, r4, r5, pc}
 8000d56:	bf00      	nop

08000d58 <__aeabi_d2ulz>:
 8000d58:	b5d0      	push	{r4, r6, r7, lr}
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <__aeabi_d2ulz+0x34>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	4606      	mov	r6, r0
 8000d60:	460f      	mov	r7, r1
 8000d62:	f7ff fc81 	bl	8000668 <__aeabi_dmul>
 8000d66:	f7ff ff57 	bl	8000c18 <__aeabi_d2uiz>
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	f7ff fc02 	bl	8000574 <__aeabi_ui2d>
 8000d70:	4b07      	ldr	r3, [pc, #28]	; (8000d90 <__aeabi_d2ulz+0x38>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	f7ff fc78 	bl	8000668 <__aeabi_dmul>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	4630      	mov	r0, r6
 8000d7e:	4639      	mov	r1, r7
 8000d80:	f7ff faba 	bl	80002f8 <__aeabi_dsub>
 8000d84:	f7ff ff48 	bl	8000c18 <__aeabi_d2uiz>
 8000d88:	4621      	mov	r1, r4
 8000d8a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d8c:	3df00000 	.word	0x3df00000
 8000d90:	41f00000 	.word	0x41f00000

08000d94 <__udivmoddi4>:
 8000d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d98:	9d08      	ldr	r5, [sp, #32]
 8000d9a:	4604      	mov	r4, r0
 8000d9c:	468e      	mov	lr, r1
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d14d      	bne.n	8000e3e <__udivmoddi4+0xaa>
 8000da2:	428a      	cmp	r2, r1
 8000da4:	4694      	mov	ip, r2
 8000da6:	d969      	bls.n	8000e7c <__udivmoddi4+0xe8>
 8000da8:	fab2 f282 	clz	r2, r2
 8000dac:	b152      	cbz	r2, 8000dc4 <__udivmoddi4+0x30>
 8000dae:	fa01 f302 	lsl.w	r3, r1, r2
 8000db2:	f1c2 0120 	rsb	r1, r2, #32
 8000db6:	fa20 f101 	lsr.w	r1, r0, r1
 8000dba:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dbe:	ea41 0e03 	orr.w	lr, r1, r3
 8000dc2:	4094      	lsls	r4, r2
 8000dc4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dc8:	0c21      	lsrs	r1, r4, #16
 8000dca:	fbbe f6f8 	udiv	r6, lr, r8
 8000dce:	fa1f f78c 	uxth.w	r7, ip
 8000dd2:	fb08 e316 	mls	r3, r8, r6, lr
 8000dd6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dda:	fb06 f107 	mul.w	r1, r6, r7
 8000dde:	4299      	cmp	r1, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x64>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dea:	f080 811f 	bcs.w	800102c <__udivmoddi4+0x298>
 8000dee:	4299      	cmp	r1, r3
 8000df0:	f240 811c 	bls.w	800102c <__udivmoddi4+0x298>
 8000df4:	3e02      	subs	r6, #2
 8000df6:	4463      	add	r3, ip
 8000df8:	1a5b      	subs	r3, r3, r1
 8000dfa:	b2a4      	uxth	r4, r4
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3310 	mls	r3, r8, r0, r3
 8000e04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e08:	fb00 f707 	mul.w	r7, r0, r7
 8000e0c:	42a7      	cmp	r7, r4
 8000e0e:	d90a      	bls.n	8000e26 <__udivmoddi4+0x92>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e18:	f080 810a 	bcs.w	8001030 <__udivmoddi4+0x29c>
 8000e1c:	42a7      	cmp	r7, r4
 8000e1e:	f240 8107 	bls.w	8001030 <__udivmoddi4+0x29c>
 8000e22:	4464      	add	r4, ip
 8000e24:	3802      	subs	r0, #2
 8000e26:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e2a:	1be4      	subs	r4, r4, r7
 8000e2c:	2600      	movs	r6, #0
 8000e2e:	b11d      	cbz	r5, 8000e38 <__udivmoddi4+0xa4>
 8000e30:	40d4      	lsrs	r4, r2
 8000e32:	2300      	movs	r3, #0
 8000e34:	e9c5 4300 	strd	r4, r3, [r5]
 8000e38:	4631      	mov	r1, r6
 8000e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d909      	bls.n	8000e56 <__udivmoddi4+0xc2>
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	f000 80ef 	beq.w	8001026 <__udivmoddi4+0x292>
 8000e48:	2600      	movs	r6, #0
 8000e4a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4e:	4630      	mov	r0, r6
 8000e50:	4631      	mov	r1, r6
 8000e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e56:	fab3 f683 	clz	r6, r3
 8000e5a:	2e00      	cmp	r6, #0
 8000e5c:	d14a      	bne.n	8000ef4 <__udivmoddi4+0x160>
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	d302      	bcc.n	8000e68 <__udivmoddi4+0xd4>
 8000e62:	4282      	cmp	r2, r0
 8000e64:	f200 80f9 	bhi.w	800105a <__udivmoddi4+0x2c6>
 8000e68:	1a84      	subs	r4, r0, r2
 8000e6a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e6e:	2001      	movs	r0, #1
 8000e70:	469e      	mov	lr, r3
 8000e72:	2d00      	cmp	r5, #0
 8000e74:	d0e0      	beq.n	8000e38 <__udivmoddi4+0xa4>
 8000e76:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e7a:	e7dd      	b.n	8000e38 <__udivmoddi4+0xa4>
 8000e7c:	b902      	cbnz	r2, 8000e80 <__udivmoddi4+0xec>
 8000e7e:	deff      	udf	#255	; 0xff
 8000e80:	fab2 f282 	clz	r2, r2
 8000e84:	2a00      	cmp	r2, #0
 8000e86:	f040 8092 	bne.w	8000fae <__udivmoddi4+0x21a>
 8000e8a:	eba1 010c 	sub.w	r1, r1, ip
 8000e8e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e92:	fa1f fe8c 	uxth.w	lr, ip
 8000e96:	2601      	movs	r6, #1
 8000e98:	0c20      	lsrs	r0, r4, #16
 8000e9a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e9e:	fb07 1113 	mls	r1, r7, r3, r1
 8000ea2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ea6:	fb0e f003 	mul.w	r0, lr, r3
 8000eaa:	4288      	cmp	r0, r1
 8000eac:	d908      	bls.n	8000ec0 <__udivmoddi4+0x12c>
 8000eae:	eb1c 0101 	adds.w	r1, ip, r1
 8000eb2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000eb6:	d202      	bcs.n	8000ebe <__udivmoddi4+0x12a>
 8000eb8:	4288      	cmp	r0, r1
 8000eba:	f200 80cb 	bhi.w	8001054 <__udivmoddi4+0x2c0>
 8000ebe:	4643      	mov	r3, r8
 8000ec0:	1a09      	subs	r1, r1, r0
 8000ec2:	b2a4      	uxth	r4, r4
 8000ec4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ec8:	fb07 1110 	mls	r1, r7, r0, r1
 8000ecc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ed0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ed4:	45a6      	cmp	lr, r4
 8000ed6:	d908      	bls.n	8000eea <__udivmoddi4+0x156>
 8000ed8:	eb1c 0404 	adds.w	r4, ip, r4
 8000edc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ee0:	d202      	bcs.n	8000ee8 <__udivmoddi4+0x154>
 8000ee2:	45a6      	cmp	lr, r4
 8000ee4:	f200 80bb 	bhi.w	800105e <__udivmoddi4+0x2ca>
 8000ee8:	4608      	mov	r0, r1
 8000eea:	eba4 040e 	sub.w	r4, r4, lr
 8000eee:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ef2:	e79c      	b.n	8000e2e <__udivmoddi4+0x9a>
 8000ef4:	f1c6 0720 	rsb	r7, r6, #32
 8000ef8:	40b3      	lsls	r3, r6
 8000efa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000efe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f02:	fa20 f407 	lsr.w	r4, r0, r7
 8000f06:	fa01 f306 	lsl.w	r3, r1, r6
 8000f0a:	431c      	orrs	r4, r3
 8000f0c:	40f9      	lsrs	r1, r7
 8000f0e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f12:	fa00 f306 	lsl.w	r3, r0, r6
 8000f16:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f1a:	0c20      	lsrs	r0, r4, #16
 8000f1c:	fa1f fe8c 	uxth.w	lr, ip
 8000f20:	fb09 1118 	mls	r1, r9, r8, r1
 8000f24:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f28:	fb08 f00e 	mul.w	r0, r8, lr
 8000f2c:	4288      	cmp	r0, r1
 8000f2e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f32:	d90b      	bls.n	8000f4c <__udivmoddi4+0x1b8>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f3c:	f080 8088 	bcs.w	8001050 <__udivmoddi4+0x2bc>
 8000f40:	4288      	cmp	r0, r1
 8000f42:	f240 8085 	bls.w	8001050 <__udivmoddi4+0x2bc>
 8000f46:	f1a8 0802 	sub.w	r8, r8, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	1a09      	subs	r1, r1, r0
 8000f4e:	b2a4      	uxth	r4, r4
 8000f50:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f54:	fb09 1110 	mls	r1, r9, r0, r1
 8000f58:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f5c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f60:	458e      	cmp	lr, r1
 8000f62:	d908      	bls.n	8000f76 <__udivmoddi4+0x1e2>
 8000f64:	eb1c 0101 	adds.w	r1, ip, r1
 8000f68:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f6c:	d26c      	bcs.n	8001048 <__udivmoddi4+0x2b4>
 8000f6e:	458e      	cmp	lr, r1
 8000f70:	d96a      	bls.n	8001048 <__udivmoddi4+0x2b4>
 8000f72:	3802      	subs	r0, #2
 8000f74:	4461      	add	r1, ip
 8000f76:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f7a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f7e:	eba1 010e 	sub.w	r1, r1, lr
 8000f82:	42a1      	cmp	r1, r4
 8000f84:	46c8      	mov	r8, r9
 8000f86:	46a6      	mov	lr, r4
 8000f88:	d356      	bcc.n	8001038 <__udivmoddi4+0x2a4>
 8000f8a:	d053      	beq.n	8001034 <__udivmoddi4+0x2a0>
 8000f8c:	b15d      	cbz	r5, 8000fa6 <__udivmoddi4+0x212>
 8000f8e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f92:	eb61 010e 	sbc.w	r1, r1, lr
 8000f96:	fa01 f707 	lsl.w	r7, r1, r7
 8000f9a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f9e:	40f1      	lsrs	r1, r6
 8000fa0:	431f      	orrs	r7, r3
 8000fa2:	e9c5 7100 	strd	r7, r1, [r5]
 8000fa6:	2600      	movs	r6, #0
 8000fa8:	4631      	mov	r1, r6
 8000faa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fae:	f1c2 0320 	rsb	r3, r2, #32
 8000fb2:	40d8      	lsrs	r0, r3
 8000fb4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fb8:	fa21 f303 	lsr.w	r3, r1, r3
 8000fbc:	4091      	lsls	r1, r2
 8000fbe:	4301      	orrs	r1, r0
 8000fc0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fc4:	fa1f fe8c 	uxth.w	lr, ip
 8000fc8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fcc:	fb07 3610 	mls	r6, r7, r0, r3
 8000fd0:	0c0b      	lsrs	r3, r1, #16
 8000fd2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fd6:	fb00 f60e 	mul.w	r6, r0, lr
 8000fda:	429e      	cmp	r6, r3
 8000fdc:	fa04 f402 	lsl.w	r4, r4, r2
 8000fe0:	d908      	bls.n	8000ff4 <__udivmoddi4+0x260>
 8000fe2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fe6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fea:	d22f      	bcs.n	800104c <__udivmoddi4+0x2b8>
 8000fec:	429e      	cmp	r6, r3
 8000fee:	d92d      	bls.n	800104c <__udivmoddi4+0x2b8>
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	4463      	add	r3, ip
 8000ff4:	1b9b      	subs	r3, r3, r6
 8000ff6:	b289      	uxth	r1, r1
 8000ff8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ffc:	fb07 3316 	mls	r3, r7, r6, r3
 8001000:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001004:	fb06 f30e 	mul.w	r3, r6, lr
 8001008:	428b      	cmp	r3, r1
 800100a:	d908      	bls.n	800101e <__udivmoddi4+0x28a>
 800100c:	eb1c 0101 	adds.w	r1, ip, r1
 8001010:	f106 38ff 	add.w	r8, r6, #4294967295
 8001014:	d216      	bcs.n	8001044 <__udivmoddi4+0x2b0>
 8001016:	428b      	cmp	r3, r1
 8001018:	d914      	bls.n	8001044 <__udivmoddi4+0x2b0>
 800101a:	3e02      	subs	r6, #2
 800101c:	4461      	add	r1, ip
 800101e:	1ac9      	subs	r1, r1, r3
 8001020:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001024:	e738      	b.n	8000e98 <__udivmoddi4+0x104>
 8001026:	462e      	mov	r6, r5
 8001028:	4628      	mov	r0, r5
 800102a:	e705      	b.n	8000e38 <__udivmoddi4+0xa4>
 800102c:	4606      	mov	r6, r0
 800102e:	e6e3      	b.n	8000df8 <__udivmoddi4+0x64>
 8001030:	4618      	mov	r0, r3
 8001032:	e6f8      	b.n	8000e26 <__udivmoddi4+0x92>
 8001034:	454b      	cmp	r3, r9
 8001036:	d2a9      	bcs.n	8000f8c <__udivmoddi4+0x1f8>
 8001038:	ebb9 0802 	subs.w	r8, r9, r2
 800103c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001040:	3801      	subs	r0, #1
 8001042:	e7a3      	b.n	8000f8c <__udivmoddi4+0x1f8>
 8001044:	4646      	mov	r6, r8
 8001046:	e7ea      	b.n	800101e <__udivmoddi4+0x28a>
 8001048:	4620      	mov	r0, r4
 800104a:	e794      	b.n	8000f76 <__udivmoddi4+0x1e2>
 800104c:	4640      	mov	r0, r8
 800104e:	e7d1      	b.n	8000ff4 <__udivmoddi4+0x260>
 8001050:	46d0      	mov	r8, sl
 8001052:	e77b      	b.n	8000f4c <__udivmoddi4+0x1b8>
 8001054:	3b02      	subs	r3, #2
 8001056:	4461      	add	r1, ip
 8001058:	e732      	b.n	8000ec0 <__udivmoddi4+0x12c>
 800105a:	4630      	mov	r0, r6
 800105c:	e709      	b.n	8000e72 <__udivmoddi4+0xde>
 800105e:	4464      	add	r4, ip
 8001060:	3802      	subs	r0, #2
 8001062:	e742      	b.n	8000eea <__udivmoddi4+0x156>

08001064 <__aeabi_idiv0>:
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop

08001068 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b08c      	sub	sp, #48	; 0x30
 800106c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800106e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	605a      	str	r2, [r3, #4]
 8001078:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800107a:	1d3b      	adds	r3, r7, #4
 800107c:	2220      	movs	r2, #32
 800107e:	2100      	movs	r1, #0
 8001080:	4618      	mov	r0, r3
 8001082:	f009 fbd3 	bl	800a82c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001086:	4b33      	ldr	r3, [pc, #204]	; (8001154 <MX_ADC1_Init+0xec>)
 8001088:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800108c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800108e:	4b31      	ldr	r3, [pc, #196]	; (8001154 <MX_ADC1_Init+0xec>)
 8001090:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001094:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001096:	4b2f      	ldr	r3, [pc, #188]	; (8001154 <MX_ADC1_Init+0xec>)
 8001098:	2200      	movs	r2, #0
 800109a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800109c:	4b2d      	ldr	r3, [pc, #180]	; (8001154 <MX_ADC1_Init+0xec>)
 800109e:	2200      	movs	r2, #0
 80010a0:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80010a2:	4b2c      	ldr	r3, [pc, #176]	; (8001154 <MX_ADC1_Init+0xec>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010a8:	4b2a      	ldr	r3, [pc, #168]	; (8001154 <MX_ADC1_Init+0xec>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010ae:	4b29      	ldr	r3, [pc, #164]	; (8001154 <MX_ADC1_Init+0xec>)
 80010b0:	2204      	movs	r2, #4
 80010b2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80010b4:	4b27      	ldr	r3, [pc, #156]	; (8001154 <MX_ADC1_Init+0xec>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80010ba:	4b26      	ldr	r3, [pc, #152]	; (8001154 <MX_ADC1_Init+0xec>)
 80010bc:	2201      	movs	r2, #1
 80010be:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80010c0:	4b24      	ldr	r3, [pc, #144]	; (8001154 <MX_ADC1_Init+0xec>)
 80010c2:	2201      	movs	r2, #1
 80010c4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010c6:	4b23      	ldr	r3, [pc, #140]	; (8001154 <MX_ADC1_Init+0xec>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 80010ce:	4b21      	ldr	r3, [pc, #132]	; (8001154 <MX_ADC1_Init+0xec>)
 80010d0:	f44f 62ac 	mov.w	r2, #1376	; 0x560
 80010d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80010d6:	4b1f      	ldr	r3, [pc, #124]	; (8001154 <MX_ADC1_Init+0xec>)
 80010d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010dc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80010de:	4b1d      	ldr	r3, [pc, #116]	; (8001154 <MX_ADC1_Init+0xec>)
 80010e0:	2201      	movs	r2, #1
 80010e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010e6:	4b1b      	ldr	r3, [pc, #108]	; (8001154 <MX_ADC1_Init+0xec>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010ec:	4b19      	ldr	r3, [pc, #100]	; (8001154 <MX_ADC1_Init+0xec>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010f4:	4817      	ldr	r0, [pc, #92]	; (8001154 <MX_ADC1_Init+0xec>)
 80010f6:	f002 f86f 	bl	80031d8 <HAL_ADC_Init>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8001100:	f000 fc6c 	bl	80019dc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001104:	2300      	movs	r3, #0
 8001106:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001108:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800110c:	4619      	mov	r1, r3
 800110e:	4811      	ldr	r0, [pc, #68]	; (8001154 <MX_ADC1_Init+0xec>)
 8001110:	f003 fbf2 	bl	80048f8 <HAL_ADCEx_MultiModeConfigChannel>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800111a:	f000 fc5f 	bl	80019dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800111e:	4b0e      	ldr	r3, [pc, #56]	; (8001158 <MX_ADC1_Init+0xf0>)
 8001120:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001122:	2306      	movs	r3, #6
 8001124:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001126:	2300      	movs	r3, #0
 8001128:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800112a:	237f      	movs	r3, #127	; 0x7f
 800112c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800112e:	2304      	movs	r3, #4
 8001130:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001132:	2300      	movs	r3, #0
 8001134:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001136:	1d3b      	adds	r3, r7, #4
 8001138:	4619      	mov	r1, r3
 800113a:	4806      	ldr	r0, [pc, #24]	; (8001154 <MX_ADC1_Init+0xec>)
 800113c:	f002 fd60 	bl	8003c00 <HAL_ADC_ConfigChannel>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8001146:	f000 fc49 	bl	80019dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800114a:	bf00      	nop
 800114c:	3730      	adds	r7, #48	; 0x30
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20000228 	.word	0x20000228
 8001158:	04300002 	.word	0x04300002

0800115c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b09e      	sub	sp, #120	; 0x78
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001164:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001174:	f107 0310 	add.w	r3, r7, #16
 8001178:	2254      	movs	r2, #84	; 0x54
 800117a:	2100      	movs	r1, #0
 800117c:	4618      	mov	r0, r3
 800117e:	f009 fb55 	bl	800a82c <memset>
  if(adcHandle->Instance==ADC1)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800118a:	d167      	bne.n	800125c <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800118c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001190:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001192:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001196:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001198:	f107 0310 	add.w	r3, r7, #16
 800119c:	4618      	mov	r0, r3
 800119e:	f005 f891 	bl	80062c4 <HAL_RCCEx_PeriphCLKConfig>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80011a8:	f000 fc18 	bl	80019dc <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80011ac:	4b2d      	ldr	r3, [pc, #180]	; (8001264 <HAL_ADC_MspInit+0x108>)
 80011ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b0:	4a2c      	ldr	r2, [pc, #176]	; (8001264 <HAL_ADC_MspInit+0x108>)
 80011b2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80011b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011b8:	4b2a      	ldr	r3, [pc, #168]	; (8001264 <HAL_ADC_MspInit+0x108>)
 80011ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c4:	4b27      	ldr	r3, [pc, #156]	; (8001264 <HAL_ADC_MspInit+0x108>)
 80011c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c8:	4a26      	ldr	r2, [pc, #152]	; (8001264 <HAL_ADC_MspInit+0x108>)
 80011ca:	f043 0301 	orr.w	r3, r3, #1
 80011ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011d0:	4b24      	ldr	r3, [pc, #144]	; (8001264 <HAL_ADC_MspInit+0x108>)
 80011d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d4:	f003 0301 	and.w	r3, r3, #1
 80011d8:	60bb      	str	r3, [r7, #8]
 80011da:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011dc:	2301      	movs	r3, #1
 80011de:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011e0:	2303      	movs	r3, #3
 80011e2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80011ec:	4619      	mov	r1, r3
 80011ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011f2:	f004 f89b 	bl	800532c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80011f6:	4b1c      	ldr	r3, [pc, #112]	; (8001268 <HAL_ADC_MspInit+0x10c>)
 80011f8:	4a1c      	ldr	r2, [pc, #112]	; (800126c <HAL_ADC_MspInit+0x110>)
 80011fa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80011fc:	4b1a      	ldr	r3, [pc, #104]	; (8001268 <HAL_ADC_MspInit+0x10c>)
 80011fe:	2205      	movs	r2, #5
 8001200:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001202:	4b19      	ldr	r3, [pc, #100]	; (8001268 <HAL_ADC_MspInit+0x10c>)
 8001204:	2200      	movs	r2, #0
 8001206:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001208:	4b17      	ldr	r3, [pc, #92]	; (8001268 <HAL_ADC_MspInit+0x10c>)
 800120a:	2200      	movs	r2, #0
 800120c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800120e:	4b16      	ldr	r3, [pc, #88]	; (8001268 <HAL_ADC_MspInit+0x10c>)
 8001210:	2280      	movs	r2, #128	; 0x80
 8001212:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001214:	4b14      	ldr	r3, [pc, #80]	; (8001268 <HAL_ADC_MspInit+0x10c>)
 8001216:	f44f 7280 	mov.w	r2, #256	; 0x100
 800121a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800121c:	4b12      	ldr	r3, [pc, #72]	; (8001268 <HAL_ADC_MspInit+0x10c>)
 800121e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001222:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001224:	4b10      	ldr	r3, [pc, #64]	; (8001268 <HAL_ADC_MspInit+0x10c>)
 8001226:	2220      	movs	r2, #32
 8001228:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800122a:	4b0f      	ldr	r3, [pc, #60]	; (8001268 <HAL_ADC_MspInit+0x10c>)
 800122c:	2200      	movs	r2, #0
 800122e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001230:	480d      	ldr	r0, [pc, #52]	; (8001268 <HAL_ADC_MspInit+0x10c>)
 8001232:	f003 fd49 	bl	8004cc8 <HAL_DMA_Init>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 800123c:	f000 fbce 	bl	80019dc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	4a09      	ldr	r2, [pc, #36]	; (8001268 <HAL_ADC_MspInit+0x10c>)
 8001244:	655a      	str	r2, [r3, #84]	; 0x54
 8001246:	4a08      	ldr	r2, [pc, #32]	; (8001268 <HAL_ADC_MspInit+0x10c>)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800124c:	2200      	movs	r2, #0
 800124e:	2100      	movs	r1, #0
 8001250:	2012      	movs	r0, #18
 8001252:	f003 fd11 	bl	8004c78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001256:	2012      	movs	r0, #18
 8001258:	f003 fd28 	bl	8004cac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800125c:	bf00      	nop
 800125e:	3778      	adds	r7, #120	; 0x78
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	40021000 	.word	0x40021000
 8001268:	20000294 	.word	0x20000294
 800126c:	40020008 	.word	0x40020008

08001270 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001276:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <MX_DMA_Init+0x50>)
 8001278:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800127a:	4a11      	ldr	r2, [pc, #68]	; (80012c0 <MX_DMA_Init+0x50>)
 800127c:	f043 0304 	orr.w	r3, r3, #4
 8001280:	6493      	str	r3, [r2, #72]	; 0x48
 8001282:	4b0f      	ldr	r3, [pc, #60]	; (80012c0 <MX_DMA_Init+0x50>)
 8001284:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001286:	f003 0304 	and.w	r3, r3, #4
 800128a:	607b      	str	r3, [r7, #4]
 800128c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800128e:	4b0c      	ldr	r3, [pc, #48]	; (80012c0 <MX_DMA_Init+0x50>)
 8001290:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001292:	4a0b      	ldr	r2, [pc, #44]	; (80012c0 <MX_DMA_Init+0x50>)
 8001294:	f043 0301 	orr.w	r3, r3, #1
 8001298:	6493      	str	r3, [r2, #72]	; 0x48
 800129a:	4b09      	ldr	r3, [pc, #36]	; (80012c0 <MX_DMA_Init+0x50>)
 800129c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800129e:	f003 0301 	and.w	r3, r3, #1
 80012a2:	603b      	str	r3, [r7, #0]
 80012a4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80012a6:	2200      	movs	r2, #0
 80012a8:	2100      	movs	r1, #0
 80012aa:	200b      	movs	r0, #11
 80012ac:	f003 fce4 	bl	8004c78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80012b0:	200b      	movs	r0, #11
 80012b2:	f003 fcfb 	bl	8004cac <HAL_NVIC_EnableIRQ>

}
 80012b6:	bf00      	nop
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	40021000 	.word	0x40021000

080012c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b088      	sub	sp, #32
 80012c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ca:	f107 030c 	add.w	r3, r7, #12
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
 80012d2:	605a      	str	r2, [r3, #4]
 80012d4:	609a      	str	r2, [r3, #8]
 80012d6:	60da      	str	r2, [r3, #12]
 80012d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012da:	4b34      	ldr	r3, [pc, #208]	; (80013ac <MX_GPIO_Init+0xe8>)
 80012dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012de:	4a33      	ldr	r2, [pc, #204]	; (80013ac <MX_GPIO_Init+0xe8>)
 80012e0:	f043 0304 	orr.w	r3, r3, #4
 80012e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012e6:	4b31      	ldr	r3, [pc, #196]	; (80013ac <MX_GPIO_Init+0xe8>)
 80012e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ea:	f003 0304 	and.w	r3, r3, #4
 80012ee:	60bb      	str	r3, [r7, #8]
 80012f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012f2:	4b2e      	ldr	r3, [pc, #184]	; (80013ac <MX_GPIO_Init+0xe8>)
 80012f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f6:	4a2d      	ldr	r2, [pc, #180]	; (80013ac <MX_GPIO_Init+0xe8>)
 80012f8:	f043 0320 	orr.w	r3, r3, #32
 80012fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012fe:	4b2b      	ldr	r3, [pc, #172]	; (80013ac <MX_GPIO_Init+0xe8>)
 8001300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001302:	f003 0320 	and.w	r3, r3, #32
 8001306:	607b      	str	r3, [r7, #4]
 8001308:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800130a:	4b28      	ldr	r3, [pc, #160]	; (80013ac <MX_GPIO_Init+0xe8>)
 800130c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800130e:	4a27      	ldr	r2, [pc, #156]	; (80013ac <MX_GPIO_Init+0xe8>)
 8001310:	f043 0301 	orr.w	r3, r3, #1
 8001314:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001316:	4b25      	ldr	r3, [pc, #148]	; (80013ac <MX_GPIO_Init+0xe8>)
 8001318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	603b      	str	r3, [r7, #0]
 8001320:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ISO_RESET_Pin|Motor_Reset_Pin, GPIO_PIN_RESET);
 8001322:	2200      	movs	r2, #0
 8001324:	f44f 7102 	mov.w	r1, #520	; 0x208
 8001328:	4821      	ldr	r0, [pc, #132]	; (80013b0 <MX_GPIO_Init+0xec>)
 800132a:	f004 f981 	bl	8005630 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800132e:	2200      	movs	r2, #0
 8001330:	2120      	movs	r1, #32
 8001332:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001336:	f004 f97b 	bl	8005630 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800133a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800133e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001340:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001344:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001346:	2300      	movs	r3, #0
 8001348:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 800134a:	f107 030c 	add.w	r3, r7, #12
 800134e:	4619      	mov	r1, r3
 8001350:	4817      	ldr	r0, [pc, #92]	; (80013b0 <MX_GPIO_Init+0xec>)
 8001352:	f003 ffeb 	bl	800532c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ISO_RESET_Pin|Motor_Reset_Pin;
 8001356:	f44f 7302 	mov.w	r3, #520	; 0x208
 800135a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800135c:	2301      	movs	r3, #1
 800135e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001360:	2300      	movs	r3, #0
 8001362:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001364:	2300      	movs	r3, #0
 8001366:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001368:	f107 030c 	add.w	r3, r7, #12
 800136c:	4619      	mov	r1, r3
 800136e:	4810      	ldr	r0, [pc, #64]	; (80013b0 <MX_GPIO_Init+0xec>)
 8001370:	f003 ffdc 	bl	800532c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001374:	2320      	movs	r3, #32
 8001376:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001378:	2301      	movs	r3, #1
 800137a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137c:	2300      	movs	r3, #0
 800137e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001380:	2300      	movs	r3, #0
 8001382:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001384:	f107 030c 	add.w	r3, r7, #12
 8001388:	4619      	mov	r1, r3
 800138a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800138e:	f003 ffcd 	bl	800532c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001392:	2200      	movs	r2, #0
 8001394:	2100      	movs	r1, #0
 8001396:	2028      	movs	r0, #40	; 0x28
 8001398:	f003 fc6e 	bl	8004c78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800139c:	2028      	movs	r0, #40	; 0x28
 800139e:	f003 fc85 	bl	8004cac <HAL_NVIC_EnableIRQ>

}
 80013a2:	bf00      	nop
 80013a4:	3720      	adds	r7, #32
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	40021000 	.word	0x40021000
 80013b0:	48000800 	.word	0x48000800
 80013b4:	00000000 	.word	0x00000000

080013b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80013bc:	b082      	sub	sp, #8
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013c0:	f001 fc47 	bl	8002c52 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013c4:	f000 fa74 	bl	80018b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013c8:	f7ff ff7c 	bl	80012c4 <MX_GPIO_Init>
  MX_DMA_Init();
 80013cc:	f7ff ff50 	bl	8001270 <MX_DMA_Init>
  MX_TIM1_Init();
 80013d0:	f001 f8d4 	bl	800257c <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80013d4:	f001 fb68 	bl	8002aa8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80013d8:	f7ff fe46 	bl	8001068 <MX_ADC1_Init>
  MX_TIM2_Init();
 80013dc:	f001 f98c 	bl	80026f8 <MX_TIM2_Init>
  MX_TIM4_Init();
 80013e0:	f001 fa2e 	bl	8002840 <MX_TIM4_Init>
  MX_TIM3_Init();
 80013e4:	f001 f9d6 	bl	8002794 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 80013e8:	2201      	movs	r2, #1
 80013ea:	492f      	ldr	r1, [pc, #188]	; (80014a8 <main+0xf0>)
 80013ec:	482f      	ldr	r0, [pc, #188]	; (80014ac <main+0xf4>)
 80013ee:	f007 fa5b 	bl	80088a8 <HAL_UART_Receive_IT>
	HAL_Delay(1);
 80013f2:	2001      	movs	r0, #1
 80013f4:	f001 fc64 	bl	8002cc0 <HAL_Delay>
	shellInit();
 80013f8:	f000 fc04 	bl	8001c04 <shellInit>
	htim3.Instance->CNT=32767;
 80013fc:	4b2c      	ldr	r3, [pc, #176]	; (80014b0 <main+0xf8>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001404:	625a      	str	r2, [r3, #36]	; 0x24

	//On effectue une calibration
	if (HAL_OK!= HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED))
 8001406:	217f      	movs	r1, #127	; 0x7f
 8001408:	482a      	ldr	r0, [pc, #168]	; (80014b4 <main+0xfc>)
 800140a:	f003 f9e1 	bl	80047d0 <HAL_ADCEx_Calibration_Start>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <main+0x60>
		Error_Handler();
 8001414:	f000 fae2 	bl	80019dc <Error_Handler>

	//On start le timer qui débute les convertions par interruption
	if (HAL_OK!=HAL_TIM_Base_Start(&htim2))
 8001418:	4827      	ldr	r0, [pc, #156]	; (80014b8 <main+0x100>)
 800141a:	f005 f9f9 	bl	8006810 <HAL_TIM_Base_Start>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <main+0x70>
		Error_Handler();
 8001424:	f000 fada 	bl	80019dc <Error_Handler>
	//on start le DMA
	if (HAL_OK!= HAL_ADC_Start_DMA(&hadc1,ADC_buffer,ADC_Buffer_size))
 8001428:	220a      	movs	r2, #10
 800142a:	4924      	ldr	r1, [pc, #144]	; (80014bc <main+0x104>)
 800142c:	4821      	ldr	r0, [pc, #132]	; (80014b4 <main+0xfc>)
 800142e:	f002 f895 	bl	800355c <HAL_ADC_Start_DMA>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <main+0x84>
		Error_Handler();
 8001438:	f000 fad0 	bl	80019dc <Error_Handler>
	//On start les timers 4
	if (HAL_OK!=HAL_TIM_Base_Start_IT(&htim4))
 800143c:	4820      	ldr	r0, [pc, #128]	; (80014c0 <main+0x108>)
 800143e:	f005 fa57 	bl	80068f0 <HAL_TIM_Base_Start_IT>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <main+0x94>
		Error_Handler();
 8001448:	f000 fac8 	bl	80019dc <Error_Handler>
	if (HAL_OK!=HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL))
 800144c:	213c      	movs	r1, #60	; 0x3c
 800144e:	4818      	ldr	r0, [pc, #96]	; (80014b0 <main+0xf8>)
 8001450:	f005 fd7c 	bl	8006f4c <HAL_TIM_Encoder_Start>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <main+0xa6>
			Error_Handler();
 800145a:	f000 fabf 	bl	80019dc <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		// SuperLoop inside the while(1), only flag changed from interrupt could launch functions
		if(uartRxReceived){
 800145e:	4b19      	ldr	r3, [pc, #100]	; (80014c4 <main+0x10c>)
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d00b      	beq.n	800147e <main+0xc6>
			if(shellGetChar()){
 8001466:	f000 fc05 	bl	8001c74 <shellGetChar>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d003      	beq.n	8001478 <main+0xc0>
				shellExec();
 8001470:	f000 fc74 	bl	8001d5c <shellExec>
				shellPrompt();
 8001474:	f000 fbde 	bl	8001c34 <shellPrompt>
			}
			uartRxReceived = 0;
 8001478:	4b12      	ldr	r3, [pc, #72]	; (80014c4 <main+0x10c>)
 800147a:	2200      	movs	r2, #0
 800147c:	701a      	strb	r2, [r3, #0]
		}
		if (Button_flag){
 800147e:	4b12      	ldr	r3, [pc, #72]	; (80014c8 <main+0x110>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d004      	beq.n	8001490 <main+0xd8>
			motorPowerOn();
 8001486:	f000 faaf 	bl	80019e8 <motorPowerOn>
			Button_flag=0;
 800148a:	4b0f      	ldr	r3, [pc, #60]	; (80014c8 <main+0x110>)
 800148c:	2200      	movs	r2, #0
 800148e:	701a      	strb	r2, [r3, #0]
		}

		if(ADC_flag==1){
 8001490:	4b0e      	ldr	r3, [pc, #56]	; (80014cc <main+0x114>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	2b01      	cmp	r3, #1
 8001496:	f040 80f9 	bne.w	800168c <main+0x2d4>
			//Verification tous les 1/(16kHz)

			//Additonner les 10 valeurs acquises dans raw_value
			raw_value=0;
 800149a:	4b0d      	ldr	r3, [pc, #52]	; (80014d0 <main+0x118>)
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
			for (int i=0;i<ADC_Buffer_size;i++){
 80014a0:	2300      	movs	r3, #0
 80014a2:	607b      	str	r3, [r7, #4]
 80014a4:	e023      	b.n	80014ee <main+0x136>
 80014a6:	bf00      	nop
 80014a8:	20000538 	.word	0x20000538
 80014ac:	20000580 	.word	0x20000580
 80014b0:	2000049c 	.word	0x2000049c
 80014b4:	20000228 	.word	0x20000228
 80014b8:	20000450 	.word	0x20000450
 80014bc:	200002f4 	.word	0x200002f4
 80014c0:	200004e8 	.word	0x200004e8
 80014c4:	20000534 	.word	0x20000534
 80014c8:	20000308 	.word	0x20000308
 80014cc:	20000309 	.word	0x20000309
 80014d0:	20000310 	.word	0x20000310
				raw_value+=ADC_buffer[i];
 80014d4:	4ac6      	ldr	r2, [pc, #792]	; (80017f0 <main+0x438>)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014dc:	461a      	mov	r2, r3
 80014de:	4bc5      	ldr	r3, [pc, #788]	; (80017f4 <main+0x43c>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4413      	add	r3, r2
 80014e4:	4ac3      	ldr	r2, [pc, #780]	; (80017f4 <main+0x43c>)
 80014e6:	6013      	str	r3, [r2, #0]
			for (int i=0;i<ADC_Buffer_size;i++){
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	3301      	adds	r3, #1
 80014ec:	607b      	str	r3, [r7, #4]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2b09      	cmp	r3, #9
 80014f2:	ddef      	ble.n	80014d4 <main+0x11c>
			}


			current_value=((raw_value/ADC_Buffer_size)*3.3/4095.0-2.5)*12.0;	//convertion en la valeur moyenne de courant réel
 80014f4:	4bbf      	ldr	r3, [pc, #764]	; (80017f4 <main+0x43c>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4abf      	ldr	r2, [pc, #764]	; (80017f8 <main+0x440>)
 80014fa:	fb82 1203 	smull	r1, r2, r2, r3
 80014fe:	1092      	asrs	r2, r2, #2
 8001500:	17db      	asrs	r3, r3, #31
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff f845 	bl	8000594 <__aeabi_i2d>
 800150a:	a3b1      	add	r3, pc, #708	; (adr r3, 80017d0 <main+0x418>)
 800150c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001510:	f7ff f8aa 	bl	8000668 <__aeabi_dmul>
 8001514:	4602      	mov	r2, r0
 8001516:	460b      	mov	r3, r1
 8001518:	4610      	mov	r0, r2
 800151a:	4619      	mov	r1, r3
 800151c:	a3ae      	add	r3, pc, #696	; (adr r3, 80017d8 <main+0x420>)
 800151e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001522:	f7ff f9cb 	bl	80008bc <__aeabi_ddiv>
 8001526:	4602      	mov	r2, r0
 8001528:	460b      	mov	r3, r1
 800152a:	4610      	mov	r0, r2
 800152c:	4619      	mov	r1, r3
 800152e:	f04f 0200 	mov.w	r2, #0
 8001532:	4bb2      	ldr	r3, [pc, #712]	; (80017fc <main+0x444>)
 8001534:	f7fe fee0 	bl	80002f8 <__aeabi_dsub>
 8001538:	4602      	mov	r2, r0
 800153a:	460b      	mov	r3, r1
 800153c:	4610      	mov	r0, r2
 800153e:	4619      	mov	r1, r3
 8001540:	f04f 0200 	mov.w	r2, #0
 8001544:	4bae      	ldr	r3, [pc, #696]	; (8001800 <main+0x448>)
 8001546:	f7ff f88f 	bl	8000668 <__aeabi_dmul>
 800154a:	4602      	mov	r2, r0
 800154c:	460b      	mov	r3, r1
 800154e:	4610      	mov	r0, r2
 8001550:	4619      	mov	r1, r3
 8001552:	f7ff fb81 	bl	8000c58 <__aeabi_d2f>
 8001556:	4603      	mov	r3, r0
 8001558:	4aaa      	ldr	r2, [pc, #680]	; (8001804 <main+0x44c>)
 800155a:	6013      	str	r3, [r2, #0]
			**/

			//---------------------ASSERVISSEMENT EN COURANT---------------------------------

			//condition d'entré pour la boucle de courrant (asservissement à 16kHz)
			if (CL_flag){
 800155c:	4baa      	ldr	r3, [pc, #680]	; (8001808 <main+0x450>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	f000 8090 	beq.w	8001686 <main+0x2ce>
			epsilon=Ireq-current_value;										//calcul de l'erreur
 8001566:	4ba9      	ldr	r3, [pc, #676]	; (800180c <main+0x454>)
 8001568:	ed93 7a00 	vldr	s14, [r3]
 800156c:	4ba5      	ldr	r3, [pc, #660]	; (8001804 <main+0x44c>)
 800156e:	edd3 7a00 	vldr	s15, [r3]
 8001572:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001576:	4ba6      	ldr	r3, [pc, #664]	; (8001810 <main+0x458>)
 8001578:	edc3 7a00 	vstr	s15, [r3]

			CL_buffer[1]=epsilon;											//écriture de la nouvelle valeur d'erreur
 800157c:	4ba4      	ldr	r3, [pc, #656]	; (8001810 <main+0x458>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4aa4      	ldr	r2, [pc, #656]	; (8001814 <main+0x45c>)
 8001582:	6053      	str	r3, [r2, #4]

			alpha1=(uint16_t) (Kp*epsilon);									//erreur corrigée du proportionnel
 8001584:	4ba4      	ldr	r3, [pc, #656]	; (8001818 <main+0x460>)
 8001586:	ed93 7a00 	vldr	s14, [r3]
 800158a:	4ba1      	ldr	r3, [pc, #644]	; (8001810 <main+0x458>)
 800158c:	edd3 7a00 	vldr	s15, [r3]
 8001590:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001594:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001598:	ee17 3a90 	vmov	r3, s15
 800159c:	b29a      	uxth	r2, r3
 800159e:	4b9f      	ldr	r3, [pc, #636]	; (800181c <main+0x464>)
 80015a0:	801a      	strh	r2, [r3, #0]
			alpha2=CL_buffer[2]+(Ki*Te/2.0)*(CL_buffer[1]+CL_buffer[0]);	//erreur corrigée de l'intégral
 80015a2:	4b9c      	ldr	r3, [pc, #624]	; (8001814 <main+0x45c>)
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff f806 	bl	80005b8 <__aeabi_f2d>
 80015ac:	4604      	mov	r4, r0
 80015ae:	460d      	mov	r5, r1
 80015b0:	4b9b      	ldr	r3, [pc, #620]	; (8001820 <main+0x468>)
 80015b2:	ed93 7a00 	vldr	s14, [r3]
 80015b6:	4b9b      	ldr	r3, [pc, #620]	; (8001824 <main+0x46c>)
 80015b8:	edd3 7a00 	vldr	s15, [r3]
 80015bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015c0:	ee17 0a90 	vmov	r0, s15
 80015c4:	f7fe fff8 	bl	80005b8 <__aeabi_f2d>
 80015c8:	f04f 0200 	mov.w	r2, #0
 80015cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015d0:	f7ff f974 	bl	80008bc <__aeabi_ddiv>
 80015d4:	4602      	mov	r2, r0
 80015d6:	460b      	mov	r3, r1
 80015d8:	4690      	mov	r8, r2
 80015da:	4699      	mov	r9, r3
 80015dc:	4b8d      	ldr	r3, [pc, #564]	; (8001814 <main+0x45c>)
 80015de:	ed93 7a01 	vldr	s14, [r3, #4]
 80015e2:	4b8c      	ldr	r3, [pc, #560]	; (8001814 <main+0x45c>)
 80015e4:	edd3 7a00 	vldr	s15, [r3]
 80015e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015ec:	ee17 0a90 	vmov	r0, s15
 80015f0:	f7fe ffe2 	bl	80005b8 <__aeabi_f2d>
 80015f4:	4602      	mov	r2, r0
 80015f6:	460b      	mov	r3, r1
 80015f8:	4640      	mov	r0, r8
 80015fa:	4649      	mov	r1, r9
 80015fc:	f7ff f834 	bl	8000668 <__aeabi_dmul>
 8001600:	4602      	mov	r2, r0
 8001602:	460b      	mov	r3, r1
 8001604:	4620      	mov	r0, r4
 8001606:	4629      	mov	r1, r5
 8001608:	f7fe fe78 	bl	80002fc <__adddf3>
 800160c:	4602      	mov	r2, r0
 800160e:	460b      	mov	r3, r1
 8001610:	4610      	mov	r0, r2
 8001612:	4619      	mov	r1, r3
 8001614:	f7ff fb20 	bl	8000c58 <__aeabi_d2f>
 8001618:	4603      	mov	r3, r0
 800161a:	4a83      	ldr	r2, [pc, #524]	; (8001828 <main+0x470>)
 800161c:	6013      	str	r3, [r2, #0]
			alpha2=verif_alpha_float(alpha2);								//Antiwindup du correcteur PI de courant
 800161e:	4b82      	ldr	r3, [pc, #520]	; (8001828 <main+0x470>)
 8001620:	edd3 7a00 	vldr	s15, [r3]
 8001624:	eeb0 0a67 	vmov.f32	s0, s15
 8001628:	f000 fa8c 	bl	8001b44 <verif_alpha_float>
 800162c:	eef0 7a40 	vmov.f32	s15, s0
 8001630:	4b7d      	ldr	r3, [pc, #500]	; (8001828 <main+0x470>)
 8001632:	edc3 7a00 	vstr	s15, [r3]
			alpha3=alpha2+alpha1;											//Erreur corrigée final
 8001636:	4b79      	ldr	r3, [pc, #484]	; (800181c <main+0x464>)
 8001638:	881b      	ldrh	r3, [r3, #0]
 800163a:	ee07 3a90 	vmov	s15, r3
 800163e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001642:	4b79      	ldr	r3, [pc, #484]	; (8001828 <main+0x470>)
 8001644:	edd3 7a00 	vldr	s15, [r3]
 8001648:	ee77 7a27 	vadd.f32	s15, s14, s15
 800164c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001650:	ee17 3a90 	vmov	r3, s15
 8001654:	b29a      	uxth	r2, r3
 8001656:	4b75      	ldr	r3, [pc, #468]	; (800182c <main+0x474>)
 8001658:	801a      	strh	r2, [r3, #0]
			alpha3=verif_alpha(alpha3);										//Saturation de l'erreur
 800165a:	4b74      	ldr	r3, [pc, #464]	; (800182c <main+0x474>)
 800165c:	881b      	ldrh	r3, [r3, #0]
 800165e:	4618      	mov	r0, r3
 8001660:	f000 fa5a 	bl	8001b18 <verif_alpha>
 8001664:	4603      	mov	r3, r0
 8001666:	461a      	mov	r2, r3
 8001668:	4b70      	ldr	r3, [pc, #448]	; (800182c <main+0x474>)
 800166a:	801a      	strh	r2, [r3, #0]

			CL_buffer[0]=CL_buffer[1]; 										//epsilon[n-1]=epsilon[n]
 800166c:	4b69      	ldr	r3, [pc, #420]	; (8001814 <main+0x45c>)
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	4a68      	ldr	r2, [pc, #416]	; (8001814 <main+0x45c>)
 8001672:	6013      	str	r3, [r2, #0]
			CL_buffer[2]=alpha2; 											//alpha2[n-1]=alpha2
 8001674:	4b6c      	ldr	r3, [pc, #432]	; (8001828 <main+0x470>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a66      	ldr	r2, [pc, #408]	; (8001814 <main+0x45c>)
 800167a:	6093      	str	r3, [r2, #8]
			motorSetAlpha(alpha3);											//nouvelle consigne de rapport cyclique
 800167c:	4b6b      	ldr	r3, [pc, #428]	; (800182c <main+0x474>)
 800167e:	881b      	ldrh	r3, [r3, #0]
 8001680:	4618      	mov	r0, r3
 8001682:	f000 fa1b 	bl	8001abc <motorSetAlpha>
			}

			ADC_flag=0;														//réinitialisation du flag
 8001686:	4b6a      	ldr	r3, [pc, #424]	; (8001830 <main+0x478>)
 8001688:	2200      	movs	r2, #0
 800168a:	701a      	strb	r2, [r3, #0]
			}

		if (TIMER_4_flag){
 800168c:	4b69      	ldr	r3, [pc, #420]	; (8001834 <main+0x47c>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	2b00      	cmp	r3, #0
 8001692:	f43f aee4 	beq.w	800145e <main+0xa6>

			omega=(cnt_tim_3_value-32767.0)/(0.1*4096.0)*60;	//valeur de vitesse en tour/min
 8001696:	4b68      	ldr	r3, [pc, #416]	; (8001838 <main+0x480>)
 8001698:	881b      	ldrh	r3, [r3, #0]
 800169a:	4618      	mov	r0, r3
 800169c:	f7fe ff7a 	bl	8000594 <__aeabi_i2d>
 80016a0:	a34f      	add	r3, pc, #316	; (adr r3, 80017e0 <main+0x428>)
 80016a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a6:	f7fe fe27 	bl	80002f8 <__aeabi_dsub>
 80016aa:	4602      	mov	r2, r0
 80016ac:	460b      	mov	r3, r1
 80016ae:	4610      	mov	r0, r2
 80016b0:	4619      	mov	r1, r3
 80016b2:	a34d      	add	r3, pc, #308	; (adr r3, 80017e8 <main+0x430>)
 80016b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b8:	f7ff f900 	bl	80008bc <__aeabi_ddiv>
 80016bc:	4602      	mov	r2, r0
 80016be:	460b      	mov	r3, r1
 80016c0:	4610      	mov	r0, r2
 80016c2:	4619      	mov	r1, r3
 80016c4:	f04f 0200 	mov.w	r2, #0
 80016c8:	4b5c      	ldr	r3, [pc, #368]	; (800183c <main+0x484>)
 80016ca:	f7fe ffcd 	bl	8000668 <__aeabi_dmul>
 80016ce:	4602      	mov	r2, r0
 80016d0:	460b      	mov	r3, r1
 80016d2:	4610      	mov	r0, r2
 80016d4:	4619      	mov	r1, r3
 80016d6:	f7ff fabf 	bl	8000c58 <__aeabi_d2f>
 80016da:	4603      	mov	r3, r0
 80016dc:	4a58      	ldr	r2, [pc, #352]	; (8001840 <main+0x488>)
 80016de:	6013      	str	r3, [r2, #0]


			//________________________ASSERVISSEMENT EN VITESSE___________________________

			//condition d'entré pour la boucle de vitesse (asservissement à 10Hz)
			if (SL_flag){
 80016e0:	4b58      	ldr	r3, [pc, #352]	; (8001844 <main+0x48c>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	f000 80d7 	beq.w	8001898 <main+0x4e0>
				epsilon_s=omreq-omega;												//calcul de l'erreur
 80016ea:	4b57      	ldr	r3, [pc, #348]	; (8001848 <main+0x490>)
 80016ec:	ed93 7a00 	vldr	s14, [r3]
 80016f0:	4b53      	ldr	r3, [pc, #332]	; (8001840 <main+0x488>)
 80016f2:	edd3 7a00 	vldr	s15, [r3]
 80016f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016fa:	4b54      	ldr	r3, [pc, #336]	; (800184c <main+0x494>)
 80016fc:	edc3 7a00 	vstr	s15, [r3]

				SL_buffer[1]=epsilon_s;												//écriture de la nouvelle valeur d'erreur
 8001700:	4b52      	ldr	r3, [pc, #328]	; (800184c <main+0x494>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a52      	ldr	r2, [pc, #328]	; (8001850 <main+0x498>)
 8001706:	6053      	str	r3, [r2, #4]

				current1=(Kps*epsilon_s);
 8001708:	4b52      	ldr	r3, [pc, #328]	; (8001854 <main+0x49c>)
 800170a:	ed93 7a00 	vldr	s14, [r3]
 800170e:	4b4f      	ldr	r3, [pc, #316]	; (800184c <main+0x494>)
 8001710:	edd3 7a00 	vldr	s15, [r3]
 8001714:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001718:	4b4f      	ldr	r3, [pc, #316]	; (8001858 <main+0x4a0>)
 800171a:	edc3 7a00 	vstr	s15, [r3]
				current2=SL_buffer[2]+(Kis*Tes/2.0)*(SL_buffer[1]+SL_buffer[0]);
 800171e:	4b4c      	ldr	r3, [pc, #304]	; (8001850 <main+0x498>)
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	4618      	mov	r0, r3
 8001724:	f7fe ff48 	bl	80005b8 <__aeabi_f2d>
 8001728:	4604      	mov	r4, r0
 800172a:	460d      	mov	r5, r1
 800172c:	4b4b      	ldr	r3, [pc, #300]	; (800185c <main+0x4a4>)
 800172e:	ed93 7a00 	vldr	s14, [r3]
 8001732:	4b4b      	ldr	r3, [pc, #300]	; (8001860 <main+0x4a8>)
 8001734:	edd3 7a00 	vldr	s15, [r3]
 8001738:	ee67 7a27 	vmul.f32	s15, s14, s15
 800173c:	ee17 0a90 	vmov	r0, s15
 8001740:	f7fe ff3a 	bl	80005b8 <__aeabi_f2d>
 8001744:	f04f 0200 	mov.w	r2, #0
 8001748:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800174c:	f7ff f8b6 	bl	80008bc <__aeabi_ddiv>
 8001750:	4602      	mov	r2, r0
 8001752:	460b      	mov	r3, r1
 8001754:	4690      	mov	r8, r2
 8001756:	4699      	mov	r9, r3
 8001758:	4b3d      	ldr	r3, [pc, #244]	; (8001850 <main+0x498>)
 800175a:	ed93 7a01 	vldr	s14, [r3, #4]
 800175e:	4b3c      	ldr	r3, [pc, #240]	; (8001850 <main+0x498>)
 8001760:	edd3 7a00 	vldr	s15, [r3]
 8001764:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001768:	ee17 0a90 	vmov	r0, s15
 800176c:	f7fe ff24 	bl	80005b8 <__aeabi_f2d>
 8001770:	4602      	mov	r2, r0
 8001772:	460b      	mov	r3, r1
 8001774:	4640      	mov	r0, r8
 8001776:	4649      	mov	r1, r9
 8001778:	f7fe ff76 	bl	8000668 <__aeabi_dmul>
 800177c:	4602      	mov	r2, r0
 800177e:	460b      	mov	r3, r1
 8001780:	4620      	mov	r0, r4
 8001782:	4629      	mov	r1, r5
 8001784:	f7fe fdba 	bl	80002fc <__adddf3>
 8001788:	4602      	mov	r2, r0
 800178a:	460b      	mov	r3, r1
 800178c:	4610      	mov	r0, r2
 800178e:	4619      	mov	r1, r3
 8001790:	f7ff fa62 	bl	8000c58 <__aeabi_d2f>
 8001794:	4603      	mov	r3, r0
 8001796:	4a33      	ldr	r2, [pc, #204]	; (8001864 <main+0x4ac>)
 8001798:	6013      	str	r3, [r2, #0]
				current2=verif_current_float(current2);								//antiwindup du correcteur PI de vitesse
 800179a:	4b32      	ldr	r3, [pc, #200]	; (8001864 <main+0x4ac>)
 800179c:	edd3 7a00 	vldr	s15, [r3]
 80017a0:	eeb0 0a67 	vmov.f32	s0, s15
 80017a4:	f000 fa07 	bl	8001bb6 <verif_current_float>
 80017a8:	eef0 7a40 	vmov.f32	s15, s0
 80017ac:	4b2d      	ldr	r3, [pc, #180]	; (8001864 <main+0x4ac>)
 80017ae:	edc3 7a00 	vstr	s15, [r3]
				Ireq=current1+current2;												//consigne de courrant pour la boucle de courant
 80017b2:	4b29      	ldr	r3, [pc, #164]	; (8001858 <main+0x4a0>)
 80017b4:	ed93 7a00 	vldr	s14, [r3]
 80017b8:	4b2a      	ldr	r3, [pc, #168]	; (8001864 <main+0x4ac>)
 80017ba:	edd3 7a00 	vldr	s15, [r3]
 80017be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017c2:	4b12      	ldr	r3, [pc, #72]	; (800180c <main+0x454>)
 80017c4:	edc3 7a00 	vstr	s15, [r3]
				Ireq=verif_current(Ireq);											//Saturation:vérifi que la valeur de courant soit compris enre -8A et 8A
 80017c8:	4b10      	ldr	r3, [pc, #64]	; (800180c <main+0x454>)
 80017ca:	edd3 7a00 	vldr	s15, [r3]
 80017ce:	e04b      	b.n	8001868 <main+0x4b0>
 80017d0:	66666666 	.word	0x66666666
 80017d4:	400a6666 	.word	0x400a6666
 80017d8:	00000000 	.word	0x00000000
 80017dc:	40affe00 	.word	0x40affe00
 80017e0:	00000000 	.word	0x00000000
 80017e4:	40dfffc0 	.word	0x40dfffc0
 80017e8:	9999999a 	.word	0x9999999a
 80017ec:	40799999 	.word	0x40799999
 80017f0:	200002f4 	.word	0x200002f4
 80017f4:	20000310 	.word	0x20000310
 80017f8:	66666667 	.word	0x66666667
 80017fc:	40040000 	.word	0x40040000
 8001800:	40280000 	.word	0x40280000
 8001804:	20000314 	.word	0x20000314
 8001808:	20000344 	.word	0x20000344
 800180c:	20000338 	.word	0x20000338
 8001810:	2000033c 	.word	0x2000033c
 8001814:	20000020 	.word	0x20000020
 8001818:	20000010 	.word	0x20000010
 800181c:	20000340 	.word	0x20000340
 8001820:	20000014 	.word	0x20000014
 8001824:	20000018 	.word	0x20000018
 8001828:	2000001c 	.word	0x2000001c
 800182c:	20000342 	.word	0x20000342
 8001830:	20000309 	.word	0x20000309
 8001834:	2000030a 	.word	0x2000030a
 8001838:	20000000 	.word	0x20000000
 800183c:	404e0000 	.word	0x404e0000
 8001840:	2000030c 	.word	0x2000030c
 8001844:	20000334 	.word	0x20000334
 8001848:	20000318 	.word	0x20000318
 800184c:	2000031c 	.word	0x2000031c
 8001850:	20000328 	.word	0x20000328
 8001854:	20000004 	.word	0x20000004
 8001858:	20000320 	.word	0x20000320
 800185c:	20000008 	.word	0x20000008
 8001860:	2000000c 	.word	0x2000000c
 8001864:	20000324 	.word	0x20000324
 8001868:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800186c:	ee17 3a90 	vmov	r3, s15
 8001870:	b29b      	uxth	r3, r3
 8001872:	4618      	mov	r0, r3
 8001874:	f000 f98e 	bl	8001b94 <verif_current>
 8001878:	4603      	mov	r3, r0
 800187a:	ee07 3a90 	vmov	s15, r3
 800187e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001882:	4b07      	ldr	r3, [pc, #28]	; (80018a0 <main+0x4e8>)
 8001884:	edc3 7a00 	vstr	s15, [r3]

				SL_buffer[0]=SL_buffer[1]; 											//epsilon_s[n-1]=epsilon_s[n]
 8001888:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <main+0x4ec>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	4a05      	ldr	r2, [pc, #20]	; (80018a4 <main+0x4ec>)
 800188e:	6013      	str	r3, [r2, #0]
				SL_buffer[2]=current2; 												//current2[n-1]=current2[n]
 8001890:	4b05      	ldr	r3, [pc, #20]	; (80018a8 <main+0x4f0>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a03      	ldr	r2, [pc, #12]	; (80018a4 <main+0x4ec>)
 8001896:	6093      	str	r3, [r2, #8]
			}

			TIMER_4_flag=0;
 8001898:	4b04      	ldr	r3, [pc, #16]	; (80018ac <main+0x4f4>)
 800189a:	2200      	movs	r2, #0
 800189c:	701a      	strb	r2, [r3, #0]
		if(uartRxReceived){
 800189e:	e5de      	b.n	800145e <main+0xa6>
 80018a0:	20000338 	.word	0x20000338
 80018a4:	20000328 	.word	0x20000328
 80018a8:	20000324 	.word	0x20000324
 80018ac:	2000030a 	.word	0x2000030a

080018b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b094      	sub	sp, #80	; 0x50
 80018b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018b6:	f107 0318 	add.w	r3, r7, #24
 80018ba:	2238      	movs	r2, #56	; 0x38
 80018bc:	2100      	movs	r1, #0
 80018be:	4618      	mov	r0, r3
 80018c0:	f008 ffb4 	bl	800a82c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018c4:	1d3b      	adds	r3, r7, #4
 80018c6:	2200      	movs	r2, #0
 80018c8:	601a      	str	r2, [r3, #0]
 80018ca:	605a      	str	r2, [r3, #4]
 80018cc:	609a      	str	r2, [r3, #8]
 80018ce:	60da      	str	r2, [r3, #12]
 80018d0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80018d2:	2000      	movs	r0, #0
 80018d4:	f003 fedc 	bl	8005690 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018d8:	2301      	movs	r3, #1
 80018da:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018e0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018e2:	2302      	movs	r3, #2
 80018e4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018e6:	2303      	movs	r3, #3
 80018e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 80018ea:	2306      	movs	r3, #6
 80018ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80018ee:	2355      	movs	r3, #85	; 0x55
 80018f0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018f2:	2302      	movs	r3, #2
 80018f4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80018f6:	2302      	movs	r3, #2
 80018f8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80018fa:	2302      	movs	r3, #2
 80018fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018fe:	f107 0318 	add.w	r3, r7, #24
 8001902:	4618      	mov	r0, r3
 8001904:	f003 ff78 	bl	80057f8 <HAL_RCC_OscConfig>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800190e:	f000 f865 	bl	80019dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001912:	230f      	movs	r3, #15
 8001914:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001916:	2303      	movs	r3, #3
 8001918:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800191a:	2300      	movs	r3, #0
 800191c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800191e:	2300      	movs	r3, #0
 8001920:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001922:	2300      	movs	r3, #0
 8001924:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001926:	1d3b      	adds	r3, r7, #4
 8001928:	2104      	movs	r1, #4
 800192a:	4618      	mov	r0, r3
 800192c:	f004 fa7c 	bl	8005e28 <HAL_RCC_ClockConfig>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001936:	f000 f851 	bl	80019dc <Error_Handler>
  }
}
 800193a:	bf00      	nop
 800193c:	3750      	adds	r7, #80	; 0x50
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
	...

08001944 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
//la fonction de callback qui met un flag a 1 pour dire qu'il y a eu un appuie sur le Blue Button
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	4603      	mov	r3, r0
 800194c:	80fb      	strh	r3, [r7, #6]
	Button_flag=1;
 800194e:	4b04      	ldr	r3, [pc, #16]	; (8001960 <HAL_GPIO_EXTI_Callback+0x1c>)
 8001950:	2201      	movs	r2, #1
 8001952:	701a      	strb	r2, [r3, #0]
}
 8001954:	bf00      	nop
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr
 8001960:	20000308 	.word	0x20000308

08001964 <HAL_ADC_ConvCpltCallback>:

//une fois que mon buffer est plein, on appel cette fonction qui set le ADC_flag a 1
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
	ADC_flag=1;
 800196c:	4b04      	ldr	r3, [pc, #16]	; (8001980 <HAL_ADC_ConvCpltCallback+0x1c>)
 800196e:	2201      	movs	r2, #1
 8001970:	701a      	strb	r2, [r3, #0]
}
 8001972:	bf00      	nop
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	20000309 	.word	0x20000309

08001984 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a0d      	ldr	r2, [pc, #52]	; (80019c8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d101      	bne.n	800199a <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8001996:	f001 f975 	bl	8002c84 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	//____________CALLBACK du TIMER 4_______________
	//Le timer4 cadencé a 10Hz pour la vitesse
	if (htim->Instance == TIM4) {					//fin de comptage pour le TIM4
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a0b      	ldr	r2, [pc, #44]	; (80019cc <HAL_TIM_PeriodElapsedCallback+0x48>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d10d      	bne.n	80019c0 <HAL_TIM_PeriodElapsedCallback+0x3c>
		cnt_tim_3_value=htim3.Instance->CNT;		//sauvegarde de la valeur du compteur du TIM3
 80019a4:	4b0a      	ldr	r3, [pc, #40]	; (80019d0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019aa:	b29a      	uxth	r2, r3
 80019ac:	4b09      	ldr	r3, [pc, #36]	; (80019d4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80019ae:	801a      	strh	r2, [r3, #0]
		htim3.Instance->CNT=32767;					//ré initialisation de la valeur du compteur à 32767
 80019b0:	4b07      	ldr	r3, [pc, #28]	; (80019d0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80019b8:	625a      	str	r2, [r3, #36]	; 0x24
		TIMER_4_flag=1;								//flag permetant les calcul de convertion de la vitesse et boucle de vitesse
 80019ba:	4b07      	ldr	r3, [pc, #28]	; (80019d8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80019bc:	2201      	movs	r2, #1
 80019be:	701a      	strb	r2, [r3, #0]
	}

	/* USER CODE END Callback 1 */
}
 80019c0:	bf00      	nop
 80019c2:	3708      	adds	r7, #8
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	40001000 	.word	0x40001000
 80019cc:	40000800 	.word	0x40000800
 80019d0:	2000049c 	.word	0x2000049c
 80019d4:	20000000 	.word	0x20000000
 80019d8:	2000030a 	.word	0x2000030a

080019dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019e0:	b672      	cpsid	i
}
 80019e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80019e4:	e7fe      	b.n	80019e4 <Error_Handler+0x8>
	...

080019e8 <motorPowerOn>:

/**
 * @brief  Switch on the motor driver
 * @retval None
 */
void motorPowerOn(void){
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
	motorSetAlpha(50);
 80019ee:	2032      	movs	r0, #50	; 0x32
 80019f0:	f000 f864 	bl	8001abc <motorSetAlpha>

	HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin,GPIO_PIN_SET); // just for test, you can delete it
 80019f4:	2201      	movs	r2, #1
 80019f6:	2108      	movs	r1, #8
 80019f8:	4812      	ldr	r0, [pc, #72]	; (8001a44 <motorPowerOn+0x5c>)
 80019fa:	f003 fe19 	bl	8005630 <HAL_GPIO_WritePin>
	for(int i=0;i<30;i++){}
 80019fe:	2300      	movs	r3, #0
 8001a00:	607b      	str	r3, [r7, #4]
 8001a02:	e002      	b.n	8001a0a <motorPowerOn+0x22>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	3301      	adds	r3, #1
 8001a08:	607b      	str	r3, [r7, #4]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2b1d      	cmp	r3, #29
 8001a0e:	ddf9      	ble.n	8001a04 <motorPowerOn+0x1c>
	HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin,GPIO_PIN_RESET);
 8001a10:	2200      	movs	r2, #0
 8001a12:	2108      	movs	r1, #8
 8001a14:	480b      	ldr	r0, [pc, #44]	; (8001a44 <motorPowerOn+0x5c>)
 8001a16:	f003 fe0b 	bl	8005630 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	480a      	ldr	r0, [pc, #40]	; (8001a48 <motorPowerOn+0x60>)
 8001a1e:	f005 f841 	bl	8006aa4 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_1);
 8001a22:	2100      	movs	r1, #0
 8001a24:	4808      	ldr	r0, [pc, #32]	; (8001a48 <motorPowerOn+0x60>)
 8001a26:	f006 fb85 	bl	8008134 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 8001a2a:	2104      	movs	r1, #4
 8001a2c:	4806      	ldr	r0, [pc, #24]	; (8001a48 <motorPowerOn+0x60>)
 8001a2e:	f005 f839 	bl	8006aa4 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_2);
 8001a32:	2104      	movs	r1, #4
 8001a34:	4804      	ldr	r0, [pc, #16]	; (8001a48 <motorPowerOn+0x60>)
 8001a36:	f006 fb7d 	bl	8008134 <HAL_TIMEx_PWMN_Start>
}
 8001a3a:	bf00      	nop
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	48000800 	.word	0x48000800
 8001a48:	20000404 	.word	0x20000404

08001a4c <motorPowerOff>:

/**
 * @brief  Switch off the motor driver
 * @retval None
 */
void motorPowerOff(void){
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin,GPIO_PIN_SET); // just for test, you can delete it
 8001a52:	2201      	movs	r2, #1
 8001a54:	2108      	movs	r1, #8
 8001a56:	4812      	ldr	r0, [pc, #72]	; (8001aa0 <motorPowerOff+0x54>)
 8001a58:	f003 fdea 	bl	8005630 <HAL_GPIO_WritePin>
	for(int i=0;i<30;i++){}
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	607b      	str	r3, [r7, #4]
 8001a60:	e002      	b.n	8001a68 <motorPowerOff+0x1c>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	3301      	adds	r3, #1
 8001a66:	607b      	str	r3, [r7, #4]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2b1d      	cmp	r3, #29
 8001a6c:	ddf9      	ble.n	8001a62 <motorPowerOff+0x16>
	HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin,GPIO_PIN_RESET);
 8001a6e:	2200      	movs	r2, #0
 8001a70:	2108      	movs	r1, #8
 8001a72:	480b      	ldr	r0, [pc, #44]	; (8001aa0 <motorPowerOff+0x54>)
 8001a74:	f003 fddc 	bl	8005630 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_1);
 8001a78:	2100      	movs	r1, #0
 8001a7a:	480a      	ldr	r0, [pc, #40]	; (8001aa4 <motorPowerOff+0x58>)
 8001a7c:	f005 f924 	bl	8006cc8 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1,TIM_CHANNEL_1);
 8001a80:	2100      	movs	r1, #0
 8001a82:	4808      	ldr	r0, [pc, #32]	; (8001aa4 <motorPowerOff+0x58>)
 8001a84:	f006 fc18 	bl	80082b8 <HAL_TIMEx_PWMN_Stop>
	HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_2);
 8001a88:	2104      	movs	r1, #4
 8001a8a:	4806      	ldr	r0, [pc, #24]	; (8001aa4 <motorPowerOff+0x58>)
 8001a8c:	f005 f91c 	bl	8006cc8 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1,TIM_CHANNEL_2);
 8001a90:	2104      	movs	r1, #4
 8001a92:	4804      	ldr	r0, [pc, #16]	; (8001aa4 <motorPowerOff+0x58>)
 8001a94:	f006 fc10 	bl	80082b8 <HAL_TIMEx_PWMN_Stop>
}
 8001a98:	bf00      	nop
 8001a9a:	3708      	adds	r7, #8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	48000800 	.word	0x48000800
 8001aa4:	20000404 	.word	0x20000404

08001aa8 <motorSetSpeed>:
/**
 * @brief  Set the motor speed
 * @param  speed : target speed of the motor
 * @retval None
 */
void motorSetSpeed(int speed){
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]

}
 8001ab0:	bf00      	nop
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <motorSetAlpha>:
 * @brief  Set the cyclic ratio
 * @note   This function verify if the input is inside the cyclic ratio range and set the timer registers for PWM modification
 * @param  cyclic ratio : between 0 and 100
 * @retval None
 */
void motorSetAlpha(int alpha){
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
	int pulse_value=0;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	60fb      	str	r3, [r7, #12]
	if (alpha>100 || alpha<0) {
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2b64      	cmp	r3, #100	; 0x64
 8001acc:	dc02      	bgt.n	8001ad4 <motorSetAlpha+0x18>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	da02      	bge.n	8001ada <motorSetAlpha+0x1e>
		shellCmdNotFound();
 8001ad4:	f000 f8be 	bl	8001c54 <shellCmdNotFound>
 8001ad8:	e015      	b.n	8001b06 <motorSetAlpha+0x4a>
		}
		else {
			pulse_value=(int) 5311*alpha/100;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	f241 42bf 	movw	r2, #5311	; 0x14bf
 8001ae0:	fb02 f303 	mul.w	r3, r2, r3
 8001ae4:	4a0a      	ldr	r2, [pc, #40]	; (8001b10 <motorSetAlpha+0x54>)
 8001ae6:	fb82 1203 	smull	r1, r2, r2, r3
 8001aea:	1152      	asrs	r2, r2, #5
 8001aec:	17db      	asrs	r3, r3, #31
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	60fb      	str	r3, [r7, #12]
			TIM1->CCR1 =pulse_value;
 8001af2:	4a08      	ldr	r2, [pc, #32]	; (8001b14 <motorSetAlpha+0x58>)
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	6353      	str	r3, [r2, #52]	; 0x34
			TIM1->CCR2 =5311-pulse_value;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	f5c3 53a5 	rsb	r3, r3, #5280	; 0x14a0
 8001afe:	331f      	adds	r3, #31
 8001b00:	4a04      	ldr	r2, [pc, #16]	; (8001b14 <motorSetAlpha+0x58>)
 8001b02:	6393      	str	r3, [r2, #56]	; 0x38
		}
}
 8001b04:	bf00      	nop
 8001b06:	bf00      	nop
 8001b08:	3710      	adds	r7, #16
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	51eb851f 	.word	0x51eb851f
 8001b14:	40012c00 	.word	0x40012c00

08001b18 <verif_alpha>:
 * @brief  Allow the saturation of the input parameter
 * @note   This function verify if the cyclic ratio range is respected. Used for uint_16_t input
 * @param  alpha : cyclic ratio
 * @retval uint16_t alpha : into the range [0;100]
 */
uint16_t verif_alpha(uint16_t alpha){
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	4603      	mov	r3, r0
 8001b20:	80fb      	strh	r3, [r7, #6]
	if (alpha>=100)
 8001b22:	88fb      	ldrh	r3, [r7, #6]
 8001b24:	2b63      	cmp	r3, #99	; 0x63
 8001b26:	d901      	bls.n	8001b2c <verif_alpha+0x14>
		return 100;
 8001b28:	2364      	movs	r3, #100	; 0x64
 8001b2a:	e005      	b.n	8001b38 <verif_alpha+0x20>
	else if (alpha<=0)
 8001b2c:	88fb      	ldrh	r3, [r7, #6]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d101      	bne.n	8001b36 <verif_alpha+0x1e>
		return 0;
 8001b32:	2300      	movs	r3, #0
 8001b34:	e000      	b.n	8001b38 <verif_alpha+0x20>
	else
		return alpha;
 8001b36:	88fb      	ldrh	r3, [r7, #6]
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <verif_alpha_float>:
 * @brief  Allow the saturation of the input parameter
 * @note   This function verify if the cyclic ratio range is respected. Used for float input
 * @param  alpha : cyclic ratio
 * @retval float alpha : into the range [0;100]
 */
float verif_alpha_float(float alpha){
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	ed87 0a01 	vstr	s0, [r7, #4]
	if (alpha>=100)
 8001b4e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b52:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001b8c <verif_alpha_float+0x48>
 8001b56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b5e:	db01      	blt.n	8001b64 <verif_alpha_float+0x20>
		return 100;
 8001b60:	4b0b      	ldr	r3, [pc, #44]	; (8001b90 <verif_alpha_float+0x4c>)
 8001b62:	e00a      	b.n	8001b7a <verif_alpha_float+0x36>
	else if (alpha<=0)
 8001b64:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b68:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b70:	d802      	bhi.n	8001b78 <verif_alpha_float+0x34>
		return 0;
 8001b72:	f04f 0300 	mov.w	r3, #0
 8001b76:	e000      	b.n	8001b7a <verif_alpha_float+0x36>
	else
		return alpha;
 8001b78:	687b      	ldr	r3, [r7, #4]
}
 8001b7a:	ee07 3a90 	vmov	s15, r3
 8001b7e:	eeb0 0a67 	vmov.f32	s0, s15
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr
 8001b8c:	42c80000 	.word	0x42c80000
 8001b90:	42c80000 	.word	0x42c80000

08001b94 <verif_current>:
 * @brief  Allow the saturation of the input parameter
 * @note   This function verify if the required current is into the acceptable range.Used for uint_16_t input
 * @param  uint16_t current
 * @retval uint16_t current:  into the range [-8;8]
 */
uint16_t verif_current(uint16_t current){
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	80fb      	strh	r3, [r7, #6]
	if (current>=8)
 8001b9e:	88fb      	ldrh	r3, [r7, #6]
 8001ba0:	2b07      	cmp	r3, #7
 8001ba2:	d901      	bls.n	8001ba8 <verif_current+0x14>
		return 8;
 8001ba4:	2308      	movs	r3, #8
 8001ba6:	e000      	b.n	8001baa <verif_current+0x16>
	else if (current<=-8)
		return -8;
	else
		return current;
 8001ba8:	88fb      	ldrh	r3, [r7, #6]
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr

08001bb6 <verif_current_float>:
 * @brief  Allow the saturation of the input parameter
 * @note   This function verify if the cyclic ratio range is respected. Used for float input
 * @param  float current
 * @retval float current:  into the range [-8;8]
 */
float verif_current_float(float current){
 8001bb6:	b480      	push	{r7}
 8001bb8:	b083      	sub	sp, #12
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	ed87 0a01 	vstr	s0, [r7, #4]
	if (current>=8)
 8001bc0:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bc4:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8001bc8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bd0:	db02      	blt.n	8001bd8 <verif_current_float+0x22>
		return 8;
 8001bd2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8001bd6:	e00c      	b.n	8001bf2 <verif_current_float+0x3c>
	else if (current<=-8)
 8001bd8:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bdc:	eeba 7a00 	vmov.f32	s14, #160	; 0xc1000000 -8.0
 8001be0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001be8:	d802      	bhi.n	8001bf0 <verif_current_float+0x3a>
		return -8;
 8001bea:	f04f 4341 	mov.w	r3, #3238002688	; 0xc1000000
 8001bee:	e000      	b.n	8001bf2 <verif_current_float+0x3c>
	else
		return current;
 8001bf0:	687b      	ldr	r3, [r7, #4]
}
 8001bf2:	ee07 3a90 	vmov	s15, r3
 8001bf6:	eeb0 0a67 	vmov.f32	s0, s15
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <shellInit>:

/**
 * @brief  Send a stating message
 * @retval None
 */
void shellInit(void){
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, started, sizeof(started), HAL_MAX_DELAY);
 8001c08:	f04f 33ff 	mov.w	r3, #4294967295
 8001c0c:	226c      	movs	r2, #108	; 0x6c
 8001c0e:	4906      	ldr	r1, [pc, #24]	; (8001c28 <shellInit+0x24>)
 8001c10:	4806      	ldr	r0, [pc, #24]	; (8001c2c <shellInit+0x28>)
 8001c12:	f006 fdb2 	bl	800877a <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8001c16:	f04f 33ff 	mov.w	r3, #4294967295
 8001c1a:	221a      	movs	r2, #26
 8001c1c:	4904      	ldr	r1, [pc, #16]	; (8001c30 <shellInit+0x2c>)
 8001c1e:	4803      	ldr	r0, [pc, #12]	; (8001c2c <shellInit+0x28>)
 8001c20:	f006 fdab 	bl	800877a <HAL_UART_Transmit>
}
 8001c24:	bf00      	nop
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	0800f364 	.word	0x0800f364
 8001c2c:	20000580 	.word	0x20000580
 8001c30:	0800f348 	.word	0x0800f348

08001c34 <shellPrompt>:

/**
 * @brief  Send the prompt
 * @retval None
 */
void shellPrompt(void){
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8001c38:	f04f 33ff 	mov.w	r3, #4294967295
 8001c3c:	221a      	movs	r2, #26
 8001c3e:	4903      	ldr	r1, [pc, #12]	; (8001c4c <shellPrompt+0x18>)
 8001c40:	4803      	ldr	r0, [pc, #12]	; (8001c50 <shellPrompt+0x1c>)
 8001c42:	f006 fd9a 	bl	800877a <HAL_UART_Transmit>
}
 8001c46:	bf00      	nop
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	0800f348 	.word	0x0800f348
 8001c50:	20000580 	.word	0x20000580

08001c54 <shellCmdNotFound>:

/**
 * @brief  Send the default message if the command is not found
 * @retval None
 */
void shellCmdNotFound(void){
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8001c58:	f04f 33ff 	mov.w	r3, #4294967295
 8001c5c:	2214      	movs	r2, #20
 8001c5e:	4903      	ldr	r1, [pc, #12]	; (8001c6c <shellCmdNotFound+0x18>)
 8001c60:	4803      	ldr	r0, [pc, #12]	; (8001c70 <shellCmdNotFound+0x1c>)
 8001c62:	f006 fd8a 	bl	800877a <HAL_UART_Transmit>
}
 8001c66:	bf00      	nop
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	0800f644 	.word	0x0800f644
 8001c70:	20000580 	.word	0x20000580

08001c74 <shellGetChar>:

/**
 * @brief  Function called for saving the new character and call and setup argc and argv variable if ENTER is pressed
 * @retval 1 if a new command is available, 0 if not.
 */
uint8_t shellGetChar(void){
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
	uint8_t newCmdReady = 0;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	71fb      	strb	r3, [r7, #7]
	char* token;

	switch(uartRxBuffer[0]){
 8001c7e:	4b2f      	ldr	r3, [pc, #188]	; (8001d3c <shellGetChar+0xc8>)
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	2b08      	cmp	r3, #8
 8001c84:	d030      	beq.n	8001ce8 <shellGetChar+0x74>
 8001c86:	2b0d      	cmp	r3, #13
 8001c88:	d140      	bne.n	8001d0c <shellGetChar+0x98>
	// If Enter, update argc and argv
	case ASCII_CR:
		HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 8001c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c8e:	2203      	movs	r2, #3
 8001c90:	492b      	ldr	r1, [pc, #172]	; (8001d40 <shellGetChar+0xcc>)
 8001c92:	482c      	ldr	r0, [pc, #176]	; (8001d44 <shellGetChar+0xd0>)
 8001c94:	f006 fd71 	bl	800877a <HAL_UART_Transmit>
		cmdBuffer[idxCmd] = '\0';
 8001c98:	4b2b      	ldr	r3, [pc, #172]	; (8001d48 <shellGetChar+0xd4>)
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	4b2b      	ldr	r3, [pc, #172]	; (8001d4c <shellGetChar+0xd8>)
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	5499      	strb	r1, [r3, r2]
		argc = 0;
 8001ca4:	4b2a      	ldr	r3, [pc, #168]	; (8001d50 <shellGetChar+0xdc>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	701a      	strb	r2, [r3, #0]
		token = (char*)strtok(cmdBuffer, " ");
 8001caa:	492a      	ldr	r1, [pc, #168]	; (8001d54 <shellGetChar+0xe0>)
 8001cac:	4827      	ldr	r0, [pc, #156]	; (8001d4c <shellGetChar+0xd8>)
 8001cae:	f00a facf 	bl	800c250 <strtok>
 8001cb2:	6038      	str	r0, [r7, #0]
		while(token!=NULL){
 8001cb4:	e00f      	b.n	8001cd6 <shellGetChar+0x62>
			argv[argc++] = token;
 8001cb6:	4b26      	ldr	r3, [pc, #152]	; (8001d50 <shellGetChar+0xdc>)
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	1c5a      	adds	r2, r3, #1
 8001cbc:	b2d1      	uxtb	r1, r2
 8001cbe:	4a24      	ldr	r2, [pc, #144]	; (8001d50 <shellGetChar+0xdc>)
 8001cc0:	7011      	strb	r1, [r2, #0]
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	4a24      	ldr	r2, [pc, #144]	; (8001d58 <shellGetChar+0xe4>)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			token = (char*)strtok(NULL, " ");
 8001ccc:	4921      	ldr	r1, [pc, #132]	; (8001d54 <shellGetChar+0xe0>)
 8001cce:	2000      	movs	r0, #0
 8001cd0:	f00a fabe 	bl	800c250 <strtok>
 8001cd4:	6038      	str	r0, [r7, #0]
		while(token!=NULL){
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d1ec      	bne.n	8001cb6 <shellGetChar+0x42>
		}

		idxCmd = 0;
 8001cdc:	4b1a      	ldr	r3, [pc, #104]	; (8001d48 <shellGetChar+0xd4>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	701a      	strb	r2, [r3, #0]
		newCmdReady = 1;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	71fb      	strb	r3, [r7, #7]
		break;
 8001ce6:	e023      	b.n	8001d30 <shellGetChar+0xbc>
		// Delete last character if "return" is pressed
	case ASCII_BS:
		cmdBuffer[idxCmd--] = '\0';
 8001ce8:	4b17      	ldr	r3, [pc, #92]	; (8001d48 <shellGetChar+0xd4>)
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	1e5a      	subs	r2, r3, #1
 8001cee:	b2d1      	uxtb	r1, r2
 8001cf0:	4a15      	ldr	r2, [pc, #84]	; (8001d48 <shellGetChar+0xd4>)
 8001cf2:	7011      	strb	r1, [r2, #0]
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	4b15      	ldr	r3, [pc, #84]	; (8001d4c <shellGetChar+0xd8>)
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	5499      	strb	r1, [r3, r2]
		HAL_UART_Transmit(&huart2, uartRxBuffer, 1, HAL_MAX_DELAY);
 8001cfc:	f04f 33ff 	mov.w	r3, #4294967295
 8001d00:	2201      	movs	r2, #1
 8001d02:	490e      	ldr	r1, [pc, #56]	; (8001d3c <shellGetChar+0xc8>)
 8001d04:	480f      	ldr	r0, [pc, #60]	; (8001d44 <shellGetChar+0xd0>)
 8001d06:	f006 fd38 	bl	800877a <HAL_UART_Transmit>
		break;
 8001d0a:	e011      	b.n	8001d30 <shellGetChar+0xbc>
		// Default state : add new character to the command buffer
	default:
		cmdBuffer[idxCmd++] = uartRxBuffer[0];
 8001d0c:	4b0e      	ldr	r3, [pc, #56]	; (8001d48 <shellGetChar+0xd4>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	1c5a      	adds	r2, r3, #1
 8001d12:	b2d1      	uxtb	r1, r2
 8001d14:	4a0c      	ldr	r2, [pc, #48]	; (8001d48 <shellGetChar+0xd4>)
 8001d16:	7011      	strb	r1, [r2, #0]
 8001d18:	461a      	mov	r2, r3
 8001d1a:	4b08      	ldr	r3, [pc, #32]	; (8001d3c <shellGetChar+0xc8>)
 8001d1c:	7819      	ldrb	r1, [r3, #0]
 8001d1e:	4b0b      	ldr	r3, [pc, #44]	; (8001d4c <shellGetChar+0xd8>)
 8001d20:	5499      	strb	r1, [r3, r2]
		HAL_UART_Transmit(&huart2, uartRxBuffer, 1, HAL_MAX_DELAY);
 8001d22:	f04f 33ff 	mov.w	r3, #4294967295
 8001d26:	2201      	movs	r2, #1
 8001d28:	4904      	ldr	r1, [pc, #16]	; (8001d3c <shellGetChar+0xc8>)
 8001d2a:	4806      	ldr	r0, [pc, #24]	; (8001d44 <shellGetChar+0xd0>)
 8001d2c:	f006 fd25 	bl	800877a <HAL_UART_Transmit>
	}

	return newCmdReady;
 8001d30:	79fb      	ldrb	r3, [r7, #7]
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	20000538 	.word	0x20000538
 8001d40:	0800f3d0 	.word	0x0800f3d0
 8001d44:	20000580 	.word	0x20000580
 8001d48:	20000388 	.word	0x20000388
 8001d4c:	20000348 	.word	0x20000348
 8001d50:	200003b0 	.word	0x200003b0
 8001d54:	0800f288 	.word	0x0800f288
 8001d58:	2000038c 	.word	0x2000038c

08001d5c <shellExec>:

/**
 * @brief  Call function depends of the value of argc and argv
 * @retval None
 */
void shellExec(void){
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af02      	add	r7, sp, #8
	if(strcmp(argv[0],"set")==0){
 8001d62:	4ba5      	ldr	r3, [pc, #660]	; (8001ff8 <shellExec+0x29c>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	49a5      	ldr	r1, [pc, #660]	; (8001ffc <shellExec+0x2a0>)
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7fe fa59 	bl	8000220 <strcmp>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d16f      	bne.n	8001e54 <shellExec+0xf8>
		if(strcmp(argv[1],"PA5")==0 && ((strcmp(argv[2],"0")==0)||(strcmp(argv[2],"1")==0)) ){
 8001d74:	4ba0      	ldr	r3, [pc, #640]	; (8001ff8 <shellExec+0x29c>)
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	49a1      	ldr	r1, [pc, #644]	; (8002000 <shellExec+0x2a4>)
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7fe fa50 	bl	8000220 <strcmp>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d137      	bne.n	8001df6 <shellExec+0x9a>
 8001d86:	4b9c      	ldr	r3, [pc, #624]	; (8001ff8 <shellExec+0x29c>)
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	499e      	ldr	r1, [pc, #632]	; (8002004 <shellExec+0x2a8>)
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7fe fa47 	bl	8000220 <strcmp>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d008      	beq.n	8001daa <shellExec+0x4e>
 8001d98:	4b97      	ldr	r3, [pc, #604]	; (8001ff8 <shellExec+0x29c>)
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	499a      	ldr	r1, [pc, #616]	; (8002008 <shellExec+0x2ac>)
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7fe fa3e 	bl	8000220 <strcmp>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d125      	bne.n	8001df6 <shellExec+0x9a>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, atoi(argv[2]));
 8001daa:	4b93      	ldr	r3, [pc, #588]	; (8001ff8 <shellExec+0x29c>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f008 fd0d 	bl	800a7ce <atoi>
 8001db4:	4603      	mov	r3, r0
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	461a      	mov	r2, r3
 8001dba:	2120      	movs	r1, #32
 8001dbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dc0:	f003 fc36 	bl	8005630 <HAL_GPIO_WritePin>
			stringSize = snprintf((char*)uartTxBuffer,UART_TX_BUFFER_SIZE,"Switch on/off led : %d\r\n",atoi(argv[2]));
 8001dc4:	4b8c      	ldr	r3, [pc, #560]	; (8001ff8 <shellExec+0x29c>)
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f008 fd00 	bl	800a7ce <atoi>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	4a8e      	ldr	r2, [pc, #568]	; (800200c <shellExec+0x2b0>)
 8001dd2:	2140      	movs	r1, #64	; 0x40
 8001dd4:	488e      	ldr	r0, [pc, #568]	; (8002010 <shellExec+0x2b4>)
 8001dd6:	f009 fbb1 	bl	800b53c <sniprintf>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	b2da      	uxtb	r2, r3
 8001dde:	4b8d      	ldr	r3, [pc, #564]	; (8002014 <shellExec+0x2b8>)
 8001de0:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, uartTxBuffer, stringSize, HAL_MAX_DELAY);
 8001de2:	4b8c      	ldr	r3, [pc, #560]	; (8002014 <shellExec+0x2b8>)
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	b29a      	uxth	r2, r3
 8001de8:	f04f 33ff 	mov.w	r3, #4294967295
 8001dec:	4988      	ldr	r1, [pc, #544]	; (8002010 <shellExec+0x2b4>)
 8001dee:	488a      	ldr	r0, [pc, #552]	; (8002018 <shellExec+0x2bc>)
 8001df0:	f006 fcc3 	bl	800877a <HAL_UART_Transmit>
 8001df4:	e1c8      	b.n	8002188 <shellExec+0x42c>
		}
		else if(strcmp(argv[1],"speed")==0){
 8001df6:	4b80      	ldr	r3, [pc, #512]	; (8001ff8 <shellExec+0x29c>)
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	4988      	ldr	r1, [pc, #544]	; (800201c <shellExec+0x2c0>)
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7fe fa0f 	bl	8000220 <strcmp>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d122      	bne.n	8001e4e <shellExec+0xf2>
			if(atoi(argv[2])==0 && strcmp(argv[2],"0")!=0){
 8001e08:	4b7b      	ldr	r3, [pc, #492]	; (8001ff8 <shellExec+0x29c>)
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f008 fcde 	bl	800a7ce <atoi>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d110      	bne.n	8001e3a <shellExec+0xde>
 8001e18:	4b77      	ldr	r3, [pc, #476]	; (8001ff8 <shellExec+0x29c>)
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	4979      	ldr	r1, [pc, #484]	; (8002004 <shellExec+0x2a8>)
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7fe f9fe 	bl	8000220 <strcmp>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d007      	beq.n	8001e3a <shellExec+0xde>
				HAL_UART_Transmit(&huart2, motorSpeedInst, sizeof(motorSpeedInst), HAL_MAX_DELAY);
 8001e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e2e:	2230      	movs	r2, #48	; 0x30
 8001e30:	497b      	ldr	r1, [pc, #492]	; (8002020 <shellExec+0x2c4>)
 8001e32:	4879      	ldr	r0, [pc, #484]	; (8002018 <shellExec+0x2bc>)
 8001e34:	f006 fca1 	bl	800877a <HAL_UART_Transmit>
 8001e38:	e1a6      	b.n	8002188 <shellExec+0x42c>
			}
			else{
				motorSetSpeed(atoi(argv[2]));
 8001e3a:	4b6f      	ldr	r3, [pc, #444]	; (8001ff8 <shellExec+0x29c>)
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f008 fcc5 	bl	800a7ce <atoi>
 8001e44:	4603      	mov	r3, r0
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7ff fe2e 	bl	8001aa8 <motorSetSpeed>
		HAL_UART_Transmit(&huart2, uartTxBuffer, stringSize, HAL_MAX_DELAY);
		}
	else{
		shellCmdNotFound();
	}
}
 8001e4c:	e19c      	b.n	8002188 <shellExec+0x42c>
			shellCmdNotFound();
 8001e4e:	f7ff ff01 	bl	8001c54 <shellCmdNotFound>
}
 8001e52:	e199      	b.n	8002188 <shellExec+0x42c>
	else if(strcmp(argv[0],"help")==0)
 8001e54:	4b68      	ldr	r3, [pc, #416]	; (8001ff8 <shellExec+0x29c>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4972      	ldr	r1, [pc, #456]	; (8002024 <shellExec+0x2c8>)
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7fe f9e0 	bl	8000220 <strcmp>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d108      	bne.n	8001e78 <shellExec+0x11c>
		HAL_UART_Transmit(&huart2, help, sizeof(help), HAL_MAX_DELAY);
 8001e66:	f04f 33ff 	mov.w	r3, #4294967295
 8001e6a:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e6e:	496e      	ldr	r1, [pc, #440]	; (8002028 <shellExec+0x2cc>)
 8001e70:	4869      	ldr	r0, [pc, #420]	; (8002018 <shellExec+0x2bc>)
 8001e72:	f006 fc82 	bl	800877a <HAL_UART_Transmit>
}
 8001e76:	e187      	b.n	8002188 <shellExec+0x42c>
	else if(strcmp(argv[0],"pinout")==0)
 8001e78:	4b5f      	ldr	r3, [pc, #380]	; (8001ff8 <shellExec+0x29c>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	496b      	ldr	r1, [pc, #428]	; (800202c <shellExec+0x2d0>)
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7fe f9ce 	bl	8000220 <strcmp>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d108      	bne.n	8001e9c <shellExec+0x140>
		HAL_UART_Transmit(&huart2, pinout, sizeof(pinout), HAL_MAX_DELAY);
 8001e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e8e:	f44f 7281 	mov.w	r2, #258	; 0x102
 8001e92:	4967      	ldr	r1, [pc, #412]	; (8002030 <shellExec+0x2d4>)
 8001e94:	4860      	ldr	r0, [pc, #384]	; (8002018 <shellExec+0x2bc>)
 8001e96:	f006 fc70 	bl	800877a <HAL_UART_Transmit>
}
 8001e9a:	e175      	b.n	8002188 <shellExec+0x42c>
	else if((strcmp(argv[0],"power")==0)&&(strcmp(argv[1],"on")==0))
 8001e9c:	4b56      	ldr	r3, [pc, #344]	; (8001ff8 <shellExec+0x29c>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4964      	ldr	r1, [pc, #400]	; (8002034 <shellExec+0x2d8>)
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7fe f9bc 	bl	8000220 <strcmp>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d112      	bne.n	8001ed4 <shellExec+0x178>
 8001eae:	4b52      	ldr	r3, [pc, #328]	; (8001ff8 <shellExec+0x29c>)
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	4961      	ldr	r1, [pc, #388]	; (8002038 <shellExec+0x2dc>)
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7fe f9b3 	bl	8000220 <strcmp>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d109      	bne.n	8001ed4 <shellExec+0x178>
		HAL_UART_Transmit(&huart2, powerOn, sizeof(powerOn), HAL_MAX_DELAY);
 8001ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ec4:	221a      	movs	r2, #26
 8001ec6:	495d      	ldr	r1, [pc, #372]	; (800203c <shellExec+0x2e0>)
 8001ec8:	4853      	ldr	r0, [pc, #332]	; (8002018 <shellExec+0x2bc>)
 8001eca:	f006 fc56 	bl	800877a <HAL_UART_Transmit>
		motorPowerOn();
 8001ece:	f7ff fd8b 	bl	80019e8 <motorPowerOn>
 8001ed2:	e159      	b.n	8002188 <shellExec+0x42c>
	else if((strcmp(argv[0],"power")==0)&&(strcmp(argv[1],"off")==0))
 8001ed4:	4b48      	ldr	r3, [pc, #288]	; (8001ff8 <shellExec+0x29c>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4956      	ldr	r1, [pc, #344]	; (8002034 <shellExec+0x2d8>)
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7fe f9a0 	bl	8000220 <strcmp>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d112      	bne.n	8001f0c <shellExec+0x1b0>
 8001ee6:	4b44      	ldr	r3, [pc, #272]	; (8001ff8 <shellExec+0x29c>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	4955      	ldr	r1, [pc, #340]	; (8002040 <shellExec+0x2e4>)
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7fe f997 	bl	8000220 <strcmp>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d109      	bne.n	8001f0c <shellExec+0x1b0>
		HAL_UART_Transmit(&huart2, powerOff, sizeof(powerOff), HAL_MAX_DELAY);
 8001ef8:	f04f 33ff 	mov.w	r3, #4294967295
 8001efc:	221b      	movs	r2, #27
 8001efe:	4951      	ldr	r1, [pc, #324]	; (8002044 <shellExec+0x2e8>)
 8001f00:	4845      	ldr	r0, [pc, #276]	; (8002018 <shellExec+0x2bc>)
 8001f02:	f006 fc3a 	bl	800877a <HAL_UART_Transmit>
		motorPowerOff();
 8001f06:	f7ff fda1 	bl	8001a4c <motorPowerOff>
 8001f0a:	e13d      	b.n	8002188 <shellExec+0x42c>
	else if((strcmp(argv[0],"alpha")==0) && argv[1]!=NULL)
 8001f0c:	4b3a      	ldr	r3, [pc, #232]	; (8001ff8 <shellExec+0x29c>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	494d      	ldr	r1, [pc, #308]	; (8002048 <shellExec+0x2ec>)
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7fe f984 	bl	8000220 <strcmp>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d10d      	bne.n	8001f3a <shellExec+0x1de>
 8001f1e:	4b36      	ldr	r3, [pc, #216]	; (8001ff8 <shellExec+0x29c>)
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d009      	beq.n	8001f3a <shellExec+0x1de>
		motorSetAlpha(atoi (argv[1]));
 8001f26:	4b34      	ldr	r3, [pc, #208]	; (8001ff8 <shellExec+0x29c>)
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f008 fc4f 	bl	800a7ce <atoi>
 8001f30:	4603      	mov	r3, r0
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7ff fdc2 	bl	8001abc <motorSetAlpha>
 8001f38:	e126      	b.n	8002188 <shellExec+0x42c>
	else if((strcmp(argv[0],"cl")==0)&&(strcmp(argv[1],"on")==0))
 8001f3a:	4b2f      	ldr	r3, [pc, #188]	; (8001ff8 <shellExec+0x29c>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4943      	ldr	r1, [pc, #268]	; (800204c <shellExec+0x2f0>)
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7fe f96d 	bl	8000220 <strcmp>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d10c      	bne.n	8001f66 <shellExec+0x20a>
 8001f4c:	4b2a      	ldr	r3, [pc, #168]	; (8001ff8 <shellExec+0x29c>)
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	4939      	ldr	r1, [pc, #228]	; (8002038 <shellExec+0x2dc>)
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7fe f964 	bl	8000220 <strcmp>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d103      	bne.n	8001f66 <shellExec+0x20a>
		CL_flag=1;	//plus utilisé avec boucle de vitesse, flag mis a jour par la commande cl on/cl off
 8001f5e:	4b3c      	ldr	r3, [pc, #240]	; (8002050 <shellExec+0x2f4>)
 8001f60:	2201      	movs	r2, #1
 8001f62:	701a      	strb	r2, [r3, #0]
 8001f64:	e110      	b.n	8002188 <shellExec+0x42c>
	else if((strcmp(argv[0],"cl")==0)&&(strcmp(argv[1],"off")==0))
 8001f66:	4b24      	ldr	r3, [pc, #144]	; (8001ff8 <shellExec+0x29c>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4938      	ldr	r1, [pc, #224]	; (800204c <shellExec+0x2f0>)
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7fe f957 	bl	8000220 <strcmp>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d10c      	bne.n	8001f92 <shellExec+0x236>
 8001f78:	4b1f      	ldr	r3, [pc, #124]	; (8001ff8 <shellExec+0x29c>)
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	4930      	ldr	r1, [pc, #192]	; (8002040 <shellExec+0x2e4>)
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7fe f94e 	bl	8000220 <strcmp>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d103      	bne.n	8001f92 <shellExec+0x236>
		CL_flag=0;
 8001f8a:	4b31      	ldr	r3, [pc, #196]	; (8002050 <shellExec+0x2f4>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	701a      	strb	r2, [r3, #0]
 8001f90:	e0fa      	b.n	8002188 <shellExec+0x42c>
	else if((strcmp(argv[0],"sl")==0)&&(strcmp(argv[1],"on")==0))
 8001f92:	4b19      	ldr	r3, [pc, #100]	; (8001ff8 <shellExec+0x29c>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	492f      	ldr	r1, [pc, #188]	; (8002054 <shellExec+0x2f8>)
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7fe f941 	bl	8000220 <strcmp>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d10f      	bne.n	8001fc4 <shellExec+0x268>
 8001fa4:	4b14      	ldr	r3, [pc, #80]	; (8001ff8 <shellExec+0x29c>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	4923      	ldr	r1, [pc, #140]	; (8002038 <shellExec+0x2dc>)
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7fe f938 	bl	8000220 <strcmp>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d106      	bne.n	8001fc4 <shellExec+0x268>
		CL_flag=1;
 8001fb6:	4b26      	ldr	r3, [pc, #152]	; (8002050 <shellExec+0x2f4>)
 8001fb8:	2201      	movs	r2, #1
 8001fba:	701a      	strb	r2, [r3, #0]
		SL_flag=1;
 8001fbc:	4b26      	ldr	r3, [pc, #152]	; (8002058 <shellExec+0x2fc>)
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	701a      	strb	r2, [r3, #0]
 8001fc2:	e0e1      	b.n	8002188 <shellExec+0x42c>
	else if((strcmp(argv[0],"sl")==0)&&(strcmp(argv[1],"off")==0))
 8001fc4:	4b0c      	ldr	r3, [pc, #48]	; (8001ff8 <shellExec+0x29c>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4922      	ldr	r1, [pc, #136]	; (8002054 <shellExec+0x2f8>)
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7fe f928 	bl	8000220 <strcmp>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d142      	bne.n	800205c <shellExec+0x300>
 8001fd6:	4b08      	ldr	r3, [pc, #32]	; (8001ff8 <shellExec+0x29c>)
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	4919      	ldr	r1, [pc, #100]	; (8002040 <shellExec+0x2e4>)
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7fe f91f 	bl	8000220 <strcmp>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d139      	bne.n	800205c <shellExec+0x300>
		CL_flag=0;
 8001fe8:	4b19      	ldr	r3, [pc, #100]	; (8002050 <shellExec+0x2f4>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	701a      	strb	r2, [r3, #0]
		SL_flag=0;
 8001fee:	4b1a      	ldr	r3, [pc, #104]	; (8002058 <shellExec+0x2fc>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	701a      	strb	r2, [r3, #0]
 8001ff4:	e0c8      	b.n	8002188 <shellExec+0x42c>
 8001ff6:	bf00      	nop
 8001ff8:	2000038c 	.word	0x2000038c
 8001ffc:	0800f28c 	.word	0x0800f28c
 8002000:	0800f290 	.word	0x0800f290
 8002004:	0800f294 	.word	0x0800f294
 8002008:	0800f298 	.word	0x0800f298
 800200c:	0800f29c 	.word	0x0800f29c
 8002010:	2000053c 	.word	0x2000053c
 8002014:	2000057c 	.word	0x2000057c
 8002018:	20000580 	.word	0x20000580
 800201c:	0800f2b8 	.word	0x0800f2b8
 8002020:	0800f614 	.word	0x0800f614
 8002024:	0800f2c0 	.word	0x0800f2c0
 8002028:	0800f3d4 	.word	0x0800f3d4
 800202c:	0800f2c8 	.word	0x0800f2c8
 8002030:	0800f4d8 	.word	0x0800f4d8
 8002034:	0800f2d0 	.word	0x0800f2d0
 8002038:	0800f2d8 	.word	0x0800f2d8
 800203c:	0800f5dc 	.word	0x0800f5dc
 8002040:	0800f2dc 	.word	0x0800f2dc
 8002044:	0800f5f8 	.word	0x0800f5f8
 8002048:	0800f2e0 	.word	0x0800f2e0
 800204c:	0800f2e8 	.word	0x0800f2e8
 8002050:	20000344 	.word	0x20000344
 8002054:	0800f2ec 	.word	0x0800f2ec
 8002058:	20000334 	.word	0x20000334
	else if((strcmp(argv[0],"ireq")==0)&&argv[1]!=NULL)
 800205c:	4b4c      	ldr	r3, [pc, #304]	; (8002190 <shellExec+0x434>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	494c      	ldr	r1, [pc, #304]	; (8002194 <shellExec+0x438>)
 8002062:	4618      	mov	r0, r3
 8002064:	f7fe f8dc 	bl	8000220 <strcmp>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d12d      	bne.n	80020ca <shellExec+0x36e>
 800206e:	4b48      	ldr	r3, [pc, #288]	; (8002190 <shellExec+0x434>)
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d029      	beq.n	80020ca <shellExec+0x36e>
		Ireq=(atof(argv[1]));
 8002076:	4b46      	ldr	r3, [pc, #280]	; (8002190 <shellExec+0x434>)
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	4618      	mov	r0, r3
 800207c:	f008 fba4 	bl	800a7c8 <atof>
 8002080:	ec53 2b10 	vmov	r2, r3, d0
 8002084:	4610      	mov	r0, r2
 8002086:	4619      	mov	r1, r3
 8002088:	f7fe fde6 	bl	8000c58 <__aeabi_d2f>
 800208c:	4603      	mov	r3, r0
 800208e:	4a42      	ldr	r2, [pc, #264]	; (8002198 <shellExec+0x43c>)
 8002090:	6013      	str	r3, [r2, #0]
		stringSize = snprintf((char*)uartTxBuffer,UART_TX_BUFFER_SIZE,"Consigne de courant : %f\r\n",Ireq);
 8002092:	4b41      	ldr	r3, [pc, #260]	; (8002198 <shellExec+0x43c>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4618      	mov	r0, r3
 8002098:	f7fe fa8e 	bl	80005b8 <__aeabi_f2d>
 800209c:	4602      	mov	r2, r0
 800209e:	460b      	mov	r3, r1
 80020a0:	e9cd 2300 	strd	r2, r3, [sp]
 80020a4:	4a3d      	ldr	r2, [pc, #244]	; (800219c <shellExec+0x440>)
 80020a6:	2140      	movs	r1, #64	; 0x40
 80020a8:	483d      	ldr	r0, [pc, #244]	; (80021a0 <shellExec+0x444>)
 80020aa:	f009 fa47 	bl	800b53c <sniprintf>
 80020ae:	4603      	mov	r3, r0
 80020b0:	b2da      	uxtb	r2, r3
 80020b2:	4b3c      	ldr	r3, [pc, #240]	; (80021a4 <shellExec+0x448>)
 80020b4:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, uartTxBuffer, stringSize, HAL_MAX_DELAY);
 80020b6:	4b3b      	ldr	r3, [pc, #236]	; (80021a4 <shellExec+0x448>)
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	b29a      	uxth	r2, r3
 80020bc:	f04f 33ff 	mov.w	r3, #4294967295
 80020c0:	4937      	ldr	r1, [pc, #220]	; (80021a0 <shellExec+0x444>)
 80020c2:	4839      	ldr	r0, [pc, #228]	; (80021a8 <shellExec+0x44c>)
 80020c4:	f006 fb59 	bl	800877a <HAL_UART_Transmit>
 80020c8:	e05e      	b.n	8002188 <shellExec+0x42c>
	else if((strcmp(argv[0],"omreq")==0)&&argv[1]!=NULL)
 80020ca:	4b31      	ldr	r3, [pc, #196]	; (8002190 <shellExec+0x434>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4937      	ldr	r1, [pc, #220]	; (80021ac <shellExec+0x450>)
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7fe f8a5 	bl	8000220 <strcmp>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d12d      	bne.n	8002138 <shellExec+0x3dc>
 80020dc:	4b2c      	ldr	r3, [pc, #176]	; (8002190 <shellExec+0x434>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d029      	beq.n	8002138 <shellExec+0x3dc>
		omreq=(atof(argv[1]));
 80020e4:	4b2a      	ldr	r3, [pc, #168]	; (8002190 <shellExec+0x434>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	4618      	mov	r0, r3
 80020ea:	f008 fb6d 	bl	800a7c8 <atof>
 80020ee:	ec53 2b10 	vmov	r2, r3, d0
 80020f2:	4610      	mov	r0, r2
 80020f4:	4619      	mov	r1, r3
 80020f6:	f7fe fdaf 	bl	8000c58 <__aeabi_d2f>
 80020fa:	4603      	mov	r3, r0
 80020fc:	4a2c      	ldr	r2, [pc, #176]	; (80021b0 <shellExec+0x454>)
 80020fe:	6013      	str	r3, [r2, #0]
		stringSize = snprintf((char*)uartTxBuffer,UART_TX_BUFFER_SIZE,"Consigne de vitesse : %f\r\n",omreq);
 8002100:	4b2b      	ldr	r3, [pc, #172]	; (80021b0 <shellExec+0x454>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4618      	mov	r0, r3
 8002106:	f7fe fa57 	bl	80005b8 <__aeabi_f2d>
 800210a:	4602      	mov	r2, r0
 800210c:	460b      	mov	r3, r1
 800210e:	e9cd 2300 	strd	r2, r3, [sp]
 8002112:	4a28      	ldr	r2, [pc, #160]	; (80021b4 <shellExec+0x458>)
 8002114:	2140      	movs	r1, #64	; 0x40
 8002116:	4822      	ldr	r0, [pc, #136]	; (80021a0 <shellExec+0x444>)
 8002118:	f009 fa10 	bl	800b53c <sniprintf>
 800211c:	4603      	mov	r3, r0
 800211e:	b2da      	uxtb	r2, r3
 8002120:	4b20      	ldr	r3, [pc, #128]	; (80021a4 <shellExec+0x448>)
 8002122:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, uartTxBuffer, stringSize, HAL_MAX_DELAY);
 8002124:	4b1f      	ldr	r3, [pc, #124]	; (80021a4 <shellExec+0x448>)
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	b29a      	uxth	r2, r3
 800212a:	f04f 33ff 	mov.w	r3, #4294967295
 800212e:	491c      	ldr	r1, [pc, #112]	; (80021a0 <shellExec+0x444>)
 8002130:	481d      	ldr	r0, [pc, #116]	; (80021a8 <shellExec+0x44c>)
 8002132:	f006 fb22 	bl	800877a <HAL_UART_Transmit>
 8002136:	e027      	b.n	8002188 <shellExec+0x42c>
	else if(strcmp(argv[0],"speed")==0)
 8002138:	4b15      	ldr	r3, [pc, #84]	; (8002190 <shellExec+0x434>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	491e      	ldr	r1, [pc, #120]	; (80021b8 <shellExec+0x45c>)
 800213e:	4618      	mov	r0, r3
 8002140:	f7fe f86e 	bl	8000220 <strcmp>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d11b      	bne.n	8002182 <shellExec+0x426>
		stringSize = snprintf((char*)uartTxBuffer,UART_TX_BUFFER_SIZE,"Vitesse : %f\r\n",omega);
 800214a:	4b1c      	ldr	r3, [pc, #112]	; (80021bc <shellExec+0x460>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4618      	mov	r0, r3
 8002150:	f7fe fa32 	bl	80005b8 <__aeabi_f2d>
 8002154:	4602      	mov	r2, r0
 8002156:	460b      	mov	r3, r1
 8002158:	e9cd 2300 	strd	r2, r3, [sp]
 800215c:	4a18      	ldr	r2, [pc, #96]	; (80021c0 <shellExec+0x464>)
 800215e:	2140      	movs	r1, #64	; 0x40
 8002160:	480f      	ldr	r0, [pc, #60]	; (80021a0 <shellExec+0x444>)
 8002162:	f009 f9eb 	bl	800b53c <sniprintf>
 8002166:	4603      	mov	r3, r0
 8002168:	b2da      	uxtb	r2, r3
 800216a:	4b0e      	ldr	r3, [pc, #56]	; (80021a4 <shellExec+0x448>)
 800216c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, uartTxBuffer, stringSize, HAL_MAX_DELAY);
 800216e:	4b0d      	ldr	r3, [pc, #52]	; (80021a4 <shellExec+0x448>)
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	b29a      	uxth	r2, r3
 8002174:	f04f 33ff 	mov.w	r3, #4294967295
 8002178:	4909      	ldr	r1, [pc, #36]	; (80021a0 <shellExec+0x444>)
 800217a:	480b      	ldr	r0, [pc, #44]	; (80021a8 <shellExec+0x44c>)
 800217c:	f006 fafd 	bl	800877a <HAL_UART_Transmit>
}
 8002180:	e002      	b.n	8002188 <shellExec+0x42c>
		shellCmdNotFound();
 8002182:	f7ff fd67 	bl	8001c54 <shellCmdNotFound>
}
 8002186:	e7ff      	b.n	8002188 <shellExec+0x42c>
 8002188:	bf00      	nop
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	2000038c 	.word	0x2000038c
 8002194:	0800f2f0 	.word	0x0800f2f0
 8002198:	20000338 	.word	0x20000338
 800219c:	0800f2f8 	.word	0x0800f2f8
 80021a0:	2000053c 	.word	0x2000053c
 80021a4:	2000057c 	.word	0x2000057c
 80021a8:	20000580 	.word	0x20000580
 80021ac:	0800f314 	.word	0x0800f314
 80021b0:	20000318 	.word	0x20000318
 80021b4:	0800f31c 	.word	0x0800f31c
 80021b8:	0800f2b8 	.word	0x0800f2b8
 80021bc:	2000030c 	.word	0x2000030c
 80021c0:	0800f338 	.word	0x0800f338

080021c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ca:	4b0f      	ldr	r3, [pc, #60]	; (8002208 <HAL_MspInit+0x44>)
 80021cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021ce:	4a0e      	ldr	r2, [pc, #56]	; (8002208 <HAL_MspInit+0x44>)
 80021d0:	f043 0301 	orr.w	r3, r3, #1
 80021d4:	6613      	str	r3, [r2, #96]	; 0x60
 80021d6:	4b0c      	ldr	r3, [pc, #48]	; (8002208 <HAL_MspInit+0x44>)
 80021d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021da:	f003 0301 	and.w	r3, r3, #1
 80021de:	607b      	str	r3, [r7, #4]
 80021e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021e2:	4b09      	ldr	r3, [pc, #36]	; (8002208 <HAL_MspInit+0x44>)
 80021e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021e6:	4a08      	ldr	r2, [pc, #32]	; (8002208 <HAL_MspInit+0x44>)
 80021e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021ec:	6593      	str	r3, [r2, #88]	; 0x58
 80021ee:	4b06      	ldr	r3, [pc, #24]	; (8002208 <HAL_MspInit+0x44>)
 80021f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f6:	603b      	str	r3, [r7, #0]
 80021f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80021fa:	f003 faed 	bl	80057d8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021fe:	bf00      	nop
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	40021000 	.word	0x40021000

0800220c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b08c      	sub	sp, #48	; 0x30
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002214:	2300      	movs	r3, #0
 8002216:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8002218:	2300      	movs	r3, #0
 800221a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800221c:	2300      	movs	r3, #0
 800221e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002222:	4b2d      	ldr	r3, [pc, #180]	; (80022d8 <HAL_InitTick+0xcc>)
 8002224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002226:	4a2c      	ldr	r2, [pc, #176]	; (80022d8 <HAL_InitTick+0xcc>)
 8002228:	f043 0310 	orr.w	r3, r3, #16
 800222c:	6593      	str	r3, [r2, #88]	; 0x58
 800222e:	4b2a      	ldr	r3, [pc, #168]	; (80022d8 <HAL_InitTick+0xcc>)
 8002230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002232:	f003 0310 	and.w	r3, r3, #16
 8002236:	60bb      	str	r3, [r7, #8]
 8002238:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800223a:	f107 020c 	add.w	r2, r7, #12
 800223e:	f107 0310 	add.w	r3, r7, #16
 8002242:	4611      	mov	r1, r2
 8002244:	4618      	mov	r0, r3
 8002246:	f003 ffc5 	bl	80061d4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800224a:	f003 ff97 	bl	800617c <HAL_RCC_GetPCLK1Freq>
 800224e:	62b8      	str	r0, [r7, #40]	; 0x28
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002252:	4a22      	ldr	r2, [pc, #136]	; (80022dc <HAL_InitTick+0xd0>)
 8002254:	fba2 2303 	umull	r2, r3, r2, r3
 8002258:	0c9b      	lsrs	r3, r3, #18
 800225a:	3b01      	subs	r3, #1
 800225c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800225e:	4b20      	ldr	r3, [pc, #128]	; (80022e0 <HAL_InitTick+0xd4>)
 8002260:	4a20      	ldr	r2, [pc, #128]	; (80022e4 <HAL_InitTick+0xd8>)
 8002262:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002264:	4b1e      	ldr	r3, [pc, #120]	; (80022e0 <HAL_InitTick+0xd4>)
 8002266:	f240 32e7 	movw	r2, #999	; 0x3e7
 800226a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800226c:	4a1c      	ldr	r2, [pc, #112]	; (80022e0 <HAL_InitTick+0xd4>)
 800226e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002270:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002272:	4b1b      	ldr	r3, [pc, #108]	; (80022e0 <HAL_InitTick+0xd4>)
 8002274:	2200      	movs	r2, #0
 8002276:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002278:	4b19      	ldr	r3, [pc, #100]	; (80022e0 <HAL_InitTick+0xd4>)
 800227a:	2200      	movs	r2, #0
 800227c:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 800227e:	4818      	ldr	r0, [pc, #96]	; (80022e0 <HAL_InitTick+0xd4>)
 8002280:	f004 fa6e 	bl	8006760 <HAL_TIM_Base_Init>
 8002284:	4603      	mov	r3, r0
 8002286:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800228a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800228e:	2b00      	cmp	r3, #0
 8002290:	d11b      	bne.n	80022ca <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002292:	4813      	ldr	r0, [pc, #76]	; (80022e0 <HAL_InitTick+0xd4>)
 8002294:	f004 fb2c 	bl	80068f0 <HAL_TIM_Base_Start_IT>
 8002298:	4603      	mov	r3, r0
 800229a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800229e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d111      	bne.n	80022ca <HAL_InitTick+0xbe>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80022a6:	2036      	movs	r0, #54	; 0x36
 80022a8:	f002 fd00 	bl	8004cac <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2b0f      	cmp	r3, #15
 80022b0:	d808      	bhi.n	80022c4 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80022b2:	2200      	movs	r2, #0
 80022b4:	6879      	ldr	r1, [r7, #4]
 80022b6:	2036      	movs	r0, #54	; 0x36
 80022b8:	f002 fcde 	bl	8004c78 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80022bc:	4a0a      	ldr	r2, [pc, #40]	; (80022e8 <HAL_InitTick+0xdc>)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6013      	str	r3, [r2, #0]
 80022c2:	e002      	b.n	80022ca <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80022ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3730      	adds	r7, #48	; 0x30
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	40021000 	.word	0x40021000
 80022dc:	431bde83 	.word	0x431bde83
 80022e0:	200003b4 	.word	0x200003b4
 80022e4:	40001000 	.word	0x40001000
 80022e8:	20000030 	.word	0x20000030

080022ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022f0:	e7fe      	b.n	80022f0 <NMI_Handler+0x4>

080022f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022f2:	b480      	push	{r7}
 80022f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022f6:	e7fe      	b.n	80022f6 <HardFault_Handler+0x4>

080022f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022fc:	e7fe      	b.n	80022fc <MemManage_Handler+0x4>

080022fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022fe:	b480      	push	{r7}
 8002300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002302:	e7fe      	b.n	8002302 <BusFault_Handler+0x4>

08002304 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002308:	e7fe      	b.n	8002308 <UsageFault_Handler+0x4>

0800230a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800230a:	b480      	push	{r7}
 800230c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800230e:	bf00      	nop
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800231c:	bf00      	nop
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr

08002326 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002326:	b480      	push	{r7}
 8002328:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800232a:	bf00      	nop
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002338:	bf00      	nop
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
	...

08002344 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002348:	4802      	ldr	r0, [pc, #8]	; (8002354 <DMA1_Channel1_IRQHandler+0x10>)
 800234a:	f002 fea0 	bl	800508e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800234e:	bf00      	nop
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	20000294 	.word	0x20000294

08002358 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800235c:	4802      	ldr	r0, [pc, #8]	; (8002368 <ADC1_2_IRQHandler+0x10>)
 800235e:	f001 f9d1 	bl	8003704 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002362:	bf00      	nop
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	20000228 	.word	0x20000228

0800236c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002370:	4802      	ldr	r0, [pc, #8]	; (800237c <TIM2_IRQHandler+0x10>)
 8002372:	f004 fe79 	bl	8007068 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002376:	bf00      	nop
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	20000450 	.word	0x20000450

08002380 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002384:	4802      	ldr	r0, [pc, #8]	; (8002390 <TIM4_IRQHandler+0x10>)
 8002386:	f004 fe6f 	bl	8007068 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800238a:	bf00      	nop
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	200004e8 	.word	0x200004e8

08002394 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002398:	4802      	ldr	r0, [pc, #8]	; (80023a4 <USART2_IRQHandler+0x10>)
 800239a:	f006 fadb 	bl	8008954 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800239e:	bf00      	nop
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	20000580 	.word	0x20000580

080023a8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 80023ac:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80023b0:	f003 f956 	bl	8005660 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80023b4:	bf00      	nop
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80023bc:	4802      	ldr	r0, [pc, #8]	; (80023c8 <TIM6_DAC_IRQHandler+0x10>)
 80023be:	f004 fe53 	bl	8007068 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80023c2:	bf00      	nop
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	200003b4 	.word	0x200003b4

080023cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
	return 1;
 80023d0:	2301      	movs	r3, #1
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <_kill>:

int _kill(int pid, int sig)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80023e6:	f008 f9f7 	bl	800a7d8 <__errno>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2216      	movs	r2, #22
 80023ee:	601a      	str	r2, [r3, #0]
	return -1;
 80023f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3708      	adds	r7, #8
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}

080023fc <_exit>:

void _exit (int status)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002404:	f04f 31ff 	mov.w	r1, #4294967295
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f7ff ffe7 	bl	80023dc <_kill>
	while (1) {}		/* Make sure we hang here */
 800240e:	e7fe      	b.n	800240e <_exit+0x12>

08002410 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b086      	sub	sp, #24
 8002414:	af00      	add	r7, sp, #0
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800241c:	2300      	movs	r3, #0
 800241e:	617b      	str	r3, [r7, #20]
 8002420:	e00a      	b.n	8002438 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002422:	f3af 8000 	nop.w
 8002426:	4601      	mov	r1, r0
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	1c5a      	adds	r2, r3, #1
 800242c:	60ba      	str	r2, [r7, #8]
 800242e:	b2ca      	uxtb	r2, r1
 8002430:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	3301      	adds	r3, #1
 8002436:	617b      	str	r3, [r7, #20]
 8002438:	697a      	ldr	r2, [r7, #20]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	429a      	cmp	r2, r3
 800243e:	dbf0      	blt.n	8002422 <_read+0x12>
	}

return len;
 8002440:	687b      	ldr	r3, [r7, #4]
}
 8002442:	4618      	mov	r0, r3
 8002444:	3718      	adds	r7, #24
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800244a:	b580      	push	{r7, lr}
 800244c:	b086      	sub	sp, #24
 800244e:	af00      	add	r7, sp, #0
 8002450:	60f8      	str	r0, [r7, #12]
 8002452:	60b9      	str	r1, [r7, #8]
 8002454:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002456:	2300      	movs	r3, #0
 8002458:	617b      	str	r3, [r7, #20]
 800245a:	e009      	b.n	8002470 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	1c5a      	adds	r2, r3, #1
 8002460:	60ba      	str	r2, [r7, #8]
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	4618      	mov	r0, r3
 8002466:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	3301      	adds	r3, #1
 800246e:	617b      	str	r3, [r7, #20]
 8002470:	697a      	ldr	r2, [r7, #20]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	429a      	cmp	r2, r3
 8002476:	dbf1      	blt.n	800245c <_write+0x12>
	}
	return len;
 8002478:	687b      	ldr	r3, [r7, #4]
}
 800247a:	4618      	mov	r0, r3
 800247c:	3718      	adds	r7, #24
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}

08002482 <_close>:

int _close(int file)
{
 8002482:	b480      	push	{r7}
 8002484:	b083      	sub	sp, #12
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
	return -1;
 800248a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800248e:	4618      	mov	r0, r3
 8002490:	370c      	adds	r7, #12
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr

0800249a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800249a:	b480      	push	{r7}
 800249c:	b083      	sub	sp, #12
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
 80024a2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024aa:	605a      	str	r2, [r3, #4]
	return 0;
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr

080024ba <_isatty>:

int _isatty(int file)
{
 80024ba:	b480      	push	{r7}
 80024bc:	b083      	sub	sp, #12
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
	return 1;
 80024c2:	2301      	movs	r3, #1
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr

080024d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b085      	sub	sp, #20
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	60b9      	str	r1, [r7, #8]
 80024da:	607a      	str	r2, [r7, #4]
	return 0;
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3714      	adds	r7, #20
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
	...

080024ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b086      	sub	sp, #24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024f4:	4a14      	ldr	r2, [pc, #80]	; (8002548 <_sbrk+0x5c>)
 80024f6:	4b15      	ldr	r3, [pc, #84]	; (800254c <_sbrk+0x60>)
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002500:	4b13      	ldr	r3, [pc, #76]	; (8002550 <_sbrk+0x64>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d102      	bne.n	800250e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002508:	4b11      	ldr	r3, [pc, #68]	; (8002550 <_sbrk+0x64>)
 800250a:	4a12      	ldr	r2, [pc, #72]	; (8002554 <_sbrk+0x68>)
 800250c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800250e:	4b10      	ldr	r3, [pc, #64]	; (8002550 <_sbrk+0x64>)
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4413      	add	r3, r2
 8002516:	693a      	ldr	r2, [r7, #16]
 8002518:	429a      	cmp	r2, r3
 800251a:	d207      	bcs.n	800252c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800251c:	f008 f95c 	bl	800a7d8 <__errno>
 8002520:	4603      	mov	r3, r0
 8002522:	220c      	movs	r2, #12
 8002524:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002526:	f04f 33ff 	mov.w	r3, #4294967295
 800252a:	e009      	b.n	8002540 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800252c:	4b08      	ldr	r3, [pc, #32]	; (8002550 <_sbrk+0x64>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002532:	4b07      	ldr	r3, [pc, #28]	; (8002550 <_sbrk+0x64>)
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4413      	add	r3, r2
 800253a:	4a05      	ldr	r2, [pc, #20]	; (8002550 <_sbrk+0x64>)
 800253c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800253e:	68fb      	ldr	r3, [r7, #12]
}
 8002540:	4618      	mov	r0, r3
 8002542:	3718      	adds	r7, #24
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	20020000 	.word	0x20020000
 800254c:	00000400 	.word	0x00000400
 8002550:	20000400 	.word	0x20000400
 8002554:	20000628 	.word	0x20000628

08002558 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800255c:	4b06      	ldr	r3, [pc, #24]	; (8002578 <SystemInit+0x20>)
 800255e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002562:	4a05      	ldr	r2, [pc, #20]	; (8002578 <SystemInit+0x20>)
 8002564:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002568:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800256c:	bf00      	nop
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	e000ed00 	.word	0xe000ed00

0800257c <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b09c      	sub	sp, #112	; 0x70
 8002580:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002582:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002586:	2200      	movs	r2, #0
 8002588:	601a      	str	r2, [r3, #0]
 800258a:	605a      	str	r2, [r3, #4]
 800258c:	609a      	str	r2, [r3, #8]
 800258e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002590:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002594:	2200      	movs	r2, #0
 8002596:	601a      	str	r2, [r3, #0]
 8002598:	605a      	str	r2, [r3, #4]
 800259a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800259c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80025a0:	2200      	movs	r2, #0
 80025a2:	601a      	str	r2, [r3, #0]
 80025a4:	605a      	str	r2, [r3, #4]
 80025a6:	609a      	str	r2, [r3, #8]
 80025a8:	60da      	str	r2, [r3, #12]
 80025aa:	611a      	str	r2, [r3, #16]
 80025ac:	615a      	str	r2, [r3, #20]
 80025ae:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80025b0:	1d3b      	adds	r3, r7, #4
 80025b2:	2234      	movs	r2, #52	; 0x34
 80025b4:	2100      	movs	r1, #0
 80025b6:	4618      	mov	r0, r3
 80025b8:	f008 f938 	bl	800a82c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80025bc:	4b4c      	ldr	r3, [pc, #304]	; (80026f0 <MX_TIM1_Init+0x174>)
 80025be:	4a4d      	ldr	r2, [pc, #308]	; (80026f4 <MX_TIM1_Init+0x178>)
 80025c0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80025c2:	4b4b      	ldr	r3, [pc, #300]	; (80026f0 <MX_TIM1_Init+0x174>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80025c8:	4b49      	ldr	r3, [pc, #292]	; (80026f0 <MX_TIM1_Init+0x174>)
 80025ca:	2220      	movs	r2, #32
 80025cc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5311;
 80025ce:	4b48      	ldr	r3, [pc, #288]	; (80026f0 <MX_TIM1_Init+0x174>)
 80025d0:	f241 42bf 	movw	r2, #5311	; 0x14bf
 80025d4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025d6:	4b46      	ldr	r3, [pc, #280]	; (80026f0 <MX_TIM1_Init+0x174>)
 80025d8:	2200      	movs	r2, #0
 80025da:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80025dc:	4b44      	ldr	r3, [pc, #272]	; (80026f0 <MX_TIM1_Init+0x174>)
 80025de:	2200      	movs	r2, #0
 80025e0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80025e2:	4b43      	ldr	r3, [pc, #268]	; (80026f0 <MX_TIM1_Init+0x174>)
 80025e4:	2280      	movs	r2, #128	; 0x80
 80025e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80025e8:	4841      	ldr	r0, [pc, #260]	; (80026f0 <MX_TIM1_Init+0x174>)
 80025ea:	f004 f8b9 	bl	8006760 <HAL_TIM_Base_Init>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d001      	beq.n	80025f8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80025f4:	f7ff f9f2 	bl	80019dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025fc:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80025fe:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002602:	4619      	mov	r1, r3
 8002604:	483a      	ldr	r0, [pc, #232]	; (80026f0 <MX_TIM1_Init+0x174>)
 8002606:	f004 ffc3 	bl	8007590 <HAL_TIM_ConfigClockSource>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002610:	f7ff f9e4 	bl	80019dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002614:	4836      	ldr	r0, [pc, #216]	; (80026f0 <MX_TIM1_Init+0x174>)
 8002616:	f004 f9e3 	bl	80069e0 <HAL_TIM_PWM_Init>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002620:	f7ff f9dc 	bl	80019dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002624:	2300      	movs	r3, #0
 8002626:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002628:	2300      	movs	r3, #0
 800262a:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800262c:	2300      	movs	r3, #0
 800262e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002630:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002634:	4619      	mov	r1, r3
 8002636:	482e      	ldr	r0, [pc, #184]	; (80026f0 <MX_TIM1_Init+0x174>)
 8002638:	f005 fe9c 	bl	8008374 <HAL_TIMEx_MasterConfigSynchronization>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8002642:	f7ff f9cb 	bl	80019dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002646:	2360      	movs	r3, #96	; 0x60
 8002648:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 2656;
 800264a:	f44f 6326 	mov.w	r3, #2656	; 0xa60
 800264e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002650:	2300      	movs	r3, #0
 8002652:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002654:	2300      	movs	r3, #0
 8002656:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002658:	2300      	movs	r3, #0
 800265a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800265c:	2300      	movs	r3, #0
 800265e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002660:	2300      	movs	r3, #0
 8002662:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002664:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002668:	2200      	movs	r2, #0
 800266a:	4619      	mov	r1, r3
 800266c:	4820      	ldr	r0, [pc, #128]	; (80026f0 <MX_TIM1_Init+0x174>)
 800266e:	f004 fe7b 	bl	8007368 <HAL_TIM_PWM_ConfigChannel>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d001      	beq.n	800267c <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8002678:	f7ff f9b0 	bl	80019dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800267c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002680:	2204      	movs	r2, #4
 8002682:	4619      	mov	r1, r3
 8002684:	481a      	ldr	r0, [pc, #104]	; (80026f0 <MX_TIM1_Init+0x174>)
 8002686:	f004 fe6f 	bl	8007368 <HAL_TIM_PWM_ConfigChannel>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d001      	beq.n	8002694 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8002690:	f7ff f9a4 	bl	80019dc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002694:	2300      	movs	r3, #0
 8002696:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002698:	2300      	movs	r3, #0
 800269a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800269c:	2300      	movs	r3, #0
 800269e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 203;
 80026a0:	23cb      	movs	r3, #203	; 0xcb
 80026a2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80026a4:	2300      	movs	r3, #0
 80026a6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80026a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026ac:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80026ae:	2300      	movs	r3, #0
 80026b0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80026b2:	2300      	movs	r3, #0
 80026b4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80026b6:	2300      	movs	r3, #0
 80026b8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80026ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026be:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80026c0:	2300      	movs	r3, #0
 80026c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80026c4:	2300      	movs	r3, #0
 80026c6:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80026c8:	2300      	movs	r3, #0
 80026ca:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80026cc:	1d3b      	adds	r3, r7, #4
 80026ce:	4619      	mov	r1, r3
 80026d0:	4807      	ldr	r0, [pc, #28]	; (80026f0 <MX_TIM1_Init+0x174>)
 80026d2:	f005 fee5 	bl	80084a0 <HAL_TIMEx_ConfigBreakDeadTime>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d001      	beq.n	80026e0 <MX_TIM1_Init+0x164>
  {
    Error_Handler();
 80026dc:	f7ff f97e 	bl	80019dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80026e0:	4803      	ldr	r0, [pc, #12]	; (80026f0 <MX_TIM1_Init+0x174>)
 80026e2:	f000 f993 	bl	8002a0c <HAL_TIM_MspPostInit>

}
 80026e6:	bf00      	nop
 80026e8:	3770      	adds	r7, #112	; 0x70
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	20000404 	.word	0x20000404
 80026f4:	40012c00 	.word	0x40012c00

080026f8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b088      	sub	sp, #32
 80026fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026fe:	f107 0310 	add.w	r3, r7, #16
 8002702:	2200      	movs	r2, #0
 8002704:	601a      	str	r2, [r3, #0]
 8002706:	605a      	str	r2, [r3, #4]
 8002708:	609a      	str	r2, [r3, #8]
 800270a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800270c:	1d3b      	adds	r3, r7, #4
 800270e:	2200      	movs	r2, #0
 8002710:	601a      	str	r2, [r3, #0]
 8002712:	605a      	str	r2, [r3, #4]
 8002714:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002716:	4b1e      	ldr	r3, [pc, #120]	; (8002790 <MX_TIM2_Init+0x98>)
 8002718:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800271c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800271e:	4b1c      	ldr	r3, [pc, #112]	; (8002790 <MX_TIM2_Init+0x98>)
 8002720:	2200      	movs	r2, #0
 8002722:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002724:	4b1a      	ldr	r3, [pc, #104]	; (8002790 <MX_TIM2_Init+0x98>)
 8002726:	2200      	movs	r2, #0
 8002728:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1062;
 800272a:	4b19      	ldr	r3, [pc, #100]	; (8002790 <MX_TIM2_Init+0x98>)
 800272c:	f240 4226 	movw	r2, #1062	; 0x426
 8002730:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002732:	4b17      	ldr	r3, [pc, #92]	; (8002790 <MX_TIM2_Init+0x98>)
 8002734:	2200      	movs	r2, #0
 8002736:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002738:	4b15      	ldr	r3, [pc, #84]	; (8002790 <MX_TIM2_Init+0x98>)
 800273a:	2280      	movs	r2, #128	; 0x80
 800273c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800273e:	4814      	ldr	r0, [pc, #80]	; (8002790 <MX_TIM2_Init+0x98>)
 8002740:	f004 f80e 	bl	8006760 <HAL_TIM_Base_Init>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800274a:	f7ff f947 	bl	80019dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800274e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002752:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002754:	f107 0310 	add.w	r3, r7, #16
 8002758:	4619      	mov	r1, r3
 800275a:	480d      	ldr	r0, [pc, #52]	; (8002790 <MX_TIM2_Init+0x98>)
 800275c:	f004 ff18 	bl	8007590 <HAL_TIM_ConfigClockSource>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002766:	f7ff f939 	bl	80019dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800276a:	2320      	movs	r3, #32
 800276c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800276e:	2300      	movs	r3, #0
 8002770:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002772:	1d3b      	adds	r3, r7, #4
 8002774:	4619      	mov	r1, r3
 8002776:	4806      	ldr	r0, [pc, #24]	; (8002790 <MX_TIM2_Init+0x98>)
 8002778:	f005 fdfc 	bl	8008374 <HAL_TIMEx_MasterConfigSynchronization>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002782:	f7ff f92b 	bl	80019dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002786:	bf00      	nop
 8002788:	3720      	adds	r7, #32
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	20000450 	.word	0x20000450

08002794 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b08c      	sub	sp, #48	; 0x30
 8002798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800279a:	f107 030c 	add.w	r3, r7, #12
 800279e:	2224      	movs	r2, #36	; 0x24
 80027a0:	2100      	movs	r1, #0
 80027a2:	4618      	mov	r0, r3
 80027a4:	f008 f842 	bl	800a82c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027a8:	463b      	mov	r3, r7
 80027aa:	2200      	movs	r2, #0
 80027ac:	601a      	str	r2, [r3, #0]
 80027ae:	605a      	str	r2, [r3, #4]
 80027b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80027b2:	4b21      	ldr	r3, [pc, #132]	; (8002838 <MX_TIM3_Init+0xa4>)
 80027b4:	4a21      	ldr	r2, [pc, #132]	; (800283c <MX_TIM3_Init+0xa8>)
 80027b6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80027b8:	4b1f      	ldr	r3, [pc, #124]	; (8002838 <MX_TIM3_Init+0xa4>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027be:	4b1e      	ldr	r3, [pc, #120]	; (8002838 <MX_TIM3_Init+0xa4>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80027c4:	4b1c      	ldr	r3, [pc, #112]	; (8002838 <MX_TIM3_Init+0xa4>)
 80027c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027ca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027cc:	4b1a      	ldr	r3, [pc, #104]	; (8002838 <MX_TIM3_Init+0xa4>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027d2:	4b19      	ldr	r3, [pc, #100]	; (8002838 <MX_TIM3_Init+0xa4>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80027d8:	2303      	movs	r3, #3
 80027da:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80027dc:	2300      	movs	r3, #0
 80027de:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80027e0:	2301      	movs	r3, #1
 80027e2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80027e4:	2300      	movs	r3, #0
 80027e6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80027e8:	2300      	movs	r3, #0
 80027ea:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80027ec:	2300      	movs	r3, #0
 80027ee:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80027f0:	2301      	movs	r3, #1
 80027f2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80027f4:	2300      	movs	r3, #0
 80027f6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80027f8:	2300      	movs	r3, #0
 80027fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80027fc:	f107 030c 	add.w	r3, r7, #12
 8002800:	4619      	mov	r1, r3
 8002802:	480d      	ldr	r0, [pc, #52]	; (8002838 <MX_TIM3_Init+0xa4>)
 8002804:	f004 fafc 	bl	8006e00 <HAL_TIM_Encoder_Init>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800280e:	f7ff f8e5 	bl	80019dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002812:	2300      	movs	r3, #0
 8002814:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002816:	2300      	movs	r3, #0
 8002818:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800281a:	463b      	mov	r3, r7
 800281c:	4619      	mov	r1, r3
 800281e:	4806      	ldr	r0, [pc, #24]	; (8002838 <MX_TIM3_Init+0xa4>)
 8002820:	f005 fda8 	bl	8008374 <HAL_TIMEx_MasterConfigSynchronization>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d001      	beq.n	800282e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800282a:	f7ff f8d7 	bl	80019dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800282e:	bf00      	nop
 8002830:	3730      	adds	r7, #48	; 0x30
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	2000049c 	.word	0x2000049c
 800283c:	40000400 	.word	0x40000400

08002840 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b088      	sub	sp, #32
 8002844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002846:	f107 0310 	add.w	r3, r7, #16
 800284a:	2200      	movs	r2, #0
 800284c:	601a      	str	r2, [r3, #0]
 800284e:	605a      	str	r2, [r3, #4]
 8002850:	609a      	str	r2, [r3, #8]
 8002852:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002854:	1d3b      	adds	r3, r7, #4
 8002856:	2200      	movs	r2, #0
 8002858:	601a      	str	r2, [r3, #0]
 800285a:	605a      	str	r2, [r3, #4]
 800285c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800285e:	4b1e      	ldr	r3, [pc, #120]	; (80028d8 <MX_TIM4_Init+0x98>)
 8002860:	4a1e      	ldr	r2, [pc, #120]	; (80028dc <MX_TIM4_Init+0x9c>)
 8002862:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1700-1;
 8002864:	4b1c      	ldr	r3, [pc, #112]	; (80028d8 <MX_TIM4_Init+0x98>)
 8002866:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800286a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800286c:	4b1a      	ldr	r3, [pc, #104]	; (80028d8 <MX_TIM4_Init+0x98>)
 800286e:	2200      	movs	r2, #0
 8002870:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8002872:	4b19      	ldr	r3, [pc, #100]	; (80028d8 <MX_TIM4_Init+0x98>)
 8002874:	f242 720f 	movw	r2, #9999	; 0x270f
 8002878:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800287a:	4b17      	ldr	r3, [pc, #92]	; (80028d8 <MX_TIM4_Init+0x98>)
 800287c:	2200      	movs	r2, #0
 800287e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002880:	4b15      	ldr	r3, [pc, #84]	; (80028d8 <MX_TIM4_Init+0x98>)
 8002882:	2280      	movs	r2, #128	; 0x80
 8002884:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002886:	4814      	ldr	r0, [pc, #80]	; (80028d8 <MX_TIM4_Init+0x98>)
 8002888:	f003 ff6a 	bl	8006760 <HAL_TIM_Base_Init>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8002892:	f7ff f8a3 	bl	80019dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002896:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800289a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800289c:	f107 0310 	add.w	r3, r7, #16
 80028a0:	4619      	mov	r1, r3
 80028a2:	480d      	ldr	r0, [pc, #52]	; (80028d8 <MX_TIM4_Init+0x98>)
 80028a4:	f004 fe74 	bl	8007590 <HAL_TIM_ConfigClockSource>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 80028ae:	f7ff f895 	bl	80019dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80028b2:	2320      	movs	r3, #32
 80028b4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028b6:	2300      	movs	r3, #0
 80028b8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80028ba:	1d3b      	adds	r3, r7, #4
 80028bc:	4619      	mov	r1, r3
 80028be:	4806      	ldr	r0, [pc, #24]	; (80028d8 <MX_TIM4_Init+0x98>)
 80028c0:	f005 fd58 	bl	8008374 <HAL_TIMEx_MasterConfigSynchronization>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d001      	beq.n	80028ce <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 80028ca:	f7ff f887 	bl	80019dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80028ce:	bf00      	nop
 80028d0:	3720      	adds	r7, #32
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	200004e8 	.word	0x200004e8
 80028dc:	40000800 	.word	0x40000800

080028e0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b086      	sub	sp, #24
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a23      	ldr	r2, [pc, #140]	; (800297c <HAL_TIM_Base_MspInit+0x9c>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d10c      	bne.n	800290c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80028f2:	4b23      	ldr	r3, [pc, #140]	; (8002980 <HAL_TIM_Base_MspInit+0xa0>)
 80028f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028f6:	4a22      	ldr	r2, [pc, #136]	; (8002980 <HAL_TIM_Base_MspInit+0xa0>)
 80028f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80028fc:	6613      	str	r3, [r2, #96]	; 0x60
 80028fe:	4b20      	ldr	r3, [pc, #128]	; (8002980 <HAL_TIM_Base_MspInit+0xa0>)
 8002900:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002902:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002906:	617b      	str	r3, [r7, #20]
 8002908:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800290a:	e032      	b.n	8002972 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM2)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002914:	d114      	bne.n	8002940 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002916:	4b1a      	ldr	r3, [pc, #104]	; (8002980 <HAL_TIM_Base_MspInit+0xa0>)
 8002918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800291a:	4a19      	ldr	r2, [pc, #100]	; (8002980 <HAL_TIM_Base_MspInit+0xa0>)
 800291c:	f043 0301 	orr.w	r3, r3, #1
 8002920:	6593      	str	r3, [r2, #88]	; 0x58
 8002922:	4b17      	ldr	r3, [pc, #92]	; (8002980 <HAL_TIM_Base_MspInit+0xa0>)
 8002924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	613b      	str	r3, [r7, #16]
 800292c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800292e:	2200      	movs	r2, #0
 8002930:	2100      	movs	r1, #0
 8002932:	201c      	movs	r0, #28
 8002934:	f002 f9a0 	bl	8004c78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002938:	201c      	movs	r0, #28
 800293a:	f002 f9b7 	bl	8004cac <HAL_NVIC_EnableIRQ>
}
 800293e:	e018      	b.n	8002972 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM4)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a0f      	ldr	r2, [pc, #60]	; (8002984 <HAL_TIM_Base_MspInit+0xa4>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d113      	bne.n	8002972 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800294a:	4b0d      	ldr	r3, [pc, #52]	; (8002980 <HAL_TIM_Base_MspInit+0xa0>)
 800294c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800294e:	4a0c      	ldr	r2, [pc, #48]	; (8002980 <HAL_TIM_Base_MspInit+0xa0>)
 8002950:	f043 0304 	orr.w	r3, r3, #4
 8002954:	6593      	str	r3, [r2, #88]	; 0x58
 8002956:	4b0a      	ldr	r3, [pc, #40]	; (8002980 <HAL_TIM_Base_MspInit+0xa0>)
 8002958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800295a:	f003 0304 	and.w	r3, r3, #4
 800295e:	60fb      	str	r3, [r7, #12]
 8002960:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002962:	2200      	movs	r2, #0
 8002964:	2100      	movs	r1, #0
 8002966:	201e      	movs	r0, #30
 8002968:	f002 f986 	bl	8004c78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800296c:	201e      	movs	r0, #30
 800296e:	f002 f99d 	bl	8004cac <HAL_NVIC_EnableIRQ>
}
 8002972:	bf00      	nop
 8002974:	3718      	adds	r7, #24
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	40012c00 	.word	0x40012c00
 8002980:	40021000 	.word	0x40021000
 8002984:	40000800 	.word	0x40000800

08002988 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b08a      	sub	sp, #40	; 0x28
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002990:	f107 0314 	add.w	r3, r7, #20
 8002994:	2200      	movs	r2, #0
 8002996:	601a      	str	r2, [r3, #0]
 8002998:	605a      	str	r2, [r3, #4]
 800299a:	609a      	str	r2, [r3, #8]
 800299c:	60da      	str	r2, [r3, #12]
 800299e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a17      	ldr	r2, [pc, #92]	; (8002a04 <HAL_TIM_Encoder_MspInit+0x7c>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d128      	bne.n	80029fc <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80029aa:	4b17      	ldr	r3, [pc, #92]	; (8002a08 <HAL_TIM_Encoder_MspInit+0x80>)
 80029ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ae:	4a16      	ldr	r2, [pc, #88]	; (8002a08 <HAL_TIM_Encoder_MspInit+0x80>)
 80029b0:	f043 0302 	orr.w	r3, r3, #2
 80029b4:	6593      	str	r3, [r2, #88]	; 0x58
 80029b6:	4b14      	ldr	r3, [pc, #80]	; (8002a08 <HAL_TIM_Encoder_MspInit+0x80>)
 80029b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ba:	f003 0302 	and.w	r3, r3, #2
 80029be:	613b      	str	r3, [r7, #16]
 80029c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029c2:	4b11      	ldr	r3, [pc, #68]	; (8002a08 <HAL_TIM_Encoder_MspInit+0x80>)
 80029c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029c6:	4a10      	ldr	r2, [pc, #64]	; (8002a08 <HAL_TIM_Encoder_MspInit+0x80>)
 80029c8:	f043 0301 	orr.w	r3, r3, #1
 80029cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029ce:	4b0e      	ldr	r3, [pc, #56]	; (8002a08 <HAL_TIM_Encoder_MspInit+0x80>)
 80029d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029d2:	f003 0301 	and.w	r3, r3, #1
 80029d6:	60fb      	str	r3, [r7, #12]
 80029d8:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80029da:	2350      	movs	r3, #80	; 0x50
 80029dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029de:	2302      	movs	r3, #2
 80029e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e2:	2300      	movs	r3, #0
 80029e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e6:	2300      	movs	r3, #0
 80029e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80029ea:	2302      	movs	r3, #2
 80029ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ee:	f107 0314 	add.w	r3, r7, #20
 80029f2:	4619      	mov	r1, r3
 80029f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029f8:	f002 fc98 	bl	800532c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80029fc:	bf00      	nop
 80029fe:	3728      	adds	r7, #40	; 0x28
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	40000400 	.word	0x40000400
 8002a08:	40021000 	.word	0x40021000

08002a0c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b088      	sub	sp, #32
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a14:	f107 030c 	add.w	r3, r7, #12
 8002a18:	2200      	movs	r2, #0
 8002a1a:	601a      	str	r2, [r3, #0]
 8002a1c:	605a      	str	r2, [r3, #4]
 8002a1e:	609a      	str	r2, [r3, #8]
 8002a20:	60da      	str	r2, [r3, #12]
 8002a22:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a12      	ldr	r2, [pc, #72]	; (8002a74 <HAL_TIM_MspPostInit+0x68>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d11d      	bne.n	8002a6a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a2e:	4b12      	ldr	r3, [pc, #72]	; (8002a78 <HAL_TIM_MspPostInit+0x6c>)
 8002a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a32:	4a11      	ldr	r2, [pc, #68]	; (8002a78 <HAL_TIM_MspPostInit+0x6c>)
 8002a34:	f043 0301 	orr.w	r3, r3, #1
 8002a38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a3a:	4b0f      	ldr	r3, [pc, #60]	; (8002a78 <HAL_TIM_MspPostInit+0x6c>)
 8002a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	60bb      	str	r3, [r7, #8]
 8002a44:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH1N
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12;
 8002a46:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 8002a4a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a50:	2300      	movs	r3, #0
 8002a52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a54:	2300      	movs	r3, #0
 8002a56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002a58:	2306      	movs	r3, #6
 8002a5a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a5c:	f107 030c 	add.w	r3, r7, #12
 8002a60:	4619      	mov	r1, r3
 8002a62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a66:	f002 fc61 	bl	800532c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002a6a:	bf00      	nop
 8002a6c:	3720      	adds	r7, #32
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	40012c00 	.word	0x40012c00
 8002a78:	40021000 	.word	0x40021000

08002a7c <HAL_UART_RxCpltCallback>:

/**
  * @brief  Function called at each new character received
  * @retval None
  */
void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart){
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 8002a84:	4b05      	ldr	r3, [pc, #20]	; (8002a9c <HAL_UART_RxCpltCallback+0x20>)
 8002a86:	2201      	movs	r2, #1
 8002a88:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	4904      	ldr	r1, [pc, #16]	; (8002aa0 <HAL_UART_RxCpltCallback+0x24>)
 8002a8e:	4805      	ldr	r0, [pc, #20]	; (8002aa4 <HAL_UART_RxCpltCallback+0x28>)
 8002a90:	f005 ff0a 	bl	80088a8 <HAL_UART_Receive_IT>
}
 8002a94:	bf00      	nop
 8002a96:	3708      	adds	r7, #8
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	20000534 	.word	0x20000534
 8002aa0:	20000538 	.word	0x20000538
 8002aa4:	20000580 	.word	0x20000580

08002aa8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002aac:	4b22      	ldr	r3, [pc, #136]	; (8002b38 <MX_USART2_UART_Init+0x90>)
 8002aae:	4a23      	ldr	r2, [pc, #140]	; (8002b3c <MX_USART2_UART_Init+0x94>)
 8002ab0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002ab2:	4b21      	ldr	r3, [pc, #132]	; (8002b38 <MX_USART2_UART_Init+0x90>)
 8002ab4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ab8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002aba:	4b1f      	ldr	r3, [pc, #124]	; (8002b38 <MX_USART2_UART_Init+0x90>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002ac0:	4b1d      	ldr	r3, [pc, #116]	; (8002b38 <MX_USART2_UART_Init+0x90>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002ac6:	4b1c      	ldr	r3, [pc, #112]	; (8002b38 <MX_USART2_UART_Init+0x90>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002acc:	4b1a      	ldr	r3, [pc, #104]	; (8002b38 <MX_USART2_UART_Init+0x90>)
 8002ace:	220c      	movs	r2, #12
 8002ad0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ad2:	4b19      	ldr	r3, [pc, #100]	; (8002b38 <MX_USART2_UART_Init+0x90>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ad8:	4b17      	ldr	r3, [pc, #92]	; (8002b38 <MX_USART2_UART_Init+0x90>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ade:	4b16      	ldr	r3, [pc, #88]	; (8002b38 <MX_USART2_UART_Init+0x90>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002ae4:	4b14      	ldr	r3, [pc, #80]	; (8002b38 <MX_USART2_UART_Init+0x90>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002aea:	4b13      	ldr	r3, [pc, #76]	; (8002b38 <MX_USART2_UART_Init+0x90>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002af0:	4811      	ldr	r0, [pc, #68]	; (8002b38 <MX_USART2_UART_Init+0x90>)
 8002af2:	f005 fdf2 	bl	80086da <HAL_UART_Init>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d001      	beq.n	8002b00 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002afc:	f7fe ff6e 	bl	80019dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b00:	2100      	movs	r1, #0
 8002b02:	480d      	ldr	r0, [pc, #52]	; (8002b38 <MX_USART2_UART_Init+0x90>)
 8002b04:	f007 fd95 	bl	800a632 <HAL_UARTEx_SetTxFifoThreshold>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002b0e:	f7fe ff65 	bl	80019dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b12:	2100      	movs	r1, #0
 8002b14:	4808      	ldr	r0, [pc, #32]	; (8002b38 <MX_USART2_UART_Init+0x90>)
 8002b16:	f007 fdca 	bl	800a6ae <HAL_UARTEx_SetRxFifoThreshold>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d001      	beq.n	8002b24 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002b20:	f7fe ff5c 	bl	80019dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002b24:	4804      	ldr	r0, [pc, #16]	; (8002b38 <MX_USART2_UART_Init+0x90>)
 8002b26:	f007 fd4b 	bl	800a5c0 <HAL_UARTEx_DisableFifoMode>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d001      	beq.n	8002b34 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002b30:	f7fe ff54 	bl	80019dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002b34:	bf00      	nop
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	20000580 	.word	0x20000580
 8002b3c:	40004400 	.word	0x40004400

08002b40 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b09e      	sub	sp, #120	; 0x78
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b48:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	601a      	str	r2, [r3, #0]
 8002b50:	605a      	str	r2, [r3, #4]
 8002b52:	609a      	str	r2, [r3, #8]
 8002b54:	60da      	str	r2, [r3, #12]
 8002b56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b58:	f107 0310 	add.w	r3, r7, #16
 8002b5c:	2254      	movs	r2, #84	; 0x54
 8002b5e:	2100      	movs	r1, #0
 8002b60:	4618      	mov	r0, r3
 8002b62:	f007 fe63 	bl	800a82c <memset>
  if(uartHandle->Instance==USART2)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a23      	ldr	r2, [pc, #140]	; (8002bf8 <HAL_UART_MspInit+0xb8>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d13e      	bne.n	8002bee <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002b70:	2302      	movs	r3, #2
 8002b72:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002b74:	2300      	movs	r3, #0
 8002b76:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b78:	f107 0310 	add.w	r3, r7, #16
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f003 fba1 	bl	80062c4 <HAL_RCCEx_PeriphCLKConfig>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d001      	beq.n	8002b8c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002b88:	f7fe ff28 	bl	80019dc <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b8c:	4b1b      	ldr	r3, [pc, #108]	; (8002bfc <HAL_UART_MspInit+0xbc>)
 8002b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b90:	4a1a      	ldr	r2, [pc, #104]	; (8002bfc <HAL_UART_MspInit+0xbc>)
 8002b92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b96:	6593      	str	r3, [r2, #88]	; 0x58
 8002b98:	4b18      	ldr	r3, [pc, #96]	; (8002bfc <HAL_UART_MspInit+0xbc>)
 8002b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba0:	60fb      	str	r3, [r7, #12]
 8002ba2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ba4:	4b15      	ldr	r3, [pc, #84]	; (8002bfc <HAL_UART_MspInit+0xbc>)
 8002ba6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ba8:	4a14      	ldr	r2, [pc, #80]	; (8002bfc <HAL_UART_MspInit+0xbc>)
 8002baa:	f043 0301 	orr.w	r3, r3, #1
 8002bae:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bb0:	4b12      	ldr	r3, [pc, #72]	; (8002bfc <HAL_UART_MspInit+0xbc>)
 8002bb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bb4:	f003 0301 	and.w	r3, r3, #1
 8002bb8:	60bb      	str	r3, [r7, #8]
 8002bba:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002bbc:	230c      	movs	r3, #12
 8002bbe:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc0:	2302      	movs	r3, #2
 8002bc2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002bcc:	2307      	movs	r3, #7
 8002bce:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bd0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bda:	f002 fba7 	bl	800532c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002bde:	2200      	movs	r2, #0
 8002be0:	2100      	movs	r1, #0
 8002be2:	2026      	movs	r0, #38	; 0x26
 8002be4:	f002 f848 	bl	8004c78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002be8:	2026      	movs	r0, #38	; 0x26
 8002bea:	f002 f85f 	bl	8004cac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002bee:	bf00      	nop
 8002bf0:	3778      	adds	r7, #120	; 0x78
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	40004400 	.word	0x40004400
 8002bfc:	40021000 	.word	0x40021000

08002c00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002c00:	480d      	ldr	r0, [pc, #52]	; (8002c38 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002c02:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c04:	480d      	ldr	r0, [pc, #52]	; (8002c3c <LoopForever+0x6>)
  ldr r1, =_edata
 8002c06:	490e      	ldr	r1, [pc, #56]	; (8002c40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002c08:	4a0e      	ldr	r2, [pc, #56]	; (8002c44 <LoopForever+0xe>)
  movs r3, #0
 8002c0a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002c0c:	e002      	b.n	8002c14 <LoopCopyDataInit>

08002c0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c12:	3304      	adds	r3, #4

08002c14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c18:	d3f9      	bcc.n	8002c0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c1a:	4a0b      	ldr	r2, [pc, #44]	; (8002c48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002c1c:	4c0b      	ldr	r4, [pc, #44]	; (8002c4c <LoopForever+0x16>)
  movs r3, #0
 8002c1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c20:	e001      	b.n	8002c26 <LoopFillZerobss>

08002c22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c24:	3204      	adds	r2, #4

08002c26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c28:	d3fb      	bcc.n	8002c22 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002c2a:	f7ff fc95 	bl	8002558 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c2e:	f007 fdd9 	bl	800a7e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002c32:	f7fe fbc1 	bl	80013b8 <main>

08002c36 <LoopForever>:

LoopForever:
    b LoopForever
 8002c36:	e7fe      	b.n	8002c36 <LoopForever>
  ldr   r0, =_estack
 8002c38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002c3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c40:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 8002c44:	0800fba8 	.word	0x0800fba8
  ldr r2, =_sbss
 8002c48:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 8002c4c:	20000624 	.word	0x20000624

08002c50 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002c50:	e7fe      	b.n	8002c50 <ADC3_IRQHandler>

08002c52 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c52:	b580      	push	{r7, lr}
 8002c54:	b082      	sub	sp, #8
 8002c56:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c5c:	2003      	movs	r0, #3
 8002c5e:	f002 f800 	bl	8004c62 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c62:	200f      	movs	r0, #15
 8002c64:	f7ff fad2 	bl	800220c <HAL_InitTick>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d002      	beq.n	8002c74 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	71fb      	strb	r3, [r7, #7]
 8002c72:	e001      	b.n	8002c78 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002c74:	f7ff faa6 	bl	80021c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002c78:	79fb      	ldrb	r3, [r7, #7]

}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3708      	adds	r7, #8
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
	...

08002c84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c88:	4b05      	ldr	r3, [pc, #20]	; (8002ca0 <HAL_IncTick+0x1c>)
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	4b05      	ldr	r3, [pc, #20]	; (8002ca4 <HAL_IncTick+0x20>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4413      	add	r3, r2
 8002c92:	4a03      	ldr	r2, [pc, #12]	; (8002ca0 <HAL_IncTick+0x1c>)
 8002c94:	6013      	str	r3, [r2, #0]
}
 8002c96:	bf00      	nop
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr
 8002ca0:	20000610 	.word	0x20000610
 8002ca4:	20000034 	.word	0x20000034

08002ca8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	af00      	add	r7, sp, #0
  return uwTick;
 8002cac:	4b03      	ldr	r3, [pc, #12]	; (8002cbc <HAL_GetTick+0x14>)
 8002cae:	681b      	ldr	r3, [r3, #0]
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	20000610 	.word	0x20000610

08002cc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b084      	sub	sp, #16
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002cc8:	f7ff ffee 	bl	8002ca8 <HAL_GetTick>
 8002ccc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cd8:	d004      	beq.n	8002ce4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cda:	4b09      	ldr	r3, [pc, #36]	; (8002d00 <HAL_Delay+0x40>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	68fa      	ldr	r2, [r7, #12]
 8002ce0:	4413      	add	r3, r2
 8002ce2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ce4:	bf00      	nop
 8002ce6:	f7ff ffdf 	bl	8002ca8 <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	68fa      	ldr	r2, [r7, #12]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d8f7      	bhi.n	8002ce6 <HAL_Delay+0x26>
  {
  }
}
 8002cf6:	bf00      	nop
 8002cf8:	bf00      	nop
 8002cfa:	3710      	adds	r7, #16
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	20000034 	.word	0x20000034

08002d04 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	431a      	orrs	r2, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	609a      	str	r2, [r3, #8]
}
 8002d1e:	bf00      	nop
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr

08002d2a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	b083      	sub	sp, #12
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
 8002d32:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	431a      	orrs	r2, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	609a      	str	r2, [r3, #8]
}
 8002d44:	bf00      	nop
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b087      	sub	sp, #28
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	607a      	str	r2, [r7, #4]
 8002d78:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	3360      	adds	r3, #96	; 0x60
 8002d7e:	461a      	mov	r2, r3
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	4413      	add	r3, r2
 8002d86:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	4b08      	ldr	r3, [pc, #32]	; (8002db0 <LL_ADC_SetOffset+0x44>)
 8002d8e:	4013      	ands	r3, r2
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002d96:	683a      	ldr	r2, [r7, #0]
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002da4:	bf00      	nop
 8002da6:	371c      	adds	r7, #28
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr
 8002db0:	03fff000 	.word	0x03fff000

08002db4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b085      	sub	sp, #20
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	3360      	adds	r3, #96	; 0x60
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	4413      	add	r3, r2
 8002dca:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3714      	adds	r7, #20
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b087      	sub	sp, #28
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	60b9      	str	r1, [r7, #8]
 8002dea:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	3360      	adds	r3, #96	; 0x60
 8002df0:	461a      	mov	r2, r3
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	4413      	add	r3, r2
 8002df8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	431a      	orrs	r2, r3
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002e0a:	bf00      	nop
 8002e0c:	371c      	adds	r7, #28
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr

08002e16 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002e16:	b480      	push	{r7}
 8002e18:	b087      	sub	sp, #28
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	60f8      	str	r0, [r7, #12]
 8002e1e:	60b9      	str	r1, [r7, #8]
 8002e20:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	3360      	adds	r3, #96	; 0x60
 8002e26:	461a      	mov	r2, r3
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	4413      	add	r3, r2
 8002e2e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	431a      	orrs	r2, r3
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002e40:	bf00      	nop
 8002e42:	371c      	adds	r7, #28
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr

08002e4c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b087      	sub	sp, #28
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	3360      	adds	r3, #96	; 0x60
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	4413      	add	r3, r2
 8002e64:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	431a      	orrs	r2, r3
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002e76:	bf00      	nop
 8002e78:	371c      	adds	r7, #28
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr

08002e82 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002e82:	b480      	push	{r7}
 8002e84:	b083      	sub	sp, #12
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
 8002e8a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	695b      	ldr	r3, [r3, #20]
 8002e90:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	431a      	orrs	r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	615a      	str	r2, [r3, #20]
}
 8002e9c:	bf00      	nop
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d101      	bne.n	8002ec0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e000      	b.n	8002ec2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	370c      	adds	r7, #12
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr

08002ece <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002ece:	b480      	push	{r7}
 8002ed0:	b087      	sub	sp, #28
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	60f8      	str	r0, [r7, #12]
 8002ed6:	60b9      	str	r1, [r7, #8]
 8002ed8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	3330      	adds	r3, #48	; 0x30
 8002ede:	461a      	mov	r2, r3
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	0a1b      	lsrs	r3, r3, #8
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	f003 030c 	and.w	r3, r3, #12
 8002eea:	4413      	add	r3, r2
 8002eec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	f003 031f 	and.w	r3, r3, #31
 8002ef8:	211f      	movs	r1, #31
 8002efa:	fa01 f303 	lsl.w	r3, r1, r3
 8002efe:	43db      	mvns	r3, r3
 8002f00:	401a      	ands	r2, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	0e9b      	lsrs	r3, r3, #26
 8002f06:	f003 011f 	and.w	r1, r3, #31
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	f003 031f 	and.w	r3, r3, #31
 8002f10:	fa01 f303 	lsl.w	r3, r1, r3
 8002f14:	431a      	orrs	r2, r3
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002f1a:	bf00      	nop
 8002f1c:	371c      	adds	r7, #28
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr

08002f26 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002f26:	b480      	push	{r7}
 8002f28:	b083      	sub	sp, #12
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f32:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d101      	bne.n	8002f3e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e000      	b.n	8002f40 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002f3e:	2300      	movs	r3, #0
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr

08002f4c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b087      	sub	sp, #28
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	3314      	adds	r3, #20
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	0e5b      	lsrs	r3, r3, #25
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	f003 0304 	and.w	r3, r3, #4
 8002f68:	4413      	add	r3, r2
 8002f6a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	0d1b      	lsrs	r3, r3, #20
 8002f74:	f003 031f 	and.w	r3, r3, #31
 8002f78:	2107      	movs	r1, #7
 8002f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f7e:	43db      	mvns	r3, r3
 8002f80:	401a      	ands	r2, r3
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	0d1b      	lsrs	r3, r3, #20
 8002f86:	f003 031f 	and.w	r3, r3, #31
 8002f8a:	6879      	ldr	r1, [r7, #4]
 8002f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f90:	431a      	orrs	r2, r3
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002f96:	bf00      	nop
 8002f98:	371c      	adds	r7, #28
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
	...

08002fa4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b085      	sub	sp, #20
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	4a0f      	ldr	r2, [pc, #60]	; (8002ff0 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d10a      	bne.n	8002fce <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fc4:	431a      	orrs	r2, r3
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8002fcc:	e00a      	b.n	8002fe4 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fda:	43db      	mvns	r3, r3
 8002fdc:	401a      	ands	r2, r3
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8002fe4:	bf00      	nop
 8002fe6:	3714      	adds	r7, #20
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr
 8002ff0:	407f0000 	.word	0x407f0000

08002ff4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	f003 031f 	and.w	r3, r3, #31
}
 8003004:	4618      	mov	r0, r3
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr

08003010 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8003020:	4618      	mov	r0, r3
 8003022:	370c      	adds	r7, #12
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr

0800302c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800303c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	6093      	str	r3, [r2, #8]
}
 8003044:	bf00      	nop
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003060:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003064:	d101      	bne.n	800306a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003066:	2301      	movs	r3, #1
 8003068:	e000      	b.n	800306c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800306a:	2300      	movs	r3, #0
}
 800306c:	4618      	mov	r0, r3
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr

08003078 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003088:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800308c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003094:	bf00      	nop
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80030b4:	d101      	bne.n	80030ba <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80030b6:	2301      	movs	r3, #1
 80030b8:	e000      	b.n	80030bc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80030ba:	2300      	movs	r3, #0
}
 80030bc:	4618      	mov	r0, r3
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80030d8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80030dc:	f043 0201 	orr.w	r2, r3, #1
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80030e4:	bf00      	nop
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003100:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003104:	f043 0202 	orr.w	r2, r3, #2
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800310c:	bf00      	nop
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	f003 0301 	and.w	r3, r3, #1
 8003128:	2b01      	cmp	r3, #1
 800312a:	d101      	bne.n	8003130 <LL_ADC_IsEnabled+0x18>
 800312c:	2301      	movs	r3, #1
 800312e:	e000      	b.n	8003132 <LL_ADC_IsEnabled+0x1a>
 8003130:	2300      	movs	r3, #0
}
 8003132:	4618      	mov	r0, r3
 8003134:	370c      	adds	r7, #12
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr

0800313e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800313e:	b480      	push	{r7}
 8003140:	b083      	sub	sp, #12
 8003142:	af00      	add	r7, sp, #0
 8003144:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	f003 0302 	and.w	r3, r3, #2
 800314e:	2b02      	cmp	r3, #2
 8003150:	d101      	bne.n	8003156 <LL_ADC_IsDisableOngoing+0x18>
 8003152:	2301      	movs	r3, #1
 8003154:	e000      	b.n	8003158 <LL_ADC_IsDisableOngoing+0x1a>
 8003156:	2300      	movs	r3, #0
}
 8003158:	4618      	mov	r0, r3
 800315a:	370c      	adds	r7, #12
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr

08003164 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003174:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003178:	f043 0204 	orr.w	r2, r3, #4
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003180:	bf00      	nop
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	f003 0304 	and.w	r3, r3, #4
 800319c:	2b04      	cmp	r3, #4
 800319e:	d101      	bne.n	80031a4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80031a0:	2301      	movs	r3, #1
 80031a2:	e000      	b.n	80031a6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr

080031b2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80031b2:	b480      	push	{r7}
 80031b4:	b083      	sub	sp, #12
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f003 0308 	and.w	r3, r3, #8
 80031c2:	2b08      	cmp	r3, #8
 80031c4:	d101      	bne.n	80031ca <LL_ADC_INJ_IsConversionOngoing+0x18>
 80031c6:	2301      	movs	r3, #1
 80031c8:	e000      	b.n	80031cc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80031ca:	2300      	movs	r3, #0
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	370c      	adds	r7, #12
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr

080031d8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80031d8:	b590      	push	{r4, r7, lr}
 80031da:	b089      	sub	sp, #36	; 0x24
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031e0:	2300      	movs	r3, #0
 80031e2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80031e4:	2300      	movs	r3, #0
 80031e6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d101      	bne.n	80031f2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e1af      	b.n	8003552 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	695b      	ldr	r3, [r3, #20]
 80031f6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d109      	bne.n	8003214 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f7fd ffab 	bl	800115c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4618      	mov	r0, r3
 800321a:	f7ff ff19 	bl	8003050 <LL_ADC_IsDeepPowerDownEnabled>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d004      	beq.n	800322e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4618      	mov	r0, r3
 800322a:	f7ff feff 	bl	800302c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4618      	mov	r0, r3
 8003234:	f7ff ff34 	bl	80030a0 <LL_ADC_IsInternalRegulatorEnabled>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d115      	bne.n	800326a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4618      	mov	r0, r3
 8003244:	f7ff ff18 	bl	8003078 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003248:	4b9f      	ldr	r3, [pc, #636]	; (80034c8 <HAL_ADC_Init+0x2f0>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	099b      	lsrs	r3, r3, #6
 800324e:	4a9f      	ldr	r2, [pc, #636]	; (80034cc <HAL_ADC_Init+0x2f4>)
 8003250:	fba2 2303 	umull	r2, r3, r2, r3
 8003254:	099b      	lsrs	r3, r3, #6
 8003256:	3301      	adds	r3, #1
 8003258:	005b      	lsls	r3, r3, #1
 800325a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800325c:	e002      	b.n	8003264 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	3b01      	subs	r3, #1
 8003262:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d1f9      	bne.n	800325e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4618      	mov	r0, r3
 8003270:	f7ff ff16 	bl	80030a0 <LL_ADC_IsInternalRegulatorEnabled>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d10d      	bne.n	8003296 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800327e:	f043 0210 	orr.w	r2, r3, #16
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800328a:	f043 0201 	orr.w	r2, r3, #1
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4618      	mov	r0, r3
 800329c:	f7ff ff76 	bl	800318c <LL_ADC_REG_IsConversionOngoing>
 80032a0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032a6:	f003 0310 	and.w	r3, r3, #16
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	f040 8148 	bne.w	8003540 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	f040 8144 	bne.w	8003540 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032bc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80032c0:	f043 0202 	orr.w	r2, r3, #2
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4618      	mov	r0, r3
 80032ce:	f7ff ff23 	bl	8003118 <LL_ADC_IsEnabled>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d141      	bne.n	800335c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032e0:	d004      	beq.n	80032ec <HAL_ADC_Init+0x114>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a7a      	ldr	r2, [pc, #488]	; (80034d0 <HAL_ADC_Init+0x2f8>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d10f      	bne.n	800330c <HAL_ADC_Init+0x134>
 80032ec:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80032f0:	f7ff ff12 	bl	8003118 <LL_ADC_IsEnabled>
 80032f4:	4604      	mov	r4, r0
 80032f6:	4876      	ldr	r0, [pc, #472]	; (80034d0 <HAL_ADC_Init+0x2f8>)
 80032f8:	f7ff ff0e 	bl	8003118 <LL_ADC_IsEnabled>
 80032fc:	4603      	mov	r3, r0
 80032fe:	4323      	orrs	r3, r4
 8003300:	2b00      	cmp	r3, #0
 8003302:	bf0c      	ite	eq
 8003304:	2301      	moveq	r3, #1
 8003306:	2300      	movne	r3, #0
 8003308:	b2db      	uxtb	r3, r3
 800330a:	e012      	b.n	8003332 <HAL_ADC_Init+0x15a>
 800330c:	4871      	ldr	r0, [pc, #452]	; (80034d4 <HAL_ADC_Init+0x2fc>)
 800330e:	f7ff ff03 	bl	8003118 <LL_ADC_IsEnabled>
 8003312:	4604      	mov	r4, r0
 8003314:	4870      	ldr	r0, [pc, #448]	; (80034d8 <HAL_ADC_Init+0x300>)
 8003316:	f7ff feff 	bl	8003118 <LL_ADC_IsEnabled>
 800331a:	4603      	mov	r3, r0
 800331c:	431c      	orrs	r4, r3
 800331e:	486f      	ldr	r0, [pc, #444]	; (80034dc <HAL_ADC_Init+0x304>)
 8003320:	f7ff fefa 	bl	8003118 <LL_ADC_IsEnabled>
 8003324:	4603      	mov	r3, r0
 8003326:	4323      	orrs	r3, r4
 8003328:	2b00      	cmp	r3, #0
 800332a:	bf0c      	ite	eq
 800332c:	2301      	moveq	r3, #1
 800332e:	2300      	movne	r3, #0
 8003330:	b2db      	uxtb	r3, r3
 8003332:	2b00      	cmp	r3, #0
 8003334:	d012      	beq.n	800335c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800333e:	d004      	beq.n	800334a <HAL_ADC_Init+0x172>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a62      	ldr	r2, [pc, #392]	; (80034d0 <HAL_ADC_Init+0x2f8>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d101      	bne.n	800334e <HAL_ADC_Init+0x176>
 800334a:	4a65      	ldr	r2, [pc, #404]	; (80034e0 <HAL_ADC_Init+0x308>)
 800334c:	e000      	b.n	8003350 <HAL_ADC_Init+0x178>
 800334e:	4a65      	ldr	r2, [pc, #404]	; (80034e4 <HAL_ADC_Init+0x30c>)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	4619      	mov	r1, r3
 8003356:	4610      	mov	r0, r2
 8003358:	f7ff fcd4 	bl	8002d04 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	7f5b      	ldrb	r3, [r3, #29]
 8003360:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003366:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800336c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003372:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800337a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800337c:	4313      	orrs	r3, r2
 800337e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003386:	2b01      	cmp	r3, #1
 8003388:	d106      	bne.n	8003398 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800338e:	3b01      	subs	r3, #1
 8003390:	045b      	lsls	r3, r3, #17
 8003392:	69ba      	ldr	r2, [r7, #24]
 8003394:	4313      	orrs	r3, r2
 8003396:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800339c:	2b00      	cmp	r3, #0
 800339e:	d009      	beq.n	80033b4 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a4:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ac:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80033ae:	69ba      	ldr	r2, [r7, #24]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	68da      	ldr	r2, [r3, #12]
 80033ba:	4b4b      	ldr	r3, [pc, #300]	; (80034e8 <HAL_ADC_Init+0x310>)
 80033bc:	4013      	ands	r3, r2
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	6812      	ldr	r2, [r2, #0]
 80033c2:	69b9      	ldr	r1, [r7, #24]
 80033c4:	430b      	orrs	r3, r1
 80033c6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	430a      	orrs	r2, r1
 80033dc:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4618      	mov	r0, r3
 80033e4:	f7ff fed2 	bl	800318c <LL_ADC_REG_IsConversionOngoing>
 80033e8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f7ff fedf 	bl	80031b2 <LL_ADC_INJ_IsConversionOngoing>
 80033f4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d17f      	bne.n	80034fc <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d17c      	bne.n	80034fc <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003406:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800340e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003410:	4313      	orrs	r3, r2
 8003412:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800341e:	f023 0302 	bic.w	r3, r3, #2
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	6812      	ldr	r2, [r2, #0]
 8003426:	69b9      	ldr	r1, [r7, #24]
 8003428:	430b      	orrs	r3, r1
 800342a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	691b      	ldr	r3, [r3, #16]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d017      	beq.n	8003464 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	691a      	ldr	r2, [r3, #16]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003442:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800344c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003450:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	6911      	ldr	r1, [r2, #16]
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	6812      	ldr	r2, [r2, #0]
 800345c:	430b      	orrs	r3, r1
 800345e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8003462:	e013      	b.n	800348c <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	691a      	ldr	r2, [r3, #16]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003472:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	6812      	ldr	r2, [r2, #0]
 8003480:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003484:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003488:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003492:	2b01      	cmp	r3, #1
 8003494:	d12a      	bne.n	80034ec <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	691b      	ldr	r3, [r3, #16]
 800349c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80034a0:	f023 0304 	bic.w	r3, r3, #4
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80034ac:	4311      	orrs	r1, r2
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80034b2:	4311      	orrs	r1, r2
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80034b8:	430a      	orrs	r2, r1
 80034ba:	431a      	orrs	r2, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f042 0201 	orr.w	r2, r2, #1
 80034c4:	611a      	str	r2, [r3, #16]
 80034c6:	e019      	b.n	80034fc <HAL_ADC_Init+0x324>
 80034c8:	2000002c 	.word	0x2000002c
 80034cc:	053e2d63 	.word	0x053e2d63
 80034d0:	50000100 	.word	0x50000100
 80034d4:	50000400 	.word	0x50000400
 80034d8:	50000500 	.word	0x50000500
 80034dc:	50000600 	.word	0x50000600
 80034e0:	50000300 	.word	0x50000300
 80034e4:	50000700 	.word	0x50000700
 80034e8:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	691a      	ldr	r2, [r3, #16]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f022 0201 	bic.w	r2, r2, #1
 80034fa:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	695b      	ldr	r3, [r3, #20]
 8003500:	2b01      	cmp	r3, #1
 8003502:	d10c      	bne.n	800351e <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350a:	f023 010f 	bic.w	r1, r3, #15
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a1b      	ldr	r3, [r3, #32]
 8003512:	1e5a      	subs	r2, r3, #1
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	430a      	orrs	r2, r1
 800351a:	631a      	str	r2, [r3, #48]	; 0x30
 800351c:	e007      	b.n	800352e <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f022 020f 	bic.w	r2, r2, #15
 800352c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003532:	f023 0303 	bic.w	r3, r3, #3
 8003536:	f043 0201 	orr.w	r2, r3, #1
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	65da      	str	r2, [r3, #92]	; 0x5c
 800353e:	e007      	b.n	8003550 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003544:	f043 0210 	orr.w	r2, r3, #16
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003550:	7ffb      	ldrb	r3, [r7, #31]
}
 8003552:	4618      	mov	r0, r3
 8003554:	3724      	adds	r7, #36	; 0x24
 8003556:	46bd      	mov	sp, r7
 8003558:	bd90      	pop	{r4, r7, pc}
 800355a:	bf00      	nop

0800355c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b086      	sub	sp, #24
 8003560:	af00      	add	r7, sp, #0
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	60b9      	str	r1, [r7, #8]
 8003566:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003570:	d004      	beq.n	800357c <HAL_ADC_Start_DMA+0x20>
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a5a      	ldr	r2, [pc, #360]	; (80036e0 <HAL_ADC_Start_DMA+0x184>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d101      	bne.n	8003580 <HAL_ADC_Start_DMA+0x24>
 800357c:	4b59      	ldr	r3, [pc, #356]	; (80036e4 <HAL_ADC_Start_DMA+0x188>)
 800357e:	e000      	b.n	8003582 <HAL_ADC_Start_DMA+0x26>
 8003580:	4b59      	ldr	r3, [pc, #356]	; (80036e8 <HAL_ADC_Start_DMA+0x18c>)
 8003582:	4618      	mov	r0, r3
 8003584:	f7ff fd36 	bl	8002ff4 <LL_ADC_GetMultimode>
 8003588:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4618      	mov	r0, r3
 8003590:	f7ff fdfc 	bl	800318c <LL_ADC_REG_IsConversionOngoing>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	f040 809b 	bne.w	80036d2 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d101      	bne.n	80035aa <HAL_ADC_Start_DMA+0x4e>
 80035a6:	2302      	movs	r3, #2
 80035a8:	e096      	b.n	80036d8 <HAL_ADC_Start_DMA+0x17c>
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2201      	movs	r2, #1
 80035ae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a4d      	ldr	r2, [pc, #308]	; (80036ec <HAL_ADC_Start_DMA+0x190>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d008      	beq.n	80035ce <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d005      	beq.n	80035ce <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	2b05      	cmp	r3, #5
 80035c6:	d002      	beq.n	80035ce <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	2b09      	cmp	r3, #9
 80035cc:	d17a      	bne.n	80036c4 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80035ce:	68f8      	ldr	r0, [r7, #12]
 80035d0:	f000 ff56 	bl	8004480 <ADC_Enable>
 80035d4:	4603      	mov	r3, r0
 80035d6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80035d8:	7dfb      	ldrb	r3, [r7, #23]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d16d      	bne.n	80036ba <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035e2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80035e6:	f023 0301 	bic.w	r3, r3, #1
 80035ea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a3a      	ldr	r2, [pc, #232]	; (80036e0 <HAL_ADC_Start_DMA+0x184>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d009      	beq.n	8003610 <HAL_ADC_Start_DMA+0xb4>
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a3b      	ldr	r2, [pc, #236]	; (80036f0 <HAL_ADC_Start_DMA+0x194>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d002      	beq.n	800360c <HAL_ADC_Start_DMA+0xb0>
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	e003      	b.n	8003614 <HAL_ADC_Start_DMA+0xb8>
 800360c:	4b39      	ldr	r3, [pc, #228]	; (80036f4 <HAL_ADC_Start_DMA+0x198>)
 800360e:	e001      	b.n	8003614 <HAL_ADC_Start_DMA+0xb8>
 8003610:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003614:	68fa      	ldr	r2, [r7, #12]
 8003616:	6812      	ldr	r2, [r2, #0]
 8003618:	4293      	cmp	r3, r2
 800361a:	d002      	beq.n	8003622 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d105      	bne.n	800362e <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003626:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003632:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d006      	beq.n	8003648 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800363e:	f023 0206 	bic.w	r2, r3, #6
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	661a      	str	r2, [r3, #96]	; 0x60
 8003646:	e002      	b.n	800364e <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2200      	movs	r2, #0
 800364c:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003652:	4a29      	ldr	r2, [pc, #164]	; (80036f8 <HAL_ADC_Start_DMA+0x19c>)
 8003654:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800365a:	4a28      	ldr	r2, [pc, #160]	; (80036fc <HAL_ADC_Start_DMA+0x1a0>)
 800365c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003662:	4a27      	ldr	r2, [pc, #156]	; (8003700 <HAL_ADC_Start_DMA+0x1a4>)
 8003664:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	221c      	movs	r2, #28
 800366c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	685a      	ldr	r2, [r3, #4]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f042 0210 	orr.w	r2, r2, #16
 8003684:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	68da      	ldr	r2, [r3, #12]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f042 0201 	orr.w	r2, r2, #1
 8003694:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	3340      	adds	r3, #64	; 0x40
 80036a0:	4619      	mov	r1, r3
 80036a2:	68ba      	ldr	r2, [r7, #8]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f001 fbb7 	bl	8004e18 <HAL_DMA_Start_IT>
 80036aa:	4603      	mov	r3, r0
 80036ac:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4618      	mov	r0, r3
 80036b4:	f7ff fd56 	bl	8003164 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80036b8:	e00d      	b.n	80036d6 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 80036c2:	e008      	b.n	80036d6 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80036d0:	e001      	b.n	80036d6 <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80036d2:	2302      	movs	r3, #2
 80036d4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80036d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3718      	adds	r7, #24
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	50000100 	.word	0x50000100
 80036e4:	50000300 	.word	0x50000300
 80036e8:	50000700 	.word	0x50000700
 80036ec:	50000600 	.word	0x50000600
 80036f0:	50000500 	.word	0x50000500
 80036f4:	50000400 	.word	0x50000400
 80036f8:	08004603 	.word	0x08004603
 80036fc:	080046db 	.word	0x080046db
 8003700:	080046f7 	.word	0x080046f7

08003704 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b08a      	sub	sp, #40	; 0x28
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800370c:	2300      	movs	r3, #0
 800370e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003728:	d004      	beq.n	8003734 <HAL_ADC_IRQHandler+0x30>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a8e      	ldr	r2, [pc, #568]	; (8003968 <HAL_ADC_IRQHandler+0x264>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d101      	bne.n	8003738 <HAL_ADC_IRQHandler+0x34>
 8003734:	4b8d      	ldr	r3, [pc, #564]	; (800396c <HAL_ADC_IRQHandler+0x268>)
 8003736:	e000      	b.n	800373a <HAL_ADC_IRQHandler+0x36>
 8003738:	4b8d      	ldr	r3, [pc, #564]	; (8003970 <HAL_ADC_IRQHandler+0x26c>)
 800373a:	4618      	mov	r0, r3
 800373c:	f7ff fc5a 	bl	8002ff4 <LL_ADC_GetMultimode>
 8003740:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	f003 0302 	and.w	r3, r3, #2
 8003748:	2b00      	cmp	r3, #0
 800374a:	d017      	beq.n	800377c <HAL_ADC_IRQHandler+0x78>
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	f003 0302 	and.w	r3, r3, #2
 8003752:	2b00      	cmp	r3, #0
 8003754:	d012      	beq.n	800377c <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800375a:	f003 0310 	and.w	r3, r3, #16
 800375e:	2b00      	cmp	r3, #0
 8003760:	d105      	bne.n	800376e <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003766:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f001 f8b8 	bl	80048e4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	2202      	movs	r2, #2
 800377a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	f003 0304 	and.w	r3, r3, #4
 8003782:	2b00      	cmp	r3, #0
 8003784:	d004      	beq.n	8003790 <HAL_ADC_IRQHandler+0x8c>
 8003786:	69bb      	ldr	r3, [r7, #24]
 8003788:	f003 0304 	and.w	r3, r3, #4
 800378c:	2b00      	cmp	r3, #0
 800378e:	d10b      	bne.n	80037a8 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003796:	2b00      	cmp	r3, #0
 8003798:	f000 8094 	beq.w	80038c4 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	f003 0308 	and.w	r3, r3, #8
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	f000 808e 	beq.w	80038c4 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ac:	f003 0310 	and.w	r3, r3, #16
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d105      	bne.n	80037c0 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037b8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4618      	mov	r0, r3
 80037c6:	f7ff fb6f 	bl	8002ea8 <LL_ADC_REG_IsTriggerSourceSWStart>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d072      	beq.n	80038b6 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a64      	ldr	r2, [pc, #400]	; (8003968 <HAL_ADC_IRQHandler+0x264>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d009      	beq.n	80037ee <HAL_ADC_IRQHandler+0xea>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a65      	ldr	r2, [pc, #404]	; (8003974 <HAL_ADC_IRQHandler+0x270>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d002      	beq.n	80037ea <HAL_ADC_IRQHandler+0xe6>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	e003      	b.n	80037f2 <HAL_ADC_IRQHandler+0xee>
 80037ea:	4b63      	ldr	r3, [pc, #396]	; (8003978 <HAL_ADC_IRQHandler+0x274>)
 80037ec:	e001      	b.n	80037f2 <HAL_ADC_IRQHandler+0xee>
 80037ee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	6812      	ldr	r2, [r2, #0]
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d008      	beq.n	800380c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d005      	beq.n	800380c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	2b05      	cmp	r3, #5
 8003804:	d002      	beq.n	800380c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	2b09      	cmp	r3, #9
 800380a:	d104      	bne.n	8003816 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	623b      	str	r3, [r7, #32]
 8003814:	e014      	b.n	8003840 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a53      	ldr	r2, [pc, #332]	; (8003968 <HAL_ADC_IRQHandler+0x264>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d009      	beq.n	8003834 <HAL_ADC_IRQHandler+0x130>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a53      	ldr	r2, [pc, #332]	; (8003974 <HAL_ADC_IRQHandler+0x270>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d002      	beq.n	8003830 <HAL_ADC_IRQHandler+0x12c>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	e003      	b.n	8003838 <HAL_ADC_IRQHandler+0x134>
 8003830:	4b51      	ldr	r3, [pc, #324]	; (8003978 <HAL_ADC_IRQHandler+0x274>)
 8003832:	e001      	b.n	8003838 <HAL_ADC_IRQHandler+0x134>
 8003834:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003838:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003840:	6a3b      	ldr	r3, [r7, #32]
 8003842:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d135      	bne.n	80038b6 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0308 	and.w	r3, r3, #8
 8003854:	2b08      	cmp	r3, #8
 8003856:	d12e      	bne.n	80038b6 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4618      	mov	r0, r3
 800385e:	f7ff fc95 	bl	800318c <LL_ADC_REG_IsConversionOngoing>
 8003862:	4603      	mov	r3, r0
 8003864:	2b00      	cmp	r3, #0
 8003866:	d11a      	bne.n	800389e <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	685a      	ldr	r2, [r3, #4]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f022 020c 	bic.w	r2, r2, #12
 8003876:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800387c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003888:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d112      	bne.n	80038b6 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003894:	f043 0201 	orr.w	r2, r3, #1
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	65da      	str	r2, [r3, #92]	; 0x5c
 800389c:	e00b      	b.n	80038b6 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038a2:	f043 0210 	orr.w	r2, r3, #16
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038ae:	f043 0201 	orr.w	r2, r3, #1
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f7fe f854 	bl	8001964 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	220c      	movs	r2, #12
 80038c2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	f003 0320 	and.w	r3, r3, #32
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d004      	beq.n	80038d8 <HAL_ADC_IRQHandler+0x1d4>
 80038ce:	69bb      	ldr	r3, [r7, #24]
 80038d0:	f003 0320 	and.w	r3, r3, #32
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d10b      	bne.n	80038f0 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80038de:	2b00      	cmp	r3, #0
 80038e0:	f000 80b3 	beq.w	8003a4a <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	f000 80ad 	beq.w	8003a4a <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038f4:	f003 0310 	and.w	r3, r3, #16
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d105      	bne.n	8003908 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003900:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4618      	mov	r0, r3
 800390e:	f7ff fb0a 	bl	8002f26 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003912:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4618      	mov	r0, r3
 800391a:	f7ff fac5 	bl	8002ea8 <LL_ADC_REG_IsTriggerSourceSWStart>
 800391e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a10      	ldr	r2, [pc, #64]	; (8003968 <HAL_ADC_IRQHandler+0x264>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d009      	beq.n	800393e <HAL_ADC_IRQHandler+0x23a>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a11      	ldr	r2, [pc, #68]	; (8003974 <HAL_ADC_IRQHandler+0x270>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d002      	beq.n	800393a <HAL_ADC_IRQHandler+0x236>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	e003      	b.n	8003942 <HAL_ADC_IRQHandler+0x23e>
 800393a:	4b0f      	ldr	r3, [pc, #60]	; (8003978 <HAL_ADC_IRQHandler+0x274>)
 800393c:	e001      	b.n	8003942 <HAL_ADC_IRQHandler+0x23e>
 800393e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	6812      	ldr	r2, [r2, #0]
 8003946:	4293      	cmp	r3, r2
 8003948:	d008      	beq.n	800395c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d005      	beq.n	800395c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	2b06      	cmp	r3, #6
 8003954:	d002      	beq.n	800395c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	2b07      	cmp	r3, #7
 800395a:	d10f      	bne.n	800397c <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	623b      	str	r3, [r7, #32]
 8003964:	e01f      	b.n	80039a6 <HAL_ADC_IRQHandler+0x2a2>
 8003966:	bf00      	nop
 8003968:	50000100 	.word	0x50000100
 800396c:	50000300 	.word	0x50000300
 8003970:	50000700 	.word	0x50000700
 8003974:	50000500 	.word	0x50000500
 8003978:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a8b      	ldr	r2, [pc, #556]	; (8003bb0 <HAL_ADC_IRQHandler+0x4ac>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d009      	beq.n	800399a <HAL_ADC_IRQHandler+0x296>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a8a      	ldr	r2, [pc, #552]	; (8003bb4 <HAL_ADC_IRQHandler+0x4b0>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d002      	beq.n	8003996 <HAL_ADC_IRQHandler+0x292>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	e003      	b.n	800399e <HAL_ADC_IRQHandler+0x29a>
 8003996:	4b88      	ldr	r3, [pc, #544]	; (8003bb8 <HAL_ADC_IRQHandler+0x4b4>)
 8003998:	e001      	b.n	800399e <HAL_ADC_IRQHandler+0x29a>
 800399a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800399e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d047      	beq.n	8003a3c <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80039ac:	6a3b      	ldr	r3, [r7, #32]
 80039ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d007      	beq.n	80039c6 <HAL_ADC_IRQHandler+0x2c2>
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d03f      	beq.n	8003a3c <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80039bc:	6a3b      	ldr	r3, [r7, #32]
 80039be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d13a      	bne.n	8003a3c <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039d0:	2b40      	cmp	r3, #64	; 0x40
 80039d2:	d133      	bne.n	8003a3c <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80039d4:	6a3b      	ldr	r3, [r7, #32]
 80039d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d12e      	bne.n	8003a3c <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4618      	mov	r0, r3
 80039e4:	f7ff fbe5 	bl	80031b2 <LL_ADC_INJ_IsConversionOngoing>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d11a      	bne.n	8003a24 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	685a      	ldr	r2, [r3, #4]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039fc:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a02:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d112      	bne.n	8003a3c <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a1a:	f043 0201 	orr.w	r2, r3, #1
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	65da      	str	r2, [r3, #92]	; 0x5c
 8003a22:	e00b      	b.n	8003a3c <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a28:	f043 0210 	orr.w	r2, r3, #16
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a34:	f043 0201 	orr.w	r2, r3, #1
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f000 ff29 	bl	8004894 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2260      	movs	r2, #96	; 0x60
 8003a48:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d011      	beq.n	8003a78 <HAL_ADC_IRQHandler+0x374>
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d00c      	beq.n	8003a78 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a62:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f000 f8b4 	bl	8003bd8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2280      	movs	r2, #128	; 0x80
 8003a76:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d012      	beq.n	8003aa8 <HAL_ADC_IRQHandler+0x3a4>
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d00d      	beq.n	8003aa8 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a90:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f000 ff0f 	bl	80048bc <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003aa6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d012      	beq.n	8003ad8 <HAL_ADC_IRQHandler+0x3d4>
 8003ab2:	69bb      	ldr	r3, [r7, #24]
 8003ab4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d00d      	beq.n	8003ad8 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ac0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f000 ff01 	bl	80048d0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ad6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	f003 0310 	and.w	r3, r3, #16
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d043      	beq.n	8003b6a <HAL_ADC_IRQHandler+0x466>
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	f003 0310 	and.w	r3, r3, #16
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d03e      	beq.n	8003b6a <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d102      	bne.n	8003afa <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8003af4:	2301      	movs	r3, #1
 8003af6:	627b      	str	r3, [r7, #36]	; 0x24
 8003af8:	e021      	b.n	8003b3e <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d015      	beq.n	8003b2c <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b08:	d004      	beq.n	8003b14 <HAL_ADC_IRQHandler+0x410>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a28      	ldr	r2, [pc, #160]	; (8003bb0 <HAL_ADC_IRQHandler+0x4ac>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d101      	bne.n	8003b18 <HAL_ADC_IRQHandler+0x414>
 8003b14:	4b29      	ldr	r3, [pc, #164]	; (8003bbc <HAL_ADC_IRQHandler+0x4b8>)
 8003b16:	e000      	b.n	8003b1a <HAL_ADC_IRQHandler+0x416>
 8003b18:	4b29      	ldr	r3, [pc, #164]	; (8003bc0 <HAL_ADC_IRQHandler+0x4bc>)
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f7ff fa78 	bl	8003010 <LL_ADC_GetMultiDMATransfer>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d00b      	beq.n	8003b3e <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8003b26:	2301      	movs	r3, #1
 8003b28:	627b      	str	r3, [r7, #36]	; 0x24
 8003b2a:	e008      	b.n	8003b3e <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	f003 0301 	and.w	r3, r3, #1
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d001      	beq.n	8003b3e <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d10e      	bne.n	8003b62 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b48:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b54:	f043 0202 	orr.w	r2, r3, #2
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f000 f845 	bl	8003bec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	2210      	movs	r2, #16
 8003b68:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d018      	beq.n	8003ba6 <HAL_ADC_IRQHandler+0x4a2>
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d013      	beq.n	8003ba6 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b82:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b8e:	f043 0208 	orr.w	r2, r3, #8
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b9e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f000 fe81 	bl	80048a8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003ba6:	bf00      	nop
 8003ba8:	3728      	adds	r7, #40	; 0x28
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	50000100 	.word	0x50000100
 8003bb4:	50000500 	.word	0x50000500
 8003bb8:	50000400 	.word	0x50000400
 8003bbc:	50000300 	.word	0x50000300
 8003bc0:	50000700 	.word	0x50000700

08003bc4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003bcc:	bf00      	nop
 8003bce:	370c      	adds	r7, #12
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003be0:	bf00      	nop
 8003be2:	370c      	adds	r7, #12
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003bf4:	bf00      	nop
 8003bf6:	370c      	adds	r7, #12
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr

08003c00 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b0b6      	sub	sp, #216	; 0xd8
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003c10:	2300      	movs	r3, #0
 8003c12:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d102      	bne.n	8003c24 <HAL_ADC_ConfigChannel+0x24>
 8003c1e:	2302      	movs	r3, #2
 8003c20:	f000 bc13 	b.w	800444a <HAL_ADC_ConfigChannel+0x84a>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4618      	mov	r0, r3
 8003c32:	f7ff faab 	bl	800318c <LL_ADC_REG_IsConversionOngoing>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	f040 83f3 	bne.w	8004424 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6818      	ldr	r0, [r3, #0]
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	6859      	ldr	r1, [r3, #4]
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	f7ff f93f 	bl	8002ece <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4618      	mov	r0, r3
 8003c56:	f7ff fa99 	bl	800318c <LL_ADC_REG_IsConversionOngoing>
 8003c5a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4618      	mov	r0, r3
 8003c64:	f7ff faa5 	bl	80031b2 <LL_ADC_INJ_IsConversionOngoing>
 8003c68:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003c6c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	f040 81d9 	bne.w	8004028 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003c76:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	f040 81d4 	bne.w	8004028 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c88:	d10f      	bne.n	8003caa <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6818      	ldr	r0, [r3, #0]
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	2200      	movs	r2, #0
 8003c94:	4619      	mov	r1, r3
 8003c96:	f7ff f959 	bl	8002f4c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f7ff f8ed 	bl	8002e82 <LL_ADC_SetSamplingTimeCommonConfig>
 8003ca8:	e00e      	b.n	8003cc8 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6818      	ldr	r0, [r3, #0]
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	6819      	ldr	r1, [r3, #0]
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	f7ff f948 	bl	8002f4c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	2100      	movs	r1, #0
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f7ff f8dd 	bl	8002e82 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	695a      	ldr	r2, [r3, #20]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	08db      	lsrs	r3, r3, #3
 8003cd4:	f003 0303 	and.w	r3, r3, #3
 8003cd8:	005b      	lsls	r3, r3, #1
 8003cda:	fa02 f303 	lsl.w	r3, r2, r3
 8003cde:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	691b      	ldr	r3, [r3, #16]
 8003ce6:	2b04      	cmp	r3, #4
 8003ce8:	d022      	beq.n	8003d30 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6818      	ldr	r0, [r3, #0]
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	6919      	ldr	r1, [r3, #16]
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003cfa:	f7ff f837 	bl	8002d6c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6818      	ldr	r0, [r3, #0]
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	6919      	ldr	r1, [r3, #16]
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	699b      	ldr	r3, [r3, #24]
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	f7ff f883 	bl	8002e16 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6818      	ldr	r0, [r3, #0]
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	6919      	ldr	r1, [r3, #16]
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	7f1b      	ldrb	r3, [r3, #28]
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d102      	bne.n	8003d26 <HAL_ADC_ConfigChannel+0x126>
 8003d20:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d24:	e000      	b.n	8003d28 <HAL_ADC_ConfigChannel+0x128>
 8003d26:	2300      	movs	r3, #0
 8003d28:	461a      	mov	r2, r3
 8003d2a:	f7ff f88f 	bl	8002e4c <LL_ADC_SetOffsetSaturation>
 8003d2e:	e17b      	b.n	8004028 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	2100      	movs	r1, #0
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7ff f83c 	bl	8002db4 <LL_ADC_GetOffsetChannel>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d10a      	bne.n	8003d5c <HAL_ADC_ConfigChannel+0x15c>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	2100      	movs	r1, #0
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f7ff f831 	bl	8002db4 <LL_ADC_GetOffsetChannel>
 8003d52:	4603      	mov	r3, r0
 8003d54:	0e9b      	lsrs	r3, r3, #26
 8003d56:	f003 021f 	and.w	r2, r3, #31
 8003d5a:	e01e      	b.n	8003d9a <HAL_ADC_ConfigChannel+0x19a>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2100      	movs	r1, #0
 8003d62:	4618      	mov	r0, r3
 8003d64:	f7ff f826 	bl	8002db4 <LL_ADC_GetOffsetChannel>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d6e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003d72:	fa93 f3a3 	rbit	r3, r3
 8003d76:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003d7a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003d7e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003d82:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d101      	bne.n	8003d8e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003d8a:	2320      	movs	r3, #32
 8003d8c:	e004      	b.n	8003d98 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003d8e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003d92:	fab3 f383 	clz	r3, r3
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d105      	bne.n	8003db2 <HAL_ADC_ConfigChannel+0x1b2>
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	0e9b      	lsrs	r3, r3, #26
 8003dac:	f003 031f 	and.w	r3, r3, #31
 8003db0:	e018      	b.n	8003de4 <HAL_ADC_ConfigChannel+0x1e4>
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003dbe:	fa93 f3a3 	rbit	r3, r3
 8003dc2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003dc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003dca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003dce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d101      	bne.n	8003dda <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003dd6:	2320      	movs	r3, #32
 8003dd8:	e004      	b.n	8003de4 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003dda:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003dde:	fab3 f383 	clz	r3, r3
 8003de2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d106      	bne.n	8003df6 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	2200      	movs	r2, #0
 8003dee:	2100      	movs	r1, #0
 8003df0:	4618      	mov	r0, r3
 8003df2:	f7fe fff5 	bl	8002de0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	2101      	movs	r1, #1
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7fe ffd9 	bl	8002db4 <LL_ADC_GetOffsetChannel>
 8003e02:	4603      	mov	r3, r0
 8003e04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d10a      	bne.n	8003e22 <HAL_ADC_ConfigChannel+0x222>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2101      	movs	r1, #1
 8003e12:	4618      	mov	r0, r3
 8003e14:	f7fe ffce 	bl	8002db4 <LL_ADC_GetOffsetChannel>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	0e9b      	lsrs	r3, r3, #26
 8003e1c:	f003 021f 	and.w	r2, r3, #31
 8003e20:	e01e      	b.n	8003e60 <HAL_ADC_ConfigChannel+0x260>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2101      	movs	r1, #1
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f7fe ffc3 	bl	8002db4 <LL_ADC_GetOffsetChannel>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e34:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003e38:	fa93 f3a3 	rbit	r3, r3
 8003e3c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003e40:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003e44:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003e48:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d101      	bne.n	8003e54 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003e50:	2320      	movs	r3, #32
 8003e52:	e004      	b.n	8003e5e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003e54:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003e58:	fab3 f383 	clz	r3, r3
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d105      	bne.n	8003e78 <HAL_ADC_ConfigChannel+0x278>
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	0e9b      	lsrs	r3, r3, #26
 8003e72:	f003 031f 	and.w	r3, r3, #31
 8003e76:	e018      	b.n	8003eaa <HAL_ADC_ConfigChannel+0x2aa>
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e80:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003e84:	fa93 f3a3 	rbit	r3, r3
 8003e88:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003e8c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003e90:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003e94:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d101      	bne.n	8003ea0 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003e9c:	2320      	movs	r3, #32
 8003e9e:	e004      	b.n	8003eaa <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003ea0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003ea4:	fab3 f383 	clz	r3, r3
 8003ea8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d106      	bne.n	8003ebc <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	2101      	movs	r1, #1
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f7fe ff92 	bl	8002de0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	2102      	movs	r1, #2
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f7fe ff76 	bl	8002db4 <LL_ADC_GetOffsetChannel>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d10a      	bne.n	8003ee8 <HAL_ADC_ConfigChannel+0x2e8>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2102      	movs	r1, #2
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f7fe ff6b 	bl	8002db4 <LL_ADC_GetOffsetChannel>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	0e9b      	lsrs	r3, r3, #26
 8003ee2:	f003 021f 	and.w	r2, r3, #31
 8003ee6:	e01e      	b.n	8003f26 <HAL_ADC_ConfigChannel+0x326>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2102      	movs	r1, #2
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f7fe ff60 	bl	8002db4 <LL_ADC_GetOffsetChannel>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003efa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003efe:	fa93 f3a3 	rbit	r3, r3
 8003f02:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003f06:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003f0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003f0e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d101      	bne.n	8003f1a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003f16:	2320      	movs	r3, #32
 8003f18:	e004      	b.n	8003f24 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003f1a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003f1e:	fab3 f383 	clz	r3, r3
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d105      	bne.n	8003f3e <HAL_ADC_ConfigChannel+0x33e>
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	0e9b      	lsrs	r3, r3, #26
 8003f38:	f003 031f 	and.w	r3, r3, #31
 8003f3c:	e016      	b.n	8003f6c <HAL_ADC_ConfigChannel+0x36c>
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f46:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003f4a:	fa93 f3a3 	rbit	r3, r3
 8003f4e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003f50:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003f52:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003f56:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d101      	bne.n	8003f62 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003f5e:	2320      	movs	r3, #32
 8003f60:	e004      	b.n	8003f6c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003f62:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f66:	fab3 f383 	clz	r3, r3
 8003f6a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d106      	bne.n	8003f7e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2200      	movs	r2, #0
 8003f76:	2102      	movs	r1, #2
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f7fe ff31 	bl	8002de0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	2103      	movs	r1, #3
 8003f84:	4618      	mov	r0, r3
 8003f86:	f7fe ff15 	bl	8002db4 <LL_ADC_GetOffsetChannel>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d10a      	bne.n	8003faa <HAL_ADC_ConfigChannel+0x3aa>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2103      	movs	r1, #3
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f7fe ff0a 	bl	8002db4 <LL_ADC_GetOffsetChannel>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	0e9b      	lsrs	r3, r3, #26
 8003fa4:	f003 021f 	and.w	r2, r3, #31
 8003fa8:	e017      	b.n	8003fda <HAL_ADC_ConfigChannel+0x3da>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	2103      	movs	r1, #3
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f7fe feff 	bl	8002db4 <LL_ADC_GetOffsetChannel>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fbc:	fa93 f3a3 	rbit	r3, r3
 8003fc0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003fc2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003fc4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003fc6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d101      	bne.n	8003fd0 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003fcc:	2320      	movs	r3, #32
 8003fce:	e003      	b.n	8003fd8 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003fd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fd2:	fab3 f383 	clz	r3, r3
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d105      	bne.n	8003ff2 <HAL_ADC_ConfigChannel+0x3f2>
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	0e9b      	lsrs	r3, r3, #26
 8003fec:	f003 031f 	and.w	r3, r3, #31
 8003ff0:	e011      	b.n	8004016 <HAL_ADC_ConfigChannel+0x416>
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ff8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ffa:	fa93 f3a3 	rbit	r3, r3
 8003ffe:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004000:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004002:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004004:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004006:	2b00      	cmp	r3, #0
 8004008:	d101      	bne.n	800400e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800400a:	2320      	movs	r3, #32
 800400c:	e003      	b.n	8004016 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800400e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004010:	fab3 f383 	clz	r3, r3
 8004014:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004016:	429a      	cmp	r2, r3
 8004018:	d106      	bne.n	8004028 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	2200      	movs	r2, #0
 8004020:	2103      	movs	r1, #3
 8004022:	4618      	mov	r0, r3
 8004024:	f7fe fedc 	bl	8002de0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4618      	mov	r0, r3
 800402e:	f7ff f873 	bl	8003118 <LL_ADC_IsEnabled>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	f040 813d 	bne.w	80042b4 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6818      	ldr	r0, [r3, #0]
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	6819      	ldr	r1, [r3, #0]
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	461a      	mov	r2, r3
 8004048:	f7fe ffac 	bl	8002fa4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	4aa2      	ldr	r2, [pc, #648]	; (80042dc <HAL_ADC_ConfigChannel+0x6dc>)
 8004052:	4293      	cmp	r3, r2
 8004054:	f040 812e 	bne.w	80042b4 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004064:	2b00      	cmp	r3, #0
 8004066:	d10b      	bne.n	8004080 <HAL_ADC_ConfigChannel+0x480>
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	0e9b      	lsrs	r3, r3, #26
 800406e:	3301      	adds	r3, #1
 8004070:	f003 031f 	and.w	r3, r3, #31
 8004074:	2b09      	cmp	r3, #9
 8004076:	bf94      	ite	ls
 8004078:	2301      	movls	r3, #1
 800407a:	2300      	movhi	r3, #0
 800407c:	b2db      	uxtb	r3, r3
 800407e:	e019      	b.n	80040b4 <HAL_ADC_ConfigChannel+0x4b4>
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004086:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004088:	fa93 f3a3 	rbit	r3, r3
 800408c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800408e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004090:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8004092:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004094:	2b00      	cmp	r3, #0
 8004096:	d101      	bne.n	800409c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004098:	2320      	movs	r3, #32
 800409a:	e003      	b.n	80040a4 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800409c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800409e:	fab3 f383 	clz	r3, r3
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	3301      	adds	r3, #1
 80040a6:	f003 031f 	and.w	r3, r3, #31
 80040aa:	2b09      	cmp	r3, #9
 80040ac:	bf94      	ite	ls
 80040ae:	2301      	movls	r3, #1
 80040b0:	2300      	movhi	r3, #0
 80040b2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d079      	beq.n	80041ac <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d107      	bne.n	80040d4 <HAL_ADC_ConfigChannel+0x4d4>
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	0e9b      	lsrs	r3, r3, #26
 80040ca:	3301      	adds	r3, #1
 80040cc:	069b      	lsls	r3, r3, #26
 80040ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80040d2:	e015      	b.n	8004100 <HAL_ADC_ConfigChannel+0x500>
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040dc:	fa93 f3a3 	rbit	r3, r3
 80040e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80040e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040e4:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80040e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d101      	bne.n	80040f0 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80040ec:	2320      	movs	r3, #32
 80040ee:	e003      	b.n	80040f8 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80040f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040f2:	fab3 f383 	clz	r3, r3
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	3301      	adds	r3, #1
 80040fa:	069b      	lsls	r3, r3, #26
 80040fc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004108:	2b00      	cmp	r3, #0
 800410a:	d109      	bne.n	8004120 <HAL_ADC_ConfigChannel+0x520>
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	0e9b      	lsrs	r3, r3, #26
 8004112:	3301      	adds	r3, #1
 8004114:	f003 031f 	and.w	r3, r3, #31
 8004118:	2101      	movs	r1, #1
 800411a:	fa01 f303 	lsl.w	r3, r1, r3
 800411e:	e017      	b.n	8004150 <HAL_ADC_ConfigChannel+0x550>
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004126:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004128:	fa93 f3a3 	rbit	r3, r3
 800412c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800412e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004130:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8004132:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004134:	2b00      	cmp	r3, #0
 8004136:	d101      	bne.n	800413c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8004138:	2320      	movs	r3, #32
 800413a:	e003      	b.n	8004144 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800413c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800413e:	fab3 f383 	clz	r3, r3
 8004142:	b2db      	uxtb	r3, r3
 8004144:	3301      	adds	r3, #1
 8004146:	f003 031f 	and.w	r3, r3, #31
 800414a:	2101      	movs	r1, #1
 800414c:	fa01 f303 	lsl.w	r3, r1, r3
 8004150:	ea42 0103 	orr.w	r1, r2, r3
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800415c:	2b00      	cmp	r3, #0
 800415e:	d10a      	bne.n	8004176 <HAL_ADC_ConfigChannel+0x576>
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	0e9b      	lsrs	r3, r3, #26
 8004166:	3301      	adds	r3, #1
 8004168:	f003 021f 	and.w	r2, r3, #31
 800416c:	4613      	mov	r3, r2
 800416e:	005b      	lsls	r3, r3, #1
 8004170:	4413      	add	r3, r2
 8004172:	051b      	lsls	r3, r3, #20
 8004174:	e018      	b.n	80041a8 <HAL_ADC_ConfigChannel+0x5a8>
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800417c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800417e:	fa93 f3a3 	rbit	r3, r3
 8004182:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004186:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004188:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800418a:	2b00      	cmp	r3, #0
 800418c:	d101      	bne.n	8004192 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800418e:	2320      	movs	r3, #32
 8004190:	e003      	b.n	800419a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8004192:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004194:	fab3 f383 	clz	r3, r3
 8004198:	b2db      	uxtb	r3, r3
 800419a:	3301      	adds	r3, #1
 800419c:	f003 021f 	and.w	r2, r3, #31
 80041a0:	4613      	mov	r3, r2
 80041a2:	005b      	lsls	r3, r3, #1
 80041a4:	4413      	add	r3, r2
 80041a6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80041a8:	430b      	orrs	r3, r1
 80041aa:	e07e      	b.n	80042aa <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d107      	bne.n	80041c8 <HAL_ADC_ConfigChannel+0x5c8>
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	0e9b      	lsrs	r3, r3, #26
 80041be:	3301      	adds	r3, #1
 80041c0:	069b      	lsls	r3, r3, #26
 80041c2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80041c6:	e015      	b.n	80041f4 <HAL_ADC_ConfigChannel+0x5f4>
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041d0:	fa93 f3a3 	rbit	r3, r3
 80041d4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80041d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d8:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80041da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d101      	bne.n	80041e4 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80041e0:	2320      	movs	r3, #32
 80041e2:	e003      	b.n	80041ec <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80041e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041e6:	fab3 f383 	clz	r3, r3
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	3301      	adds	r3, #1
 80041ee:	069b      	lsls	r3, r3, #26
 80041f0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d109      	bne.n	8004214 <HAL_ADC_ConfigChannel+0x614>
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	0e9b      	lsrs	r3, r3, #26
 8004206:	3301      	adds	r3, #1
 8004208:	f003 031f 	and.w	r3, r3, #31
 800420c:	2101      	movs	r1, #1
 800420e:	fa01 f303 	lsl.w	r3, r1, r3
 8004212:	e017      	b.n	8004244 <HAL_ADC_ConfigChannel+0x644>
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800421a:	6a3b      	ldr	r3, [r7, #32]
 800421c:	fa93 f3a3 	rbit	r3, r3
 8004220:	61fb      	str	r3, [r7, #28]
  return result;
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004228:	2b00      	cmp	r3, #0
 800422a:	d101      	bne.n	8004230 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800422c:	2320      	movs	r3, #32
 800422e:	e003      	b.n	8004238 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8004230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004232:	fab3 f383 	clz	r3, r3
 8004236:	b2db      	uxtb	r3, r3
 8004238:	3301      	adds	r3, #1
 800423a:	f003 031f 	and.w	r3, r3, #31
 800423e:	2101      	movs	r1, #1
 8004240:	fa01 f303 	lsl.w	r3, r1, r3
 8004244:	ea42 0103 	orr.w	r1, r2, r3
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004250:	2b00      	cmp	r3, #0
 8004252:	d10d      	bne.n	8004270 <HAL_ADC_ConfigChannel+0x670>
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	0e9b      	lsrs	r3, r3, #26
 800425a:	3301      	adds	r3, #1
 800425c:	f003 021f 	and.w	r2, r3, #31
 8004260:	4613      	mov	r3, r2
 8004262:	005b      	lsls	r3, r3, #1
 8004264:	4413      	add	r3, r2
 8004266:	3b1e      	subs	r3, #30
 8004268:	051b      	lsls	r3, r3, #20
 800426a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800426e:	e01b      	b.n	80042a8 <HAL_ADC_ConfigChannel+0x6a8>
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	fa93 f3a3 	rbit	r3, r3
 800427c:	613b      	str	r3, [r7, #16]
  return result;
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004282:	69bb      	ldr	r3, [r7, #24]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d101      	bne.n	800428c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8004288:	2320      	movs	r3, #32
 800428a:	e003      	b.n	8004294 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800428c:	69bb      	ldr	r3, [r7, #24]
 800428e:	fab3 f383 	clz	r3, r3
 8004292:	b2db      	uxtb	r3, r3
 8004294:	3301      	adds	r3, #1
 8004296:	f003 021f 	and.w	r2, r3, #31
 800429a:	4613      	mov	r3, r2
 800429c:	005b      	lsls	r3, r3, #1
 800429e:	4413      	add	r3, r2
 80042a0:	3b1e      	subs	r3, #30
 80042a2:	051b      	lsls	r3, r3, #20
 80042a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80042a8:	430b      	orrs	r3, r1
 80042aa:	683a      	ldr	r2, [r7, #0]
 80042ac:	6892      	ldr	r2, [r2, #8]
 80042ae:	4619      	mov	r1, r3
 80042b0:	f7fe fe4c 	bl	8002f4c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	4b09      	ldr	r3, [pc, #36]	; (80042e0 <HAL_ADC_ConfigChannel+0x6e0>)
 80042ba:	4013      	ands	r3, r2
 80042bc:	2b00      	cmp	r3, #0
 80042be:	f000 80be 	beq.w	800443e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80042ca:	d004      	beq.n	80042d6 <HAL_ADC_ConfigChannel+0x6d6>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a04      	ldr	r2, [pc, #16]	; (80042e4 <HAL_ADC_ConfigChannel+0x6e4>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d10a      	bne.n	80042ec <HAL_ADC_ConfigChannel+0x6ec>
 80042d6:	4b04      	ldr	r3, [pc, #16]	; (80042e8 <HAL_ADC_ConfigChannel+0x6e8>)
 80042d8:	e009      	b.n	80042ee <HAL_ADC_ConfigChannel+0x6ee>
 80042da:	bf00      	nop
 80042dc:	407f0000 	.word	0x407f0000
 80042e0:	80080000 	.word	0x80080000
 80042e4:	50000100 	.word	0x50000100
 80042e8:	50000300 	.word	0x50000300
 80042ec:	4b59      	ldr	r3, [pc, #356]	; (8004454 <HAL_ADC_ConfigChannel+0x854>)
 80042ee:	4618      	mov	r0, r3
 80042f0:	f7fe fd2e 	bl	8002d50 <LL_ADC_GetCommonPathInternalCh>
 80042f4:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a56      	ldr	r2, [pc, #344]	; (8004458 <HAL_ADC_ConfigChannel+0x858>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d004      	beq.n	800430c <HAL_ADC_ConfigChannel+0x70c>
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a55      	ldr	r2, [pc, #340]	; (800445c <HAL_ADC_ConfigChannel+0x85c>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d13a      	bne.n	8004382 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800430c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004310:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004314:	2b00      	cmp	r3, #0
 8004316:	d134      	bne.n	8004382 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004320:	d005      	beq.n	800432e <HAL_ADC_ConfigChannel+0x72e>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a4e      	ldr	r2, [pc, #312]	; (8004460 <HAL_ADC_ConfigChannel+0x860>)
 8004328:	4293      	cmp	r3, r2
 800432a:	f040 8085 	bne.w	8004438 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004336:	d004      	beq.n	8004342 <HAL_ADC_ConfigChannel+0x742>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a49      	ldr	r2, [pc, #292]	; (8004464 <HAL_ADC_ConfigChannel+0x864>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d101      	bne.n	8004346 <HAL_ADC_ConfigChannel+0x746>
 8004342:	4a49      	ldr	r2, [pc, #292]	; (8004468 <HAL_ADC_ConfigChannel+0x868>)
 8004344:	e000      	b.n	8004348 <HAL_ADC_ConfigChannel+0x748>
 8004346:	4a43      	ldr	r2, [pc, #268]	; (8004454 <HAL_ADC_ConfigChannel+0x854>)
 8004348:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800434c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004350:	4619      	mov	r1, r3
 8004352:	4610      	mov	r0, r2
 8004354:	f7fe fce9 	bl	8002d2a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004358:	4b44      	ldr	r3, [pc, #272]	; (800446c <HAL_ADC_ConfigChannel+0x86c>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	099b      	lsrs	r3, r3, #6
 800435e:	4a44      	ldr	r2, [pc, #272]	; (8004470 <HAL_ADC_ConfigChannel+0x870>)
 8004360:	fba2 2303 	umull	r2, r3, r2, r3
 8004364:	099b      	lsrs	r3, r3, #6
 8004366:	1c5a      	adds	r2, r3, #1
 8004368:	4613      	mov	r3, r2
 800436a:	005b      	lsls	r3, r3, #1
 800436c:	4413      	add	r3, r2
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004372:	e002      	b.n	800437a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	3b01      	subs	r3, #1
 8004378:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d1f9      	bne.n	8004374 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004380:	e05a      	b.n	8004438 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a3b      	ldr	r2, [pc, #236]	; (8004474 <HAL_ADC_ConfigChannel+0x874>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d125      	bne.n	80043d8 <HAL_ADC_ConfigChannel+0x7d8>
 800438c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004390:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004394:	2b00      	cmp	r3, #0
 8004396:	d11f      	bne.n	80043d8 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a31      	ldr	r2, [pc, #196]	; (8004464 <HAL_ADC_ConfigChannel+0x864>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d104      	bne.n	80043ac <HAL_ADC_ConfigChannel+0x7ac>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a34      	ldr	r2, [pc, #208]	; (8004478 <HAL_ADC_ConfigChannel+0x878>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d047      	beq.n	800443c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80043b4:	d004      	beq.n	80043c0 <HAL_ADC_ConfigChannel+0x7c0>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a2a      	ldr	r2, [pc, #168]	; (8004464 <HAL_ADC_ConfigChannel+0x864>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d101      	bne.n	80043c4 <HAL_ADC_ConfigChannel+0x7c4>
 80043c0:	4a29      	ldr	r2, [pc, #164]	; (8004468 <HAL_ADC_ConfigChannel+0x868>)
 80043c2:	e000      	b.n	80043c6 <HAL_ADC_ConfigChannel+0x7c6>
 80043c4:	4a23      	ldr	r2, [pc, #140]	; (8004454 <HAL_ADC_ConfigChannel+0x854>)
 80043c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80043ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043ce:	4619      	mov	r1, r3
 80043d0:	4610      	mov	r0, r2
 80043d2:	f7fe fcaa 	bl	8002d2a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80043d6:	e031      	b.n	800443c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a27      	ldr	r2, [pc, #156]	; (800447c <HAL_ADC_ConfigChannel+0x87c>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d12d      	bne.n	800443e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80043e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80043e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d127      	bne.n	800443e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a1c      	ldr	r2, [pc, #112]	; (8004464 <HAL_ADC_ConfigChannel+0x864>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d022      	beq.n	800443e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004400:	d004      	beq.n	800440c <HAL_ADC_ConfigChannel+0x80c>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a17      	ldr	r2, [pc, #92]	; (8004464 <HAL_ADC_ConfigChannel+0x864>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d101      	bne.n	8004410 <HAL_ADC_ConfigChannel+0x810>
 800440c:	4a16      	ldr	r2, [pc, #88]	; (8004468 <HAL_ADC_ConfigChannel+0x868>)
 800440e:	e000      	b.n	8004412 <HAL_ADC_ConfigChannel+0x812>
 8004410:	4a10      	ldr	r2, [pc, #64]	; (8004454 <HAL_ADC_ConfigChannel+0x854>)
 8004412:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004416:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800441a:	4619      	mov	r1, r3
 800441c:	4610      	mov	r0, r2
 800441e:	f7fe fc84 	bl	8002d2a <LL_ADC_SetCommonPathInternalCh>
 8004422:	e00c      	b.n	800443e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004428:	f043 0220 	orr.w	r2, r3, #32
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8004436:	e002      	b.n	800443e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004438:	bf00      	nop
 800443a:	e000      	b.n	800443e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800443c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004446:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800444a:	4618      	mov	r0, r3
 800444c:	37d8      	adds	r7, #216	; 0xd8
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	50000700 	.word	0x50000700
 8004458:	c3210000 	.word	0xc3210000
 800445c:	90c00010 	.word	0x90c00010
 8004460:	50000600 	.word	0x50000600
 8004464:	50000100 	.word	0x50000100
 8004468:	50000300 	.word	0x50000300
 800446c:	2000002c 	.word	0x2000002c
 8004470:	053e2d63 	.word	0x053e2d63
 8004474:	c7520000 	.word	0xc7520000
 8004478:	50000500 	.word	0x50000500
 800447c:	cb840000 	.word	0xcb840000

08004480 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b084      	sub	sp, #16
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4618      	mov	r0, r3
 800448e:	f7fe fe43 	bl	8003118 <LL_ADC_IsEnabled>
 8004492:	4603      	mov	r3, r0
 8004494:	2b00      	cmp	r3, #0
 8004496:	d14d      	bne.n	8004534 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	689a      	ldr	r2, [r3, #8]
 800449e:	4b28      	ldr	r3, [pc, #160]	; (8004540 <ADC_Enable+0xc0>)
 80044a0:	4013      	ands	r3, r2
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d00d      	beq.n	80044c2 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044aa:	f043 0210 	orr.w	r2, r3, #16
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044b6:	f043 0201 	orr.w	r2, r3, #1
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e039      	b.n	8004536 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4618      	mov	r0, r3
 80044c8:	f7fe fdfe 	bl	80030c8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80044cc:	f7fe fbec 	bl	8002ca8 <HAL_GetTick>
 80044d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80044d2:	e028      	b.n	8004526 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4618      	mov	r0, r3
 80044da:	f7fe fe1d 	bl	8003118 <LL_ADC_IsEnabled>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d104      	bne.n	80044ee <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4618      	mov	r0, r3
 80044ea:	f7fe fded 	bl	80030c8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80044ee:	f7fe fbdb 	bl	8002ca8 <HAL_GetTick>
 80044f2:	4602      	mov	r2, r0
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	1ad3      	subs	r3, r2, r3
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	d914      	bls.n	8004526 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 0301 	and.w	r3, r3, #1
 8004506:	2b01      	cmp	r3, #1
 8004508:	d00d      	beq.n	8004526 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800450e:	f043 0210 	orr.w	r2, r3, #16
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800451a:	f043 0201 	orr.w	r2, r3, #1
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e007      	b.n	8004536 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0301 	and.w	r3, r3, #1
 8004530:	2b01      	cmp	r3, #1
 8004532:	d1cf      	bne.n	80044d4 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004534:	2300      	movs	r3, #0
}
 8004536:	4618      	mov	r0, r3
 8004538:	3710      	adds	r7, #16
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	8000003f 	.word	0x8000003f

08004544 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4618      	mov	r0, r3
 8004552:	f7fe fdf4 	bl	800313e <LL_ADC_IsDisableOngoing>
 8004556:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4618      	mov	r0, r3
 800455e:	f7fe fddb 	bl	8003118 <LL_ADC_IsEnabled>
 8004562:	4603      	mov	r3, r0
 8004564:	2b00      	cmp	r3, #0
 8004566:	d047      	beq.n	80045f8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d144      	bne.n	80045f8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	f003 030d 	and.w	r3, r3, #13
 8004578:	2b01      	cmp	r3, #1
 800457a:	d10c      	bne.n	8004596 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4618      	mov	r0, r3
 8004582:	f7fe fdb5 	bl	80030f0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2203      	movs	r2, #3
 800458c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800458e:	f7fe fb8b 	bl	8002ca8 <HAL_GetTick>
 8004592:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004594:	e029      	b.n	80045ea <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800459a:	f043 0210 	orr.w	r2, r3, #16
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045a6:	f043 0201 	orr.w	r2, r3, #1
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e023      	b.n	80045fa <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80045b2:	f7fe fb79 	bl	8002ca8 <HAL_GetTick>
 80045b6:	4602      	mov	r2, r0
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d914      	bls.n	80045ea <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	f003 0301 	and.w	r3, r3, #1
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d00d      	beq.n	80045ea <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045d2:	f043 0210 	orr.w	r2, r3, #16
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045de:	f043 0201 	orr.w	r2, r3, #1
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e007      	b.n	80045fa <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	f003 0301 	and.w	r3, r3, #1
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d1dc      	bne.n	80045b2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3710      	adds	r7, #16
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}

08004602 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004602:	b580      	push	{r7, lr}
 8004604:	b084      	sub	sp, #16
 8004606:	af00      	add	r7, sp, #0
 8004608:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800460e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004614:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004618:	2b00      	cmp	r3, #0
 800461a:	d14b      	bne.n	80046b4 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004620:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 0308 	and.w	r3, r3, #8
 8004632:	2b00      	cmp	r3, #0
 8004634:	d021      	beq.n	800467a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4618      	mov	r0, r3
 800463c:	f7fe fc34 	bl	8002ea8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004640:	4603      	mov	r3, r0
 8004642:	2b00      	cmp	r3, #0
 8004644:	d032      	beq.n	80046ac <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004650:	2b00      	cmp	r3, #0
 8004652:	d12b      	bne.n	80046ac <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004658:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004664:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d11f      	bne.n	80046ac <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004670:	f043 0201 	orr.w	r2, r3, #1
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	65da      	str	r2, [r3, #92]	; 0x5c
 8004678:	e018      	b.n	80046ac <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	f003 0302 	and.w	r3, r3, #2
 8004684:	2b00      	cmp	r3, #0
 8004686:	d111      	bne.n	80046ac <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800468c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004698:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800469c:	2b00      	cmp	r3, #0
 800469e:	d105      	bne.n	80046ac <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046a4:	f043 0201 	orr.w	r2, r3, #1
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80046ac:	68f8      	ldr	r0, [r7, #12]
 80046ae:	f7fd f959 	bl	8001964 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80046b2:	e00e      	b.n	80046d2 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046b8:	f003 0310 	and.w	r3, r3, #16
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d003      	beq.n	80046c8 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80046c0:	68f8      	ldr	r0, [r7, #12]
 80046c2:	f7ff fa93 	bl	8003bec <HAL_ADC_ErrorCallback>
}
 80046c6:	e004      	b.n	80046d2 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	4798      	blx	r3
}
 80046d2:	bf00      	nop
 80046d4:	3710      	adds	r7, #16
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}

080046da <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80046da:	b580      	push	{r7, lr}
 80046dc:	b084      	sub	sp, #16
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e6:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80046e8:	68f8      	ldr	r0, [r7, #12]
 80046ea:	f7ff fa6b 	bl	8003bc4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80046ee:	bf00      	nop
 80046f0:	3710      	adds	r7, #16
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}

080046f6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80046f6:	b580      	push	{r7, lr}
 80046f8:	b084      	sub	sp, #16
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004702:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004708:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004714:	f043 0204 	orr.w	r2, r3, #4
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800471c:	68f8      	ldr	r0, [r7, #12]
 800471e:	f7ff fa65 	bl	8003bec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004722:	bf00      	nop
 8004724:	3710      	adds	r7, #16
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}

0800472a <LL_ADC_IsEnabled>:
{
 800472a:	b480      	push	{r7}
 800472c:	b083      	sub	sp, #12
 800472e:	af00      	add	r7, sp, #0
 8004730:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	f003 0301 	and.w	r3, r3, #1
 800473a:	2b01      	cmp	r3, #1
 800473c:	d101      	bne.n	8004742 <LL_ADC_IsEnabled+0x18>
 800473e:	2301      	movs	r3, #1
 8004740:	e000      	b.n	8004744 <LL_ADC_IsEnabled+0x1a>
 8004742:	2300      	movs	r3, #0
}
 8004744:	4618      	mov	r0, r3
 8004746:	370c      	adds	r7, #12
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr

08004750 <LL_ADC_StartCalibration>:
{
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004762:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004766:	683a      	ldr	r2, [r7, #0]
 8004768:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800476c:	4313      	orrs	r3, r2
 800476e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	609a      	str	r2, [r3, #8]
}
 8004776:	bf00      	nop
 8004778:	370c      	adds	r7, #12
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr

08004782 <LL_ADC_IsCalibrationOnGoing>:
{
 8004782:	b480      	push	{r7}
 8004784:	b083      	sub	sp, #12
 8004786:	af00      	add	r7, sp, #0
 8004788:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004792:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004796:	d101      	bne.n	800479c <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004798:	2301      	movs	r3, #1
 800479a:	e000      	b.n	800479e <LL_ADC_IsCalibrationOnGoing+0x1c>
 800479c:	2300      	movs	r3, #0
}
 800479e:	4618      	mov	r0, r3
 80047a0:	370c      	adds	r7, #12
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr

080047aa <LL_ADC_REG_IsConversionOngoing>:
{
 80047aa:	b480      	push	{r7}
 80047ac:	b083      	sub	sp, #12
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	f003 0304 	and.w	r3, r3, #4
 80047ba:	2b04      	cmp	r3, #4
 80047bc:	d101      	bne.n	80047c2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80047be:	2301      	movs	r3, #1
 80047c0:	e000      	b.n	80047c4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80047c2:	2300      	movs	r3, #0
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	370c      	adds	r7, #12
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr

080047d0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80047da:	2300      	movs	r3, #0
 80047dc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d101      	bne.n	80047ec <HAL_ADCEx_Calibration_Start+0x1c>
 80047e8:	2302      	movs	r3, #2
 80047ea:	e04d      	b.n	8004888 <HAL_ADCEx_Calibration_Start+0xb8>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f7ff fea5 	bl	8004544 <ADC_Disable>
 80047fa:	4603      	mov	r3, r0
 80047fc:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80047fe:	7bfb      	ldrb	r3, [r7, #15]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d136      	bne.n	8004872 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004808:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800480c:	f023 0302 	bic.w	r3, r3, #2
 8004810:	f043 0202 	orr.w	r2, r3, #2
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	6839      	ldr	r1, [r7, #0]
 800481e:	4618      	mov	r0, r3
 8004820:	f7ff ff96 	bl	8004750 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004824:	e014      	b.n	8004850 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	3301      	adds	r3, #1
 800482a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	4a18      	ldr	r2, [pc, #96]	; (8004890 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d90d      	bls.n	8004850 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004838:	f023 0312 	bic.w	r3, r3, #18
 800483c:	f043 0210 	orr.w	r2, r3, #16
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2200      	movs	r2, #0
 8004848:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e01b      	b.n	8004888 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4618      	mov	r0, r3
 8004856:	f7ff ff94 	bl	8004782 <LL_ADC_IsCalibrationOnGoing>
 800485a:	4603      	mov	r3, r0
 800485c:	2b00      	cmp	r3, #0
 800485e:	d1e2      	bne.n	8004826 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004864:	f023 0303 	bic.w	r3, r3, #3
 8004868:	f043 0201 	orr.w	r2, r3, #1
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	65da      	str	r2, [r3, #92]	; 0x5c
 8004870:	e005      	b.n	800487e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004876:	f043 0210 	orr.w	r2, r3, #16
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004886:	7bfb      	ldrb	r3, [r7, #15]
}
 8004888:	4618      	mov	r0, r3
 800488a:	3710      	adds	r7, #16
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}
 8004890:	0004de01 	.word	0x0004de01

08004894 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800489c:	bf00      	nop
 800489e:	370c      	adds	r7, #12
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80048b0:	bf00      	nop
 80048b2:	370c      	adds	r7, #12
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80048c4:	bf00      	nop
 80048c6:	370c      	adds	r7, #12
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr

080048d0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b083      	sub	sp, #12
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80048d8:	bf00      	nop
 80048da:	370c      	adds	r7, #12
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr

080048e4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80048ec:	bf00      	nop
 80048ee:	370c      	adds	r7, #12
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr

080048f8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80048f8:	b590      	push	{r4, r7, lr}
 80048fa:	b0a1      	sub	sp, #132	; 0x84
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004902:	2300      	movs	r3, #0
 8004904:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800490e:	2b01      	cmp	r3, #1
 8004910:	d101      	bne.n	8004916 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004912:	2302      	movs	r3, #2
 8004914:	e0e7      	b.n	8004ae6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2201      	movs	r2, #1
 800491a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800491e:	2300      	movs	r3, #0
 8004920:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8004922:	2300      	movs	r3, #0
 8004924:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800492e:	d102      	bne.n	8004936 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004930:	4b6f      	ldr	r3, [pc, #444]	; (8004af0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004932:	60bb      	str	r3, [r7, #8]
 8004934:	e009      	b.n	800494a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a6e      	ldr	r2, [pc, #440]	; (8004af4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d102      	bne.n	8004946 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8004940:	4b6d      	ldr	r3, [pc, #436]	; (8004af8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004942:	60bb      	str	r3, [r7, #8]
 8004944:	e001      	b.n	800494a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004946:	2300      	movs	r3, #0
 8004948:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d10b      	bne.n	8004968 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004954:	f043 0220 	orr.w	r2, r3, #32
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e0be      	b.n	8004ae6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	4618      	mov	r0, r3
 800496c:	f7ff ff1d 	bl	80047aa <LL_ADC_REG_IsConversionOngoing>
 8004970:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4618      	mov	r0, r3
 8004978:	f7ff ff17 	bl	80047aa <LL_ADC_REG_IsConversionOngoing>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	f040 80a0 	bne.w	8004ac4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004984:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004986:	2b00      	cmp	r3, #0
 8004988:	f040 809c 	bne.w	8004ac4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004994:	d004      	beq.n	80049a0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a55      	ldr	r2, [pc, #340]	; (8004af0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d101      	bne.n	80049a4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80049a0:	4b56      	ldr	r3, [pc, #344]	; (8004afc <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80049a2:	e000      	b.n	80049a6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80049a4:	4b56      	ldr	r3, [pc, #344]	; (8004b00 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80049a6:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d04b      	beq.n	8004a48 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80049b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	6859      	ldr	r1, [r3, #4]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80049c2:	035b      	lsls	r3, r3, #13
 80049c4:	430b      	orrs	r3, r1
 80049c6:	431a      	orrs	r2, r3
 80049c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049ca:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80049d4:	d004      	beq.n	80049e0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a45      	ldr	r2, [pc, #276]	; (8004af0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d10f      	bne.n	8004a00 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80049e0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80049e4:	f7ff fea1 	bl	800472a <LL_ADC_IsEnabled>
 80049e8:	4604      	mov	r4, r0
 80049ea:	4841      	ldr	r0, [pc, #260]	; (8004af0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80049ec:	f7ff fe9d 	bl	800472a <LL_ADC_IsEnabled>
 80049f0:	4603      	mov	r3, r0
 80049f2:	4323      	orrs	r3, r4
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	bf0c      	ite	eq
 80049f8:	2301      	moveq	r3, #1
 80049fa:	2300      	movne	r3, #0
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	e012      	b.n	8004a26 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004a00:	483c      	ldr	r0, [pc, #240]	; (8004af4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004a02:	f7ff fe92 	bl	800472a <LL_ADC_IsEnabled>
 8004a06:	4604      	mov	r4, r0
 8004a08:	483b      	ldr	r0, [pc, #236]	; (8004af8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004a0a:	f7ff fe8e 	bl	800472a <LL_ADC_IsEnabled>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	431c      	orrs	r4, r3
 8004a12:	483c      	ldr	r0, [pc, #240]	; (8004b04 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004a14:	f7ff fe89 	bl	800472a <LL_ADC_IsEnabled>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	4323      	orrs	r3, r4
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	bf0c      	ite	eq
 8004a20:	2301      	moveq	r3, #1
 8004a22:	2300      	movne	r3, #0
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d056      	beq.n	8004ad8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004a2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004a32:	f023 030f 	bic.w	r3, r3, #15
 8004a36:	683a      	ldr	r2, [r7, #0]
 8004a38:	6811      	ldr	r1, [r2, #0]
 8004a3a:	683a      	ldr	r2, [r7, #0]
 8004a3c:	6892      	ldr	r2, [r2, #8]
 8004a3e:	430a      	orrs	r2, r1
 8004a40:	431a      	orrs	r2, r3
 8004a42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a44:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004a46:	e047      	b.n	8004ad8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004a48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a52:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a5c:	d004      	beq.n	8004a68 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a23      	ldr	r2, [pc, #140]	; (8004af0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d10f      	bne.n	8004a88 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8004a68:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004a6c:	f7ff fe5d 	bl	800472a <LL_ADC_IsEnabled>
 8004a70:	4604      	mov	r4, r0
 8004a72:	481f      	ldr	r0, [pc, #124]	; (8004af0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004a74:	f7ff fe59 	bl	800472a <LL_ADC_IsEnabled>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	4323      	orrs	r3, r4
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	bf0c      	ite	eq
 8004a80:	2301      	moveq	r3, #1
 8004a82:	2300      	movne	r3, #0
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	e012      	b.n	8004aae <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8004a88:	481a      	ldr	r0, [pc, #104]	; (8004af4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004a8a:	f7ff fe4e 	bl	800472a <LL_ADC_IsEnabled>
 8004a8e:	4604      	mov	r4, r0
 8004a90:	4819      	ldr	r0, [pc, #100]	; (8004af8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004a92:	f7ff fe4a 	bl	800472a <LL_ADC_IsEnabled>
 8004a96:	4603      	mov	r3, r0
 8004a98:	431c      	orrs	r4, r3
 8004a9a:	481a      	ldr	r0, [pc, #104]	; (8004b04 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004a9c:	f7ff fe45 	bl	800472a <LL_ADC_IsEnabled>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	4323      	orrs	r3, r4
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	bf0c      	ite	eq
 8004aa8:	2301      	moveq	r3, #1
 8004aaa:	2300      	movne	r3, #0
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d012      	beq.n	8004ad8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004ab2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004aba:	f023 030f 	bic.w	r3, r3, #15
 8004abe:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004ac0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004ac2:	e009      	b.n	8004ad8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ac8:	f043 0220 	orr.w	r2, r3, #32
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004ad6:	e000      	b.n	8004ada <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004ad8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004ae2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3784      	adds	r7, #132	; 0x84
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd90      	pop	{r4, r7, pc}
 8004aee:	bf00      	nop
 8004af0:	50000100 	.word	0x50000100
 8004af4:	50000400 	.word	0x50000400
 8004af8:	50000500 	.word	0x50000500
 8004afc:	50000300 	.word	0x50000300
 8004b00:	50000700 	.word	0x50000700
 8004b04:	50000600 	.word	0x50000600

08004b08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b085      	sub	sp, #20
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f003 0307 	and.w	r3, r3, #7
 8004b16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b18:	4b0c      	ldr	r3, [pc, #48]	; (8004b4c <__NVIC_SetPriorityGrouping+0x44>)
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b1e:	68ba      	ldr	r2, [r7, #8]
 8004b20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004b24:	4013      	ands	r3, r2
 8004b26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004b34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b3a:	4a04      	ldr	r2, [pc, #16]	; (8004b4c <__NVIC_SetPriorityGrouping+0x44>)
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	60d3      	str	r3, [r2, #12]
}
 8004b40:	bf00      	nop
 8004b42:	3714      	adds	r7, #20
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr
 8004b4c:	e000ed00 	.word	0xe000ed00

08004b50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b50:	b480      	push	{r7}
 8004b52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b54:	4b04      	ldr	r3, [pc, #16]	; (8004b68 <__NVIC_GetPriorityGrouping+0x18>)
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	0a1b      	lsrs	r3, r3, #8
 8004b5a:	f003 0307 	and.w	r3, r3, #7
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr
 8004b68:	e000ed00 	.word	0xe000ed00

08004b6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b083      	sub	sp, #12
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	4603      	mov	r3, r0
 8004b74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	db0b      	blt.n	8004b96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b7e:	79fb      	ldrb	r3, [r7, #7]
 8004b80:	f003 021f 	and.w	r2, r3, #31
 8004b84:	4907      	ldr	r1, [pc, #28]	; (8004ba4 <__NVIC_EnableIRQ+0x38>)
 8004b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b8a:	095b      	lsrs	r3, r3, #5
 8004b8c:	2001      	movs	r0, #1
 8004b8e:	fa00 f202 	lsl.w	r2, r0, r2
 8004b92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004b96:	bf00      	nop
 8004b98:	370c      	adds	r7, #12
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr
 8004ba2:	bf00      	nop
 8004ba4:	e000e100 	.word	0xe000e100

08004ba8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	4603      	mov	r3, r0
 8004bb0:	6039      	str	r1, [r7, #0]
 8004bb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	db0a      	blt.n	8004bd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	b2da      	uxtb	r2, r3
 8004bc0:	490c      	ldr	r1, [pc, #48]	; (8004bf4 <__NVIC_SetPriority+0x4c>)
 8004bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bc6:	0112      	lsls	r2, r2, #4
 8004bc8:	b2d2      	uxtb	r2, r2
 8004bca:	440b      	add	r3, r1
 8004bcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004bd0:	e00a      	b.n	8004be8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	b2da      	uxtb	r2, r3
 8004bd6:	4908      	ldr	r1, [pc, #32]	; (8004bf8 <__NVIC_SetPriority+0x50>)
 8004bd8:	79fb      	ldrb	r3, [r7, #7]
 8004bda:	f003 030f 	and.w	r3, r3, #15
 8004bde:	3b04      	subs	r3, #4
 8004be0:	0112      	lsls	r2, r2, #4
 8004be2:	b2d2      	uxtb	r2, r2
 8004be4:	440b      	add	r3, r1
 8004be6:	761a      	strb	r2, [r3, #24]
}
 8004be8:	bf00      	nop
 8004bea:	370c      	adds	r7, #12
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr
 8004bf4:	e000e100 	.word	0xe000e100
 8004bf8:	e000ed00 	.word	0xe000ed00

08004bfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b089      	sub	sp, #36	; 0x24
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	60b9      	str	r1, [r7, #8]
 8004c06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f003 0307 	and.w	r3, r3, #7
 8004c0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c10:	69fb      	ldr	r3, [r7, #28]
 8004c12:	f1c3 0307 	rsb	r3, r3, #7
 8004c16:	2b04      	cmp	r3, #4
 8004c18:	bf28      	it	cs
 8004c1a:	2304      	movcs	r3, #4
 8004c1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c1e:	69fb      	ldr	r3, [r7, #28]
 8004c20:	3304      	adds	r3, #4
 8004c22:	2b06      	cmp	r3, #6
 8004c24:	d902      	bls.n	8004c2c <NVIC_EncodePriority+0x30>
 8004c26:	69fb      	ldr	r3, [r7, #28]
 8004c28:	3b03      	subs	r3, #3
 8004c2a:	e000      	b.n	8004c2e <NVIC_EncodePriority+0x32>
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c30:	f04f 32ff 	mov.w	r2, #4294967295
 8004c34:	69bb      	ldr	r3, [r7, #24]
 8004c36:	fa02 f303 	lsl.w	r3, r2, r3
 8004c3a:	43da      	mvns	r2, r3
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	401a      	ands	r2, r3
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c44:	f04f 31ff 	mov.w	r1, #4294967295
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c4e:	43d9      	mvns	r1, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c54:	4313      	orrs	r3, r2
         );
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3724      	adds	r7, #36	; 0x24
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr

08004c62 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c62:	b580      	push	{r7, lr}
 8004c64:	b082      	sub	sp, #8
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f7ff ff4c 	bl	8004b08 <__NVIC_SetPriorityGrouping>
}
 8004c70:	bf00      	nop
 8004c72:	3708      	adds	r7, #8
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b086      	sub	sp, #24
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	4603      	mov	r3, r0
 8004c80:	60b9      	str	r1, [r7, #8]
 8004c82:	607a      	str	r2, [r7, #4]
 8004c84:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004c86:	f7ff ff63 	bl	8004b50 <__NVIC_GetPriorityGrouping>
 8004c8a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	68b9      	ldr	r1, [r7, #8]
 8004c90:	6978      	ldr	r0, [r7, #20]
 8004c92:	f7ff ffb3 	bl	8004bfc <NVIC_EncodePriority>
 8004c96:	4602      	mov	r2, r0
 8004c98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c9c:	4611      	mov	r1, r2
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f7ff ff82 	bl	8004ba8 <__NVIC_SetPriority>
}
 8004ca4:	bf00      	nop
 8004ca6:	3718      	adds	r7, #24
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}

08004cac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b082      	sub	sp, #8
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f7ff ff56 	bl	8004b6c <__NVIC_EnableIRQ>
}
 8004cc0:	bf00      	nop
 8004cc2:	3708      	adds	r7, #8
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}

08004cc8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b084      	sub	sp, #16
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d101      	bne.n	8004cda <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e08d      	b.n	8004df6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	461a      	mov	r2, r3
 8004ce0:	4b47      	ldr	r3, [pc, #284]	; (8004e00 <HAL_DMA_Init+0x138>)
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d80f      	bhi.n	8004d06 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	461a      	mov	r2, r3
 8004cec:	4b45      	ldr	r3, [pc, #276]	; (8004e04 <HAL_DMA_Init+0x13c>)
 8004cee:	4413      	add	r3, r2
 8004cf0:	4a45      	ldr	r2, [pc, #276]	; (8004e08 <HAL_DMA_Init+0x140>)
 8004cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8004cf6:	091b      	lsrs	r3, r3, #4
 8004cf8:	009a      	lsls	r2, r3, #2
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4a42      	ldr	r2, [pc, #264]	; (8004e0c <HAL_DMA_Init+0x144>)
 8004d02:	641a      	str	r2, [r3, #64]	; 0x40
 8004d04:	e00e      	b.n	8004d24 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	461a      	mov	r2, r3
 8004d0c:	4b40      	ldr	r3, [pc, #256]	; (8004e10 <HAL_DMA_Init+0x148>)
 8004d0e:	4413      	add	r3, r2
 8004d10:	4a3d      	ldr	r2, [pc, #244]	; (8004e08 <HAL_DMA_Init+0x140>)
 8004d12:	fba2 2303 	umull	r2, r3, r2, r3
 8004d16:	091b      	lsrs	r3, r3, #4
 8004d18:	009a      	lsls	r2, r3, #2
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4a3c      	ldr	r2, [pc, #240]	; (8004e14 <HAL_DMA_Init+0x14c>)
 8004d22:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2202      	movs	r2, #2
 8004d28:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004d3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d3e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004d48:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	691b      	ldr	r3, [r3, #16]
 8004d4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d54:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	699b      	ldr	r3, [r3, #24]
 8004d5a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d60:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6a1b      	ldr	r3, [r3, #32]
 8004d66:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004d68:	68fa      	ldr	r2, [r7, #12]
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	68fa      	ldr	r2, [r7, #12]
 8004d74:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f000 fa76 	bl	8005268 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d84:	d102      	bne.n	8004d8c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	685a      	ldr	r2, [r3, #4]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d94:	b2d2      	uxtb	r2, r2
 8004d96:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d9c:	687a      	ldr	r2, [r7, #4]
 8004d9e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004da0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d010      	beq.n	8004dcc <HAL_DMA_Init+0x104>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	2b04      	cmp	r3, #4
 8004db0:	d80c      	bhi.n	8004dcc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f000 fa96 	bl	80052e4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004dc8:	605a      	str	r2, [r3, #4]
 8004dca:	e008      	b.n	8004dde <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004df4:	2300      	movs	r3, #0
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3710      	adds	r7, #16
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	40020407 	.word	0x40020407
 8004e04:	bffdfff8 	.word	0xbffdfff8
 8004e08:	cccccccd 	.word	0xcccccccd
 8004e0c:	40020000 	.word	0x40020000
 8004e10:	bffdfbf8 	.word	0xbffdfbf8
 8004e14:	40020400 	.word	0x40020400

08004e18 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b086      	sub	sp, #24
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	60f8      	str	r0, [r7, #12]
 8004e20:	60b9      	str	r1, [r7, #8]
 8004e22:	607a      	str	r2, [r7, #4]
 8004e24:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e26:	2300      	movs	r3, #0
 8004e28:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d101      	bne.n	8004e38 <HAL_DMA_Start_IT+0x20>
 8004e34:	2302      	movs	r3, #2
 8004e36:	e066      	b.n	8004f06 <HAL_DMA_Start_IT+0xee>
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d155      	bne.n	8004ef8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2202      	movs	r2, #2
 8004e50:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2200      	movs	r2, #0
 8004e58:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f022 0201 	bic.w	r2, r2, #1
 8004e68:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	68b9      	ldr	r1, [r7, #8]
 8004e70:	68f8      	ldr	r0, [r7, #12]
 8004e72:	f000 f9bb 	bl	80051ec <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d008      	beq.n	8004e90 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f042 020e 	orr.w	r2, r2, #14
 8004e8c:	601a      	str	r2, [r3, #0]
 8004e8e:	e00f      	b.n	8004eb0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f022 0204 	bic.w	r2, r2, #4
 8004e9e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f042 020a 	orr.w	r2, r2, #10
 8004eae:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d007      	beq.n	8004ece <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ec8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ecc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d007      	beq.n	8004ee6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ee0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ee4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f042 0201 	orr.w	r2, r2, #1
 8004ef4:	601a      	str	r2, [r3, #0]
 8004ef6:	e005      	b.n	8004f04 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2200      	movs	r2, #0
 8004efc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004f00:	2302      	movs	r3, #2
 8004f02:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004f04:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3718      	adds	r7, #24
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}

08004f0e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004f0e:	b480      	push	{r7}
 8004f10:	b085      	sub	sp, #20
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f16:	2300      	movs	r3, #0
 8004f18:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	2b02      	cmp	r3, #2
 8004f24:	d005      	beq.n	8004f32 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2204      	movs	r2, #4
 8004f2a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	73fb      	strb	r3, [r7, #15]
 8004f30:	e037      	b.n	8004fa2 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f022 020e 	bic.w	r2, r2, #14
 8004f40:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f50:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f022 0201 	bic.w	r2, r2, #1
 8004f60:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f66:	f003 021f 	and.w	r2, r3, #31
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6e:	2101      	movs	r1, #1
 8004f70:	fa01 f202 	lsl.w	r2, r1, r2
 8004f74:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004f7e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d00c      	beq.n	8004fa2 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f92:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f96:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004fa0:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8004fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3714      	adds	r7, #20
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr

08004fc0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b084      	sub	sp, #16
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	2b02      	cmp	r3, #2
 8004fd6:	d00d      	beq.n	8004ff4 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2204      	movs	r2, #4
 8004fdc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	73fb      	strb	r3, [r7, #15]
 8004ff2:	e047      	b.n	8005084 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f022 020e 	bic.w	r2, r2, #14
 8005002:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f022 0201 	bic.w	r2, r2, #1
 8005012:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800501e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005022:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005028:	f003 021f 	and.w	r2, r3, #31
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005030:	2101      	movs	r1, #1
 8005032:	fa01 f202 	lsl.w	r2, r1, r2
 8005036:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005040:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005046:	2b00      	cmp	r3, #0
 8005048:	d00c      	beq.n	8005064 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005054:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005058:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005062:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005078:	2b00      	cmp	r3, #0
 800507a:	d003      	beq.n	8005084 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	4798      	blx	r3
    }
  }
  return status;
 8005084:	7bfb      	ldrb	r3, [r7, #15]
}
 8005086:	4618      	mov	r0, r3
 8005088:	3710      	adds	r7, #16
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}

0800508e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800508e:	b580      	push	{r7, lr}
 8005090:	b084      	sub	sp, #16
 8005092:	af00      	add	r7, sp, #0
 8005094:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050aa:	f003 031f 	and.w	r3, r3, #31
 80050ae:	2204      	movs	r2, #4
 80050b0:	409a      	lsls	r2, r3
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	4013      	ands	r3, r2
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d026      	beq.n	8005108 <HAL_DMA_IRQHandler+0x7a>
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	f003 0304 	and.w	r3, r3, #4
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d021      	beq.n	8005108 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f003 0320 	and.w	r3, r3, #32
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d107      	bne.n	80050e2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f022 0204 	bic.w	r2, r2, #4
 80050e0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050e6:	f003 021f 	and.w	r2, r3, #31
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ee:	2104      	movs	r1, #4
 80050f0:	fa01 f202 	lsl.w	r2, r1, r2
 80050f4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d071      	beq.n	80051e2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005106:	e06c      	b.n	80051e2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800510c:	f003 031f 	and.w	r3, r3, #31
 8005110:	2202      	movs	r2, #2
 8005112:	409a      	lsls	r2, r3
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	4013      	ands	r3, r2
 8005118:	2b00      	cmp	r3, #0
 800511a:	d02e      	beq.n	800517a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	f003 0302 	and.w	r3, r3, #2
 8005122:	2b00      	cmp	r3, #0
 8005124:	d029      	beq.n	800517a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f003 0320 	and.w	r3, r3, #32
 8005130:	2b00      	cmp	r3, #0
 8005132:	d10b      	bne.n	800514c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f022 020a 	bic.w	r2, r2, #10
 8005142:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005150:	f003 021f 	and.w	r2, r3, #31
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005158:	2102      	movs	r1, #2
 800515a:	fa01 f202 	lsl.w	r2, r1, r2
 800515e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800516c:	2b00      	cmp	r3, #0
 800516e:	d038      	beq.n	80051e2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005178:	e033      	b.n	80051e2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800517e:	f003 031f 	and.w	r3, r3, #31
 8005182:	2208      	movs	r2, #8
 8005184:	409a      	lsls	r2, r3
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	4013      	ands	r3, r2
 800518a:	2b00      	cmp	r3, #0
 800518c:	d02a      	beq.n	80051e4 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	f003 0308 	and.w	r3, r3, #8
 8005194:	2b00      	cmp	r3, #0
 8005196:	d025      	beq.n	80051e4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f022 020e 	bic.w	r2, r2, #14
 80051a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051ac:	f003 021f 	and.w	r2, r3, #31
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b4:	2101      	movs	r1, #1
 80051b6:	fa01 f202 	lsl.w	r2, r1, r2
 80051ba:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2201      	movs	r2, #1
 80051c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2201      	movs	r2, #1
 80051c6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2200      	movs	r2, #0
 80051ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d004      	beq.n	80051e4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80051e2:	bf00      	nop
 80051e4:	bf00      	nop
}
 80051e6:	3710      	adds	r7, #16
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}

080051ec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b085      	sub	sp, #20
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	60f8      	str	r0, [r7, #12]
 80051f4:	60b9      	str	r1, [r7, #8]
 80051f6:	607a      	str	r2, [r7, #4]
 80051f8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051fe:	68fa      	ldr	r2, [r7, #12]
 8005200:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005202:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005208:	2b00      	cmp	r3, #0
 800520a:	d004      	beq.n	8005216 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005210:	68fa      	ldr	r2, [r7, #12]
 8005212:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005214:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800521a:	f003 021f 	and.w	r2, r3, #31
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005222:	2101      	movs	r1, #1
 8005224:	fa01 f202 	lsl.w	r2, r1, r2
 8005228:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	683a      	ldr	r2, [r7, #0]
 8005230:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	2b10      	cmp	r3, #16
 8005238:	d108      	bne.n	800524c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	68ba      	ldr	r2, [r7, #8]
 8005248:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800524a:	e007      	b.n	800525c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	68ba      	ldr	r2, [r7, #8]
 8005252:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	60da      	str	r2, [r3, #12]
}
 800525c:	bf00      	nop
 800525e:	3714      	adds	r7, #20
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr

08005268 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005268:	b480      	push	{r7}
 800526a:	b087      	sub	sp, #28
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	461a      	mov	r2, r3
 8005276:	4b16      	ldr	r3, [pc, #88]	; (80052d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005278:	429a      	cmp	r2, r3
 800527a:	d802      	bhi.n	8005282 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800527c:	4b15      	ldr	r3, [pc, #84]	; (80052d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800527e:	617b      	str	r3, [r7, #20]
 8005280:	e001      	b.n	8005286 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8005282:	4b15      	ldr	r3, [pc, #84]	; (80052d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005284:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	b2db      	uxtb	r3, r3
 8005290:	3b08      	subs	r3, #8
 8005292:	4a12      	ldr	r2, [pc, #72]	; (80052dc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005294:	fba2 2303 	umull	r2, r3, r2, r3
 8005298:	091b      	lsrs	r3, r3, #4
 800529a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052a0:	089b      	lsrs	r3, r3, #2
 80052a2:	009a      	lsls	r2, r3, #2
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	4413      	add	r3, r2
 80052a8:	461a      	mov	r2, r3
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4a0b      	ldr	r2, [pc, #44]	; (80052e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80052b2:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f003 031f 	and.w	r3, r3, #31
 80052ba:	2201      	movs	r2, #1
 80052bc:	409a      	lsls	r2, r3
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80052c2:	bf00      	nop
 80052c4:	371c      	adds	r7, #28
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr
 80052ce:	bf00      	nop
 80052d0:	40020407 	.word	0x40020407
 80052d4:	40020800 	.word	0x40020800
 80052d8:	40020820 	.word	0x40020820
 80052dc:	cccccccd 	.word	0xcccccccd
 80052e0:	40020880 	.word	0x40020880

080052e4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b085      	sub	sp, #20
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80052f4:	68fa      	ldr	r2, [r7, #12]
 80052f6:	4b0b      	ldr	r3, [pc, #44]	; (8005324 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80052f8:	4413      	add	r3, r2
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	461a      	mov	r2, r3
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	4a08      	ldr	r2, [pc, #32]	; (8005328 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005306:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	3b01      	subs	r3, #1
 800530c:	f003 031f 	and.w	r3, r3, #31
 8005310:	2201      	movs	r2, #1
 8005312:	409a      	lsls	r2, r3
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8005318:	bf00      	nop
 800531a:	3714      	adds	r7, #20
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr
 8005324:	1000823f 	.word	0x1000823f
 8005328:	40020940 	.word	0x40020940

0800532c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800532c:	b480      	push	{r7}
 800532e:	b087      	sub	sp, #28
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005336:	2300      	movs	r3, #0
 8005338:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800533a:	e15a      	b.n	80055f2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	2101      	movs	r1, #1
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	fa01 f303 	lsl.w	r3, r1, r3
 8005348:	4013      	ands	r3, r2
 800534a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2b00      	cmp	r3, #0
 8005350:	f000 814c 	beq.w	80055ec <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	f003 0303 	and.w	r3, r3, #3
 800535c:	2b01      	cmp	r3, #1
 800535e:	d005      	beq.n	800536c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005368:	2b02      	cmp	r3, #2
 800536a:	d130      	bne.n	80053ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	005b      	lsls	r3, r3, #1
 8005376:	2203      	movs	r2, #3
 8005378:	fa02 f303 	lsl.w	r3, r2, r3
 800537c:	43db      	mvns	r3, r3
 800537e:	693a      	ldr	r2, [r7, #16]
 8005380:	4013      	ands	r3, r2
 8005382:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	68da      	ldr	r2, [r3, #12]
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	005b      	lsls	r3, r3, #1
 800538c:	fa02 f303 	lsl.w	r3, r2, r3
 8005390:	693a      	ldr	r2, [r7, #16]
 8005392:	4313      	orrs	r3, r2
 8005394:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	693a      	ldr	r2, [r7, #16]
 800539a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80053a2:	2201      	movs	r2, #1
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	fa02 f303 	lsl.w	r3, r2, r3
 80053aa:	43db      	mvns	r3, r3
 80053ac:	693a      	ldr	r2, [r7, #16]
 80053ae:	4013      	ands	r3, r2
 80053b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	091b      	lsrs	r3, r3, #4
 80053b8:	f003 0201 	and.w	r2, r3, #1
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	fa02 f303 	lsl.w	r3, r2, r3
 80053c2:	693a      	ldr	r2, [r7, #16]
 80053c4:	4313      	orrs	r3, r2
 80053c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	693a      	ldr	r2, [r7, #16]
 80053cc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	f003 0303 	and.w	r3, r3, #3
 80053d6:	2b03      	cmp	r3, #3
 80053d8:	d017      	beq.n	800540a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	005b      	lsls	r3, r3, #1
 80053e4:	2203      	movs	r2, #3
 80053e6:	fa02 f303 	lsl.w	r3, r2, r3
 80053ea:	43db      	mvns	r3, r3
 80053ec:	693a      	ldr	r2, [r7, #16]
 80053ee:	4013      	ands	r3, r2
 80053f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	689a      	ldr	r2, [r3, #8]
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	005b      	lsls	r3, r3, #1
 80053fa:	fa02 f303 	lsl.w	r3, r2, r3
 80053fe:	693a      	ldr	r2, [r7, #16]
 8005400:	4313      	orrs	r3, r2
 8005402:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	693a      	ldr	r2, [r7, #16]
 8005408:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	f003 0303 	and.w	r3, r3, #3
 8005412:	2b02      	cmp	r3, #2
 8005414:	d123      	bne.n	800545e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	08da      	lsrs	r2, r3, #3
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	3208      	adds	r2, #8
 800541e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005422:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	f003 0307 	and.w	r3, r3, #7
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	220f      	movs	r2, #15
 800542e:	fa02 f303 	lsl.w	r3, r2, r3
 8005432:	43db      	mvns	r3, r3
 8005434:	693a      	ldr	r2, [r7, #16]
 8005436:	4013      	ands	r3, r2
 8005438:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	691a      	ldr	r2, [r3, #16]
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	f003 0307 	and.w	r3, r3, #7
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	fa02 f303 	lsl.w	r3, r2, r3
 800544a:	693a      	ldr	r2, [r7, #16]
 800544c:	4313      	orrs	r3, r2
 800544e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	08da      	lsrs	r2, r3, #3
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	3208      	adds	r2, #8
 8005458:	6939      	ldr	r1, [r7, #16]
 800545a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	005b      	lsls	r3, r3, #1
 8005468:	2203      	movs	r2, #3
 800546a:	fa02 f303 	lsl.w	r3, r2, r3
 800546e:	43db      	mvns	r3, r3
 8005470:	693a      	ldr	r2, [r7, #16]
 8005472:	4013      	ands	r3, r2
 8005474:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	f003 0203 	and.w	r2, r3, #3
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	005b      	lsls	r3, r3, #1
 8005482:	fa02 f303 	lsl.w	r3, r2, r3
 8005486:	693a      	ldr	r2, [r7, #16]
 8005488:	4313      	orrs	r3, r2
 800548a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	693a      	ldr	r2, [r7, #16]
 8005490:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800549a:	2b00      	cmp	r3, #0
 800549c:	f000 80a6 	beq.w	80055ec <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80054a0:	4b5b      	ldr	r3, [pc, #364]	; (8005610 <HAL_GPIO_Init+0x2e4>)
 80054a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054a4:	4a5a      	ldr	r2, [pc, #360]	; (8005610 <HAL_GPIO_Init+0x2e4>)
 80054a6:	f043 0301 	orr.w	r3, r3, #1
 80054aa:	6613      	str	r3, [r2, #96]	; 0x60
 80054ac:	4b58      	ldr	r3, [pc, #352]	; (8005610 <HAL_GPIO_Init+0x2e4>)
 80054ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054b0:	f003 0301 	and.w	r3, r3, #1
 80054b4:	60bb      	str	r3, [r7, #8]
 80054b6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80054b8:	4a56      	ldr	r2, [pc, #344]	; (8005614 <HAL_GPIO_Init+0x2e8>)
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	089b      	lsrs	r3, r3, #2
 80054be:	3302      	adds	r3, #2
 80054c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	f003 0303 	and.w	r3, r3, #3
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	220f      	movs	r2, #15
 80054d0:	fa02 f303 	lsl.w	r3, r2, r3
 80054d4:	43db      	mvns	r3, r3
 80054d6:	693a      	ldr	r2, [r7, #16]
 80054d8:	4013      	ands	r3, r2
 80054da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80054e2:	d01f      	beq.n	8005524 <HAL_GPIO_Init+0x1f8>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	4a4c      	ldr	r2, [pc, #304]	; (8005618 <HAL_GPIO_Init+0x2ec>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d019      	beq.n	8005520 <HAL_GPIO_Init+0x1f4>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	4a4b      	ldr	r2, [pc, #300]	; (800561c <HAL_GPIO_Init+0x2f0>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d013      	beq.n	800551c <HAL_GPIO_Init+0x1f0>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	4a4a      	ldr	r2, [pc, #296]	; (8005620 <HAL_GPIO_Init+0x2f4>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d00d      	beq.n	8005518 <HAL_GPIO_Init+0x1ec>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	4a49      	ldr	r2, [pc, #292]	; (8005624 <HAL_GPIO_Init+0x2f8>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d007      	beq.n	8005514 <HAL_GPIO_Init+0x1e8>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	4a48      	ldr	r2, [pc, #288]	; (8005628 <HAL_GPIO_Init+0x2fc>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d101      	bne.n	8005510 <HAL_GPIO_Init+0x1e4>
 800550c:	2305      	movs	r3, #5
 800550e:	e00a      	b.n	8005526 <HAL_GPIO_Init+0x1fa>
 8005510:	2306      	movs	r3, #6
 8005512:	e008      	b.n	8005526 <HAL_GPIO_Init+0x1fa>
 8005514:	2304      	movs	r3, #4
 8005516:	e006      	b.n	8005526 <HAL_GPIO_Init+0x1fa>
 8005518:	2303      	movs	r3, #3
 800551a:	e004      	b.n	8005526 <HAL_GPIO_Init+0x1fa>
 800551c:	2302      	movs	r3, #2
 800551e:	e002      	b.n	8005526 <HAL_GPIO_Init+0x1fa>
 8005520:	2301      	movs	r3, #1
 8005522:	e000      	b.n	8005526 <HAL_GPIO_Init+0x1fa>
 8005524:	2300      	movs	r3, #0
 8005526:	697a      	ldr	r2, [r7, #20]
 8005528:	f002 0203 	and.w	r2, r2, #3
 800552c:	0092      	lsls	r2, r2, #2
 800552e:	4093      	lsls	r3, r2
 8005530:	693a      	ldr	r2, [r7, #16]
 8005532:	4313      	orrs	r3, r2
 8005534:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005536:	4937      	ldr	r1, [pc, #220]	; (8005614 <HAL_GPIO_Init+0x2e8>)
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	089b      	lsrs	r3, r3, #2
 800553c:	3302      	adds	r3, #2
 800553e:	693a      	ldr	r2, [r7, #16]
 8005540:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005544:	4b39      	ldr	r3, [pc, #228]	; (800562c <HAL_GPIO_Init+0x300>)
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	43db      	mvns	r3, r3
 800554e:	693a      	ldr	r2, [r7, #16]
 8005550:	4013      	ands	r3, r2
 8005552:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800555c:	2b00      	cmp	r3, #0
 800555e:	d003      	beq.n	8005568 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005560:	693a      	ldr	r2, [r7, #16]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	4313      	orrs	r3, r2
 8005566:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005568:	4a30      	ldr	r2, [pc, #192]	; (800562c <HAL_GPIO_Init+0x300>)
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800556e:	4b2f      	ldr	r3, [pc, #188]	; (800562c <HAL_GPIO_Init+0x300>)
 8005570:	68db      	ldr	r3, [r3, #12]
 8005572:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	43db      	mvns	r3, r3
 8005578:	693a      	ldr	r2, [r7, #16]
 800557a:	4013      	ands	r3, r2
 800557c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005586:	2b00      	cmp	r3, #0
 8005588:	d003      	beq.n	8005592 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800558a:	693a      	ldr	r2, [r7, #16]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	4313      	orrs	r3, r2
 8005590:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005592:	4a26      	ldr	r2, [pc, #152]	; (800562c <HAL_GPIO_Init+0x300>)
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005598:	4b24      	ldr	r3, [pc, #144]	; (800562c <HAL_GPIO_Init+0x300>)
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	43db      	mvns	r3, r3
 80055a2:	693a      	ldr	r2, [r7, #16]
 80055a4:	4013      	ands	r3, r2
 80055a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d003      	beq.n	80055bc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80055b4:	693a      	ldr	r2, [r7, #16]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	4313      	orrs	r3, r2
 80055ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80055bc:	4a1b      	ldr	r2, [pc, #108]	; (800562c <HAL_GPIO_Init+0x300>)
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80055c2:	4b1a      	ldr	r3, [pc, #104]	; (800562c <HAL_GPIO_Init+0x300>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	43db      	mvns	r3, r3
 80055cc:	693a      	ldr	r2, [r7, #16]
 80055ce:	4013      	ands	r3, r2
 80055d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d003      	beq.n	80055e6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80055de:	693a      	ldr	r2, [r7, #16]
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80055e6:	4a11      	ldr	r2, [pc, #68]	; (800562c <HAL_GPIO_Init+0x300>)
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	3301      	adds	r3, #1
 80055f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	fa22 f303 	lsr.w	r3, r2, r3
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	f47f ae9d 	bne.w	800533c <HAL_GPIO_Init+0x10>
  }
}
 8005602:	bf00      	nop
 8005604:	bf00      	nop
 8005606:	371c      	adds	r7, #28
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr
 8005610:	40021000 	.word	0x40021000
 8005614:	40010000 	.word	0x40010000
 8005618:	48000400 	.word	0x48000400
 800561c:	48000800 	.word	0x48000800
 8005620:	48000c00 	.word	0x48000c00
 8005624:	48001000 	.word	0x48001000
 8005628:	48001400 	.word	0x48001400
 800562c:	40010400 	.word	0x40010400

08005630 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005630:	b480      	push	{r7}
 8005632:	b083      	sub	sp, #12
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	460b      	mov	r3, r1
 800563a:	807b      	strh	r3, [r7, #2]
 800563c:	4613      	mov	r3, r2
 800563e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005640:	787b      	ldrb	r3, [r7, #1]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d003      	beq.n	800564e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005646:	887a      	ldrh	r2, [r7, #2]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800564c:	e002      	b.n	8005654 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800564e:	887a      	ldrh	r2, [r7, #2]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005654:	bf00      	nop
 8005656:	370c      	adds	r7, #12
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr

08005660 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b082      	sub	sp, #8
 8005664:	af00      	add	r7, sp, #0
 8005666:	4603      	mov	r3, r0
 8005668:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800566a:	4b08      	ldr	r3, [pc, #32]	; (800568c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800566c:	695a      	ldr	r2, [r3, #20]
 800566e:	88fb      	ldrh	r3, [r7, #6]
 8005670:	4013      	ands	r3, r2
 8005672:	2b00      	cmp	r3, #0
 8005674:	d006      	beq.n	8005684 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005676:	4a05      	ldr	r2, [pc, #20]	; (800568c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005678:	88fb      	ldrh	r3, [r7, #6]
 800567a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800567c:	88fb      	ldrh	r3, [r7, #6]
 800567e:	4618      	mov	r0, r3
 8005680:	f7fc f960 	bl	8001944 <HAL_GPIO_EXTI_Callback>
  }
}
 8005684:	bf00      	nop
 8005686:	3708      	adds	r7, #8
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}
 800568c:	40010400 	.word	0x40010400

08005690 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005690:	b480      	push	{r7}
 8005692:	b085      	sub	sp, #20
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d141      	bne.n	8005722 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800569e:	4b4b      	ldr	r3, [pc, #300]	; (80057cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80056a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056aa:	d131      	bne.n	8005710 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80056ac:	4b47      	ldr	r3, [pc, #284]	; (80057cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056b2:	4a46      	ldr	r2, [pc, #280]	; (80057cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80056bc:	4b43      	ldr	r3, [pc, #268]	; (80057cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80056c4:	4a41      	ldr	r2, [pc, #260]	; (80057cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80056ca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80056cc:	4b40      	ldr	r3, [pc, #256]	; (80057d0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	2232      	movs	r2, #50	; 0x32
 80056d2:	fb02 f303 	mul.w	r3, r2, r3
 80056d6:	4a3f      	ldr	r2, [pc, #252]	; (80057d4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80056d8:	fba2 2303 	umull	r2, r3, r2, r3
 80056dc:	0c9b      	lsrs	r3, r3, #18
 80056de:	3301      	adds	r3, #1
 80056e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80056e2:	e002      	b.n	80056ea <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	3b01      	subs	r3, #1
 80056e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80056ea:	4b38      	ldr	r3, [pc, #224]	; (80057cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056ec:	695b      	ldr	r3, [r3, #20]
 80056ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056f6:	d102      	bne.n	80056fe <HAL_PWREx_ControlVoltageScaling+0x6e>
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d1f2      	bne.n	80056e4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80056fe:	4b33      	ldr	r3, [pc, #204]	; (80057cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005700:	695b      	ldr	r3, [r3, #20]
 8005702:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005706:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800570a:	d158      	bne.n	80057be <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800570c:	2303      	movs	r3, #3
 800570e:	e057      	b.n	80057c0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005710:	4b2e      	ldr	r3, [pc, #184]	; (80057cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005712:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005716:	4a2d      	ldr	r2, [pc, #180]	; (80057cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005718:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800571c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005720:	e04d      	b.n	80057be <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005728:	d141      	bne.n	80057ae <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800572a:	4b28      	ldr	r3, [pc, #160]	; (80057cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005732:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005736:	d131      	bne.n	800579c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005738:	4b24      	ldr	r3, [pc, #144]	; (80057cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800573a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800573e:	4a23      	ldr	r2, [pc, #140]	; (80057cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005740:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005744:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005748:	4b20      	ldr	r3, [pc, #128]	; (80057cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005750:	4a1e      	ldr	r2, [pc, #120]	; (80057cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005752:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005756:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005758:	4b1d      	ldr	r3, [pc, #116]	; (80057d0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	2232      	movs	r2, #50	; 0x32
 800575e:	fb02 f303 	mul.w	r3, r2, r3
 8005762:	4a1c      	ldr	r2, [pc, #112]	; (80057d4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005764:	fba2 2303 	umull	r2, r3, r2, r3
 8005768:	0c9b      	lsrs	r3, r3, #18
 800576a:	3301      	adds	r3, #1
 800576c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800576e:	e002      	b.n	8005776 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	3b01      	subs	r3, #1
 8005774:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005776:	4b15      	ldr	r3, [pc, #84]	; (80057cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005778:	695b      	ldr	r3, [r3, #20]
 800577a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800577e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005782:	d102      	bne.n	800578a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d1f2      	bne.n	8005770 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800578a:	4b10      	ldr	r3, [pc, #64]	; (80057cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800578c:	695b      	ldr	r3, [r3, #20]
 800578e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005792:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005796:	d112      	bne.n	80057be <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005798:	2303      	movs	r3, #3
 800579a:	e011      	b.n	80057c0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800579c:	4b0b      	ldr	r3, [pc, #44]	; (80057cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800579e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057a2:	4a0a      	ldr	r2, [pc, #40]	; (80057cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80057ac:	e007      	b.n	80057be <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80057ae:	4b07      	ldr	r3, [pc, #28]	; (80057cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80057b6:	4a05      	ldr	r2, [pc, #20]	; (80057cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80057bc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80057be:	2300      	movs	r3, #0
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3714      	adds	r7, #20
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr
 80057cc:	40007000 	.word	0x40007000
 80057d0:	2000002c 	.word	0x2000002c
 80057d4:	431bde83 	.word	0x431bde83

080057d8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80057d8:	b480      	push	{r7}
 80057da:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80057dc:	4b05      	ldr	r3, [pc, #20]	; (80057f4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	4a04      	ldr	r2, [pc, #16]	; (80057f4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80057e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80057e6:	6093      	str	r3, [r2, #8]
}
 80057e8:	bf00      	nop
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr
 80057f2:	bf00      	nop
 80057f4:	40007000 	.word	0x40007000

080057f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b088      	sub	sp, #32
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d101      	bne.n	800580a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	e306      	b.n	8005e18 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f003 0301 	and.w	r3, r3, #1
 8005812:	2b00      	cmp	r3, #0
 8005814:	d075      	beq.n	8005902 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005816:	4b97      	ldr	r3, [pc, #604]	; (8005a74 <HAL_RCC_OscConfig+0x27c>)
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	f003 030c 	and.w	r3, r3, #12
 800581e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005820:	4b94      	ldr	r3, [pc, #592]	; (8005a74 <HAL_RCC_OscConfig+0x27c>)
 8005822:	68db      	ldr	r3, [r3, #12]
 8005824:	f003 0303 	and.w	r3, r3, #3
 8005828:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800582a:	69bb      	ldr	r3, [r7, #24]
 800582c:	2b0c      	cmp	r3, #12
 800582e:	d102      	bne.n	8005836 <HAL_RCC_OscConfig+0x3e>
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	2b03      	cmp	r3, #3
 8005834:	d002      	beq.n	800583c <HAL_RCC_OscConfig+0x44>
 8005836:	69bb      	ldr	r3, [r7, #24]
 8005838:	2b08      	cmp	r3, #8
 800583a:	d10b      	bne.n	8005854 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800583c:	4b8d      	ldr	r3, [pc, #564]	; (8005a74 <HAL_RCC_OscConfig+0x27c>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005844:	2b00      	cmp	r3, #0
 8005846:	d05b      	beq.n	8005900 <HAL_RCC_OscConfig+0x108>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d157      	bne.n	8005900 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	e2e1      	b.n	8005e18 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800585c:	d106      	bne.n	800586c <HAL_RCC_OscConfig+0x74>
 800585e:	4b85      	ldr	r3, [pc, #532]	; (8005a74 <HAL_RCC_OscConfig+0x27c>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a84      	ldr	r2, [pc, #528]	; (8005a74 <HAL_RCC_OscConfig+0x27c>)
 8005864:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005868:	6013      	str	r3, [r2, #0]
 800586a:	e01d      	b.n	80058a8 <HAL_RCC_OscConfig+0xb0>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005874:	d10c      	bne.n	8005890 <HAL_RCC_OscConfig+0x98>
 8005876:	4b7f      	ldr	r3, [pc, #508]	; (8005a74 <HAL_RCC_OscConfig+0x27c>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a7e      	ldr	r2, [pc, #504]	; (8005a74 <HAL_RCC_OscConfig+0x27c>)
 800587c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005880:	6013      	str	r3, [r2, #0]
 8005882:	4b7c      	ldr	r3, [pc, #496]	; (8005a74 <HAL_RCC_OscConfig+0x27c>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a7b      	ldr	r2, [pc, #492]	; (8005a74 <HAL_RCC_OscConfig+0x27c>)
 8005888:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800588c:	6013      	str	r3, [r2, #0]
 800588e:	e00b      	b.n	80058a8 <HAL_RCC_OscConfig+0xb0>
 8005890:	4b78      	ldr	r3, [pc, #480]	; (8005a74 <HAL_RCC_OscConfig+0x27c>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a77      	ldr	r2, [pc, #476]	; (8005a74 <HAL_RCC_OscConfig+0x27c>)
 8005896:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800589a:	6013      	str	r3, [r2, #0]
 800589c:	4b75      	ldr	r3, [pc, #468]	; (8005a74 <HAL_RCC_OscConfig+0x27c>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a74      	ldr	r2, [pc, #464]	; (8005a74 <HAL_RCC_OscConfig+0x27c>)
 80058a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80058a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d013      	beq.n	80058d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058b0:	f7fd f9fa 	bl	8002ca8 <HAL_GetTick>
 80058b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80058b6:	e008      	b.n	80058ca <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058b8:	f7fd f9f6 	bl	8002ca8 <HAL_GetTick>
 80058bc:	4602      	mov	r2, r0
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	1ad3      	subs	r3, r2, r3
 80058c2:	2b64      	cmp	r3, #100	; 0x64
 80058c4:	d901      	bls.n	80058ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80058c6:	2303      	movs	r3, #3
 80058c8:	e2a6      	b.n	8005e18 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80058ca:	4b6a      	ldr	r3, [pc, #424]	; (8005a74 <HAL_RCC_OscConfig+0x27c>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d0f0      	beq.n	80058b8 <HAL_RCC_OscConfig+0xc0>
 80058d6:	e014      	b.n	8005902 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058d8:	f7fd f9e6 	bl	8002ca8 <HAL_GetTick>
 80058dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80058de:	e008      	b.n	80058f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058e0:	f7fd f9e2 	bl	8002ca8 <HAL_GetTick>
 80058e4:	4602      	mov	r2, r0
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	1ad3      	subs	r3, r2, r3
 80058ea:	2b64      	cmp	r3, #100	; 0x64
 80058ec:	d901      	bls.n	80058f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80058ee:	2303      	movs	r3, #3
 80058f0:	e292      	b.n	8005e18 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80058f2:	4b60      	ldr	r3, [pc, #384]	; (8005a74 <HAL_RCC_OscConfig+0x27c>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d1f0      	bne.n	80058e0 <HAL_RCC_OscConfig+0xe8>
 80058fe:	e000      	b.n	8005902 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005900:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f003 0302 	and.w	r3, r3, #2
 800590a:	2b00      	cmp	r3, #0
 800590c:	d075      	beq.n	80059fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800590e:	4b59      	ldr	r3, [pc, #356]	; (8005a74 <HAL_RCC_OscConfig+0x27c>)
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	f003 030c 	and.w	r3, r3, #12
 8005916:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005918:	4b56      	ldr	r3, [pc, #344]	; (8005a74 <HAL_RCC_OscConfig+0x27c>)
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	f003 0303 	and.w	r3, r3, #3
 8005920:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005922:	69bb      	ldr	r3, [r7, #24]
 8005924:	2b0c      	cmp	r3, #12
 8005926:	d102      	bne.n	800592e <HAL_RCC_OscConfig+0x136>
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	2b02      	cmp	r3, #2
 800592c:	d002      	beq.n	8005934 <HAL_RCC_OscConfig+0x13c>
 800592e:	69bb      	ldr	r3, [r7, #24]
 8005930:	2b04      	cmp	r3, #4
 8005932:	d11f      	bne.n	8005974 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005934:	4b4f      	ldr	r3, [pc, #316]	; (8005a74 <HAL_RCC_OscConfig+0x27c>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800593c:	2b00      	cmp	r3, #0
 800593e:	d005      	beq.n	800594c <HAL_RCC_OscConfig+0x154>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d101      	bne.n	800594c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	e265      	b.n	8005e18 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800594c:	4b49      	ldr	r3, [pc, #292]	; (8005a74 <HAL_RCC_OscConfig+0x27c>)
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	691b      	ldr	r3, [r3, #16]
 8005958:	061b      	lsls	r3, r3, #24
 800595a:	4946      	ldr	r1, [pc, #280]	; (8005a74 <HAL_RCC_OscConfig+0x27c>)
 800595c:	4313      	orrs	r3, r2
 800595e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005960:	4b45      	ldr	r3, [pc, #276]	; (8005a78 <HAL_RCC_OscConfig+0x280>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4618      	mov	r0, r3
 8005966:	f7fc fc51 	bl	800220c <HAL_InitTick>
 800596a:	4603      	mov	r3, r0
 800596c:	2b00      	cmp	r3, #0
 800596e:	d043      	beq.n	80059f8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	e251      	b.n	8005e18 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d023      	beq.n	80059c4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800597c:	4b3d      	ldr	r3, [pc, #244]	; (8005a74 <HAL_RCC_OscConfig+0x27c>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a3c      	ldr	r2, [pc, #240]	; (8005a74 <HAL_RCC_OscConfig+0x27c>)
 8005982:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005986:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005988:	f7fd f98e 	bl	8002ca8 <HAL_GetTick>
 800598c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800598e:	e008      	b.n	80059a2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005990:	f7fd f98a 	bl	8002ca8 <HAL_GetTick>
 8005994:	4602      	mov	r2, r0
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	1ad3      	subs	r3, r2, r3
 800599a:	2b02      	cmp	r3, #2
 800599c:	d901      	bls.n	80059a2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800599e:	2303      	movs	r3, #3
 80059a0:	e23a      	b.n	8005e18 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80059a2:	4b34      	ldr	r3, [pc, #208]	; (8005a74 <HAL_RCC_OscConfig+0x27c>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d0f0      	beq.n	8005990 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059ae:	4b31      	ldr	r3, [pc, #196]	; (8005a74 <HAL_RCC_OscConfig+0x27c>)
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	691b      	ldr	r3, [r3, #16]
 80059ba:	061b      	lsls	r3, r3, #24
 80059bc:	492d      	ldr	r1, [pc, #180]	; (8005a74 <HAL_RCC_OscConfig+0x27c>)
 80059be:	4313      	orrs	r3, r2
 80059c0:	604b      	str	r3, [r1, #4]
 80059c2:	e01a      	b.n	80059fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80059c4:	4b2b      	ldr	r3, [pc, #172]	; (8005a74 <HAL_RCC_OscConfig+0x27c>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a2a      	ldr	r2, [pc, #168]	; (8005a74 <HAL_RCC_OscConfig+0x27c>)
 80059ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059d0:	f7fd f96a 	bl	8002ca8 <HAL_GetTick>
 80059d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80059d6:	e008      	b.n	80059ea <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059d8:	f7fd f966 	bl	8002ca8 <HAL_GetTick>
 80059dc:	4602      	mov	r2, r0
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	1ad3      	subs	r3, r2, r3
 80059e2:	2b02      	cmp	r3, #2
 80059e4:	d901      	bls.n	80059ea <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80059e6:	2303      	movs	r3, #3
 80059e8:	e216      	b.n	8005e18 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80059ea:	4b22      	ldr	r3, [pc, #136]	; (8005a74 <HAL_RCC_OscConfig+0x27c>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d1f0      	bne.n	80059d8 <HAL_RCC_OscConfig+0x1e0>
 80059f6:	e000      	b.n	80059fa <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80059f8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f003 0308 	and.w	r3, r3, #8
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d041      	beq.n	8005a8a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	695b      	ldr	r3, [r3, #20]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d01c      	beq.n	8005a48 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a0e:	4b19      	ldr	r3, [pc, #100]	; (8005a74 <HAL_RCC_OscConfig+0x27c>)
 8005a10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a14:	4a17      	ldr	r2, [pc, #92]	; (8005a74 <HAL_RCC_OscConfig+0x27c>)
 8005a16:	f043 0301 	orr.w	r3, r3, #1
 8005a1a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a1e:	f7fd f943 	bl	8002ca8 <HAL_GetTick>
 8005a22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005a24:	e008      	b.n	8005a38 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a26:	f7fd f93f 	bl	8002ca8 <HAL_GetTick>
 8005a2a:	4602      	mov	r2, r0
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	1ad3      	subs	r3, r2, r3
 8005a30:	2b02      	cmp	r3, #2
 8005a32:	d901      	bls.n	8005a38 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005a34:	2303      	movs	r3, #3
 8005a36:	e1ef      	b.n	8005e18 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005a38:	4b0e      	ldr	r3, [pc, #56]	; (8005a74 <HAL_RCC_OscConfig+0x27c>)
 8005a3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a3e:	f003 0302 	and.w	r3, r3, #2
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d0ef      	beq.n	8005a26 <HAL_RCC_OscConfig+0x22e>
 8005a46:	e020      	b.n	8005a8a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a48:	4b0a      	ldr	r3, [pc, #40]	; (8005a74 <HAL_RCC_OscConfig+0x27c>)
 8005a4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a4e:	4a09      	ldr	r2, [pc, #36]	; (8005a74 <HAL_RCC_OscConfig+0x27c>)
 8005a50:	f023 0301 	bic.w	r3, r3, #1
 8005a54:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a58:	f7fd f926 	bl	8002ca8 <HAL_GetTick>
 8005a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005a5e:	e00d      	b.n	8005a7c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a60:	f7fd f922 	bl	8002ca8 <HAL_GetTick>
 8005a64:	4602      	mov	r2, r0
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	1ad3      	subs	r3, r2, r3
 8005a6a:	2b02      	cmp	r3, #2
 8005a6c:	d906      	bls.n	8005a7c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005a6e:	2303      	movs	r3, #3
 8005a70:	e1d2      	b.n	8005e18 <HAL_RCC_OscConfig+0x620>
 8005a72:	bf00      	nop
 8005a74:	40021000 	.word	0x40021000
 8005a78:	20000030 	.word	0x20000030
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005a7c:	4b8c      	ldr	r3, [pc, #560]	; (8005cb0 <HAL_RCC_OscConfig+0x4b8>)
 8005a7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a82:	f003 0302 	and.w	r3, r3, #2
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d1ea      	bne.n	8005a60 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f003 0304 	and.w	r3, r3, #4
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	f000 80a6 	beq.w	8005be4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005a9c:	4b84      	ldr	r3, [pc, #528]	; (8005cb0 <HAL_RCC_OscConfig+0x4b8>)
 8005a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d101      	bne.n	8005aac <HAL_RCC_OscConfig+0x2b4>
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	e000      	b.n	8005aae <HAL_RCC_OscConfig+0x2b6>
 8005aac:	2300      	movs	r3, #0
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d00d      	beq.n	8005ace <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ab2:	4b7f      	ldr	r3, [pc, #508]	; (8005cb0 <HAL_RCC_OscConfig+0x4b8>)
 8005ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ab6:	4a7e      	ldr	r2, [pc, #504]	; (8005cb0 <HAL_RCC_OscConfig+0x4b8>)
 8005ab8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005abc:	6593      	str	r3, [r2, #88]	; 0x58
 8005abe:	4b7c      	ldr	r3, [pc, #496]	; (8005cb0 <HAL_RCC_OscConfig+0x4b8>)
 8005ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ac6:	60fb      	str	r3, [r7, #12]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005aca:	2301      	movs	r3, #1
 8005acc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ace:	4b79      	ldr	r3, [pc, #484]	; (8005cb4 <HAL_RCC_OscConfig+0x4bc>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d118      	bne.n	8005b0c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ada:	4b76      	ldr	r3, [pc, #472]	; (8005cb4 <HAL_RCC_OscConfig+0x4bc>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a75      	ldr	r2, [pc, #468]	; (8005cb4 <HAL_RCC_OscConfig+0x4bc>)
 8005ae0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ae4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ae6:	f7fd f8df 	bl	8002ca8 <HAL_GetTick>
 8005aea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005aec:	e008      	b.n	8005b00 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005aee:	f7fd f8db 	bl	8002ca8 <HAL_GetTick>
 8005af2:	4602      	mov	r2, r0
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	1ad3      	subs	r3, r2, r3
 8005af8:	2b02      	cmp	r3, #2
 8005afa:	d901      	bls.n	8005b00 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005afc:	2303      	movs	r3, #3
 8005afe:	e18b      	b.n	8005e18 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b00:	4b6c      	ldr	r3, [pc, #432]	; (8005cb4 <HAL_RCC_OscConfig+0x4bc>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d0f0      	beq.n	8005aee <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d108      	bne.n	8005b26 <HAL_RCC_OscConfig+0x32e>
 8005b14:	4b66      	ldr	r3, [pc, #408]	; (8005cb0 <HAL_RCC_OscConfig+0x4b8>)
 8005b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b1a:	4a65      	ldr	r2, [pc, #404]	; (8005cb0 <HAL_RCC_OscConfig+0x4b8>)
 8005b1c:	f043 0301 	orr.w	r3, r3, #1
 8005b20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005b24:	e024      	b.n	8005b70 <HAL_RCC_OscConfig+0x378>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	2b05      	cmp	r3, #5
 8005b2c:	d110      	bne.n	8005b50 <HAL_RCC_OscConfig+0x358>
 8005b2e:	4b60      	ldr	r3, [pc, #384]	; (8005cb0 <HAL_RCC_OscConfig+0x4b8>)
 8005b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b34:	4a5e      	ldr	r2, [pc, #376]	; (8005cb0 <HAL_RCC_OscConfig+0x4b8>)
 8005b36:	f043 0304 	orr.w	r3, r3, #4
 8005b3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005b3e:	4b5c      	ldr	r3, [pc, #368]	; (8005cb0 <HAL_RCC_OscConfig+0x4b8>)
 8005b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b44:	4a5a      	ldr	r2, [pc, #360]	; (8005cb0 <HAL_RCC_OscConfig+0x4b8>)
 8005b46:	f043 0301 	orr.w	r3, r3, #1
 8005b4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005b4e:	e00f      	b.n	8005b70 <HAL_RCC_OscConfig+0x378>
 8005b50:	4b57      	ldr	r3, [pc, #348]	; (8005cb0 <HAL_RCC_OscConfig+0x4b8>)
 8005b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b56:	4a56      	ldr	r2, [pc, #344]	; (8005cb0 <HAL_RCC_OscConfig+0x4b8>)
 8005b58:	f023 0301 	bic.w	r3, r3, #1
 8005b5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005b60:	4b53      	ldr	r3, [pc, #332]	; (8005cb0 <HAL_RCC_OscConfig+0x4b8>)
 8005b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b66:	4a52      	ldr	r2, [pc, #328]	; (8005cb0 <HAL_RCC_OscConfig+0x4b8>)
 8005b68:	f023 0304 	bic.w	r3, r3, #4
 8005b6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d016      	beq.n	8005ba6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b78:	f7fd f896 	bl	8002ca8 <HAL_GetTick>
 8005b7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b7e:	e00a      	b.n	8005b96 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b80:	f7fd f892 	bl	8002ca8 <HAL_GetTick>
 8005b84:	4602      	mov	r2, r0
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	1ad3      	subs	r3, r2, r3
 8005b8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d901      	bls.n	8005b96 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005b92:	2303      	movs	r3, #3
 8005b94:	e140      	b.n	8005e18 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b96:	4b46      	ldr	r3, [pc, #280]	; (8005cb0 <HAL_RCC_OscConfig+0x4b8>)
 8005b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b9c:	f003 0302 	and.w	r3, r3, #2
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d0ed      	beq.n	8005b80 <HAL_RCC_OscConfig+0x388>
 8005ba4:	e015      	b.n	8005bd2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ba6:	f7fd f87f 	bl	8002ca8 <HAL_GetTick>
 8005baa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005bac:	e00a      	b.n	8005bc4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bae:	f7fd f87b 	bl	8002ca8 <HAL_GetTick>
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	1ad3      	subs	r3, r2, r3
 8005bb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d901      	bls.n	8005bc4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005bc0:	2303      	movs	r3, #3
 8005bc2:	e129      	b.n	8005e18 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005bc4:	4b3a      	ldr	r3, [pc, #232]	; (8005cb0 <HAL_RCC_OscConfig+0x4b8>)
 8005bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bca:	f003 0302 	and.w	r3, r3, #2
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d1ed      	bne.n	8005bae <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005bd2:	7ffb      	ldrb	r3, [r7, #31]
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d105      	bne.n	8005be4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bd8:	4b35      	ldr	r3, [pc, #212]	; (8005cb0 <HAL_RCC_OscConfig+0x4b8>)
 8005bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bdc:	4a34      	ldr	r2, [pc, #208]	; (8005cb0 <HAL_RCC_OscConfig+0x4b8>)
 8005bde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005be2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f003 0320 	and.w	r3, r3, #32
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d03c      	beq.n	8005c6a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	699b      	ldr	r3, [r3, #24]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d01c      	beq.n	8005c32 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005bf8:	4b2d      	ldr	r3, [pc, #180]	; (8005cb0 <HAL_RCC_OscConfig+0x4b8>)
 8005bfa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005bfe:	4a2c      	ldr	r2, [pc, #176]	; (8005cb0 <HAL_RCC_OscConfig+0x4b8>)
 8005c00:	f043 0301 	orr.w	r3, r3, #1
 8005c04:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c08:	f7fd f84e 	bl	8002ca8 <HAL_GetTick>
 8005c0c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005c0e:	e008      	b.n	8005c22 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005c10:	f7fd f84a 	bl	8002ca8 <HAL_GetTick>
 8005c14:	4602      	mov	r2, r0
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	1ad3      	subs	r3, r2, r3
 8005c1a:	2b02      	cmp	r3, #2
 8005c1c:	d901      	bls.n	8005c22 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005c1e:	2303      	movs	r3, #3
 8005c20:	e0fa      	b.n	8005e18 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005c22:	4b23      	ldr	r3, [pc, #140]	; (8005cb0 <HAL_RCC_OscConfig+0x4b8>)
 8005c24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005c28:	f003 0302 	and.w	r3, r3, #2
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d0ef      	beq.n	8005c10 <HAL_RCC_OscConfig+0x418>
 8005c30:	e01b      	b.n	8005c6a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005c32:	4b1f      	ldr	r3, [pc, #124]	; (8005cb0 <HAL_RCC_OscConfig+0x4b8>)
 8005c34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005c38:	4a1d      	ldr	r2, [pc, #116]	; (8005cb0 <HAL_RCC_OscConfig+0x4b8>)
 8005c3a:	f023 0301 	bic.w	r3, r3, #1
 8005c3e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c42:	f7fd f831 	bl	8002ca8 <HAL_GetTick>
 8005c46:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005c48:	e008      	b.n	8005c5c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005c4a:	f7fd f82d 	bl	8002ca8 <HAL_GetTick>
 8005c4e:	4602      	mov	r2, r0
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	1ad3      	subs	r3, r2, r3
 8005c54:	2b02      	cmp	r3, #2
 8005c56:	d901      	bls.n	8005c5c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005c58:	2303      	movs	r3, #3
 8005c5a:	e0dd      	b.n	8005e18 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005c5c:	4b14      	ldr	r3, [pc, #80]	; (8005cb0 <HAL_RCC_OscConfig+0x4b8>)
 8005c5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005c62:	f003 0302 	and.w	r3, r3, #2
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d1ef      	bne.n	8005c4a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	69db      	ldr	r3, [r3, #28]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	f000 80d1 	beq.w	8005e16 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005c74:	4b0e      	ldr	r3, [pc, #56]	; (8005cb0 <HAL_RCC_OscConfig+0x4b8>)
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	f003 030c 	and.w	r3, r3, #12
 8005c7c:	2b0c      	cmp	r3, #12
 8005c7e:	f000 808b 	beq.w	8005d98 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	69db      	ldr	r3, [r3, #28]
 8005c86:	2b02      	cmp	r3, #2
 8005c88:	d15e      	bne.n	8005d48 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c8a:	4b09      	ldr	r3, [pc, #36]	; (8005cb0 <HAL_RCC_OscConfig+0x4b8>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a08      	ldr	r2, [pc, #32]	; (8005cb0 <HAL_RCC_OscConfig+0x4b8>)
 8005c90:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c96:	f7fd f807 	bl	8002ca8 <HAL_GetTick>
 8005c9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c9c:	e00c      	b.n	8005cb8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c9e:	f7fd f803 	bl	8002ca8 <HAL_GetTick>
 8005ca2:	4602      	mov	r2, r0
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	1ad3      	subs	r3, r2, r3
 8005ca8:	2b02      	cmp	r3, #2
 8005caa:	d905      	bls.n	8005cb8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005cac:	2303      	movs	r3, #3
 8005cae:	e0b3      	b.n	8005e18 <HAL_RCC_OscConfig+0x620>
 8005cb0:	40021000 	.word	0x40021000
 8005cb4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005cb8:	4b59      	ldr	r3, [pc, #356]	; (8005e20 <HAL_RCC_OscConfig+0x628>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d1ec      	bne.n	8005c9e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005cc4:	4b56      	ldr	r3, [pc, #344]	; (8005e20 <HAL_RCC_OscConfig+0x628>)
 8005cc6:	68da      	ldr	r2, [r3, #12]
 8005cc8:	4b56      	ldr	r3, [pc, #344]	; (8005e24 <HAL_RCC_OscConfig+0x62c>)
 8005cca:	4013      	ands	r3, r2
 8005ccc:	687a      	ldr	r2, [r7, #4]
 8005cce:	6a11      	ldr	r1, [r2, #32]
 8005cd0:	687a      	ldr	r2, [r7, #4]
 8005cd2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005cd4:	3a01      	subs	r2, #1
 8005cd6:	0112      	lsls	r2, r2, #4
 8005cd8:	4311      	orrs	r1, r2
 8005cda:	687a      	ldr	r2, [r7, #4]
 8005cdc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005cde:	0212      	lsls	r2, r2, #8
 8005ce0:	4311      	orrs	r1, r2
 8005ce2:	687a      	ldr	r2, [r7, #4]
 8005ce4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005ce6:	0852      	lsrs	r2, r2, #1
 8005ce8:	3a01      	subs	r2, #1
 8005cea:	0552      	lsls	r2, r2, #21
 8005cec:	4311      	orrs	r1, r2
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005cf2:	0852      	lsrs	r2, r2, #1
 8005cf4:	3a01      	subs	r2, #1
 8005cf6:	0652      	lsls	r2, r2, #25
 8005cf8:	4311      	orrs	r1, r2
 8005cfa:	687a      	ldr	r2, [r7, #4]
 8005cfc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005cfe:	06d2      	lsls	r2, r2, #27
 8005d00:	430a      	orrs	r2, r1
 8005d02:	4947      	ldr	r1, [pc, #284]	; (8005e20 <HAL_RCC_OscConfig+0x628>)
 8005d04:	4313      	orrs	r3, r2
 8005d06:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d08:	4b45      	ldr	r3, [pc, #276]	; (8005e20 <HAL_RCC_OscConfig+0x628>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a44      	ldr	r2, [pc, #272]	; (8005e20 <HAL_RCC_OscConfig+0x628>)
 8005d0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d12:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005d14:	4b42      	ldr	r3, [pc, #264]	; (8005e20 <HAL_RCC_OscConfig+0x628>)
 8005d16:	68db      	ldr	r3, [r3, #12]
 8005d18:	4a41      	ldr	r2, [pc, #260]	; (8005e20 <HAL_RCC_OscConfig+0x628>)
 8005d1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d1e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d20:	f7fc ffc2 	bl	8002ca8 <HAL_GetTick>
 8005d24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d26:	e008      	b.n	8005d3a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d28:	f7fc ffbe 	bl	8002ca8 <HAL_GetTick>
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	1ad3      	subs	r3, r2, r3
 8005d32:	2b02      	cmp	r3, #2
 8005d34:	d901      	bls.n	8005d3a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005d36:	2303      	movs	r3, #3
 8005d38:	e06e      	b.n	8005e18 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d3a:	4b39      	ldr	r3, [pc, #228]	; (8005e20 <HAL_RCC_OscConfig+0x628>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d0f0      	beq.n	8005d28 <HAL_RCC_OscConfig+0x530>
 8005d46:	e066      	b.n	8005e16 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d48:	4b35      	ldr	r3, [pc, #212]	; (8005e20 <HAL_RCC_OscConfig+0x628>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a34      	ldr	r2, [pc, #208]	; (8005e20 <HAL_RCC_OscConfig+0x628>)
 8005d4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d52:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005d54:	4b32      	ldr	r3, [pc, #200]	; (8005e20 <HAL_RCC_OscConfig+0x628>)
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	4a31      	ldr	r2, [pc, #196]	; (8005e20 <HAL_RCC_OscConfig+0x628>)
 8005d5a:	f023 0303 	bic.w	r3, r3, #3
 8005d5e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005d60:	4b2f      	ldr	r3, [pc, #188]	; (8005e20 <HAL_RCC_OscConfig+0x628>)
 8005d62:	68db      	ldr	r3, [r3, #12]
 8005d64:	4a2e      	ldr	r2, [pc, #184]	; (8005e20 <HAL_RCC_OscConfig+0x628>)
 8005d66:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005d6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d6e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d70:	f7fc ff9a 	bl	8002ca8 <HAL_GetTick>
 8005d74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d76:	e008      	b.n	8005d8a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d78:	f7fc ff96 	bl	8002ca8 <HAL_GetTick>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	1ad3      	subs	r3, r2, r3
 8005d82:	2b02      	cmp	r3, #2
 8005d84:	d901      	bls.n	8005d8a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8005d86:	2303      	movs	r3, #3
 8005d88:	e046      	b.n	8005e18 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d8a:	4b25      	ldr	r3, [pc, #148]	; (8005e20 <HAL_RCC_OscConfig+0x628>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d1f0      	bne.n	8005d78 <HAL_RCC_OscConfig+0x580>
 8005d96:	e03e      	b.n	8005e16 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	69db      	ldr	r3, [r3, #28]
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d101      	bne.n	8005da4 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8005da0:	2301      	movs	r3, #1
 8005da2:	e039      	b.n	8005e18 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005da4:	4b1e      	ldr	r3, [pc, #120]	; (8005e20 <HAL_RCC_OscConfig+0x628>)
 8005da6:	68db      	ldr	r3, [r3, #12]
 8005da8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	f003 0203 	and.w	r2, r3, #3
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6a1b      	ldr	r3, [r3, #32]
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d12c      	bne.n	8005e12 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc2:	3b01      	subs	r3, #1
 8005dc4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d123      	bne.n	8005e12 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dd4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	d11b      	bne.n	8005e12 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d113      	bne.n	8005e12 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005df4:	085b      	lsrs	r3, r3, #1
 8005df6:	3b01      	subs	r3, #1
 8005df8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	d109      	bne.n	8005e12 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e08:	085b      	lsrs	r3, r3, #1
 8005e0a:	3b01      	subs	r3, #1
 8005e0c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d001      	beq.n	8005e16 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8005e12:	2301      	movs	r3, #1
 8005e14:	e000      	b.n	8005e18 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8005e16:	2300      	movs	r3, #0
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3720      	adds	r7, #32
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}
 8005e20:	40021000 	.word	0x40021000
 8005e24:	019f800c 	.word	0x019f800c

08005e28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b086      	sub	sp, #24
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005e32:	2300      	movs	r3, #0
 8005e34:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d101      	bne.n	8005e40 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	e11e      	b.n	800607e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005e40:	4b91      	ldr	r3, [pc, #580]	; (8006088 <HAL_RCC_ClockConfig+0x260>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f003 030f 	and.w	r3, r3, #15
 8005e48:	683a      	ldr	r2, [r7, #0]
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d910      	bls.n	8005e70 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e4e:	4b8e      	ldr	r3, [pc, #568]	; (8006088 <HAL_RCC_ClockConfig+0x260>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f023 020f 	bic.w	r2, r3, #15
 8005e56:	498c      	ldr	r1, [pc, #560]	; (8006088 <HAL_RCC_ClockConfig+0x260>)
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e5e:	4b8a      	ldr	r3, [pc, #552]	; (8006088 <HAL_RCC_ClockConfig+0x260>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f003 030f 	and.w	r3, r3, #15
 8005e66:	683a      	ldr	r2, [r7, #0]
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d001      	beq.n	8005e70 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	e106      	b.n	800607e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f003 0301 	and.w	r3, r3, #1
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d073      	beq.n	8005f64 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	2b03      	cmp	r3, #3
 8005e82:	d129      	bne.n	8005ed8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e84:	4b81      	ldr	r3, [pc, #516]	; (800608c <HAL_RCC_ClockConfig+0x264>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d101      	bne.n	8005e94 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	e0f4      	b.n	800607e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005e94:	f000 f9d0 	bl	8006238 <RCC_GetSysClockFreqFromPLLSource>
 8005e98:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	4a7c      	ldr	r2, [pc, #496]	; (8006090 <HAL_RCC_ClockConfig+0x268>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d93f      	bls.n	8005f22 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005ea2:	4b7a      	ldr	r3, [pc, #488]	; (800608c <HAL_RCC_ClockConfig+0x264>)
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d009      	beq.n	8005ec2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d033      	beq.n	8005f22 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d12f      	bne.n	8005f22 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005ec2:	4b72      	ldr	r3, [pc, #456]	; (800608c <HAL_RCC_ClockConfig+0x264>)
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005eca:	4a70      	ldr	r2, [pc, #448]	; (800608c <HAL_RCC_ClockConfig+0x264>)
 8005ecc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ed0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005ed2:	2380      	movs	r3, #128	; 0x80
 8005ed4:	617b      	str	r3, [r7, #20]
 8005ed6:	e024      	b.n	8005f22 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	2b02      	cmp	r3, #2
 8005ede:	d107      	bne.n	8005ef0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005ee0:	4b6a      	ldr	r3, [pc, #424]	; (800608c <HAL_RCC_ClockConfig+0x264>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d109      	bne.n	8005f00 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	e0c6      	b.n	800607e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005ef0:	4b66      	ldr	r3, [pc, #408]	; (800608c <HAL_RCC_ClockConfig+0x264>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d101      	bne.n	8005f00 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005efc:	2301      	movs	r3, #1
 8005efe:	e0be      	b.n	800607e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005f00:	f000 f8ce 	bl	80060a0 <HAL_RCC_GetSysClockFreq>
 8005f04:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	4a61      	ldr	r2, [pc, #388]	; (8006090 <HAL_RCC_ClockConfig+0x268>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d909      	bls.n	8005f22 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005f0e:	4b5f      	ldr	r3, [pc, #380]	; (800608c <HAL_RCC_ClockConfig+0x264>)
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f16:	4a5d      	ldr	r2, [pc, #372]	; (800608c <HAL_RCC_ClockConfig+0x264>)
 8005f18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f1c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005f1e:	2380      	movs	r3, #128	; 0x80
 8005f20:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005f22:	4b5a      	ldr	r3, [pc, #360]	; (800608c <HAL_RCC_ClockConfig+0x264>)
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	f023 0203 	bic.w	r2, r3, #3
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	4957      	ldr	r1, [pc, #348]	; (800608c <HAL_RCC_ClockConfig+0x264>)
 8005f30:	4313      	orrs	r3, r2
 8005f32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f34:	f7fc feb8 	bl	8002ca8 <HAL_GetTick>
 8005f38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f3a:	e00a      	b.n	8005f52 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f3c:	f7fc feb4 	bl	8002ca8 <HAL_GetTick>
 8005f40:	4602      	mov	r2, r0
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	1ad3      	subs	r3, r2, r3
 8005f46:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d901      	bls.n	8005f52 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005f4e:	2303      	movs	r3, #3
 8005f50:	e095      	b.n	800607e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f52:	4b4e      	ldr	r3, [pc, #312]	; (800608c <HAL_RCC_ClockConfig+0x264>)
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	f003 020c 	and.w	r2, r3, #12
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d1eb      	bne.n	8005f3c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f003 0302 	and.w	r3, r3, #2
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d023      	beq.n	8005fb8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f003 0304 	and.w	r3, r3, #4
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d005      	beq.n	8005f88 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f7c:	4b43      	ldr	r3, [pc, #268]	; (800608c <HAL_RCC_ClockConfig+0x264>)
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	4a42      	ldr	r2, [pc, #264]	; (800608c <HAL_RCC_ClockConfig+0x264>)
 8005f82:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005f86:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f003 0308 	and.w	r3, r3, #8
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d007      	beq.n	8005fa4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005f94:	4b3d      	ldr	r3, [pc, #244]	; (800608c <HAL_RCC_ClockConfig+0x264>)
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005f9c:	4a3b      	ldr	r2, [pc, #236]	; (800608c <HAL_RCC_ClockConfig+0x264>)
 8005f9e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005fa2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005fa4:	4b39      	ldr	r3, [pc, #228]	; (800608c <HAL_RCC_ClockConfig+0x264>)
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	4936      	ldr	r1, [pc, #216]	; (800608c <HAL_RCC_ClockConfig+0x264>)
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	608b      	str	r3, [r1, #8]
 8005fb6:	e008      	b.n	8005fca <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	2b80      	cmp	r3, #128	; 0x80
 8005fbc:	d105      	bne.n	8005fca <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005fbe:	4b33      	ldr	r3, [pc, #204]	; (800608c <HAL_RCC_ClockConfig+0x264>)
 8005fc0:	689b      	ldr	r3, [r3, #8]
 8005fc2:	4a32      	ldr	r2, [pc, #200]	; (800608c <HAL_RCC_ClockConfig+0x264>)
 8005fc4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005fc8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005fca:	4b2f      	ldr	r3, [pc, #188]	; (8006088 <HAL_RCC_ClockConfig+0x260>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f003 030f 	and.w	r3, r3, #15
 8005fd2:	683a      	ldr	r2, [r7, #0]
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d21d      	bcs.n	8006014 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fd8:	4b2b      	ldr	r3, [pc, #172]	; (8006088 <HAL_RCC_ClockConfig+0x260>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f023 020f 	bic.w	r2, r3, #15
 8005fe0:	4929      	ldr	r1, [pc, #164]	; (8006088 <HAL_RCC_ClockConfig+0x260>)
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005fe8:	f7fc fe5e 	bl	8002ca8 <HAL_GetTick>
 8005fec:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fee:	e00a      	b.n	8006006 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ff0:	f7fc fe5a 	bl	8002ca8 <HAL_GetTick>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	1ad3      	subs	r3, r2, r3
 8005ffa:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d901      	bls.n	8006006 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006002:	2303      	movs	r3, #3
 8006004:	e03b      	b.n	800607e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006006:	4b20      	ldr	r3, [pc, #128]	; (8006088 <HAL_RCC_ClockConfig+0x260>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f003 030f 	and.w	r3, r3, #15
 800600e:	683a      	ldr	r2, [r7, #0]
 8006010:	429a      	cmp	r2, r3
 8006012:	d1ed      	bne.n	8005ff0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f003 0304 	and.w	r3, r3, #4
 800601c:	2b00      	cmp	r3, #0
 800601e:	d008      	beq.n	8006032 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006020:	4b1a      	ldr	r3, [pc, #104]	; (800608c <HAL_RCC_ClockConfig+0x264>)
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	68db      	ldr	r3, [r3, #12]
 800602c:	4917      	ldr	r1, [pc, #92]	; (800608c <HAL_RCC_ClockConfig+0x264>)
 800602e:	4313      	orrs	r3, r2
 8006030:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f003 0308 	and.w	r3, r3, #8
 800603a:	2b00      	cmp	r3, #0
 800603c:	d009      	beq.n	8006052 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800603e:	4b13      	ldr	r3, [pc, #76]	; (800608c <HAL_RCC_ClockConfig+0x264>)
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	691b      	ldr	r3, [r3, #16]
 800604a:	00db      	lsls	r3, r3, #3
 800604c:	490f      	ldr	r1, [pc, #60]	; (800608c <HAL_RCC_ClockConfig+0x264>)
 800604e:	4313      	orrs	r3, r2
 8006050:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006052:	f000 f825 	bl	80060a0 <HAL_RCC_GetSysClockFreq>
 8006056:	4602      	mov	r2, r0
 8006058:	4b0c      	ldr	r3, [pc, #48]	; (800608c <HAL_RCC_ClockConfig+0x264>)
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	091b      	lsrs	r3, r3, #4
 800605e:	f003 030f 	and.w	r3, r3, #15
 8006062:	490c      	ldr	r1, [pc, #48]	; (8006094 <HAL_RCC_ClockConfig+0x26c>)
 8006064:	5ccb      	ldrb	r3, [r1, r3]
 8006066:	f003 031f 	and.w	r3, r3, #31
 800606a:	fa22 f303 	lsr.w	r3, r2, r3
 800606e:	4a0a      	ldr	r2, [pc, #40]	; (8006098 <HAL_RCC_ClockConfig+0x270>)
 8006070:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006072:	4b0a      	ldr	r3, [pc, #40]	; (800609c <HAL_RCC_ClockConfig+0x274>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4618      	mov	r0, r3
 8006078:	f7fc f8c8 	bl	800220c <HAL_InitTick>
 800607c:	4603      	mov	r3, r0
}
 800607e:	4618      	mov	r0, r3
 8006080:	3718      	adds	r7, #24
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}
 8006086:	bf00      	nop
 8006088:	40022000 	.word	0x40022000
 800608c:	40021000 	.word	0x40021000
 8006090:	04c4b400 	.word	0x04c4b400
 8006094:	0800f658 	.word	0x0800f658
 8006098:	2000002c 	.word	0x2000002c
 800609c:	20000030 	.word	0x20000030

080060a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b087      	sub	sp, #28
 80060a4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80060a6:	4b2c      	ldr	r3, [pc, #176]	; (8006158 <HAL_RCC_GetSysClockFreq+0xb8>)
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	f003 030c 	and.w	r3, r3, #12
 80060ae:	2b04      	cmp	r3, #4
 80060b0:	d102      	bne.n	80060b8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80060b2:	4b2a      	ldr	r3, [pc, #168]	; (800615c <HAL_RCC_GetSysClockFreq+0xbc>)
 80060b4:	613b      	str	r3, [r7, #16]
 80060b6:	e047      	b.n	8006148 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80060b8:	4b27      	ldr	r3, [pc, #156]	; (8006158 <HAL_RCC_GetSysClockFreq+0xb8>)
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	f003 030c 	and.w	r3, r3, #12
 80060c0:	2b08      	cmp	r3, #8
 80060c2:	d102      	bne.n	80060ca <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80060c4:	4b26      	ldr	r3, [pc, #152]	; (8006160 <HAL_RCC_GetSysClockFreq+0xc0>)
 80060c6:	613b      	str	r3, [r7, #16]
 80060c8:	e03e      	b.n	8006148 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80060ca:	4b23      	ldr	r3, [pc, #140]	; (8006158 <HAL_RCC_GetSysClockFreq+0xb8>)
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	f003 030c 	and.w	r3, r3, #12
 80060d2:	2b0c      	cmp	r3, #12
 80060d4:	d136      	bne.n	8006144 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80060d6:	4b20      	ldr	r3, [pc, #128]	; (8006158 <HAL_RCC_GetSysClockFreq+0xb8>)
 80060d8:	68db      	ldr	r3, [r3, #12]
 80060da:	f003 0303 	and.w	r3, r3, #3
 80060de:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80060e0:	4b1d      	ldr	r3, [pc, #116]	; (8006158 <HAL_RCC_GetSysClockFreq+0xb8>)
 80060e2:	68db      	ldr	r3, [r3, #12]
 80060e4:	091b      	lsrs	r3, r3, #4
 80060e6:	f003 030f 	and.w	r3, r3, #15
 80060ea:	3301      	adds	r3, #1
 80060ec:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2b03      	cmp	r3, #3
 80060f2:	d10c      	bne.n	800610e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80060f4:	4a1a      	ldr	r2, [pc, #104]	; (8006160 <HAL_RCC_GetSysClockFreq+0xc0>)
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80060fc:	4a16      	ldr	r2, [pc, #88]	; (8006158 <HAL_RCC_GetSysClockFreq+0xb8>)
 80060fe:	68d2      	ldr	r2, [r2, #12]
 8006100:	0a12      	lsrs	r2, r2, #8
 8006102:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006106:	fb02 f303 	mul.w	r3, r2, r3
 800610a:	617b      	str	r3, [r7, #20]
      break;
 800610c:	e00c      	b.n	8006128 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800610e:	4a13      	ldr	r2, [pc, #76]	; (800615c <HAL_RCC_GetSysClockFreq+0xbc>)
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	fbb2 f3f3 	udiv	r3, r2, r3
 8006116:	4a10      	ldr	r2, [pc, #64]	; (8006158 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006118:	68d2      	ldr	r2, [r2, #12]
 800611a:	0a12      	lsrs	r2, r2, #8
 800611c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006120:	fb02 f303 	mul.w	r3, r2, r3
 8006124:	617b      	str	r3, [r7, #20]
      break;
 8006126:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006128:	4b0b      	ldr	r3, [pc, #44]	; (8006158 <HAL_RCC_GetSysClockFreq+0xb8>)
 800612a:	68db      	ldr	r3, [r3, #12]
 800612c:	0e5b      	lsrs	r3, r3, #25
 800612e:	f003 0303 	and.w	r3, r3, #3
 8006132:	3301      	adds	r3, #1
 8006134:	005b      	lsls	r3, r3, #1
 8006136:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006138:	697a      	ldr	r2, [r7, #20]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006140:	613b      	str	r3, [r7, #16]
 8006142:	e001      	b.n	8006148 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006144:	2300      	movs	r3, #0
 8006146:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006148:	693b      	ldr	r3, [r7, #16]
}
 800614a:	4618      	mov	r0, r3
 800614c:	371c      	adds	r7, #28
 800614e:	46bd      	mov	sp, r7
 8006150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006154:	4770      	bx	lr
 8006156:	bf00      	nop
 8006158:	40021000 	.word	0x40021000
 800615c:	00f42400 	.word	0x00f42400
 8006160:	016e3600 	.word	0x016e3600

08006164 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006164:	b480      	push	{r7}
 8006166:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006168:	4b03      	ldr	r3, [pc, #12]	; (8006178 <HAL_RCC_GetHCLKFreq+0x14>)
 800616a:	681b      	ldr	r3, [r3, #0]
}
 800616c:	4618      	mov	r0, r3
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr
 8006176:	bf00      	nop
 8006178:	2000002c 	.word	0x2000002c

0800617c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006180:	f7ff fff0 	bl	8006164 <HAL_RCC_GetHCLKFreq>
 8006184:	4602      	mov	r2, r0
 8006186:	4b06      	ldr	r3, [pc, #24]	; (80061a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	0a1b      	lsrs	r3, r3, #8
 800618c:	f003 0307 	and.w	r3, r3, #7
 8006190:	4904      	ldr	r1, [pc, #16]	; (80061a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006192:	5ccb      	ldrb	r3, [r1, r3]
 8006194:	f003 031f 	and.w	r3, r3, #31
 8006198:	fa22 f303 	lsr.w	r3, r2, r3
}
 800619c:	4618      	mov	r0, r3
 800619e:	bd80      	pop	{r7, pc}
 80061a0:	40021000 	.word	0x40021000
 80061a4:	0800f668 	.word	0x0800f668

080061a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80061ac:	f7ff ffda 	bl	8006164 <HAL_RCC_GetHCLKFreq>
 80061b0:	4602      	mov	r2, r0
 80061b2:	4b06      	ldr	r3, [pc, #24]	; (80061cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	0adb      	lsrs	r3, r3, #11
 80061b8:	f003 0307 	and.w	r3, r3, #7
 80061bc:	4904      	ldr	r1, [pc, #16]	; (80061d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80061be:	5ccb      	ldrb	r3, [r1, r3]
 80061c0:	f003 031f 	and.w	r3, r3, #31
 80061c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	bd80      	pop	{r7, pc}
 80061cc:	40021000 	.word	0x40021000
 80061d0:	0800f668 	.word	0x0800f668

080061d4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b083      	sub	sp, #12
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	220f      	movs	r2, #15
 80061e2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80061e4:	4b12      	ldr	r3, [pc, #72]	; (8006230 <HAL_RCC_GetClockConfig+0x5c>)
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	f003 0203 	and.w	r2, r3, #3
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80061f0:	4b0f      	ldr	r3, [pc, #60]	; (8006230 <HAL_RCC_GetClockConfig+0x5c>)
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80061fc:	4b0c      	ldr	r3, [pc, #48]	; (8006230 <HAL_RCC_GetClockConfig+0x5c>)
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8006208:	4b09      	ldr	r3, [pc, #36]	; (8006230 <HAL_RCC_GetClockConfig+0x5c>)
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	08db      	lsrs	r3, r3, #3
 800620e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8006216:	4b07      	ldr	r3, [pc, #28]	; (8006234 <HAL_RCC_GetClockConfig+0x60>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f003 020f 	and.w	r2, r3, #15
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	601a      	str	r2, [r3, #0]
}
 8006222:	bf00      	nop
 8006224:	370c      	adds	r7, #12
 8006226:	46bd      	mov	sp, r7
 8006228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622c:	4770      	bx	lr
 800622e:	bf00      	nop
 8006230:	40021000 	.word	0x40021000
 8006234:	40022000 	.word	0x40022000

08006238 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006238:	b480      	push	{r7}
 800623a:	b087      	sub	sp, #28
 800623c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800623e:	4b1e      	ldr	r3, [pc, #120]	; (80062b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006240:	68db      	ldr	r3, [r3, #12]
 8006242:	f003 0303 	and.w	r3, r3, #3
 8006246:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006248:	4b1b      	ldr	r3, [pc, #108]	; (80062b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800624a:	68db      	ldr	r3, [r3, #12]
 800624c:	091b      	lsrs	r3, r3, #4
 800624e:	f003 030f 	and.w	r3, r3, #15
 8006252:	3301      	adds	r3, #1
 8006254:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	2b03      	cmp	r3, #3
 800625a:	d10c      	bne.n	8006276 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800625c:	4a17      	ldr	r2, [pc, #92]	; (80062bc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	fbb2 f3f3 	udiv	r3, r2, r3
 8006264:	4a14      	ldr	r2, [pc, #80]	; (80062b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006266:	68d2      	ldr	r2, [r2, #12]
 8006268:	0a12      	lsrs	r2, r2, #8
 800626a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800626e:	fb02 f303 	mul.w	r3, r2, r3
 8006272:	617b      	str	r3, [r7, #20]
    break;
 8006274:	e00c      	b.n	8006290 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006276:	4a12      	ldr	r2, [pc, #72]	; (80062c0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	fbb2 f3f3 	udiv	r3, r2, r3
 800627e:	4a0e      	ldr	r2, [pc, #56]	; (80062b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006280:	68d2      	ldr	r2, [r2, #12]
 8006282:	0a12      	lsrs	r2, r2, #8
 8006284:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006288:	fb02 f303 	mul.w	r3, r2, r3
 800628c:	617b      	str	r3, [r7, #20]
    break;
 800628e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006290:	4b09      	ldr	r3, [pc, #36]	; (80062b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	0e5b      	lsrs	r3, r3, #25
 8006296:	f003 0303 	and.w	r3, r3, #3
 800629a:	3301      	adds	r3, #1
 800629c:	005b      	lsls	r3, r3, #1
 800629e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80062a0:	697a      	ldr	r2, [r7, #20]
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80062a8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80062aa:	687b      	ldr	r3, [r7, #4]
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	371c      	adds	r7, #28
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr
 80062b8:	40021000 	.word	0x40021000
 80062bc:	016e3600 	.word	0x016e3600
 80062c0:	00f42400 	.word	0x00f42400

080062c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b086      	sub	sp, #24
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80062cc:	2300      	movs	r3, #0
 80062ce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80062d0:	2300      	movs	r3, #0
 80062d2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80062dc:	2b00      	cmp	r3, #0
 80062de:	f000 8098 	beq.w	8006412 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80062e2:	2300      	movs	r3, #0
 80062e4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80062e6:	4b43      	ldr	r3, [pc, #268]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d10d      	bne.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80062f2:	4b40      	ldr	r3, [pc, #256]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062f6:	4a3f      	ldr	r2, [pc, #252]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062fc:	6593      	str	r3, [r2, #88]	; 0x58
 80062fe:	4b3d      	ldr	r3, [pc, #244]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006306:	60bb      	str	r3, [r7, #8]
 8006308:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800630a:	2301      	movs	r3, #1
 800630c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800630e:	4b3a      	ldr	r3, [pc, #232]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a39      	ldr	r2, [pc, #228]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006314:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006318:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800631a:	f7fc fcc5 	bl	8002ca8 <HAL_GetTick>
 800631e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006320:	e009      	b.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006322:	f7fc fcc1 	bl	8002ca8 <HAL_GetTick>
 8006326:	4602      	mov	r2, r0
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	1ad3      	subs	r3, r2, r3
 800632c:	2b02      	cmp	r3, #2
 800632e:	d902      	bls.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006330:	2303      	movs	r3, #3
 8006332:	74fb      	strb	r3, [r7, #19]
        break;
 8006334:	e005      	b.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006336:	4b30      	ldr	r3, [pc, #192]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800633e:	2b00      	cmp	r3, #0
 8006340:	d0ef      	beq.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006342:	7cfb      	ldrb	r3, [r7, #19]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d159      	bne.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006348:	4b2a      	ldr	r3, [pc, #168]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800634a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800634e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006352:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d01e      	beq.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800635e:	697a      	ldr	r2, [r7, #20]
 8006360:	429a      	cmp	r2, r3
 8006362:	d019      	beq.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006364:	4b23      	ldr	r3, [pc, #140]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006366:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800636a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800636e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006370:	4b20      	ldr	r3, [pc, #128]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006376:	4a1f      	ldr	r2, [pc, #124]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006378:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800637c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006380:	4b1c      	ldr	r3, [pc, #112]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006386:	4a1b      	ldr	r2, [pc, #108]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006388:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800638c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006390:	4a18      	ldr	r2, [pc, #96]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	f003 0301 	and.w	r3, r3, #1
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d016      	beq.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063a2:	f7fc fc81 	bl	8002ca8 <HAL_GetTick>
 80063a6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80063a8:	e00b      	b.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063aa:	f7fc fc7d 	bl	8002ca8 <HAL_GetTick>
 80063ae:	4602      	mov	r2, r0
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	1ad3      	subs	r3, r2, r3
 80063b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d902      	bls.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80063bc:	2303      	movs	r3, #3
 80063be:	74fb      	strb	r3, [r7, #19]
            break;
 80063c0:	e006      	b.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80063c2:	4b0c      	ldr	r3, [pc, #48]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063c8:	f003 0302 	and.w	r3, r3, #2
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d0ec      	beq.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80063d0:	7cfb      	ldrb	r3, [r7, #19]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d10b      	bne.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80063d6:	4b07      	ldr	r3, [pc, #28]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063e4:	4903      	ldr	r1, [pc, #12]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063e6:	4313      	orrs	r3, r2
 80063e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80063ec:	e008      	b.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80063ee:	7cfb      	ldrb	r3, [r7, #19]
 80063f0:	74bb      	strb	r3, [r7, #18]
 80063f2:	e005      	b.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80063f4:	40021000 	.word	0x40021000
 80063f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063fc:	7cfb      	ldrb	r3, [r7, #19]
 80063fe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006400:	7c7b      	ldrb	r3, [r7, #17]
 8006402:	2b01      	cmp	r3, #1
 8006404:	d105      	bne.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006406:	4ba7      	ldr	r3, [pc, #668]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800640a:	4aa6      	ldr	r2, [pc, #664]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800640c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006410:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f003 0301 	and.w	r3, r3, #1
 800641a:	2b00      	cmp	r3, #0
 800641c:	d00a      	beq.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800641e:	4ba1      	ldr	r3, [pc, #644]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006420:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006424:	f023 0203 	bic.w	r2, r3, #3
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	499d      	ldr	r1, [pc, #628]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800642e:	4313      	orrs	r3, r2
 8006430:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f003 0302 	and.w	r3, r3, #2
 800643c:	2b00      	cmp	r3, #0
 800643e:	d00a      	beq.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006440:	4b98      	ldr	r3, [pc, #608]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006446:	f023 020c 	bic.w	r2, r3, #12
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	689b      	ldr	r3, [r3, #8]
 800644e:	4995      	ldr	r1, [pc, #596]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006450:	4313      	orrs	r3, r2
 8006452:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f003 0304 	and.w	r3, r3, #4
 800645e:	2b00      	cmp	r3, #0
 8006460:	d00a      	beq.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006462:	4b90      	ldr	r3, [pc, #576]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006464:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006468:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	68db      	ldr	r3, [r3, #12]
 8006470:	498c      	ldr	r1, [pc, #560]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006472:	4313      	orrs	r3, r2
 8006474:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f003 0308 	and.w	r3, r3, #8
 8006480:	2b00      	cmp	r3, #0
 8006482:	d00a      	beq.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006484:	4b87      	ldr	r3, [pc, #540]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800648a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	691b      	ldr	r3, [r3, #16]
 8006492:	4984      	ldr	r1, [pc, #528]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006494:	4313      	orrs	r3, r2
 8006496:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f003 0310 	and.w	r3, r3, #16
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d00a      	beq.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80064a6:	4b7f      	ldr	r3, [pc, #508]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	695b      	ldr	r3, [r3, #20]
 80064b4:	497b      	ldr	r1, [pc, #492]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064b6:	4313      	orrs	r3, r2
 80064b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f003 0320 	and.w	r3, r3, #32
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d00a      	beq.n	80064de <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80064c8:	4b76      	ldr	r3, [pc, #472]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064ce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	699b      	ldr	r3, [r3, #24]
 80064d6:	4973      	ldr	r1, [pc, #460]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064d8:	4313      	orrs	r3, r2
 80064da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d00a      	beq.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80064ea:	4b6e      	ldr	r3, [pc, #440]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064f0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	69db      	ldr	r3, [r3, #28]
 80064f8:	496a      	ldr	r1, [pc, #424]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064fa:	4313      	orrs	r3, r2
 80064fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006508:	2b00      	cmp	r3, #0
 800650a:	d00a      	beq.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800650c:	4b65      	ldr	r3, [pc, #404]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800650e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006512:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6a1b      	ldr	r3, [r3, #32]
 800651a:	4962      	ldr	r1, [pc, #392]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800651c:	4313      	orrs	r3, r2
 800651e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800652a:	2b00      	cmp	r3, #0
 800652c:	d00a      	beq.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800652e:	4b5d      	ldr	r3, [pc, #372]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006534:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800653c:	4959      	ldr	r1, [pc, #356]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800653e:	4313      	orrs	r3, r2
 8006540:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800654c:	2b00      	cmp	r3, #0
 800654e:	d00a      	beq.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006550:	4b54      	ldr	r3, [pc, #336]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006552:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006556:	f023 0203 	bic.w	r2, r3, #3
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800655e:	4951      	ldr	r1, [pc, #324]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006560:	4313      	orrs	r3, r2
 8006562:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800656e:	2b00      	cmp	r3, #0
 8006570:	d00a      	beq.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006572:	4b4c      	ldr	r3, [pc, #304]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006574:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006578:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006580:	4948      	ldr	r1, [pc, #288]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006582:	4313      	orrs	r3, r2
 8006584:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006590:	2b00      	cmp	r3, #0
 8006592:	d015      	beq.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006594:	4b43      	ldr	r3, [pc, #268]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800659a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065a2:	4940      	ldr	r1, [pc, #256]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065a4:	4313      	orrs	r3, r2
 80065a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065b2:	d105      	bne.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80065b4:	4b3b      	ldr	r3, [pc, #236]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065b6:	68db      	ldr	r3, [r3, #12]
 80065b8:	4a3a      	ldr	r2, [pc, #232]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80065be:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d015      	beq.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80065cc:	4b35      	ldr	r3, [pc, #212]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065d2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065da:	4932      	ldr	r1, [pc, #200]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065dc:	4313      	orrs	r3, r2
 80065de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80065ea:	d105      	bne.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80065ec:	4b2d      	ldr	r3, [pc, #180]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065ee:	68db      	ldr	r3, [r3, #12]
 80065f0:	4a2c      	ldr	r2, [pc, #176]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80065f6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006600:	2b00      	cmp	r3, #0
 8006602:	d015      	beq.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006604:	4b27      	ldr	r3, [pc, #156]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800660a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006612:	4924      	ldr	r1, [pc, #144]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006614:	4313      	orrs	r3, r2
 8006616:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800661e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006622:	d105      	bne.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006624:	4b1f      	ldr	r3, [pc, #124]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006626:	68db      	ldr	r3, [r3, #12]
 8006628:	4a1e      	ldr	r2, [pc, #120]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800662a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800662e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006638:	2b00      	cmp	r3, #0
 800663a:	d015      	beq.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800663c:	4b19      	ldr	r3, [pc, #100]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800663e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006642:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800664a:	4916      	ldr	r1, [pc, #88]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800664c:	4313      	orrs	r3, r2
 800664e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006656:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800665a:	d105      	bne.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800665c:	4b11      	ldr	r3, [pc, #68]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800665e:	68db      	ldr	r3, [r3, #12]
 8006660:	4a10      	ldr	r2, [pc, #64]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006662:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006666:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006670:	2b00      	cmp	r3, #0
 8006672:	d019      	beq.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006674:	4b0b      	ldr	r3, [pc, #44]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800667a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006682:	4908      	ldr	r1, [pc, #32]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006684:	4313      	orrs	r3, r2
 8006686:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800668e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006692:	d109      	bne.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006694:	4b03      	ldr	r3, [pc, #12]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006696:	68db      	ldr	r3, [r3, #12]
 8006698:	4a02      	ldr	r2, [pc, #8]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800669a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800669e:	60d3      	str	r3, [r2, #12]
 80066a0:	e002      	b.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80066a2:	bf00      	nop
 80066a4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d015      	beq.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80066b4:	4b29      	ldr	r3, [pc, #164]	; (800675c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80066b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066ba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066c2:	4926      	ldr	r1, [pc, #152]	; (800675c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80066c4:	4313      	orrs	r3, r2
 80066c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066d2:	d105      	bne.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80066d4:	4b21      	ldr	r3, [pc, #132]	; (800675c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80066d6:	68db      	ldr	r3, [r3, #12]
 80066d8:	4a20      	ldr	r2, [pc, #128]	; (800675c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80066da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066de:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d015      	beq.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80066ec:	4b1b      	ldr	r3, [pc, #108]	; (800675c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80066ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066f2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066fa:	4918      	ldr	r1, [pc, #96]	; (800675c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80066fc:	4313      	orrs	r3, r2
 80066fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006706:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800670a:	d105      	bne.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800670c:	4b13      	ldr	r3, [pc, #76]	; (800675c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800670e:	68db      	ldr	r3, [r3, #12]
 8006710:	4a12      	ldr	r2, [pc, #72]	; (800675c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006712:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006716:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006720:	2b00      	cmp	r3, #0
 8006722:	d015      	beq.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006724:	4b0d      	ldr	r3, [pc, #52]	; (800675c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006726:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800672a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006732:	490a      	ldr	r1, [pc, #40]	; (800675c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006734:	4313      	orrs	r3, r2
 8006736:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800673e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006742:	d105      	bne.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006744:	4b05      	ldr	r3, [pc, #20]	; (800675c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006746:	68db      	ldr	r3, [r3, #12]
 8006748:	4a04      	ldr	r2, [pc, #16]	; (800675c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800674a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800674e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006750:	7cbb      	ldrb	r3, [r7, #18]
}
 8006752:	4618      	mov	r0, r3
 8006754:	3718      	adds	r7, #24
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}
 800675a:	bf00      	nop
 800675c:	40021000 	.word	0x40021000

08006760 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b082      	sub	sp, #8
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d101      	bne.n	8006772 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800676e:	2301      	movs	r3, #1
 8006770:	e049      	b.n	8006806 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006778:	b2db      	uxtb	r3, r3
 800677a:	2b00      	cmp	r3, #0
 800677c:	d106      	bne.n	800678c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f7fc f8aa 	bl	80028e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2202      	movs	r2, #2
 8006790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681a      	ldr	r2, [r3, #0]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	3304      	adds	r3, #4
 800679c:	4619      	mov	r1, r3
 800679e:	4610      	mov	r0, r2
 80067a0:	f001 f834 	bl	800780c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2201      	movs	r2, #1
 80067a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2201      	movs	r2, #1
 80067b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2201      	movs	r2, #1
 80067b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2201      	movs	r2, #1
 80067c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2201      	movs	r2, #1
 80067c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2201      	movs	r2, #1
 80067d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2201      	movs	r2, #1
 80067d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2201      	movs	r2, #1
 80067e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2201      	movs	r2, #1
 80067e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2201      	movs	r2, #1
 80067f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2201      	movs	r2, #1
 80067f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2201      	movs	r2, #1
 8006800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006804:	2300      	movs	r3, #0
}
 8006806:	4618      	mov	r0, r3
 8006808:	3708      	adds	r7, #8
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}
	...

08006810 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006810:	b480      	push	{r7}
 8006812:	b085      	sub	sp, #20
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800681e:	b2db      	uxtb	r3, r3
 8006820:	2b01      	cmp	r3, #1
 8006822:	d001      	beq.n	8006828 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006824:	2301      	movs	r3, #1
 8006826:	e04c      	b.n	80068c2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2202      	movs	r2, #2
 800682c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a26      	ldr	r2, [pc, #152]	; (80068d0 <HAL_TIM_Base_Start+0xc0>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d022      	beq.n	8006880 <HAL_TIM_Base_Start+0x70>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006842:	d01d      	beq.n	8006880 <HAL_TIM_Base_Start+0x70>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a22      	ldr	r2, [pc, #136]	; (80068d4 <HAL_TIM_Base_Start+0xc4>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d018      	beq.n	8006880 <HAL_TIM_Base_Start+0x70>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a21      	ldr	r2, [pc, #132]	; (80068d8 <HAL_TIM_Base_Start+0xc8>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d013      	beq.n	8006880 <HAL_TIM_Base_Start+0x70>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a1f      	ldr	r2, [pc, #124]	; (80068dc <HAL_TIM_Base_Start+0xcc>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d00e      	beq.n	8006880 <HAL_TIM_Base_Start+0x70>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a1e      	ldr	r2, [pc, #120]	; (80068e0 <HAL_TIM_Base_Start+0xd0>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d009      	beq.n	8006880 <HAL_TIM_Base_Start+0x70>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a1c      	ldr	r2, [pc, #112]	; (80068e4 <HAL_TIM_Base_Start+0xd4>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d004      	beq.n	8006880 <HAL_TIM_Base_Start+0x70>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a1b      	ldr	r2, [pc, #108]	; (80068e8 <HAL_TIM_Base_Start+0xd8>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d115      	bne.n	80068ac <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	689a      	ldr	r2, [r3, #8]
 8006886:	4b19      	ldr	r3, [pc, #100]	; (80068ec <HAL_TIM_Base_Start+0xdc>)
 8006888:	4013      	ands	r3, r2
 800688a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2b06      	cmp	r3, #6
 8006890:	d015      	beq.n	80068be <HAL_TIM_Base_Start+0xae>
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006898:	d011      	beq.n	80068be <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f042 0201 	orr.w	r2, r2, #1
 80068a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068aa:	e008      	b.n	80068be <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f042 0201 	orr.w	r2, r2, #1
 80068ba:	601a      	str	r2, [r3, #0]
 80068bc:	e000      	b.n	80068c0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80068c0:	2300      	movs	r3, #0
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3714      	adds	r7, #20
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr
 80068ce:	bf00      	nop
 80068d0:	40012c00 	.word	0x40012c00
 80068d4:	40000400 	.word	0x40000400
 80068d8:	40000800 	.word	0x40000800
 80068dc:	40000c00 	.word	0x40000c00
 80068e0:	40013400 	.word	0x40013400
 80068e4:	40014000 	.word	0x40014000
 80068e8:	40015000 	.word	0x40015000
 80068ec:	00010007 	.word	0x00010007

080068f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b085      	sub	sp, #20
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	2b01      	cmp	r3, #1
 8006902:	d001      	beq.n	8006908 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006904:	2301      	movs	r3, #1
 8006906:	e054      	b.n	80069b2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2202      	movs	r2, #2
 800690c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	68da      	ldr	r2, [r3, #12]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f042 0201 	orr.w	r2, r2, #1
 800691e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a26      	ldr	r2, [pc, #152]	; (80069c0 <HAL_TIM_Base_Start_IT+0xd0>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d022      	beq.n	8006970 <HAL_TIM_Base_Start_IT+0x80>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006932:	d01d      	beq.n	8006970 <HAL_TIM_Base_Start_IT+0x80>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a22      	ldr	r2, [pc, #136]	; (80069c4 <HAL_TIM_Base_Start_IT+0xd4>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d018      	beq.n	8006970 <HAL_TIM_Base_Start_IT+0x80>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a21      	ldr	r2, [pc, #132]	; (80069c8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d013      	beq.n	8006970 <HAL_TIM_Base_Start_IT+0x80>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a1f      	ldr	r2, [pc, #124]	; (80069cc <HAL_TIM_Base_Start_IT+0xdc>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d00e      	beq.n	8006970 <HAL_TIM_Base_Start_IT+0x80>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a1e      	ldr	r2, [pc, #120]	; (80069d0 <HAL_TIM_Base_Start_IT+0xe0>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d009      	beq.n	8006970 <HAL_TIM_Base_Start_IT+0x80>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a1c      	ldr	r2, [pc, #112]	; (80069d4 <HAL_TIM_Base_Start_IT+0xe4>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d004      	beq.n	8006970 <HAL_TIM_Base_Start_IT+0x80>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a1b      	ldr	r2, [pc, #108]	; (80069d8 <HAL_TIM_Base_Start_IT+0xe8>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d115      	bne.n	800699c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	689a      	ldr	r2, [r3, #8]
 8006976:	4b19      	ldr	r3, [pc, #100]	; (80069dc <HAL_TIM_Base_Start_IT+0xec>)
 8006978:	4013      	ands	r3, r2
 800697a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	2b06      	cmp	r3, #6
 8006980:	d015      	beq.n	80069ae <HAL_TIM_Base_Start_IT+0xbe>
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006988:	d011      	beq.n	80069ae <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	681a      	ldr	r2, [r3, #0]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f042 0201 	orr.w	r2, r2, #1
 8006998:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800699a:	e008      	b.n	80069ae <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f042 0201 	orr.w	r2, r2, #1
 80069aa:	601a      	str	r2, [r3, #0]
 80069ac:	e000      	b.n	80069b0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80069b0:	2300      	movs	r3, #0
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3714      	adds	r7, #20
 80069b6:	46bd      	mov	sp, r7
 80069b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069bc:	4770      	bx	lr
 80069be:	bf00      	nop
 80069c0:	40012c00 	.word	0x40012c00
 80069c4:	40000400 	.word	0x40000400
 80069c8:	40000800 	.word	0x40000800
 80069cc:	40000c00 	.word	0x40000c00
 80069d0:	40013400 	.word	0x40013400
 80069d4:	40014000 	.word	0x40014000
 80069d8:	40015000 	.word	0x40015000
 80069dc:	00010007 	.word	0x00010007

080069e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b082      	sub	sp, #8
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d101      	bne.n	80069f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80069ee:	2301      	movs	r3, #1
 80069f0:	e049      	b.n	8006a86 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069f8:	b2db      	uxtb	r3, r3
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d106      	bne.n	8006a0c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2200      	movs	r2, #0
 8006a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f000 f841 	bl	8006a8e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2202      	movs	r2, #2
 8006a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681a      	ldr	r2, [r3, #0]
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	3304      	adds	r3, #4
 8006a1c:	4619      	mov	r1, r3
 8006a1e:	4610      	mov	r0, r2
 8006a20:	f000 fef4 	bl	800780c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2201      	movs	r2, #1
 8006a28:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2201      	movs	r2, #1
 8006a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2201      	movs	r2, #1
 8006a38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2201      	movs	r2, #1
 8006a40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2201      	movs	r2, #1
 8006a48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2201      	movs	r2, #1
 8006a50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2201      	movs	r2, #1
 8006a58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2201      	movs	r2, #1
 8006a60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2201      	movs	r2, #1
 8006a68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2201      	movs	r2, #1
 8006a70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2201      	movs	r2, #1
 8006a78:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2201      	movs	r2, #1
 8006a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a84:	2300      	movs	r3, #0
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3708      	adds	r7, #8
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}

08006a8e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006a8e:	b480      	push	{r7}
 8006a90:	b083      	sub	sp, #12
 8006a92:	af00      	add	r7, sp, #0
 8006a94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006a96:	bf00      	nop
 8006a98:	370c      	adds	r7, #12
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr
	...

08006aa4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b084      	sub	sp, #16
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d109      	bne.n	8006ac8 <HAL_TIM_PWM_Start+0x24>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006aba:	b2db      	uxtb	r3, r3
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	bf14      	ite	ne
 8006ac0:	2301      	movne	r3, #1
 8006ac2:	2300      	moveq	r3, #0
 8006ac4:	b2db      	uxtb	r3, r3
 8006ac6:	e03c      	b.n	8006b42 <HAL_TIM_PWM_Start+0x9e>
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	2b04      	cmp	r3, #4
 8006acc:	d109      	bne.n	8006ae2 <HAL_TIM_PWM_Start+0x3e>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006ad4:	b2db      	uxtb	r3, r3
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	bf14      	ite	ne
 8006ada:	2301      	movne	r3, #1
 8006adc:	2300      	moveq	r3, #0
 8006ade:	b2db      	uxtb	r3, r3
 8006ae0:	e02f      	b.n	8006b42 <HAL_TIM_PWM_Start+0x9e>
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	2b08      	cmp	r3, #8
 8006ae6:	d109      	bne.n	8006afc <HAL_TIM_PWM_Start+0x58>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006aee:	b2db      	uxtb	r3, r3
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	bf14      	ite	ne
 8006af4:	2301      	movne	r3, #1
 8006af6:	2300      	moveq	r3, #0
 8006af8:	b2db      	uxtb	r3, r3
 8006afa:	e022      	b.n	8006b42 <HAL_TIM_PWM_Start+0x9e>
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	2b0c      	cmp	r3, #12
 8006b00:	d109      	bne.n	8006b16 <HAL_TIM_PWM_Start+0x72>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b08:	b2db      	uxtb	r3, r3
 8006b0a:	2b01      	cmp	r3, #1
 8006b0c:	bf14      	ite	ne
 8006b0e:	2301      	movne	r3, #1
 8006b10:	2300      	moveq	r3, #0
 8006b12:	b2db      	uxtb	r3, r3
 8006b14:	e015      	b.n	8006b42 <HAL_TIM_PWM_Start+0x9e>
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	2b10      	cmp	r3, #16
 8006b1a:	d109      	bne.n	8006b30 <HAL_TIM_PWM_Start+0x8c>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006b22:	b2db      	uxtb	r3, r3
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	bf14      	ite	ne
 8006b28:	2301      	movne	r3, #1
 8006b2a:	2300      	moveq	r3, #0
 8006b2c:	b2db      	uxtb	r3, r3
 8006b2e:	e008      	b.n	8006b42 <HAL_TIM_PWM_Start+0x9e>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006b36:	b2db      	uxtb	r3, r3
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	bf14      	ite	ne
 8006b3c:	2301      	movne	r3, #1
 8006b3e:	2300      	moveq	r3, #0
 8006b40:	b2db      	uxtb	r3, r3
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d001      	beq.n	8006b4a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	e0a6      	b.n	8006c98 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d104      	bne.n	8006b5a <HAL_TIM_PWM_Start+0xb6>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2202      	movs	r2, #2
 8006b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b58:	e023      	b.n	8006ba2 <HAL_TIM_PWM_Start+0xfe>
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	2b04      	cmp	r3, #4
 8006b5e:	d104      	bne.n	8006b6a <HAL_TIM_PWM_Start+0xc6>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2202      	movs	r2, #2
 8006b64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b68:	e01b      	b.n	8006ba2 <HAL_TIM_PWM_Start+0xfe>
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	2b08      	cmp	r3, #8
 8006b6e:	d104      	bne.n	8006b7a <HAL_TIM_PWM_Start+0xd6>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2202      	movs	r2, #2
 8006b74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b78:	e013      	b.n	8006ba2 <HAL_TIM_PWM_Start+0xfe>
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	2b0c      	cmp	r3, #12
 8006b7e:	d104      	bne.n	8006b8a <HAL_TIM_PWM_Start+0xe6>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2202      	movs	r2, #2
 8006b84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006b88:	e00b      	b.n	8006ba2 <HAL_TIM_PWM_Start+0xfe>
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	2b10      	cmp	r3, #16
 8006b8e:	d104      	bne.n	8006b9a <HAL_TIM_PWM_Start+0xf6>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2202      	movs	r2, #2
 8006b94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b98:	e003      	b.n	8006ba2 <HAL_TIM_PWM_Start+0xfe>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2202      	movs	r2, #2
 8006b9e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	6839      	ldr	r1, [r7, #0]
 8006baa:	4618      	mov	r0, r3
 8006bac:	f001 fa9c 	bl	80080e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a3a      	ldr	r2, [pc, #232]	; (8006ca0 <HAL_TIM_PWM_Start+0x1fc>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d018      	beq.n	8006bec <HAL_TIM_PWM_Start+0x148>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a39      	ldr	r2, [pc, #228]	; (8006ca4 <HAL_TIM_PWM_Start+0x200>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d013      	beq.n	8006bec <HAL_TIM_PWM_Start+0x148>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a37      	ldr	r2, [pc, #220]	; (8006ca8 <HAL_TIM_PWM_Start+0x204>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d00e      	beq.n	8006bec <HAL_TIM_PWM_Start+0x148>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a36      	ldr	r2, [pc, #216]	; (8006cac <HAL_TIM_PWM_Start+0x208>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d009      	beq.n	8006bec <HAL_TIM_PWM_Start+0x148>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a34      	ldr	r2, [pc, #208]	; (8006cb0 <HAL_TIM_PWM_Start+0x20c>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d004      	beq.n	8006bec <HAL_TIM_PWM_Start+0x148>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a33      	ldr	r2, [pc, #204]	; (8006cb4 <HAL_TIM_PWM_Start+0x210>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d101      	bne.n	8006bf0 <HAL_TIM_PWM_Start+0x14c>
 8006bec:	2301      	movs	r3, #1
 8006bee:	e000      	b.n	8006bf2 <HAL_TIM_PWM_Start+0x14e>
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d007      	beq.n	8006c06 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006c04:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a25      	ldr	r2, [pc, #148]	; (8006ca0 <HAL_TIM_PWM_Start+0x1fc>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d022      	beq.n	8006c56 <HAL_TIM_PWM_Start+0x1b2>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c18:	d01d      	beq.n	8006c56 <HAL_TIM_PWM_Start+0x1b2>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a26      	ldr	r2, [pc, #152]	; (8006cb8 <HAL_TIM_PWM_Start+0x214>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d018      	beq.n	8006c56 <HAL_TIM_PWM_Start+0x1b2>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a24      	ldr	r2, [pc, #144]	; (8006cbc <HAL_TIM_PWM_Start+0x218>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d013      	beq.n	8006c56 <HAL_TIM_PWM_Start+0x1b2>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a23      	ldr	r2, [pc, #140]	; (8006cc0 <HAL_TIM_PWM_Start+0x21c>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d00e      	beq.n	8006c56 <HAL_TIM_PWM_Start+0x1b2>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a19      	ldr	r2, [pc, #100]	; (8006ca4 <HAL_TIM_PWM_Start+0x200>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d009      	beq.n	8006c56 <HAL_TIM_PWM_Start+0x1b2>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a18      	ldr	r2, [pc, #96]	; (8006ca8 <HAL_TIM_PWM_Start+0x204>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d004      	beq.n	8006c56 <HAL_TIM_PWM_Start+0x1b2>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a18      	ldr	r2, [pc, #96]	; (8006cb4 <HAL_TIM_PWM_Start+0x210>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d115      	bne.n	8006c82 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	689a      	ldr	r2, [r3, #8]
 8006c5c:	4b19      	ldr	r3, [pc, #100]	; (8006cc4 <HAL_TIM_PWM_Start+0x220>)
 8006c5e:	4013      	ands	r3, r2
 8006c60:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2b06      	cmp	r3, #6
 8006c66:	d015      	beq.n	8006c94 <HAL_TIM_PWM_Start+0x1f0>
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c6e:	d011      	beq.n	8006c94 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	681a      	ldr	r2, [r3, #0]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f042 0201 	orr.w	r2, r2, #1
 8006c7e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c80:	e008      	b.n	8006c94 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	681a      	ldr	r2, [r3, #0]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f042 0201 	orr.w	r2, r2, #1
 8006c90:	601a      	str	r2, [r3, #0]
 8006c92:	e000      	b.n	8006c96 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c94:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006c96:	2300      	movs	r3, #0
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3710      	adds	r7, #16
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}
 8006ca0:	40012c00 	.word	0x40012c00
 8006ca4:	40013400 	.word	0x40013400
 8006ca8:	40014000 	.word	0x40014000
 8006cac:	40014400 	.word	0x40014400
 8006cb0:	40014800 	.word	0x40014800
 8006cb4:	40015000 	.word	0x40015000
 8006cb8:	40000400 	.word	0x40000400
 8006cbc:	40000800 	.word	0x40000800
 8006cc0:	40000c00 	.word	0x40000c00
 8006cc4:	00010007 	.word	0x00010007

08006cc8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b082      	sub	sp, #8
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	6839      	ldr	r1, [r7, #0]
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f001 fa04 	bl	80080e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a40      	ldr	r2, [pc, #256]	; (8006de8 <HAL_TIM_PWM_Stop+0x120>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d018      	beq.n	8006d1c <HAL_TIM_PWM_Stop+0x54>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a3f      	ldr	r2, [pc, #252]	; (8006dec <HAL_TIM_PWM_Stop+0x124>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d013      	beq.n	8006d1c <HAL_TIM_PWM_Stop+0x54>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a3d      	ldr	r2, [pc, #244]	; (8006df0 <HAL_TIM_PWM_Stop+0x128>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d00e      	beq.n	8006d1c <HAL_TIM_PWM_Stop+0x54>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a3c      	ldr	r2, [pc, #240]	; (8006df4 <HAL_TIM_PWM_Stop+0x12c>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d009      	beq.n	8006d1c <HAL_TIM_PWM_Stop+0x54>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a3a      	ldr	r2, [pc, #232]	; (8006df8 <HAL_TIM_PWM_Stop+0x130>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d004      	beq.n	8006d1c <HAL_TIM_PWM_Stop+0x54>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a39      	ldr	r2, [pc, #228]	; (8006dfc <HAL_TIM_PWM_Stop+0x134>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d101      	bne.n	8006d20 <HAL_TIM_PWM_Stop+0x58>
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	e000      	b.n	8006d22 <HAL_TIM_PWM_Stop+0x5a>
 8006d20:	2300      	movs	r3, #0
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d017      	beq.n	8006d56 <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	6a1a      	ldr	r2, [r3, #32]
 8006d2c:	f241 1311 	movw	r3, #4369	; 0x1111
 8006d30:	4013      	ands	r3, r2
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d10f      	bne.n	8006d56 <HAL_TIM_PWM_Stop+0x8e>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	6a1a      	ldr	r2, [r3, #32]
 8006d3c:	f244 4344 	movw	r3, #17476	; 0x4444
 8006d40:	4013      	ands	r3, r2
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d107      	bne.n	8006d56 <HAL_TIM_PWM_Stop+0x8e>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006d54:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	6a1a      	ldr	r2, [r3, #32]
 8006d5c:	f241 1311 	movw	r3, #4369	; 0x1111
 8006d60:	4013      	ands	r3, r2
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d10f      	bne.n	8006d86 <HAL_TIM_PWM_Stop+0xbe>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	6a1a      	ldr	r2, [r3, #32]
 8006d6c:	f244 4344 	movw	r3, #17476	; 0x4444
 8006d70:	4013      	ands	r3, r2
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d107      	bne.n	8006d86 <HAL_TIM_PWM_Stop+0xbe>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f022 0201 	bic.w	r2, r2, #1
 8006d84:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d104      	bne.n	8006d96 <HAL_TIM_PWM_Stop+0xce>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2201      	movs	r2, #1
 8006d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d94:	e023      	b.n	8006dde <HAL_TIM_PWM_Stop+0x116>
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	2b04      	cmp	r3, #4
 8006d9a:	d104      	bne.n	8006da6 <HAL_TIM_PWM_Stop+0xde>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2201      	movs	r2, #1
 8006da0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006da4:	e01b      	b.n	8006dde <HAL_TIM_PWM_Stop+0x116>
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	2b08      	cmp	r3, #8
 8006daa:	d104      	bne.n	8006db6 <HAL_TIM_PWM_Stop+0xee>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2201      	movs	r2, #1
 8006db0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006db4:	e013      	b.n	8006dde <HAL_TIM_PWM_Stop+0x116>
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	2b0c      	cmp	r3, #12
 8006dba:	d104      	bne.n	8006dc6 <HAL_TIM_PWM_Stop+0xfe>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006dc4:	e00b      	b.n	8006dde <HAL_TIM_PWM_Stop+0x116>
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	2b10      	cmp	r3, #16
 8006dca:	d104      	bne.n	8006dd6 <HAL_TIM_PWM_Stop+0x10e>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2201      	movs	r2, #1
 8006dd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006dd4:	e003      	b.n	8006dde <HAL_TIM_PWM_Stop+0x116>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2201      	movs	r2, #1
 8006dda:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8006dde:	2300      	movs	r3, #0
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3708      	adds	r7, #8
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}
 8006de8:	40012c00 	.word	0x40012c00
 8006dec:	40013400 	.word	0x40013400
 8006df0:	40014000 	.word	0x40014000
 8006df4:	40014400 	.word	0x40014400
 8006df8:	40014800 	.word	0x40014800
 8006dfc:	40015000 	.word	0x40015000

08006e00 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b086      	sub	sp, #24
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d101      	bne.n	8006e14 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006e10:	2301      	movs	r3, #1
 8006e12:	e097      	b.n	8006f44 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e1a:	b2db      	uxtb	r3, r3
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d106      	bne.n	8006e2e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2200      	movs	r2, #0
 8006e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f7fb fdad 	bl	8002988 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2202      	movs	r2, #2
 8006e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	689b      	ldr	r3, [r3, #8]
 8006e3c:	687a      	ldr	r2, [r7, #4]
 8006e3e:	6812      	ldr	r2, [r2, #0]
 8006e40:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8006e44:	f023 0307 	bic.w	r3, r3, #7
 8006e48:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681a      	ldr	r2, [r3, #0]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	3304      	adds	r3, #4
 8006e52:	4619      	mov	r1, r3
 8006e54:	4610      	mov	r0, r2
 8006e56:	f000 fcd9 	bl	800780c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	689b      	ldr	r3, [r3, #8]
 8006e60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	699b      	ldr	r3, [r3, #24]
 8006e68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	6a1b      	ldr	r3, [r3, #32]
 8006e70:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	697a      	ldr	r2, [r7, #20]
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e82:	f023 0303 	bic.w	r3, r3, #3
 8006e86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	689a      	ldr	r2, [r3, #8]
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	699b      	ldr	r3, [r3, #24]
 8006e90:	021b      	lsls	r3, r3, #8
 8006e92:	4313      	orrs	r3, r2
 8006e94:	693a      	ldr	r2, [r7, #16]
 8006e96:	4313      	orrs	r3, r2
 8006e98:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006ea0:	f023 030c 	bic.w	r3, r3, #12
 8006ea4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006eac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006eb0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	68da      	ldr	r2, [r3, #12]
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	69db      	ldr	r3, [r3, #28]
 8006eba:	021b      	lsls	r3, r3, #8
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	693a      	ldr	r2, [r7, #16]
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	691b      	ldr	r3, [r3, #16]
 8006ec8:	011a      	lsls	r2, r3, #4
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	6a1b      	ldr	r3, [r3, #32]
 8006ece:	031b      	lsls	r3, r3, #12
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	693a      	ldr	r2, [r7, #16]
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006ede:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006ee6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	685a      	ldr	r2, [r3, #4]
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	695b      	ldr	r3, [r3, #20]
 8006ef0:	011b      	lsls	r3, r3, #4
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	68fa      	ldr	r2, [r7, #12]
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	697a      	ldr	r2, [r7, #20]
 8006f00:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	693a      	ldr	r2, [r7, #16]
 8006f08:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	68fa      	ldr	r2, [r7, #12]
 8006f10:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2201      	movs	r2, #1
 8006f16:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2201      	movs	r2, #1
 8006f26:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2201      	movs	r2, #1
 8006f2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2201      	movs	r2, #1
 8006f36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2201      	movs	r2, #1
 8006f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f42:	2300      	movs	r3, #0
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3718      	adds	r7, #24
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}

08006f4c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b084      	sub	sp, #16
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
 8006f54:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f5c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006f64:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006f6c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f74:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d110      	bne.n	8006f9e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f7c:	7bfb      	ldrb	r3, [r7, #15]
 8006f7e:	2b01      	cmp	r3, #1
 8006f80:	d102      	bne.n	8006f88 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006f82:	7b7b      	ldrb	r3, [r7, #13]
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	d001      	beq.n	8006f8c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	e069      	b.n	8007060 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2202      	movs	r2, #2
 8006f90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2202      	movs	r2, #2
 8006f98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f9c:	e031      	b.n	8007002 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	2b04      	cmp	r3, #4
 8006fa2:	d110      	bne.n	8006fc6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006fa4:	7bbb      	ldrb	r3, [r7, #14]
 8006fa6:	2b01      	cmp	r3, #1
 8006fa8:	d102      	bne.n	8006fb0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006faa:	7b3b      	ldrb	r3, [r7, #12]
 8006fac:	2b01      	cmp	r3, #1
 8006fae:	d001      	beq.n	8006fb4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	e055      	b.n	8007060 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2202      	movs	r2, #2
 8006fb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2202      	movs	r2, #2
 8006fc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006fc4:	e01d      	b.n	8007002 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006fc6:	7bfb      	ldrb	r3, [r7, #15]
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	d108      	bne.n	8006fde <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006fcc:	7bbb      	ldrb	r3, [r7, #14]
 8006fce:	2b01      	cmp	r3, #1
 8006fd0:	d105      	bne.n	8006fde <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006fd2:	7b7b      	ldrb	r3, [r7, #13]
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d102      	bne.n	8006fde <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006fd8:	7b3b      	ldrb	r3, [r7, #12]
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	d001      	beq.n	8006fe2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	e03e      	b.n	8007060 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2202      	movs	r2, #2
 8006fe6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2202      	movs	r2, #2
 8006fee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2202      	movs	r2, #2
 8006ff6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2202      	movs	r2, #2
 8006ffe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d003      	beq.n	8007010 <HAL_TIM_Encoder_Start+0xc4>
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	2b04      	cmp	r3, #4
 800700c:	d008      	beq.n	8007020 <HAL_TIM_Encoder_Start+0xd4>
 800700e:	e00f      	b.n	8007030 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	2201      	movs	r2, #1
 8007016:	2100      	movs	r1, #0
 8007018:	4618      	mov	r0, r3
 800701a:	f001 f865 	bl	80080e8 <TIM_CCxChannelCmd>
      break;
 800701e:	e016      	b.n	800704e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	2201      	movs	r2, #1
 8007026:	2104      	movs	r1, #4
 8007028:	4618      	mov	r0, r3
 800702a:	f001 f85d 	bl	80080e8 <TIM_CCxChannelCmd>
      break;
 800702e:	e00e      	b.n	800704e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	2201      	movs	r2, #1
 8007036:	2100      	movs	r1, #0
 8007038:	4618      	mov	r0, r3
 800703a:	f001 f855 	bl	80080e8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	2201      	movs	r2, #1
 8007044:	2104      	movs	r1, #4
 8007046:	4618      	mov	r0, r3
 8007048:	f001 f84e 	bl	80080e8 <TIM_CCxChannelCmd>
      break;
 800704c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	681a      	ldr	r2, [r3, #0]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f042 0201 	orr.w	r2, r2, #1
 800705c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800705e:	2300      	movs	r3, #0
}
 8007060:	4618      	mov	r0, r3
 8007062:	3710      	adds	r7, #16
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}

08007068 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b082      	sub	sp, #8
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	691b      	ldr	r3, [r3, #16]
 8007076:	f003 0302 	and.w	r3, r3, #2
 800707a:	2b02      	cmp	r3, #2
 800707c:	d122      	bne.n	80070c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	68db      	ldr	r3, [r3, #12]
 8007084:	f003 0302 	and.w	r3, r3, #2
 8007088:	2b02      	cmp	r3, #2
 800708a:	d11b      	bne.n	80070c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f06f 0202 	mvn.w	r2, #2
 8007094:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2201      	movs	r2, #1
 800709a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	699b      	ldr	r3, [r3, #24]
 80070a2:	f003 0303 	and.w	r3, r3, #3
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d003      	beq.n	80070b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f000 fb90 	bl	80077d0 <HAL_TIM_IC_CaptureCallback>
 80070b0:	e005      	b.n	80070be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f000 fb82 	bl	80077bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f000 fb93 	bl	80077e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2200      	movs	r2, #0
 80070c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	691b      	ldr	r3, [r3, #16]
 80070ca:	f003 0304 	and.w	r3, r3, #4
 80070ce:	2b04      	cmp	r3, #4
 80070d0:	d122      	bne.n	8007118 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	68db      	ldr	r3, [r3, #12]
 80070d8:	f003 0304 	and.w	r3, r3, #4
 80070dc:	2b04      	cmp	r3, #4
 80070de:	d11b      	bne.n	8007118 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f06f 0204 	mvn.w	r2, #4
 80070e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2202      	movs	r2, #2
 80070ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	699b      	ldr	r3, [r3, #24]
 80070f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d003      	beq.n	8007106 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f000 fb66 	bl	80077d0 <HAL_TIM_IC_CaptureCallback>
 8007104:	e005      	b.n	8007112 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f000 fb58 	bl	80077bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f000 fb69 	bl	80077e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2200      	movs	r2, #0
 8007116:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	691b      	ldr	r3, [r3, #16]
 800711e:	f003 0308 	and.w	r3, r3, #8
 8007122:	2b08      	cmp	r3, #8
 8007124:	d122      	bne.n	800716c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	68db      	ldr	r3, [r3, #12]
 800712c:	f003 0308 	and.w	r3, r3, #8
 8007130:	2b08      	cmp	r3, #8
 8007132:	d11b      	bne.n	800716c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f06f 0208 	mvn.w	r2, #8
 800713c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2204      	movs	r2, #4
 8007142:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	69db      	ldr	r3, [r3, #28]
 800714a:	f003 0303 	and.w	r3, r3, #3
 800714e:	2b00      	cmp	r3, #0
 8007150:	d003      	beq.n	800715a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f000 fb3c 	bl	80077d0 <HAL_TIM_IC_CaptureCallback>
 8007158:	e005      	b.n	8007166 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f000 fb2e 	bl	80077bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f000 fb3f 	bl	80077e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2200      	movs	r2, #0
 800716a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	691b      	ldr	r3, [r3, #16]
 8007172:	f003 0310 	and.w	r3, r3, #16
 8007176:	2b10      	cmp	r3, #16
 8007178:	d122      	bne.n	80071c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	68db      	ldr	r3, [r3, #12]
 8007180:	f003 0310 	and.w	r3, r3, #16
 8007184:	2b10      	cmp	r3, #16
 8007186:	d11b      	bne.n	80071c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f06f 0210 	mvn.w	r2, #16
 8007190:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2208      	movs	r2, #8
 8007196:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	69db      	ldr	r3, [r3, #28]
 800719e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d003      	beq.n	80071ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f000 fb12 	bl	80077d0 <HAL_TIM_IC_CaptureCallback>
 80071ac:	e005      	b.n	80071ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 fb04 	bl	80077bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f000 fb15 	bl	80077e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2200      	movs	r2, #0
 80071be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	691b      	ldr	r3, [r3, #16]
 80071c6:	f003 0301 	and.w	r3, r3, #1
 80071ca:	2b01      	cmp	r3, #1
 80071cc:	d10e      	bne.n	80071ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	68db      	ldr	r3, [r3, #12]
 80071d4:	f003 0301 	and.w	r3, r3, #1
 80071d8:	2b01      	cmp	r3, #1
 80071da:	d107      	bne.n	80071ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f06f 0201 	mvn.w	r2, #1
 80071e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f7fa fbcc 	bl	8001984 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	691b      	ldr	r3, [r3, #16]
 80071f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071f6:	2b80      	cmp	r3, #128	; 0x80
 80071f8:	d10e      	bne.n	8007218 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	68db      	ldr	r3, [r3, #12]
 8007200:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007204:	2b80      	cmp	r3, #128	; 0x80
 8007206:	d107      	bne.n	8007218 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007210:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f001 fa00 	bl	8008618 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	691b      	ldr	r3, [r3, #16]
 800721e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007222:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007226:	d10e      	bne.n	8007246 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	68db      	ldr	r3, [r3, #12]
 800722e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007232:	2b80      	cmp	r3, #128	; 0x80
 8007234:	d107      	bne.n	8007246 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800723e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f001 f9f3 	bl	800862c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	691b      	ldr	r3, [r3, #16]
 800724c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007250:	2b40      	cmp	r3, #64	; 0x40
 8007252:	d10e      	bne.n	8007272 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	68db      	ldr	r3, [r3, #12]
 800725a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800725e:	2b40      	cmp	r3, #64	; 0x40
 8007260:	d107      	bne.n	8007272 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800726a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f000 fac3 	bl	80077f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	691b      	ldr	r3, [r3, #16]
 8007278:	f003 0320 	and.w	r3, r3, #32
 800727c:	2b20      	cmp	r3, #32
 800727e:	d10e      	bne.n	800729e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	68db      	ldr	r3, [r3, #12]
 8007286:	f003 0320 	and.w	r3, r3, #32
 800728a:	2b20      	cmp	r3, #32
 800728c:	d107      	bne.n	800729e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f06f 0220 	mvn.w	r2, #32
 8007296:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f001 f9b3 	bl	8008604 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	691b      	ldr	r3, [r3, #16]
 80072a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80072a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072ac:	d10f      	bne.n	80072ce <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	68db      	ldr	r3, [r3, #12]
 80072b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80072b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072bc:	d107      	bne.n	80072ce <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80072c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f001 f9b9 	bl	8008640 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	691b      	ldr	r3, [r3, #16]
 80072d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80072d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80072dc:	d10f      	bne.n	80072fe <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	68db      	ldr	r3, [r3, #12]
 80072e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80072e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80072ec:	d107      	bne.n	80072fe <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80072f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f001 f9ab 	bl	8008654 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	691b      	ldr	r3, [r3, #16]
 8007304:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007308:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800730c:	d10f      	bne.n	800732e <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	68db      	ldr	r3, [r3, #12]
 8007314:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007318:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800731c:	d107      	bne.n	800732e <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8007326:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f001 f99d 	bl	8008668 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	691b      	ldr	r3, [r3, #16]
 8007334:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007338:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800733c:	d10f      	bne.n	800735e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	68db      	ldr	r3, [r3, #12]
 8007344:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007348:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800734c:	d107      	bne.n	800735e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8007356:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f001 f98f 	bl	800867c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800735e:	bf00      	nop
 8007360:	3708      	adds	r7, #8
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}
	...

08007368 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b086      	sub	sp, #24
 800736c:	af00      	add	r7, sp, #0
 800736e:	60f8      	str	r0, [r7, #12]
 8007370:	60b9      	str	r1, [r7, #8]
 8007372:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007374:	2300      	movs	r3, #0
 8007376:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800737e:	2b01      	cmp	r3, #1
 8007380:	d101      	bne.n	8007386 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007382:	2302      	movs	r3, #2
 8007384:	e0ff      	b.n	8007586 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2201      	movs	r2, #1
 800738a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2b14      	cmp	r3, #20
 8007392:	f200 80f0 	bhi.w	8007576 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007396:	a201      	add	r2, pc, #4	; (adr r2, 800739c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800739c:	080073f1 	.word	0x080073f1
 80073a0:	08007577 	.word	0x08007577
 80073a4:	08007577 	.word	0x08007577
 80073a8:	08007577 	.word	0x08007577
 80073ac:	08007431 	.word	0x08007431
 80073b0:	08007577 	.word	0x08007577
 80073b4:	08007577 	.word	0x08007577
 80073b8:	08007577 	.word	0x08007577
 80073bc:	08007473 	.word	0x08007473
 80073c0:	08007577 	.word	0x08007577
 80073c4:	08007577 	.word	0x08007577
 80073c8:	08007577 	.word	0x08007577
 80073cc:	080074b3 	.word	0x080074b3
 80073d0:	08007577 	.word	0x08007577
 80073d4:	08007577 	.word	0x08007577
 80073d8:	08007577 	.word	0x08007577
 80073dc:	080074f5 	.word	0x080074f5
 80073e0:	08007577 	.word	0x08007577
 80073e4:	08007577 	.word	0x08007577
 80073e8:	08007577 	.word	0x08007577
 80073ec:	08007535 	.word	0x08007535
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	68b9      	ldr	r1, [r7, #8]
 80073f6:	4618      	mov	r0, r3
 80073f8:	f000 fab0 	bl	800795c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	699a      	ldr	r2, [r3, #24]
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f042 0208 	orr.w	r2, r2, #8
 800740a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	699a      	ldr	r2, [r3, #24]
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f022 0204 	bic.w	r2, r2, #4
 800741a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	6999      	ldr	r1, [r3, #24]
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	691a      	ldr	r2, [r3, #16]
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	430a      	orrs	r2, r1
 800742c:	619a      	str	r2, [r3, #24]
      break;
 800742e:	e0a5      	b.n	800757c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	68b9      	ldr	r1, [r7, #8]
 8007436:	4618      	mov	r0, r3
 8007438:	f000 fb2a 	bl	8007a90 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	699a      	ldr	r2, [r3, #24]
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800744a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	699a      	ldr	r2, [r3, #24]
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800745a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	6999      	ldr	r1, [r3, #24]
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	691b      	ldr	r3, [r3, #16]
 8007466:	021a      	lsls	r2, r3, #8
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	430a      	orrs	r2, r1
 800746e:	619a      	str	r2, [r3, #24]
      break;
 8007470:	e084      	b.n	800757c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	68b9      	ldr	r1, [r7, #8]
 8007478:	4618      	mov	r0, r3
 800747a:	f000 fb9d 	bl	8007bb8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	69da      	ldr	r2, [r3, #28]
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f042 0208 	orr.w	r2, r2, #8
 800748c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	69da      	ldr	r2, [r3, #28]
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f022 0204 	bic.w	r2, r2, #4
 800749c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	69d9      	ldr	r1, [r3, #28]
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	691a      	ldr	r2, [r3, #16]
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	430a      	orrs	r2, r1
 80074ae:	61da      	str	r2, [r3, #28]
      break;
 80074b0:	e064      	b.n	800757c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	68b9      	ldr	r1, [r7, #8]
 80074b8:	4618      	mov	r0, r3
 80074ba:	f000 fc0f 	bl	8007cdc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	69da      	ldr	r2, [r3, #28]
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80074cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	69da      	ldr	r2, [r3, #28]
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	69d9      	ldr	r1, [r3, #28]
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	691b      	ldr	r3, [r3, #16]
 80074e8:	021a      	lsls	r2, r3, #8
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	430a      	orrs	r2, r1
 80074f0:	61da      	str	r2, [r3, #28]
      break;
 80074f2:	e043      	b.n	800757c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	68b9      	ldr	r1, [r7, #8]
 80074fa:	4618      	mov	r0, r3
 80074fc:	f000 fc82 	bl	8007e04 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f042 0208 	orr.w	r2, r2, #8
 800750e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f022 0204 	bic.w	r2, r2, #4
 800751e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	691a      	ldr	r2, [r3, #16]
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	430a      	orrs	r2, r1
 8007530:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8007532:	e023      	b.n	800757c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	68b9      	ldr	r1, [r7, #8]
 800753a:	4618      	mov	r0, r3
 800753c:	f000 fccc 	bl	8007ed8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800754e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800755e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	691b      	ldr	r3, [r3, #16]
 800756a:	021a      	lsls	r2, r3, #8
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	430a      	orrs	r2, r1
 8007572:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8007574:	e002      	b.n	800757c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007576:	2301      	movs	r3, #1
 8007578:	75fb      	strb	r3, [r7, #23]
      break;
 800757a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	2200      	movs	r2, #0
 8007580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007584:	7dfb      	ldrb	r3, [r7, #23]
}
 8007586:	4618      	mov	r0, r3
 8007588:	3718      	adds	r7, #24
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}
 800758e:	bf00      	nop

08007590 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b084      	sub	sp, #16
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800759a:	2300      	movs	r3, #0
 800759c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075a4:	2b01      	cmp	r3, #1
 80075a6:	d101      	bne.n	80075ac <HAL_TIM_ConfigClockSource+0x1c>
 80075a8:	2302      	movs	r3, #2
 80075aa:	e0f6      	b.n	800779a <HAL_TIM_ConfigClockSource+0x20a>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2201      	movs	r2, #1
 80075b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2202      	movs	r2, #2
 80075b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	689b      	ldr	r3, [r3, #8]
 80075c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80075ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80075ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80075d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	68ba      	ldr	r2, [r7, #8]
 80075de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a6f      	ldr	r2, [pc, #444]	; (80077a4 <HAL_TIM_ConfigClockSource+0x214>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	f000 80c1 	beq.w	800776e <HAL_TIM_ConfigClockSource+0x1de>
 80075ec:	4a6d      	ldr	r2, [pc, #436]	; (80077a4 <HAL_TIM_ConfigClockSource+0x214>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	f200 80c6 	bhi.w	8007780 <HAL_TIM_ConfigClockSource+0x1f0>
 80075f4:	4a6c      	ldr	r2, [pc, #432]	; (80077a8 <HAL_TIM_ConfigClockSource+0x218>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	f000 80b9 	beq.w	800776e <HAL_TIM_ConfigClockSource+0x1de>
 80075fc:	4a6a      	ldr	r2, [pc, #424]	; (80077a8 <HAL_TIM_ConfigClockSource+0x218>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	f200 80be 	bhi.w	8007780 <HAL_TIM_ConfigClockSource+0x1f0>
 8007604:	4a69      	ldr	r2, [pc, #420]	; (80077ac <HAL_TIM_ConfigClockSource+0x21c>)
 8007606:	4293      	cmp	r3, r2
 8007608:	f000 80b1 	beq.w	800776e <HAL_TIM_ConfigClockSource+0x1de>
 800760c:	4a67      	ldr	r2, [pc, #412]	; (80077ac <HAL_TIM_ConfigClockSource+0x21c>)
 800760e:	4293      	cmp	r3, r2
 8007610:	f200 80b6 	bhi.w	8007780 <HAL_TIM_ConfigClockSource+0x1f0>
 8007614:	4a66      	ldr	r2, [pc, #408]	; (80077b0 <HAL_TIM_ConfigClockSource+0x220>)
 8007616:	4293      	cmp	r3, r2
 8007618:	f000 80a9 	beq.w	800776e <HAL_TIM_ConfigClockSource+0x1de>
 800761c:	4a64      	ldr	r2, [pc, #400]	; (80077b0 <HAL_TIM_ConfigClockSource+0x220>)
 800761e:	4293      	cmp	r3, r2
 8007620:	f200 80ae 	bhi.w	8007780 <HAL_TIM_ConfigClockSource+0x1f0>
 8007624:	4a63      	ldr	r2, [pc, #396]	; (80077b4 <HAL_TIM_ConfigClockSource+0x224>)
 8007626:	4293      	cmp	r3, r2
 8007628:	f000 80a1 	beq.w	800776e <HAL_TIM_ConfigClockSource+0x1de>
 800762c:	4a61      	ldr	r2, [pc, #388]	; (80077b4 <HAL_TIM_ConfigClockSource+0x224>)
 800762e:	4293      	cmp	r3, r2
 8007630:	f200 80a6 	bhi.w	8007780 <HAL_TIM_ConfigClockSource+0x1f0>
 8007634:	4a60      	ldr	r2, [pc, #384]	; (80077b8 <HAL_TIM_ConfigClockSource+0x228>)
 8007636:	4293      	cmp	r3, r2
 8007638:	f000 8099 	beq.w	800776e <HAL_TIM_ConfigClockSource+0x1de>
 800763c:	4a5e      	ldr	r2, [pc, #376]	; (80077b8 <HAL_TIM_ConfigClockSource+0x228>)
 800763e:	4293      	cmp	r3, r2
 8007640:	f200 809e 	bhi.w	8007780 <HAL_TIM_ConfigClockSource+0x1f0>
 8007644:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007648:	f000 8091 	beq.w	800776e <HAL_TIM_ConfigClockSource+0x1de>
 800764c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007650:	f200 8096 	bhi.w	8007780 <HAL_TIM_ConfigClockSource+0x1f0>
 8007654:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007658:	f000 8089 	beq.w	800776e <HAL_TIM_ConfigClockSource+0x1de>
 800765c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007660:	f200 808e 	bhi.w	8007780 <HAL_TIM_ConfigClockSource+0x1f0>
 8007664:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007668:	d03e      	beq.n	80076e8 <HAL_TIM_ConfigClockSource+0x158>
 800766a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800766e:	f200 8087 	bhi.w	8007780 <HAL_TIM_ConfigClockSource+0x1f0>
 8007672:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007676:	f000 8086 	beq.w	8007786 <HAL_TIM_ConfigClockSource+0x1f6>
 800767a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800767e:	d87f      	bhi.n	8007780 <HAL_TIM_ConfigClockSource+0x1f0>
 8007680:	2b70      	cmp	r3, #112	; 0x70
 8007682:	d01a      	beq.n	80076ba <HAL_TIM_ConfigClockSource+0x12a>
 8007684:	2b70      	cmp	r3, #112	; 0x70
 8007686:	d87b      	bhi.n	8007780 <HAL_TIM_ConfigClockSource+0x1f0>
 8007688:	2b60      	cmp	r3, #96	; 0x60
 800768a:	d050      	beq.n	800772e <HAL_TIM_ConfigClockSource+0x19e>
 800768c:	2b60      	cmp	r3, #96	; 0x60
 800768e:	d877      	bhi.n	8007780 <HAL_TIM_ConfigClockSource+0x1f0>
 8007690:	2b50      	cmp	r3, #80	; 0x50
 8007692:	d03c      	beq.n	800770e <HAL_TIM_ConfigClockSource+0x17e>
 8007694:	2b50      	cmp	r3, #80	; 0x50
 8007696:	d873      	bhi.n	8007780 <HAL_TIM_ConfigClockSource+0x1f0>
 8007698:	2b40      	cmp	r3, #64	; 0x40
 800769a:	d058      	beq.n	800774e <HAL_TIM_ConfigClockSource+0x1be>
 800769c:	2b40      	cmp	r3, #64	; 0x40
 800769e:	d86f      	bhi.n	8007780 <HAL_TIM_ConfigClockSource+0x1f0>
 80076a0:	2b30      	cmp	r3, #48	; 0x30
 80076a2:	d064      	beq.n	800776e <HAL_TIM_ConfigClockSource+0x1de>
 80076a4:	2b30      	cmp	r3, #48	; 0x30
 80076a6:	d86b      	bhi.n	8007780 <HAL_TIM_ConfigClockSource+0x1f0>
 80076a8:	2b20      	cmp	r3, #32
 80076aa:	d060      	beq.n	800776e <HAL_TIM_ConfigClockSource+0x1de>
 80076ac:	2b20      	cmp	r3, #32
 80076ae:	d867      	bhi.n	8007780 <HAL_TIM_ConfigClockSource+0x1f0>
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d05c      	beq.n	800776e <HAL_TIM_ConfigClockSource+0x1de>
 80076b4:	2b10      	cmp	r3, #16
 80076b6:	d05a      	beq.n	800776e <HAL_TIM_ConfigClockSource+0x1de>
 80076b8:	e062      	b.n	8007780 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6818      	ldr	r0, [r3, #0]
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	6899      	ldr	r1, [r3, #8]
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	685a      	ldr	r2, [r3, #4]
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	68db      	ldr	r3, [r3, #12]
 80076ca:	f000 fced 	bl	80080a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	689b      	ldr	r3, [r3, #8]
 80076d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80076dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	68ba      	ldr	r2, [r7, #8]
 80076e4:	609a      	str	r2, [r3, #8]
      break;
 80076e6:	e04f      	b.n	8007788 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6818      	ldr	r0, [r3, #0]
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	6899      	ldr	r1, [r3, #8]
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	685a      	ldr	r2, [r3, #4]
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	68db      	ldr	r3, [r3, #12]
 80076f8:	f000 fcd6 	bl	80080a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	689a      	ldr	r2, [r3, #8]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800770a:	609a      	str	r2, [r3, #8]
      break;
 800770c:	e03c      	b.n	8007788 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6818      	ldr	r0, [r3, #0]
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	6859      	ldr	r1, [r3, #4]
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	68db      	ldr	r3, [r3, #12]
 800771a:	461a      	mov	r2, r3
 800771c:	f000 fc48 	bl	8007fb0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	2150      	movs	r1, #80	; 0x50
 8007726:	4618      	mov	r0, r3
 8007728:	f000 fca1 	bl	800806e <TIM_ITRx_SetConfig>
      break;
 800772c:	e02c      	b.n	8007788 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6818      	ldr	r0, [r3, #0]
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	6859      	ldr	r1, [r3, #4]
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	68db      	ldr	r3, [r3, #12]
 800773a:	461a      	mov	r2, r3
 800773c:	f000 fc67 	bl	800800e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	2160      	movs	r1, #96	; 0x60
 8007746:	4618      	mov	r0, r3
 8007748:	f000 fc91 	bl	800806e <TIM_ITRx_SetConfig>
      break;
 800774c:	e01c      	b.n	8007788 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6818      	ldr	r0, [r3, #0]
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	6859      	ldr	r1, [r3, #4]
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	68db      	ldr	r3, [r3, #12]
 800775a:	461a      	mov	r2, r3
 800775c:	f000 fc28 	bl	8007fb0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	2140      	movs	r1, #64	; 0x40
 8007766:	4618      	mov	r0, r3
 8007768:	f000 fc81 	bl	800806e <TIM_ITRx_SetConfig>
      break;
 800776c:	e00c      	b.n	8007788 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681a      	ldr	r2, [r3, #0]
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4619      	mov	r1, r3
 8007778:	4610      	mov	r0, r2
 800777a:	f000 fc78 	bl	800806e <TIM_ITRx_SetConfig>
      break;
 800777e:	e003      	b.n	8007788 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8007780:	2301      	movs	r3, #1
 8007782:	73fb      	strb	r3, [r7, #15]
      break;
 8007784:	e000      	b.n	8007788 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8007786:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2201      	movs	r2, #1
 800778c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2200      	movs	r2, #0
 8007794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007798:	7bfb      	ldrb	r3, [r7, #15]
}
 800779a:	4618      	mov	r0, r3
 800779c:	3710      	adds	r7, #16
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}
 80077a2:	bf00      	nop
 80077a4:	00100070 	.word	0x00100070
 80077a8:	00100060 	.word	0x00100060
 80077ac:	00100050 	.word	0x00100050
 80077b0:	00100040 	.word	0x00100040
 80077b4:	00100030 	.word	0x00100030
 80077b8:	00100020 	.word	0x00100020

080077bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80077bc:	b480      	push	{r7}
 80077be:	b083      	sub	sp, #12
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80077c4:	bf00      	nop
 80077c6:	370c      	adds	r7, #12
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr

080077d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b083      	sub	sp, #12
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80077d8:	bf00      	nop
 80077da:	370c      	adds	r7, #12
 80077dc:	46bd      	mov	sp, r7
 80077de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e2:	4770      	bx	lr

080077e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b083      	sub	sp, #12
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80077ec:	bf00      	nop
 80077ee:	370c      	adds	r7, #12
 80077f0:	46bd      	mov	sp, r7
 80077f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f6:	4770      	bx	lr

080077f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80077f8:	b480      	push	{r7}
 80077fa:	b083      	sub	sp, #12
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007800:	bf00      	nop
 8007802:	370c      	adds	r7, #12
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr

0800780c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800780c:	b480      	push	{r7}
 800780e:	b085      	sub	sp, #20
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
 8007814:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	4a46      	ldr	r2, [pc, #280]	; (8007938 <TIM_Base_SetConfig+0x12c>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d017      	beq.n	8007854 <TIM_Base_SetConfig+0x48>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800782a:	d013      	beq.n	8007854 <TIM_Base_SetConfig+0x48>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	4a43      	ldr	r2, [pc, #268]	; (800793c <TIM_Base_SetConfig+0x130>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d00f      	beq.n	8007854 <TIM_Base_SetConfig+0x48>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	4a42      	ldr	r2, [pc, #264]	; (8007940 <TIM_Base_SetConfig+0x134>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d00b      	beq.n	8007854 <TIM_Base_SetConfig+0x48>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	4a41      	ldr	r2, [pc, #260]	; (8007944 <TIM_Base_SetConfig+0x138>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d007      	beq.n	8007854 <TIM_Base_SetConfig+0x48>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	4a40      	ldr	r2, [pc, #256]	; (8007948 <TIM_Base_SetConfig+0x13c>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d003      	beq.n	8007854 <TIM_Base_SetConfig+0x48>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	4a3f      	ldr	r2, [pc, #252]	; (800794c <TIM_Base_SetConfig+0x140>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d108      	bne.n	8007866 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800785a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	685b      	ldr	r3, [r3, #4]
 8007860:	68fa      	ldr	r2, [r7, #12]
 8007862:	4313      	orrs	r3, r2
 8007864:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	4a33      	ldr	r2, [pc, #204]	; (8007938 <TIM_Base_SetConfig+0x12c>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d023      	beq.n	80078b6 <TIM_Base_SetConfig+0xaa>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007874:	d01f      	beq.n	80078b6 <TIM_Base_SetConfig+0xaa>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	4a30      	ldr	r2, [pc, #192]	; (800793c <TIM_Base_SetConfig+0x130>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d01b      	beq.n	80078b6 <TIM_Base_SetConfig+0xaa>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	4a2f      	ldr	r2, [pc, #188]	; (8007940 <TIM_Base_SetConfig+0x134>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d017      	beq.n	80078b6 <TIM_Base_SetConfig+0xaa>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	4a2e      	ldr	r2, [pc, #184]	; (8007944 <TIM_Base_SetConfig+0x138>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d013      	beq.n	80078b6 <TIM_Base_SetConfig+0xaa>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	4a2d      	ldr	r2, [pc, #180]	; (8007948 <TIM_Base_SetConfig+0x13c>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d00f      	beq.n	80078b6 <TIM_Base_SetConfig+0xaa>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	4a2d      	ldr	r2, [pc, #180]	; (8007950 <TIM_Base_SetConfig+0x144>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d00b      	beq.n	80078b6 <TIM_Base_SetConfig+0xaa>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	4a2c      	ldr	r2, [pc, #176]	; (8007954 <TIM_Base_SetConfig+0x148>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d007      	beq.n	80078b6 <TIM_Base_SetConfig+0xaa>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	4a2b      	ldr	r2, [pc, #172]	; (8007958 <TIM_Base_SetConfig+0x14c>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d003      	beq.n	80078b6 <TIM_Base_SetConfig+0xaa>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	4a26      	ldr	r2, [pc, #152]	; (800794c <TIM_Base_SetConfig+0x140>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d108      	bne.n	80078c8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	68db      	ldr	r3, [r3, #12]
 80078c2:	68fa      	ldr	r2, [r7, #12]
 80078c4:	4313      	orrs	r3, r2
 80078c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	695b      	ldr	r3, [r3, #20]
 80078d2:	4313      	orrs	r3, r2
 80078d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	68fa      	ldr	r2, [r7, #12]
 80078da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	689a      	ldr	r2, [r3, #8]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	681a      	ldr	r2, [r3, #0]
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	4a12      	ldr	r2, [pc, #72]	; (8007938 <TIM_Base_SetConfig+0x12c>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d013      	beq.n	800791c <TIM_Base_SetConfig+0x110>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	4a14      	ldr	r2, [pc, #80]	; (8007948 <TIM_Base_SetConfig+0x13c>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d00f      	beq.n	800791c <TIM_Base_SetConfig+0x110>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	4a14      	ldr	r2, [pc, #80]	; (8007950 <TIM_Base_SetConfig+0x144>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d00b      	beq.n	800791c <TIM_Base_SetConfig+0x110>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	4a13      	ldr	r2, [pc, #76]	; (8007954 <TIM_Base_SetConfig+0x148>)
 8007908:	4293      	cmp	r3, r2
 800790a:	d007      	beq.n	800791c <TIM_Base_SetConfig+0x110>
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	4a12      	ldr	r2, [pc, #72]	; (8007958 <TIM_Base_SetConfig+0x14c>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d003      	beq.n	800791c <TIM_Base_SetConfig+0x110>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	4a0d      	ldr	r2, [pc, #52]	; (800794c <TIM_Base_SetConfig+0x140>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d103      	bne.n	8007924 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	691a      	ldr	r2, [r3, #16]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2201      	movs	r2, #1
 8007928:	615a      	str	r2, [r3, #20]
}
 800792a:	bf00      	nop
 800792c:	3714      	adds	r7, #20
 800792e:	46bd      	mov	sp, r7
 8007930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007934:	4770      	bx	lr
 8007936:	bf00      	nop
 8007938:	40012c00 	.word	0x40012c00
 800793c:	40000400 	.word	0x40000400
 8007940:	40000800 	.word	0x40000800
 8007944:	40000c00 	.word	0x40000c00
 8007948:	40013400 	.word	0x40013400
 800794c:	40015000 	.word	0x40015000
 8007950:	40014000 	.word	0x40014000
 8007954:	40014400 	.word	0x40014400
 8007958:	40014800 	.word	0x40014800

0800795c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800795c:	b480      	push	{r7}
 800795e:	b087      	sub	sp, #28
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
 8007964:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6a1b      	ldr	r3, [r3, #32]
 800796a:	f023 0201 	bic.w	r2, r3, #1
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6a1b      	ldr	r3, [r3, #32]
 8007976:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	699b      	ldr	r3, [r3, #24]
 8007982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800798a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800798e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	f023 0303 	bic.w	r3, r3, #3
 8007996:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	68fa      	ldr	r2, [r7, #12]
 800799e:	4313      	orrs	r3, r2
 80079a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	f023 0302 	bic.w	r3, r3, #2
 80079a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	689b      	ldr	r3, [r3, #8]
 80079ae:	697a      	ldr	r2, [r7, #20]
 80079b0:	4313      	orrs	r3, r2
 80079b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	4a30      	ldr	r2, [pc, #192]	; (8007a78 <TIM_OC1_SetConfig+0x11c>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d013      	beq.n	80079e4 <TIM_OC1_SetConfig+0x88>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	4a2f      	ldr	r2, [pc, #188]	; (8007a7c <TIM_OC1_SetConfig+0x120>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d00f      	beq.n	80079e4 <TIM_OC1_SetConfig+0x88>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	4a2e      	ldr	r2, [pc, #184]	; (8007a80 <TIM_OC1_SetConfig+0x124>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d00b      	beq.n	80079e4 <TIM_OC1_SetConfig+0x88>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	4a2d      	ldr	r2, [pc, #180]	; (8007a84 <TIM_OC1_SetConfig+0x128>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d007      	beq.n	80079e4 <TIM_OC1_SetConfig+0x88>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	4a2c      	ldr	r2, [pc, #176]	; (8007a88 <TIM_OC1_SetConfig+0x12c>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d003      	beq.n	80079e4 <TIM_OC1_SetConfig+0x88>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	4a2b      	ldr	r2, [pc, #172]	; (8007a8c <TIM_OC1_SetConfig+0x130>)
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d10c      	bne.n	80079fe <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	f023 0308 	bic.w	r3, r3, #8
 80079ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	68db      	ldr	r3, [r3, #12]
 80079f0:	697a      	ldr	r2, [r7, #20]
 80079f2:	4313      	orrs	r3, r2
 80079f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	f023 0304 	bic.w	r3, r3, #4
 80079fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	4a1d      	ldr	r2, [pc, #116]	; (8007a78 <TIM_OC1_SetConfig+0x11c>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d013      	beq.n	8007a2e <TIM_OC1_SetConfig+0xd2>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	4a1c      	ldr	r2, [pc, #112]	; (8007a7c <TIM_OC1_SetConfig+0x120>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d00f      	beq.n	8007a2e <TIM_OC1_SetConfig+0xd2>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	4a1b      	ldr	r2, [pc, #108]	; (8007a80 <TIM_OC1_SetConfig+0x124>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d00b      	beq.n	8007a2e <TIM_OC1_SetConfig+0xd2>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	4a1a      	ldr	r2, [pc, #104]	; (8007a84 <TIM_OC1_SetConfig+0x128>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d007      	beq.n	8007a2e <TIM_OC1_SetConfig+0xd2>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	4a19      	ldr	r2, [pc, #100]	; (8007a88 <TIM_OC1_SetConfig+0x12c>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d003      	beq.n	8007a2e <TIM_OC1_SetConfig+0xd2>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	4a18      	ldr	r2, [pc, #96]	; (8007a8c <TIM_OC1_SetConfig+0x130>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d111      	bne.n	8007a52 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007a36:	693b      	ldr	r3, [r7, #16]
 8007a38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	695b      	ldr	r3, [r3, #20]
 8007a42:	693a      	ldr	r2, [r7, #16]
 8007a44:	4313      	orrs	r3, r2
 8007a46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	699b      	ldr	r3, [r3, #24]
 8007a4c:	693a      	ldr	r2, [r7, #16]
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	693a      	ldr	r2, [r7, #16]
 8007a56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	68fa      	ldr	r2, [r7, #12]
 8007a5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	685a      	ldr	r2, [r3, #4]
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	697a      	ldr	r2, [r7, #20]
 8007a6a:	621a      	str	r2, [r3, #32]
}
 8007a6c:	bf00      	nop
 8007a6e:	371c      	adds	r7, #28
 8007a70:	46bd      	mov	sp, r7
 8007a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a76:	4770      	bx	lr
 8007a78:	40012c00 	.word	0x40012c00
 8007a7c:	40013400 	.word	0x40013400
 8007a80:	40014000 	.word	0x40014000
 8007a84:	40014400 	.word	0x40014400
 8007a88:	40014800 	.word	0x40014800
 8007a8c:	40015000 	.word	0x40015000

08007a90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a90:	b480      	push	{r7}
 8007a92:	b087      	sub	sp, #28
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
 8007a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6a1b      	ldr	r3, [r3, #32]
 8007a9e:	f023 0210 	bic.w	r2, r3, #16
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6a1b      	ldr	r3, [r3, #32]
 8007aaa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	685b      	ldr	r3, [r3, #4]
 8007ab0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	699b      	ldr	r3, [r3, #24]
 8007ab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007abe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ac2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007aca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	021b      	lsls	r3, r3, #8
 8007ad2:	68fa      	ldr	r2, [r7, #12]
 8007ad4:	4313      	orrs	r3, r2
 8007ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	f023 0320 	bic.w	r3, r3, #32
 8007ade:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	689b      	ldr	r3, [r3, #8]
 8007ae4:	011b      	lsls	r3, r3, #4
 8007ae6:	697a      	ldr	r2, [r7, #20]
 8007ae8:	4313      	orrs	r3, r2
 8007aea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	4a2c      	ldr	r2, [pc, #176]	; (8007ba0 <TIM_OC2_SetConfig+0x110>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d007      	beq.n	8007b04 <TIM_OC2_SetConfig+0x74>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	4a2b      	ldr	r2, [pc, #172]	; (8007ba4 <TIM_OC2_SetConfig+0x114>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d003      	beq.n	8007b04 <TIM_OC2_SetConfig+0x74>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	4a2a      	ldr	r2, [pc, #168]	; (8007ba8 <TIM_OC2_SetConfig+0x118>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d10d      	bne.n	8007b20 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	68db      	ldr	r3, [r3, #12]
 8007b10:	011b      	lsls	r3, r3, #4
 8007b12:	697a      	ldr	r2, [r7, #20]
 8007b14:	4313      	orrs	r3, r2
 8007b16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b1e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	4a1f      	ldr	r2, [pc, #124]	; (8007ba0 <TIM_OC2_SetConfig+0x110>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d013      	beq.n	8007b50 <TIM_OC2_SetConfig+0xc0>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	4a1e      	ldr	r2, [pc, #120]	; (8007ba4 <TIM_OC2_SetConfig+0x114>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d00f      	beq.n	8007b50 <TIM_OC2_SetConfig+0xc0>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	4a1e      	ldr	r2, [pc, #120]	; (8007bac <TIM_OC2_SetConfig+0x11c>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d00b      	beq.n	8007b50 <TIM_OC2_SetConfig+0xc0>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	4a1d      	ldr	r2, [pc, #116]	; (8007bb0 <TIM_OC2_SetConfig+0x120>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d007      	beq.n	8007b50 <TIM_OC2_SetConfig+0xc0>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	4a1c      	ldr	r2, [pc, #112]	; (8007bb4 <TIM_OC2_SetConfig+0x124>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d003      	beq.n	8007b50 <TIM_OC2_SetConfig+0xc0>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	4a17      	ldr	r2, [pc, #92]	; (8007ba8 <TIM_OC2_SetConfig+0x118>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d113      	bne.n	8007b78 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b56:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007b58:	693b      	ldr	r3, [r7, #16]
 8007b5a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b5e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	695b      	ldr	r3, [r3, #20]
 8007b64:	009b      	lsls	r3, r3, #2
 8007b66:	693a      	ldr	r2, [r7, #16]
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	699b      	ldr	r3, [r3, #24]
 8007b70:	009b      	lsls	r3, r3, #2
 8007b72:	693a      	ldr	r2, [r7, #16]
 8007b74:	4313      	orrs	r3, r2
 8007b76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	693a      	ldr	r2, [r7, #16]
 8007b7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	68fa      	ldr	r2, [r7, #12]
 8007b82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	685a      	ldr	r2, [r3, #4]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	697a      	ldr	r2, [r7, #20]
 8007b90:	621a      	str	r2, [r3, #32]
}
 8007b92:	bf00      	nop
 8007b94:	371c      	adds	r7, #28
 8007b96:	46bd      	mov	sp, r7
 8007b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9c:	4770      	bx	lr
 8007b9e:	bf00      	nop
 8007ba0:	40012c00 	.word	0x40012c00
 8007ba4:	40013400 	.word	0x40013400
 8007ba8:	40015000 	.word	0x40015000
 8007bac:	40014000 	.word	0x40014000
 8007bb0:	40014400 	.word	0x40014400
 8007bb4:	40014800 	.word	0x40014800

08007bb8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b087      	sub	sp, #28
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
 8007bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6a1b      	ldr	r3, [r3, #32]
 8007bc6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6a1b      	ldr	r3, [r3, #32]
 8007bd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	685b      	ldr	r3, [r3, #4]
 8007bd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	69db      	ldr	r3, [r3, #28]
 8007bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007be6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f023 0303 	bic.w	r3, r3, #3
 8007bf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	68fa      	ldr	r2, [r7, #12]
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007c04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	689b      	ldr	r3, [r3, #8]
 8007c0a:	021b      	lsls	r3, r3, #8
 8007c0c:	697a      	ldr	r2, [r7, #20]
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	4a2b      	ldr	r2, [pc, #172]	; (8007cc4 <TIM_OC3_SetConfig+0x10c>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d007      	beq.n	8007c2a <TIM_OC3_SetConfig+0x72>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	4a2a      	ldr	r2, [pc, #168]	; (8007cc8 <TIM_OC3_SetConfig+0x110>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d003      	beq.n	8007c2a <TIM_OC3_SetConfig+0x72>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	4a29      	ldr	r2, [pc, #164]	; (8007ccc <TIM_OC3_SetConfig+0x114>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d10d      	bne.n	8007c46 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007c30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	68db      	ldr	r3, [r3, #12]
 8007c36:	021b      	lsls	r3, r3, #8
 8007c38:	697a      	ldr	r2, [r7, #20]
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007c44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	4a1e      	ldr	r2, [pc, #120]	; (8007cc4 <TIM_OC3_SetConfig+0x10c>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d013      	beq.n	8007c76 <TIM_OC3_SetConfig+0xbe>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	4a1d      	ldr	r2, [pc, #116]	; (8007cc8 <TIM_OC3_SetConfig+0x110>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d00f      	beq.n	8007c76 <TIM_OC3_SetConfig+0xbe>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	4a1d      	ldr	r2, [pc, #116]	; (8007cd0 <TIM_OC3_SetConfig+0x118>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d00b      	beq.n	8007c76 <TIM_OC3_SetConfig+0xbe>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	4a1c      	ldr	r2, [pc, #112]	; (8007cd4 <TIM_OC3_SetConfig+0x11c>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d007      	beq.n	8007c76 <TIM_OC3_SetConfig+0xbe>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	4a1b      	ldr	r2, [pc, #108]	; (8007cd8 <TIM_OC3_SetConfig+0x120>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d003      	beq.n	8007c76 <TIM_OC3_SetConfig+0xbe>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	4a16      	ldr	r2, [pc, #88]	; (8007ccc <TIM_OC3_SetConfig+0x114>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d113      	bne.n	8007c9e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007c76:	693b      	ldr	r3, [r7, #16]
 8007c78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	695b      	ldr	r3, [r3, #20]
 8007c8a:	011b      	lsls	r3, r3, #4
 8007c8c:	693a      	ldr	r2, [r7, #16]
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	699b      	ldr	r3, [r3, #24]
 8007c96:	011b      	lsls	r3, r3, #4
 8007c98:	693a      	ldr	r2, [r7, #16]
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	693a      	ldr	r2, [r7, #16]
 8007ca2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	68fa      	ldr	r2, [r7, #12]
 8007ca8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	685a      	ldr	r2, [r3, #4]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	697a      	ldr	r2, [r7, #20]
 8007cb6:	621a      	str	r2, [r3, #32]
}
 8007cb8:	bf00      	nop
 8007cba:	371c      	adds	r7, #28
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr
 8007cc4:	40012c00 	.word	0x40012c00
 8007cc8:	40013400 	.word	0x40013400
 8007ccc:	40015000 	.word	0x40015000
 8007cd0:	40014000 	.word	0x40014000
 8007cd4:	40014400 	.word	0x40014400
 8007cd8:	40014800 	.word	0x40014800

08007cdc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b087      	sub	sp, #28
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
 8007ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6a1b      	ldr	r3, [r3, #32]
 8007cea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6a1b      	ldr	r3, [r3, #32]
 8007cf6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	69db      	ldr	r3, [r3, #28]
 8007d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007d0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	021b      	lsls	r3, r3, #8
 8007d1e:	68fa      	ldr	r2, [r7, #12]
 8007d20:	4313      	orrs	r3, r2
 8007d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007d2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	689b      	ldr	r3, [r3, #8]
 8007d30:	031b      	lsls	r3, r3, #12
 8007d32:	697a      	ldr	r2, [r7, #20]
 8007d34:	4313      	orrs	r3, r2
 8007d36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	4a2c      	ldr	r2, [pc, #176]	; (8007dec <TIM_OC4_SetConfig+0x110>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d007      	beq.n	8007d50 <TIM_OC4_SetConfig+0x74>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	4a2b      	ldr	r2, [pc, #172]	; (8007df0 <TIM_OC4_SetConfig+0x114>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d003      	beq.n	8007d50 <TIM_OC4_SetConfig+0x74>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	4a2a      	ldr	r2, [pc, #168]	; (8007df4 <TIM_OC4_SetConfig+0x118>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d10d      	bne.n	8007d6c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007d50:	697b      	ldr	r3, [r7, #20]
 8007d52:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007d56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	68db      	ldr	r3, [r3, #12]
 8007d5c:	031b      	lsls	r3, r3, #12
 8007d5e:	697a      	ldr	r2, [r7, #20]
 8007d60:	4313      	orrs	r3, r2
 8007d62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d6a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	4a1f      	ldr	r2, [pc, #124]	; (8007dec <TIM_OC4_SetConfig+0x110>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d013      	beq.n	8007d9c <TIM_OC4_SetConfig+0xc0>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	4a1e      	ldr	r2, [pc, #120]	; (8007df0 <TIM_OC4_SetConfig+0x114>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d00f      	beq.n	8007d9c <TIM_OC4_SetConfig+0xc0>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	4a1e      	ldr	r2, [pc, #120]	; (8007df8 <TIM_OC4_SetConfig+0x11c>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d00b      	beq.n	8007d9c <TIM_OC4_SetConfig+0xc0>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	4a1d      	ldr	r2, [pc, #116]	; (8007dfc <TIM_OC4_SetConfig+0x120>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d007      	beq.n	8007d9c <TIM_OC4_SetConfig+0xc0>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	4a1c      	ldr	r2, [pc, #112]	; (8007e00 <TIM_OC4_SetConfig+0x124>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d003      	beq.n	8007d9c <TIM_OC4_SetConfig+0xc0>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	4a17      	ldr	r2, [pc, #92]	; (8007df4 <TIM_OC4_SetConfig+0x118>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d113      	bne.n	8007dc4 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007da2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007daa:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	695b      	ldr	r3, [r3, #20]
 8007db0:	019b      	lsls	r3, r3, #6
 8007db2:	693a      	ldr	r2, [r7, #16]
 8007db4:	4313      	orrs	r3, r2
 8007db6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	699b      	ldr	r3, [r3, #24]
 8007dbc:	019b      	lsls	r3, r3, #6
 8007dbe:	693a      	ldr	r2, [r7, #16]
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	693a      	ldr	r2, [r7, #16]
 8007dc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	68fa      	ldr	r2, [r7, #12]
 8007dce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	685a      	ldr	r2, [r3, #4]
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	697a      	ldr	r2, [r7, #20]
 8007ddc:	621a      	str	r2, [r3, #32]
}
 8007dde:	bf00      	nop
 8007de0:	371c      	adds	r7, #28
 8007de2:	46bd      	mov	sp, r7
 8007de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de8:	4770      	bx	lr
 8007dea:	bf00      	nop
 8007dec:	40012c00 	.word	0x40012c00
 8007df0:	40013400 	.word	0x40013400
 8007df4:	40015000 	.word	0x40015000
 8007df8:	40014000 	.word	0x40014000
 8007dfc:	40014400 	.word	0x40014400
 8007e00:	40014800 	.word	0x40014800

08007e04 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007e04:	b480      	push	{r7}
 8007e06:	b087      	sub	sp, #28
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
 8007e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6a1b      	ldr	r3, [r3, #32]
 8007e12:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6a1b      	ldr	r3, [r3, #32]
 8007e1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	685b      	ldr	r3, [r3, #4]
 8007e24:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	68fa      	ldr	r2, [r7, #12]
 8007e3e:	4313      	orrs	r3, r2
 8007e40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007e48:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	689b      	ldr	r3, [r3, #8]
 8007e4e:	041b      	lsls	r3, r3, #16
 8007e50:	693a      	ldr	r2, [r7, #16]
 8007e52:	4313      	orrs	r3, r2
 8007e54:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	4a19      	ldr	r2, [pc, #100]	; (8007ec0 <TIM_OC5_SetConfig+0xbc>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d013      	beq.n	8007e86 <TIM_OC5_SetConfig+0x82>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	4a18      	ldr	r2, [pc, #96]	; (8007ec4 <TIM_OC5_SetConfig+0xc0>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d00f      	beq.n	8007e86 <TIM_OC5_SetConfig+0x82>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	4a17      	ldr	r2, [pc, #92]	; (8007ec8 <TIM_OC5_SetConfig+0xc4>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d00b      	beq.n	8007e86 <TIM_OC5_SetConfig+0x82>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	4a16      	ldr	r2, [pc, #88]	; (8007ecc <TIM_OC5_SetConfig+0xc8>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d007      	beq.n	8007e86 <TIM_OC5_SetConfig+0x82>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	4a15      	ldr	r2, [pc, #84]	; (8007ed0 <TIM_OC5_SetConfig+0xcc>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d003      	beq.n	8007e86 <TIM_OC5_SetConfig+0x82>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	4a14      	ldr	r2, [pc, #80]	; (8007ed4 <TIM_OC5_SetConfig+0xd0>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d109      	bne.n	8007e9a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e8c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	695b      	ldr	r3, [r3, #20]
 8007e92:	021b      	lsls	r3, r3, #8
 8007e94:	697a      	ldr	r2, [r7, #20]
 8007e96:	4313      	orrs	r3, r2
 8007e98:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	697a      	ldr	r2, [r7, #20]
 8007e9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	68fa      	ldr	r2, [r7, #12]
 8007ea4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	685a      	ldr	r2, [r3, #4]
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	693a      	ldr	r2, [r7, #16]
 8007eb2:	621a      	str	r2, [r3, #32]
}
 8007eb4:	bf00      	nop
 8007eb6:	371c      	adds	r7, #28
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebe:	4770      	bx	lr
 8007ec0:	40012c00 	.word	0x40012c00
 8007ec4:	40013400 	.word	0x40013400
 8007ec8:	40014000 	.word	0x40014000
 8007ecc:	40014400 	.word	0x40014400
 8007ed0:	40014800 	.word	0x40014800
 8007ed4:	40015000 	.word	0x40015000

08007ed8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b087      	sub	sp, #28
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
 8007ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6a1b      	ldr	r3, [r3, #32]
 8007ee6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6a1b      	ldr	r3, [r3, #32]
 8007ef2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007f06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	021b      	lsls	r3, r3, #8
 8007f12:	68fa      	ldr	r2, [r7, #12]
 8007f14:	4313      	orrs	r3, r2
 8007f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007f18:	693b      	ldr	r3, [r7, #16]
 8007f1a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007f1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	689b      	ldr	r3, [r3, #8]
 8007f24:	051b      	lsls	r3, r3, #20
 8007f26:	693a      	ldr	r2, [r7, #16]
 8007f28:	4313      	orrs	r3, r2
 8007f2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	4a1a      	ldr	r2, [pc, #104]	; (8007f98 <TIM_OC6_SetConfig+0xc0>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d013      	beq.n	8007f5c <TIM_OC6_SetConfig+0x84>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	4a19      	ldr	r2, [pc, #100]	; (8007f9c <TIM_OC6_SetConfig+0xc4>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d00f      	beq.n	8007f5c <TIM_OC6_SetConfig+0x84>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	4a18      	ldr	r2, [pc, #96]	; (8007fa0 <TIM_OC6_SetConfig+0xc8>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d00b      	beq.n	8007f5c <TIM_OC6_SetConfig+0x84>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	4a17      	ldr	r2, [pc, #92]	; (8007fa4 <TIM_OC6_SetConfig+0xcc>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d007      	beq.n	8007f5c <TIM_OC6_SetConfig+0x84>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	4a16      	ldr	r2, [pc, #88]	; (8007fa8 <TIM_OC6_SetConfig+0xd0>)
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d003      	beq.n	8007f5c <TIM_OC6_SetConfig+0x84>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	4a15      	ldr	r2, [pc, #84]	; (8007fac <TIM_OC6_SetConfig+0xd4>)
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d109      	bne.n	8007f70 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007f62:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	695b      	ldr	r3, [r3, #20]
 8007f68:	029b      	lsls	r3, r3, #10
 8007f6a:	697a      	ldr	r2, [r7, #20]
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	697a      	ldr	r2, [r7, #20]
 8007f74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	68fa      	ldr	r2, [r7, #12]
 8007f7a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	685a      	ldr	r2, [r3, #4]
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	693a      	ldr	r2, [r7, #16]
 8007f88:	621a      	str	r2, [r3, #32]
}
 8007f8a:	bf00      	nop
 8007f8c:	371c      	adds	r7, #28
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f94:	4770      	bx	lr
 8007f96:	bf00      	nop
 8007f98:	40012c00 	.word	0x40012c00
 8007f9c:	40013400 	.word	0x40013400
 8007fa0:	40014000 	.word	0x40014000
 8007fa4:	40014400 	.word	0x40014400
 8007fa8:	40014800 	.word	0x40014800
 8007fac:	40015000 	.word	0x40015000

08007fb0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b087      	sub	sp, #28
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	60f8      	str	r0, [r7, #12]
 8007fb8:	60b9      	str	r1, [r7, #8]
 8007fba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	6a1b      	ldr	r3, [r3, #32]
 8007fc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	6a1b      	ldr	r3, [r3, #32]
 8007fc6:	f023 0201 	bic.w	r2, r3, #1
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	699b      	ldr	r3, [r3, #24]
 8007fd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007fda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	011b      	lsls	r3, r3, #4
 8007fe0:	693a      	ldr	r2, [r7, #16]
 8007fe2:	4313      	orrs	r3, r2
 8007fe4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	f023 030a 	bic.w	r3, r3, #10
 8007fec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007fee:	697a      	ldr	r2, [r7, #20]
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	4313      	orrs	r3, r2
 8007ff4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	693a      	ldr	r2, [r7, #16]
 8007ffa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	697a      	ldr	r2, [r7, #20]
 8008000:	621a      	str	r2, [r3, #32]
}
 8008002:	bf00      	nop
 8008004:	371c      	adds	r7, #28
 8008006:	46bd      	mov	sp, r7
 8008008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800c:	4770      	bx	lr

0800800e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800800e:	b480      	push	{r7}
 8008010:	b087      	sub	sp, #28
 8008012:	af00      	add	r7, sp, #0
 8008014:	60f8      	str	r0, [r7, #12]
 8008016:	60b9      	str	r1, [r7, #8]
 8008018:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	6a1b      	ldr	r3, [r3, #32]
 800801e:	f023 0210 	bic.w	r2, r3, #16
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	699b      	ldr	r3, [r3, #24]
 800802a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	6a1b      	ldr	r3, [r3, #32]
 8008030:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008032:	697b      	ldr	r3, [r7, #20]
 8008034:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008038:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	031b      	lsls	r3, r3, #12
 800803e:	697a      	ldr	r2, [r7, #20]
 8008040:	4313      	orrs	r3, r2
 8008042:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800804a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	011b      	lsls	r3, r3, #4
 8008050:	693a      	ldr	r2, [r7, #16]
 8008052:	4313      	orrs	r3, r2
 8008054:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	697a      	ldr	r2, [r7, #20]
 800805a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	693a      	ldr	r2, [r7, #16]
 8008060:	621a      	str	r2, [r3, #32]
}
 8008062:	bf00      	nop
 8008064:	371c      	adds	r7, #28
 8008066:	46bd      	mov	sp, r7
 8008068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806c:	4770      	bx	lr

0800806e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800806e:	b480      	push	{r7}
 8008070:	b085      	sub	sp, #20
 8008072:	af00      	add	r7, sp, #0
 8008074:	6078      	str	r0, [r7, #4]
 8008076:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	689b      	ldr	r3, [r3, #8]
 800807c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8008084:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008088:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800808a:	683a      	ldr	r2, [r7, #0]
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	4313      	orrs	r3, r2
 8008090:	f043 0307 	orr.w	r3, r3, #7
 8008094:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	68fa      	ldr	r2, [r7, #12]
 800809a:	609a      	str	r2, [r3, #8]
}
 800809c:	bf00      	nop
 800809e:	3714      	adds	r7, #20
 80080a0:	46bd      	mov	sp, r7
 80080a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a6:	4770      	bx	lr

080080a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b087      	sub	sp, #28
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	60f8      	str	r0, [r7, #12]
 80080b0:	60b9      	str	r1, [r7, #8]
 80080b2:	607a      	str	r2, [r7, #4]
 80080b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	689b      	ldr	r3, [r3, #8]
 80080ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80080c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	021a      	lsls	r2, r3, #8
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	431a      	orrs	r2, r3
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	4313      	orrs	r3, r2
 80080d0:	697a      	ldr	r2, [r7, #20]
 80080d2:	4313      	orrs	r3, r2
 80080d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	697a      	ldr	r2, [r7, #20]
 80080da:	609a      	str	r2, [r3, #8]
}
 80080dc:	bf00      	nop
 80080de:	371c      	adds	r7, #28
 80080e0:	46bd      	mov	sp, r7
 80080e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e6:	4770      	bx	lr

080080e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80080e8:	b480      	push	{r7}
 80080ea:	b087      	sub	sp, #28
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	60f8      	str	r0, [r7, #12]
 80080f0:	60b9      	str	r1, [r7, #8]
 80080f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	f003 031f 	and.w	r3, r3, #31
 80080fa:	2201      	movs	r2, #1
 80080fc:	fa02 f303 	lsl.w	r3, r2, r3
 8008100:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	6a1a      	ldr	r2, [r3, #32]
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	43db      	mvns	r3, r3
 800810a:	401a      	ands	r2, r3
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	6a1a      	ldr	r2, [r3, #32]
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	f003 031f 	and.w	r3, r3, #31
 800811a:	6879      	ldr	r1, [r7, #4]
 800811c:	fa01 f303 	lsl.w	r3, r1, r3
 8008120:	431a      	orrs	r2, r3
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	621a      	str	r2, [r3, #32]
}
 8008126:	bf00      	nop
 8008128:	371c      	adds	r7, #28
 800812a:	46bd      	mov	sp, r7
 800812c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008130:	4770      	bx	lr
	...

08008134 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b084      	sub	sp, #16
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
 800813c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d109      	bne.n	8008158 <HAL_TIMEx_PWMN_Start+0x24>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800814a:	b2db      	uxtb	r3, r3
 800814c:	2b01      	cmp	r3, #1
 800814e:	bf14      	ite	ne
 8008150:	2301      	movne	r3, #1
 8008152:	2300      	moveq	r3, #0
 8008154:	b2db      	uxtb	r3, r3
 8008156:	e022      	b.n	800819e <HAL_TIMEx_PWMN_Start+0x6a>
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	2b04      	cmp	r3, #4
 800815c:	d109      	bne.n	8008172 <HAL_TIMEx_PWMN_Start+0x3e>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008164:	b2db      	uxtb	r3, r3
 8008166:	2b01      	cmp	r3, #1
 8008168:	bf14      	ite	ne
 800816a:	2301      	movne	r3, #1
 800816c:	2300      	moveq	r3, #0
 800816e:	b2db      	uxtb	r3, r3
 8008170:	e015      	b.n	800819e <HAL_TIMEx_PWMN_Start+0x6a>
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	2b08      	cmp	r3, #8
 8008176:	d109      	bne.n	800818c <HAL_TIMEx_PWMN_Start+0x58>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800817e:	b2db      	uxtb	r3, r3
 8008180:	2b01      	cmp	r3, #1
 8008182:	bf14      	ite	ne
 8008184:	2301      	movne	r3, #1
 8008186:	2300      	moveq	r3, #0
 8008188:	b2db      	uxtb	r3, r3
 800818a:	e008      	b.n	800819e <HAL_TIMEx_PWMN_Start+0x6a>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8008192:	b2db      	uxtb	r3, r3
 8008194:	2b01      	cmp	r3, #1
 8008196:	bf14      	ite	ne
 8008198:	2301      	movne	r3, #1
 800819a:	2300      	moveq	r3, #0
 800819c:	b2db      	uxtb	r3, r3
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d001      	beq.n	80081a6 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80081a2:	2301      	movs	r3, #1
 80081a4:	e073      	b.n	800828e <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d104      	bne.n	80081b6 <HAL_TIMEx_PWMN_Start+0x82>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2202      	movs	r2, #2
 80081b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80081b4:	e013      	b.n	80081de <HAL_TIMEx_PWMN_Start+0xaa>
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	2b04      	cmp	r3, #4
 80081ba:	d104      	bne.n	80081c6 <HAL_TIMEx_PWMN_Start+0x92>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2202      	movs	r2, #2
 80081c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80081c4:	e00b      	b.n	80081de <HAL_TIMEx_PWMN_Start+0xaa>
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	2b08      	cmp	r3, #8
 80081ca:	d104      	bne.n	80081d6 <HAL_TIMEx_PWMN_Start+0xa2>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2202      	movs	r2, #2
 80081d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80081d4:	e003      	b.n	80081de <HAL_TIMEx_PWMN_Start+0xaa>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2202      	movs	r2, #2
 80081da:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	2204      	movs	r2, #4
 80081e4:	6839      	ldr	r1, [r7, #0]
 80081e6:	4618      	mov	r0, r3
 80081e8:	f000 fa52 	bl	8008690 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80081fa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4a25      	ldr	r2, [pc, #148]	; (8008298 <HAL_TIMEx_PWMN_Start+0x164>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d022      	beq.n	800824c <HAL_TIMEx_PWMN_Start+0x118>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800820e:	d01d      	beq.n	800824c <HAL_TIMEx_PWMN_Start+0x118>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	4a21      	ldr	r2, [pc, #132]	; (800829c <HAL_TIMEx_PWMN_Start+0x168>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d018      	beq.n	800824c <HAL_TIMEx_PWMN_Start+0x118>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	4a20      	ldr	r2, [pc, #128]	; (80082a0 <HAL_TIMEx_PWMN_Start+0x16c>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d013      	beq.n	800824c <HAL_TIMEx_PWMN_Start+0x118>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4a1e      	ldr	r2, [pc, #120]	; (80082a4 <HAL_TIMEx_PWMN_Start+0x170>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d00e      	beq.n	800824c <HAL_TIMEx_PWMN_Start+0x118>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4a1d      	ldr	r2, [pc, #116]	; (80082a8 <HAL_TIMEx_PWMN_Start+0x174>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d009      	beq.n	800824c <HAL_TIMEx_PWMN_Start+0x118>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	4a1b      	ldr	r2, [pc, #108]	; (80082ac <HAL_TIMEx_PWMN_Start+0x178>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d004      	beq.n	800824c <HAL_TIMEx_PWMN_Start+0x118>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	4a1a      	ldr	r2, [pc, #104]	; (80082b0 <HAL_TIMEx_PWMN_Start+0x17c>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d115      	bne.n	8008278 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	689a      	ldr	r2, [r3, #8]
 8008252:	4b18      	ldr	r3, [pc, #96]	; (80082b4 <HAL_TIMEx_PWMN_Start+0x180>)
 8008254:	4013      	ands	r3, r2
 8008256:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	2b06      	cmp	r3, #6
 800825c:	d015      	beq.n	800828a <HAL_TIMEx_PWMN_Start+0x156>
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008264:	d011      	beq.n	800828a <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	681a      	ldr	r2, [r3, #0]
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f042 0201 	orr.w	r2, r2, #1
 8008274:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008276:	e008      	b.n	800828a <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	681a      	ldr	r2, [r3, #0]
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f042 0201 	orr.w	r2, r2, #1
 8008286:	601a      	str	r2, [r3, #0]
 8008288:	e000      	b.n	800828c <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800828a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800828c:	2300      	movs	r3, #0
}
 800828e:	4618      	mov	r0, r3
 8008290:	3710      	adds	r7, #16
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}
 8008296:	bf00      	nop
 8008298:	40012c00 	.word	0x40012c00
 800829c:	40000400 	.word	0x40000400
 80082a0:	40000800 	.word	0x40000800
 80082a4:	40000c00 	.word	0x40000c00
 80082a8:	40013400 	.word	0x40013400
 80082ac:	40014000 	.word	0x40014000
 80082b0:	40015000 	.word	0x40015000
 80082b4:	00010007 	.word	0x00010007

080082b8 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b082      	sub	sp, #8
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
 80082c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	2200      	movs	r2, #0
 80082c8:	6839      	ldr	r1, [r7, #0]
 80082ca:	4618      	mov	r0, r3
 80082cc:	f000 f9e0 	bl	8008690 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	6a1a      	ldr	r2, [r3, #32]
 80082d6:	f241 1311 	movw	r3, #4369	; 0x1111
 80082da:	4013      	ands	r3, r2
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d10f      	bne.n	8008300 <HAL_TIMEx_PWMN_Stop+0x48>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	6a1a      	ldr	r2, [r3, #32]
 80082e6:	f244 4344 	movw	r3, #17476	; 0x4444
 80082ea:	4013      	ands	r3, r2
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d107      	bne.n	8008300 <HAL_TIMEx_PWMN_Stop+0x48>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80082fe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	6a1a      	ldr	r2, [r3, #32]
 8008306:	f241 1311 	movw	r3, #4369	; 0x1111
 800830a:	4013      	ands	r3, r2
 800830c:	2b00      	cmp	r3, #0
 800830e:	d10f      	bne.n	8008330 <HAL_TIMEx_PWMN_Stop+0x78>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	6a1a      	ldr	r2, [r3, #32]
 8008316:	f244 4344 	movw	r3, #17476	; 0x4444
 800831a:	4013      	ands	r3, r2
 800831c:	2b00      	cmp	r3, #0
 800831e:	d107      	bne.n	8008330 <HAL_TIMEx_PWMN_Stop+0x78>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	681a      	ldr	r2, [r3, #0]
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f022 0201 	bic.w	r2, r2, #1
 800832e:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d104      	bne.n	8008340 <HAL_TIMEx_PWMN_Stop+0x88>
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2201      	movs	r2, #1
 800833a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800833e:	e013      	b.n	8008368 <HAL_TIMEx_PWMN_Stop+0xb0>
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	2b04      	cmp	r3, #4
 8008344:	d104      	bne.n	8008350 <HAL_TIMEx_PWMN_Stop+0x98>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2201      	movs	r2, #1
 800834a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800834e:	e00b      	b.n	8008368 <HAL_TIMEx_PWMN_Stop+0xb0>
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	2b08      	cmp	r3, #8
 8008354:	d104      	bne.n	8008360 <HAL_TIMEx_PWMN_Stop+0xa8>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2201      	movs	r2, #1
 800835a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800835e:	e003      	b.n	8008368 <HAL_TIMEx_PWMN_Stop+0xb0>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2201      	movs	r2, #1
 8008364:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 8008368:	2300      	movs	r3, #0
}
 800836a:	4618      	mov	r0, r3
 800836c:	3708      	adds	r7, #8
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}
	...

08008374 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008374:	b480      	push	{r7}
 8008376:	b085      	sub	sp, #20
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
 800837c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008384:	2b01      	cmp	r3, #1
 8008386:	d101      	bne.n	800838c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008388:	2302      	movs	r3, #2
 800838a:	e074      	b.n	8008476 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2201      	movs	r2, #1
 8008390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2202      	movs	r2, #2
 8008398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	685b      	ldr	r3, [r3, #4]
 80083a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	689b      	ldr	r3, [r3, #8]
 80083aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4a34      	ldr	r2, [pc, #208]	; (8008484 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d009      	beq.n	80083ca <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	4a33      	ldr	r2, [pc, #204]	; (8008488 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d004      	beq.n	80083ca <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	4a31      	ldr	r2, [pc, #196]	; (800848c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d108      	bne.n	80083dc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80083d0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	685b      	ldr	r3, [r3, #4]
 80083d6:	68fa      	ldr	r2, [r7, #12]
 80083d8:	4313      	orrs	r3, r2
 80083da:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80083e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	68fa      	ldr	r2, [r7, #12]
 80083ee:	4313      	orrs	r3, r2
 80083f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	68fa      	ldr	r2, [r7, #12]
 80083f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4a21      	ldr	r2, [pc, #132]	; (8008484 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d022      	beq.n	800844a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800840c:	d01d      	beq.n	800844a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4a1f      	ldr	r2, [pc, #124]	; (8008490 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d018      	beq.n	800844a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a1d      	ldr	r2, [pc, #116]	; (8008494 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d013      	beq.n	800844a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	4a1c      	ldr	r2, [pc, #112]	; (8008498 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d00e      	beq.n	800844a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4a15      	ldr	r2, [pc, #84]	; (8008488 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d009      	beq.n	800844a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4a18      	ldr	r2, [pc, #96]	; (800849c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d004      	beq.n	800844a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4a11      	ldr	r2, [pc, #68]	; (800848c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d10c      	bne.n	8008464 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008450:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	689b      	ldr	r3, [r3, #8]
 8008456:	68ba      	ldr	r2, [r7, #8]
 8008458:	4313      	orrs	r3, r2
 800845a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	68ba      	ldr	r2, [r7, #8]
 8008462:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2201      	movs	r2, #1
 8008468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2200      	movs	r2, #0
 8008470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008474:	2300      	movs	r3, #0
}
 8008476:	4618      	mov	r0, r3
 8008478:	3714      	adds	r7, #20
 800847a:	46bd      	mov	sp, r7
 800847c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008480:	4770      	bx	lr
 8008482:	bf00      	nop
 8008484:	40012c00 	.word	0x40012c00
 8008488:	40013400 	.word	0x40013400
 800848c:	40015000 	.word	0x40015000
 8008490:	40000400 	.word	0x40000400
 8008494:	40000800 	.word	0x40000800
 8008498:	40000c00 	.word	0x40000c00
 800849c:	40014000 	.word	0x40014000

080084a0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80084a0:	b480      	push	{r7}
 80084a2:	b085      	sub	sp, #20
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
 80084a8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80084aa:	2300      	movs	r3, #0
 80084ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084b4:	2b01      	cmp	r3, #1
 80084b6:	d101      	bne.n	80084bc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80084b8:	2302      	movs	r3, #2
 80084ba:	e096      	b.n	80085ea <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2201      	movs	r2, #1
 80084c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	68db      	ldr	r3, [r3, #12]
 80084ce:	4313      	orrs	r3, r2
 80084d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	689b      	ldr	r3, [r3, #8]
 80084dc:	4313      	orrs	r3, r2
 80084de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	685b      	ldr	r3, [r3, #4]
 80084ea:	4313      	orrs	r3, r2
 80084ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4313      	orrs	r3, r2
 80084fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	691b      	ldr	r3, [r3, #16]
 8008506:	4313      	orrs	r3, r2
 8008508:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	695b      	ldr	r3, [r3, #20]
 8008514:	4313      	orrs	r3, r2
 8008516:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008522:	4313      	orrs	r3, r2
 8008524:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	699b      	ldr	r3, [r3, #24]
 8008530:	041b      	lsls	r3, r3, #16
 8008532:	4313      	orrs	r3, r2
 8008534:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	4a2f      	ldr	r2, [pc, #188]	; (80085f8 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800853c:	4293      	cmp	r3, r2
 800853e:	d009      	beq.n	8008554 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	4a2d      	ldr	r2, [pc, #180]	; (80085fc <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8008546:	4293      	cmp	r3, r2
 8008548:	d004      	beq.n	8008554 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	4a2c      	ldr	r2, [pc, #176]	; (8008600 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8008550:	4293      	cmp	r3, r2
 8008552:	d106      	bne.n	8008562 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	69db      	ldr	r3, [r3, #28]
 800855e:	4313      	orrs	r3, r2
 8008560:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	4a24      	ldr	r2, [pc, #144]	; (80085f8 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8008568:	4293      	cmp	r3, r2
 800856a:	d009      	beq.n	8008580 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4a22      	ldr	r2, [pc, #136]	; (80085fc <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d004      	beq.n	8008580 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4a21      	ldr	r2, [pc, #132]	; (8008600 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d12b      	bne.n	80085d8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800858a:	051b      	lsls	r3, r3, #20
 800858c:	4313      	orrs	r3, r2
 800858e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	6a1b      	ldr	r3, [r3, #32]
 800859a:	4313      	orrs	r3, r2
 800859c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085a8:	4313      	orrs	r3, r2
 80085aa:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	4a11      	ldr	r2, [pc, #68]	; (80085f8 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d009      	beq.n	80085ca <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	4a10      	ldr	r2, [pc, #64]	; (80085fc <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80085bc:	4293      	cmp	r3, r2
 80085be:	d004      	beq.n	80085ca <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	4a0e      	ldr	r2, [pc, #56]	; (8008600 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d106      	bne.n	80085d8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085d4:	4313      	orrs	r3, r2
 80085d6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	68fa      	ldr	r2, [r7, #12]
 80085de:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2200      	movs	r2, #0
 80085e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80085e8:	2300      	movs	r3, #0
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3714      	adds	r7, #20
 80085ee:	46bd      	mov	sp, r7
 80085f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f4:	4770      	bx	lr
 80085f6:	bf00      	nop
 80085f8:	40012c00 	.word	0x40012c00
 80085fc:	40013400 	.word	0x40013400
 8008600:	40015000 	.word	0x40015000

08008604 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008604:	b480      	push	{r7}
 8008606:	b083      	sub	sp, #12
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800860c:	bf00      	nop
 800860e:	370c      	adds	r7, #12
 8008610:	46bd      	mov	sp, r7
 8008612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008616:	4770      	bx	lr

08008618 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008618:	b480      	push	{r7}
 800861a:	b083      	sub	sp, #12
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008620:	bf00      	nop
 8008622:	370c      	adds	r7, #12
 8008624:	46bd      	mov	sp, r7
 8008626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862a:	4770      	bx	lr

0800862c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800862c:	b480      	push	{r7}
 800862e:	b083      	sub	sp, #12
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008634:	bf00      	nop
 8008636:	370c      	adds	r7, #12
 8008638:	46bd      	mov	sp, r7
 800863a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863e:	4770      	bx	lr

08008640 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008640:	b480      	push	{r7}
 8008642:	b083      	sub	sp, #12
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008648:	bf00      	nop
 800864a:	370c      	adds	r7, #12
 800864c:	46bd      	mov	sp, r7
 800864e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008652:	4770      	bx	lr

08008654 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008654:	b480      	push	{r7}
 8008656:	b083      	sub	sp, #12
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800865c:	bf00      	nop
 800865e:	370c      	adds	r7, #12
 8008660:	46bd      	mov	sp, r7
 8008662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008666:	4770      	bx	lr

08008668 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008668:	b480      	push	{r7}
 800866a:	b083      	sub	sp, #12
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008670:	bf00      	nop
 8008672:	370c      	adds	r7, #12
 8008674:	46bd      	mov	sp, r7
 8008676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867a:	4770      	bx	lr

0800867c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800867c:	b480      	push	{r7}
 800867e:	b083      	sub	sp, #12
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008684:	bf00      	nop
 8008686:	370c      	adds	r7, #12
 8008688:	46bd      	mov	sp, r7
 800868a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868e:	4770      	bx	lr

08008690 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8008690:	b480      	push	{r7}
 8008692:	b087      	sub	sp, #28
 8008694:	af00      	add	r7, sp, #0
 8008696:	60f8      	str	r0, [r7, #12]
 8008698:	60b9      	str	r1, [r7, #8]
 800869a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	f003 031f 	and.w	r3, r3, #31
 80086a2:	2204      	movs	r2, #4
 80086a4:	fa02 f303 	lsl.w	r3, r2, r3
 80086a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	6a1a      	ldr	r2, [r3, #32]
 80086ae:	697b      	ldr	r3, [r7, #20]
 80086b0:	43db      	mvns	r3, r3
 80086b2:	401a      	ands	r2, r3
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	6a1a      	ldr	r2, [r3, #32]
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	f003 031f 	and.w	r3, r3, #31
 80086c2:	6879      	ldr	r1, [r7, #4]
 80086c4:	fa01 f303 	lsl.w	r3, r1, r3
 80086c8:	431a      	orrs	r2, r3
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	621a      	str	r2, [r3, #32]
}
 80086ce:	bf00      	nop
 80086d0:	371c      	adds	r7, #28
 80086d2:	46bd      	mov	sp, r7
 80086d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d8:	4770      	bx	lr

080086da <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80086da:	b580      	push	{r7, lr}
 80086dc:	b082      	sub	sp, #8
 80086de:	af00      	add	r7, sp, #0
 80086e0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d101      	bne.n	80086ec <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80086e8:	2301      	movs	r3, #1
 80086ea:	e042      	b.n	8008772 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d106      	bne.n	8008704 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2200      	movs	r2, #0
 80086fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f7fa fa1e 	bl	8002b40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2224      	movs	r2, #36	; 0x24
 8008708:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	681a      	ldr	r2, [r3, #0]
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f022 0201 	bic.w	r2, r2, #1
 800871a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f000 fc51 	bl	8008fc4 <UART_SetConfig>
 8008722:	4603      	mov	r3, r0
 8008724:	2b01      	cmp	r3, #1
 8008726:	d101      	bne.n	800872c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008728:	2301      	movs	r3, #1
 800872a:	e022      	b.n	8008772 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008730:	2b00      	cmp	r3, #0
 8008732:	d002      	beq.n	800873a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f000 ff41 	bl	80095bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	685a      	ldr	r2, [r3, #4]
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008748:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	689a      	ldr	r2, [r3, #8]
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008758:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	681a      	ldr	r2, [r3, #0]
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f042 0201 	orr.w	r2, r2, #1
 8008768:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f000 ffc8 	bl	8009700 <UART_CheckIdleState>
 8008770:	4603      	mov	r3, r0
}
 8008772:	4618      	mov	r0, r3
 8008774:	3708      	adds	r7, #8
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}

0800877a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800877a:	b580      	push	{r7, lr}
 800877c:	b08a      	sub	sp, #40	; 0x28
 800877e:	af02      	add	r7, sp, #8
 8008780:	60f8      	str	r0, [r7, #12]
 8008782:	60b9      	str	r1, [r7, #8]
 8008784:	603b      	str	r3, [r7, #0]
 8008786:	4613      	mov	r3, r2
 8008788:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008790:	2b20      	cmp	r3, #32
 8008792:	f040 8083 	bne.w	800889c <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d002      	beq.n	80087a2 <HAL_UART_Transmit+0x28>
 800879c:	88fb      	ldrh	r3, [r7, #6]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d101      	bne.n	80087a6 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80087a2:	2301      	movs	r3, #1
 80087a4:	e07b      	b.n	800889e <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80087ac:	2b01      	cmp	r3, #1
 80087ae:	d101      	bne.n	80087b4 <HAL_UART_Transmit+0x3a>
 80087b0:	2302      	movs	r3, #2
 80087b2:	e074      	b.n	800889e <HAL_UART_Transmit+0x124>
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	2201      	movs	r2, #1
 80087b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	2200      	movs	r2, #0
 80087c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	2221      	movs	r2, #33	; 0x21
 80087c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80087cc:	f7fa fa6c 	bl	8002ca8 <HAL_GetTick>
 80087d0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	88fa      	ldrh	r2, [r7, #6]
 80087d6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	88fa      	ldrh	r2, [r7, #6]
 80087de:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	689b      	ldr	r3, [r3, #8]
 80087e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087ea:	d108      	bne.n	80087fe <HAL_UART_Transmit+0x84>
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	691b      	ldr	r3, [r3, #16]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d104      	bne.n	80087fe <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80087f4:	2300      	movs	r3, #0
 80087f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	61bb      	str	r3, [r7, #24]
 80087fc:	e003      	b.n	8008806 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008802:	2300      	movs	r3, #0
 8008804:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	2200      	movs	r2, #0
 800880a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800880e:	e02c      	b.n	800886a <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	9300      	str	r3, [sp, #0]
 8008814:	697b      	ldr	r3, [r7, #20]
 8008816:	2200      	movs	r2, #0
 8008818:	2180      	movs	r1, #128	; 0x80
 800881a:	68f8      	ldr	r0, [r7, #12]
 800881c:	f000 ffbb 	bl	8009796 <UART_WaitOnFlagUntilTimeout>
 8008820:	4603      	mov	r3, r0
 8008822:	2b00      	cmp	r3, #0
 8008824:	d001      	beq.n	800882a <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8008826:	2303      	movs	r3, #3
 8008828:	e039      	b.n	800889e <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800882a:	69fb      	ldr	r3, [r7, #28]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d10b      	bne.n	8008848 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008830:	69bb      	ldr	r3, [r7, #24]
 8008832:	881b      	ldrh	r3, [r3, #0]
 8008834:	461a      	mov	r2, r3
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800883e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008840:	69bb      	ldr	r3, [r7, #24]
 8008842:	3302      	adds	r3, #2
 8008844:	61bb      	str	r3, [r7, #24]
 8008846:	e007      	b.n	8008858 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008848:	69fb      	ldr	r3, [r7, #28]
 800884a:	781a      	ldrb	r2, [r3, #0]
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008852:	69fb      	ldr	r3, [r7, #28]
 8008854:	3301      	adds	r3, #1
 8008856:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800885e:	b29b      	uxth	r3, r3
 8008860:	3b01      	subs	r3, #1
 8008862:	b29a      	uxth	r2, r3
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008870:	b29b      	uxth	r3, r3
 8008872:	2b00      	cmp	r3, #0
 8008874:	d1cc      	bne.n	8008810 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	9300      	str	r3, [sp, #0]
 800887a:	697b      	ldr	r3, [r7, #20]
 800887c:	2200      	movs	r2, #0
 800887e:	2140      	movs	r1, #64	; 0x40
 8008880:	68f8      	ldr	r0, [r7, #12]
 8008882:	f000 ff88 	bl	8009796 <UART_WaitOnFlagUntilTimeout>
 8008886:	4603      	mov	r3, r0
 8008888:	2b00      	cmp	r3, #0
 800888a:	d001      	beq.n	8008890 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800888c:	2303      	movs	r3, #3
 800888e:	e006      	b.n	800889e <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	2220      	movs	r2, #32
 8008894:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8008898:	2300      	movs	r3, #0
 800889a:	e000      	b.n	800889e <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800889c:	2302      	movs	r3, #2
  }
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3720      	adds	r7, #32
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}
	...

080088a8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b08a      	sub	sp, #40	; 0x28
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	60f8      	str	r0, [r7, #12]
 80088b0:	60b9      	str	r1, [r7, #8]
 80088b2:	4613      	mov	r3, r2
 80088b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088bc:	2b20      	cmp	r3, #32
 80088be:	d142      	bne.n	8008946 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d002      	beq.n	80088cc <HAL_UART_Receive_IT+0x24>
 80088c6:	88fb      	ldrh	r3, [r7, #6]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d101      	bne.n	80088d0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80088cc:	2301      	movs	r3, #1
 80088ce:	e03b      	b.n	8008948 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80088d6:	2b01      	cmp	r3, #1
 80088d8:	d101      	bne.n	80088de <HAL_UART_Receive_IT+0x36>
 80088da:	2302      	movs	r3, #2
 80088dc:	e034      	b.n	8008948 <HAL_UART_Receive_IT+0xa0>
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	2201      	movs	r2, #1
 80088e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	2200      	movs	r2, #0
 80088ea:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	4a17      	ldr	r2, [pc, #92]	; (8008950 <HAL_UART_Receive_IT+0xa8>)
 80088f2:	4293      	cmp	r3, r2
 80088f4:	d01f      	beq.n	8008936 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	685b      	ldr	r3, [r3, #4]
 80088fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008900:	2b00      	cmp	r3, #0
 8008902:	d018      	beq.n	8008936 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	e853 3f00 	ldrex	r3, [r3]
 8008910:	613b      	str	r3, [r7, #16]
   return(result);
 8008912:	693b      	ldr	r3, [r7, #16]
 8008914:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008918:	627b      	str	r3, [r7, #36]	; 0x24
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	461a      	mov	r2, r3
 8008920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008922:	623b      	str	r3, [r7, #32]
 8008924:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008926:	69f9      	ldr	r1, [r7, #28]
 8008928:	6a3a      	ldr	r2, [r7, #32]
 800892a:	e841 2300 	strex	r3, r2, [r1]
 800892e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008930:	69bb      	ldr	r3, [r7, #24]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d1e6      	bne.n	8008904 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008936:	88fb      	ldrh	r3, [r7, #6]
 8008938:	461a      	mov	r2, r3
 800893a:	68b9      	ldr	r1, [r7, #8]
 800893c:	68f8      	ldr	r0, [r7, #12]
 800893e:	f000 fff3 	bl	8009928 <UART_Start_Receive_IT>
 8008942:	4603      	mov	r3, r0
 8008944:	e000      	b.n	8008948 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008946:	2302      	movs	r3, #2
  }
}
 8008948:	4618      	mov	r0, r3
 800894a:	3728      	adds	r7, #40	; 0x28
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}
 8008950:	40008000 	.word	0x40008000

08008954 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b0ba      	sub	sp, #232	; 0xe8
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	69db      	ldr	r3, [r3, #28]
 8008962:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	689b      	ldr	r3, [r3, #8]
 8008976:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800897a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800897e:	f640 030f 	movw	r3, #2063	; 0x80f
 8008982:	4013      	ands	r3, r2
 8008984:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008988:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800898c:	2b00      	cmp	r3, #0
 800898e:	d11b      	bne.n	80089c8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008990:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008994:	f003 0320 	and.w	r3, r3, #32
 8008998:	2b00      	cmp	r3, #0
 800899a:	d015      	beq.n	80089c8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800899c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089a0:	f003 0320 	and.w	r3, r3, #32
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d105      	bne.n	80089b4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80089a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80089ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d009      	beq.n	80089c8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	f000 82d6 	beq.w	8008f6a <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	4798      	blx	r3
      }
      return;
 80089c6:	e2d0      	b.n	8008f6a <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80089c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	f000 811f 	beq.w	8008c10 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80089d2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80089d6:	4b8b      	ldr	r3, [pc, #556]	; (8008c04 <HAL_UART_IRQHandler+0x2b0>)
 80089d8:	4013      	ands	r3, r2
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d106      	bne.n	80089ec <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80089de:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80089e2:	4b89      	ldr	r3, [pc, #548]	; (8008c08 <HAL_UART_IRQHandler+0x2b4>)
 80089e4:	4013      	ands	r3, r2
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	f000 8112 	beq.w	8008c10 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80089ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089f0:	f003 0301 	and.w	r3, r3, #1
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d011      	beq.n	8008a1c <HAL_UART_IRQHandler+0xc8>
 80089f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d00b      	beq.n	8008a1c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	2201      	movs	r2, #1
 8008a0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a12:	f043 0201 	orr.w	r2, r3, #1
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008a1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a20:	f003 0302 	and.w	r3, r3, #2
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d011      	beq.n	8008a4c <HAL_UART_IRQHandler+0xf8>
 8008a28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a2c:	f003 0301 	and.w	r3, r3, #1
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d00b      	beq.n	8008a4c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	2202      	movs	r2, #2
 8008a3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a42:	f043 0204 	orr.w	r2, r3, #4
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008a4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a50:	f003 0304 	and.w	r3, r3, #4
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d011      	beq.n	8008a7c <HAL_UART_IRQHandler+0x128>
 8008a58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a5c:	f003 0301 	and.w	r3, r3, #1
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d00b      	beq.n	8008a7c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	2204      	movs	r2, #4
 8008a6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a72:	f043 0202 	orr.w	r2, r3, #2
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008a7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a80:	f003 0308 	and.w	r3, r3, #8
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d017      	beq.n	8008ab8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008a88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a8c:	f003 0320 	and.w	r3, r3, #32
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d105      	bne.n	8008aa0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008a94:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008a98:	4b5a      	ldr	r3, [pc, #360]	; (8008c04 <HAL_UART_IRQHandler+0x2b0>)
 8008a9a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d00b      	beq.n	8008ab8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	2208      	movs	r2, #8
 8008aa6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008aae:	f043 0208 	orr.w	r2, r3, #8
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008ab8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008abc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d012      	beq.n	8008aea <HAL_UART_IRQHandler+0x196>
 8008ac4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ac8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d00c      	beq.n	8008aea <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008ad8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008ae0:	f043 0220 	orr.w	r2, r3, #32
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	f000 823c 	beq.w	8008f6e <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008af6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008afa:	f003 0320 	and.w	r3, r3, #32
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d013      	beq.n	8008b2a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008b02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b06:	f003 0320 	and.w	r3, r3, #32
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d105      	bne.n	8008b1a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008b0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d007      	beq.n	8008b2a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d003      	beq.n	8008b2a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b30:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	689b      	ldr	r3, [r3, #8]
 8008b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b3e:	2b40      	cmp	r3, #64	; 0x40
 8008b40:	d005      	beq.n	8008b4e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008b42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008b46:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d04f      	beq.n	8008bee <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f001 f814 	bl	8009b7c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	689b      	ldr	r3, [r3, #8]
 8008b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b5e:	2b40      	cmp	r3, #64	; 0x40
 8008b60:	d141      	bne.n	8008be6 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	3308      	adds	r3, #8
 8008b68:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008b70:	e853 3f00 	ldrex	r3, [r3]
 8008b74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008b78:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008b7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	3308      	adds	r3, #8
 8008b8a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008b8e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008b92:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b96:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008b9a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008b9e:	e841 2300 	strex	r3, r2, [r1]
 8008ba2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008ba6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d1d9      	bne.n	8008b62 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d013      	beq.n	8008bde <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008bba:	4a14      	ldr	r2, [pc, #80]	; (8008c0c <HAL_UART_IRQHandler+0x2b8>)
 8008bbc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f7fc f9fc 	bl	8004fc0 <HAL_DMA_Abort_IT>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d017      	beq.n	8008bfe <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bd4:	687a      	ldr	r2, [r7, #4]
 8008bd6:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8008bd8:	4610      	mov	r0, r2
 8008bda:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bdc:	e00f      	b.n	8008bfe <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f000 f9da 	bl	8008f98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008be4:	e00b      	b.n	8008bfe <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f000 f9d6 	bl	8008f98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bec:	e007      	b.n	8008bfe <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f000 f9d2 	bl	8008f98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8008bfc:	e1b7      	b.n	8008f6e <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bfe:	bf00      	nop
    return;
 8008c00:	e1b5      	b.n	8008f6e <HAL_UART_IRQHandler+0x61a>
 8008c02:	bf00      	nop
 8008c04:	10000001 	.word	0x10000001
 8008c08:	04000120 	.word	0x04000120
 8008c0c:	08009c49 	.word	0x08009c49

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c14:	2b01      	cmp	r3, #1
 8008c16:	f040 814a 	bne.w	8008eae <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008c1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c1e:	f003 0310 	and.w	r3, r3, #16
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	f000 8143 	beq.w	8008eae <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008c28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c2c:	f003 0310 	and.w	r3, r3, #16
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	f000 813c 	beq.w	8008eae <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	2210      	movs	r2, #16
 8008c3c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	689b      	ldr	r3, [r3, #8]
 8008c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c48:	2b40      	cmp	r3, #64	; 0x40
 8008c4a:	f040 80b5 	bne.w	8008db8 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	685b      	ldr	r3, [r3, #4]
 8008c56:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008c5a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	f000 8187 	beq.w	8008f72 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008c6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008c6e:	429a      	cmp	r2, r3
 8008c70:	f080 817f 	bcs.w	8008f72 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008c7a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f003 0320 	and.w	r3, r3, #32
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	f040 8086 	bne.w	8008d9c <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c98:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008c9c:	e853 3f00 	ldrex	r3, [r3]
 8008ca0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008ca4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008ca8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008cac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	461a      	mov	r2, r3
 8008cb6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008cba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008cbe:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cc2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008cc6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008cca:	e841 2300 	strex	r3, r2, [r1]
 8008cce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008cd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d1da      	bne.n	8008c90 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	3308      	adds	r3, #8
 8008ce0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ce2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ce4:	e853 3f00 	ldrex	r3, [r3]
 8008ce8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008cea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008cec:	f023 0301 	bic.w	r3, r3, #1
 8008cf0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	3308      	adds	r3, #8
 8008cfa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008cfe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008d02:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d04:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008d06:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008d0a:	e841 2300 	strex	r3, r2, [r1]
 8008d0e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008d10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d1e1      	bne.n	8008cda <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	3308      	adds	r3, #8
 8008d1c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008d20:	e853 3f00 	ldrex	r3, [r3]
 8008d24:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008d26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	3308      	adds	r3, #8
 8008d36:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008d3a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008d3c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d3e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008d40:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008d42:	e841 2300 	strex	r3, r2, [r1]
 8008d46:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008d48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d1e3      	bne.n	8008d16 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2220      	movs	r2, #32
 8008d52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2200      	movs	r2, #0
 8008d5a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d64:	e853 3f00 	ldrex	r3, [r3]
 8008d68:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008d6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d6c:	f023 0310 	bic.w	r3, r3, #16
 8008d70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	461a      	mov	r2, r3
 8008d7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008d7e:	65bb      	str	r3, [r7, #88]	; 0x58
 8008d80:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d82:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008d84:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008d86:	e841 2300 	strex	r3, r2, [r1]
 8008d8a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008d8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d1e4      	bne.n	8008d5c <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008d96:	4618      	mov	r0, r3
 8008d98:	f7fc f8b9 	bl	8004f0e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008da8:	b29b      	uxth	r3, r3
 8008daa:	1ad3      	subs	r3, r2, r3
 8008dac:	b29b      	uxth	r3, r3
 8008dae:	4619      	mov	r1, r3
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f000 f8fb 	bl	8008fac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008db6:	e0dc      	b.n	8008f72 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008dc4:	b29b      	uxth	r3, r3
 8008dc6:	1ad3      	subs	r3, r2, r3
 8008dc8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008dd2:	b29b      	uxth	r3, r3
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	f000 80ce 	beq.w	8008f76 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8008dda:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	f000 80c9 	beq.w	8008f76 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dec:	e853 3f00 	ldrex	r3, [r3]
 8008df0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008df4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008df8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	461a      	mov	r2, r3
 8008e02:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008e06:	647b      	str	r3, [r7, #68]	; 0x44
 8008e08:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e0a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008e0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008e0e:	e841 2300 	strex	r3, r2, [r1]
 8008e12:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008e14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d1e4      	bne.n	8008de4 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	3308      	adds	r3, #8
 8008e20:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e24:	e853 3f00 	ldrex	r3, [r3]
 8008e28:	623b      	str	r3, [r7, #32]
   return(result);
 8008e2a:	6a3b      	ldr	r3, [r7, #32]
 8008e2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008e30:	f023 0301 	bic.w	r3, r3, #1
 8008e34:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	3308      	adds	r3, #8
 8008e3e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008e42:	633a      	str	r2, [r7, #48]	; 0x30
 8008e44:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008e48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e4a:	e841 2300 	strex	r3, r2, [r1]
 8008e4e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d1e1      	bne.n	8008e1a <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2220      	movs	r2, #32
 8008e5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2200      	movs	r2, #0
 8008e62:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2200      	movs	r2, #0
 8008e68:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e70:	693b      	ldr	r3, [r7, #16]
 8008e72:	e853 3f00 	ldrex	r3, [r3]
 8008e76:	60fb      	str	r3, [r7, #12]
   return(result);
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	f023 0310 	bic.w	r3, r3, #16
 8008e7e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	461a      	mov	r2, r3
 8008e88:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008e8c:	61fb      	str	r3, [r7, #28]
 8008e8e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e90:	69b9      	ldr	r1, [r7, #24]
 8008e92:	69fa      	ldr	r2, [r7, #28]
 8008e94:	e841 2300 	strex	r3, r2, [r1]
 8008e98:	617b      	str	r3, [r7, #20]
   return(result);
 8008e9a:	697b      	ldr	r3, [r7, #20]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d1e4      	bne.n	8008e6a <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008ea0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008ea4:	4619      	mov	r1, r3
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f000 f880 	bl	8008fac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008eac:	e063      	b.n	8008f76 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008eae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008eb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d00e      	beq.n	8008ed8 <HAL_UART_IRQHandler+0x584>
 8008eba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008ebe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d008      	beq.n	8008ed8 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008ece:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f001 fb57 	bl	800a584 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008ed6:	e051      	b.n	8008f7c <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008ed8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008edc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d014      	beq.n	8008f0e <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008ee4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ee8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d105      	bne.n	8008efc <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008ef0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008ef4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d008      	beq.n	8008f0e <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d03a      	beq.n	8008f7a <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	4798      	blx	r3
    }
    return;
 8008f0c:	e035      	b.n	8008f7a <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008f0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d009      	beq.n	8008f2e <HAL_UART_IRQHandler+0x5da>
 8008f1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d003      	beq.n	8008f2e <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f000 fea4 	bl	8009c74 <UART_EndTransmit_IT>
    return;
 8008f2c:	e026      	b.n	8008f7c <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008f2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d009      	beq.n	8008f4e <HAL_UART_IRQHandler+0x5fa>
 8008f3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f3e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d003      	beq.n	8008f4e <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f001 fb30 	bl	800a5ac <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008f4c:	e016      	b.n	8008f7c <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008f4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d010      	beq.n	8008f7c <HAL_UART_IRQHandler+0x628>
 8008f5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	da0c      	bge.n	8008f7c <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	f001 fb18 	bl	800a598 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008f68:	e008      	b.n	8008f7c <HAL_UART_IRQHandler+0x628>
      return;
 8008f6a:	bf00      	nop
 8008f6c:	e006      	b.n	8008f7c <HAL_UART_IRQHandler+0x628>
    return;
 8008f6e:	bf00      	nop
 8008f70:	e004      	b.n	8008f7c <HAL_UART_IRQHandler+0x628>
      return;
 8008f72:	bf00      	nop
 8008f74:	e002      	b.n	8008f7c <HAL_UART_IRQHandler+0x628>
      return;
 8008f76:	bf00      	nop
 8008f78:	e000      	b.n	8008f7c <HAL_UART_IRQHandler+0x628>
    return;
 8008f7a:	bf00      	nop
  }
}
 8008f7c:	37e8      	adds	r7, #232	; 0xe8
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd80      	pop	{r7, pc}
 8008f82:	bf00      	nop

08008f84 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008f84:	b480      	push	{r7}
 8008f86:	b083      	sub	sp, #12
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008f8c:	bf00      	nop
 8008f8e:	370c      	adds	r7, #12
 8008f90:	46bd      	mov	sp, r7
 8008f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f96:	4770      	bx	lr

08008f98 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008f98:	b480      	push	{r7}
 8008f9a:	b083      	sub	sp, #12
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008fa0:	bf00      	nop
 8008fa2:	370c      	adds	r7, #12
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008faa:	4770      	bx	lr

08008fac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008fac:	b480      	push	{r7}
 8008fae:	b083      	sub	sp, #12
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
 8008fb4:	460b      	mov	r3, r1
 8008fb6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008fb8:	bf00      	nop
 8008fba:	370c      	adds	r7, #12
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc2:	4770      	bx	lr

08008fc4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008fc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008fc8:	b08c      	sub	sp, #48	; 0x30
 8008fca:	af00      	add	r7, sp, #0
 8008fcc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008fce:	2300      	movs	r3, #0
 8008fd0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008fd4:	697b      	ldr	r3, [r7, #20]
 8008fd6:	689a      	ldr	r2, [r3, #8]
 8008fd8:	697b      	ldr	r3, [r7, #20]
 8008fda:	691b      	ldr	r3, [r3, #16]
 8008fdc:	431a      	orrs	r2, r3
 8008fde:	697b      	ldr	r3, [r7, #20]
 8008fe0:	695b      	ldr	r3, [r3, #20]
 8008fe2:	431a      	orrs	r2, r3
 8008fe4:	697b      	ldr	r3, [r7, #20]
 8008fe6:	69db      	ldr	r3, [r3, #28]
 8008fe8:	4313      	orrs	r3, r2
 8008fea:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008fec:	697b      	ldr	r3, [r7, #20]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	681a      	ldr	r2, [r3, #0]
 8008ff2:	4baa      	ldr	r3, [pc, #680]	; (800929c <UART_SetConfig+0x2d8>)
 8008ff4:	4013      	ands	r3, r2
 8008ff6:	697a      	ldr	r2, [r7, #20]
 8008ff8:	6812      	ldr	r2, [r2, #0]
 8008ffa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008ffc:	430b      	orrs	r3, r1
 8008ffe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009000:	697b      	ldr	r3, [r7, #20]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	685b      	ldr	r3, [r3, #4]
 8009006:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800900a:	697b      	ldr	r3, [r7, #20]
 800900c:	68da      	ldr	r2, [r3, #12]
 800900e:	697b      	ldr	r3, [r7, #20]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	430a      	orrs	r2, r1
 8009014:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009016:	697b      	ldr	r3, [r7, #20]
 8009018:	699b      	ldr	r3, [r3, #24]
 800901a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800901c:	697b      	ldr	r3, [r7, #20]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	4a9f      	ldr	r2, [pc, #636]	; (80092a0 <UART_SetConfig+0x2dc>)
 8009022:	4293      	cmp	r3, r2
 8009024:	d004      	beq.n	8009030 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009026:	697b      	ldr	r3, [r7, #20]
 8009028:	6a1b      	ldr	r3, [r3, #32]
 800902a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800902c:	4313      	orrs	r3, r2
 800902e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009030:	697b      	ldr	r3, [r7, #20]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	689b      	ldr	r3, [r3, #8]
 8009036:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800903a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800903e:	697a      	ldr	r2, [r7, #20]
 8009040:	6812      	ldr	r2, [r2, #0]
 8009042:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009044:	430b      	orrs	r3, r1
 8009046:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009048:	697b      	ldr	r3, [r7, #20]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800904e:	f023 010f 	bic.w	r1, r3, #15
 8009052:	697b      	ldr	r3, [r7, #20]
 8009054:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009056:	697b      	ldr	r3, [r7, #20]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	430a      	orrs	r2, r1
 800905c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800905e:	697b      	ldr	r3, [r7, #20]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	4a90      	ldr	r2, [pc, #576]	; (80092a4 <UART_SetConfig+0x2e0>)
 8009064:	4293      	cmp	r3, r2
 8009066:	d125      	bne.n	80090b4 <UART_SetConfig+0xf0>
 8009068:	4b8f      	ldr	r3, [pc, #572]	; (80092a8 <UART_SetConfig+0x2e4>)
 800906a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800906e:	f003 0303 	and.w	r3, r3, #3
 8009072:	2b03      	cmp	r3, #3
 8009074:	d81a      	bhi.n	80090ac <UART_SetConfig+0xe8>
 8009076:	a201      	add	r2, pc, #4	; (adr r2, 800907c <UART_SetConfig+0xb8>)
 8009078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800907c:	0800908d 	.word	0x0800908d
 8009080:	0800909d 	.word	0x0800909d
 8009084:	08009095 	.word	0x08009095
 8009088:	080090a5 	.word	0x080090a5
 800908c:	2301      	movs	r3, #1
 800908e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009092:	e116      	b.n	80092c2 <UART_SetConfig+0x2fe>
 8009094:	2302      	movs	r3, #2
 8009096:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800909a:	e112      	b.n	80092c2 <UART_SetConfig+0x2fe>
 800909c:	2304      	movs	r3, #4
 800909e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80090a2:	e10e      	b.n	80092c2 <UART_SetConfig+0x2fe>
 80090a4:	2308      	movs	r3, #8
 80090a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80090aa:	e10a      	b.n	80092c2 <UART_SetConfig+0x2fe>
 80090ac:	2310      	movs	r3, #16
 80090ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80090b2:	e106      	b.n	80092c2 <UART_SetConfig+0x2fe>
 80090b4:	697b      	ldr	r3, [r7, #20]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	4a7c      	ldr	r2, [pc, #496]	; (80092ac <UART_SetConfig+0x2e8>)
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d138      	bne.n	8009130 <UART_SetConfig+0x16c>
 80090be:	4b7a      	ldr	r3, [pc, #488]	; (80092a8 <UART_SetConfig+0x2e4>)
 80090c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090c4:	f003 030c 	and.w	r3, r3, #12
 80090c8:	2b0c      	cmp	r3, #12
 80090ca:	d82d      	bhi.n	8009128 <UART_SetConfig+0x164>
 80090cc:	a201      	add	r2, pc, #4	; (adr r2, 80090d4 <UART_SetConfig+0x110>)
 80090ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090d2:	bf00      	nop
 80090d4:	08009109 	.word	0x08009109
 80090d8:	08009129 	.word	0x08009129
 80090dc:	08009129 	.word	0x08009129
 80090e0:	08009129 	.word	0x08009129
 80090e4:	08009119 	.word	0x08009119
 80090e8:	08009129 	.word	0x08009129
 80090ec:	08009129 	.word	0x08009129
 80090f0:	08009129 	.word	0x08009129
 80090f4:	08009111 	.word	0x08009111
 80090f8:	08009129 	.word	0x08009129
 80090fc:	08009129 	.word	0x08009129
 8009100:	08009129 	.word	0x08009129
 8009104:	08009121 	.word	0x08009121
 8009108:	2300      	movs	r3, #0
 800910a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800910e:	e0d8      	b.n	80092c2 <UART_SetConfig+0x2fe>
 8009110:	2302      	movs	r3, #2
 8009112:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009116:	e0d4      	b.n	80092c2 <UART_SetConfig+0x2fe>
 8009118:	2304      	movs	r3, #4
 800911a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800911e:	e0d0      	b.n	80092c2 <UART_SetConfig+0x2fe>
 8009120:	2308      	movs	r3, #8
 8009122:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009126:	e0cc      	b.n	80092c2 <UART_SetConfig+0x2fe>
 8009128:	2310      	movs	r3, #16
 800912a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800912e:	e0c8      	b.n	80092c2 <UART_SetConfig+0x2fe>
 8009130:	697b      	ldr	r3, [r7, #20]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	4a5e      	ldr	r2, [pc, #376]	; (80092b0 <UART_SetConfig+0x2ec>)
 8009136:	4293      	cmp	r3, r2
 8009138:	d125      	bne.n	8009186 <UART_SetConfig+0x1c2>
 800913a:	4b5b      	ldr	r3, [pc, #364]	; (80092a8 <UART_SetConfig+0x2e4>)
 800913c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009140:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009144:	2b30      	cmp	r3, #48	; 0x30
 8009146:	d016      	beq.n	8009176 <UART_SetConfig+0x1b2>
 8009148:	2b30      	cmp	r3, #48	; 0x30
 800914a:	d818      	bhi.n	800917e <UART_SetConfig+0x1ba>
 800914c:	2b20      	cmp	r3, #32
 800914e:	d00a      	beq.n	8009166 <UART_SetConfig+0x1a2>
 8009150:	2b20      	cmp	r3, #32
 8009152:	d814      	bhi.n	800917e <UART_SetConfig+0x1ba>
 8009154:	2b00      	cmp	r3, #0
 8009156:	d002      	beq.n	800915e <UART_SetConfig+0x19a>
 8009158:	2b10      	cmp	r3, #16
 800915a:	d008      	beq.n	800916e <UART_SetConfig+0x1aa>
 800915c:	e00f      	b.n	800917e <UART_SetConfig+0x1ba>
 800915e:	2300      	movs	r3, #0
 8009160:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009164:	e0ad      	b.n	80092c2 <UART_SetConfig+0x2fe>
 8009166:	2302      	movs	r3, #2
 8009168:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800916c:	e0a9      	b.n	80092c2 <UART_SetConfig+0x2fe>
 800916e:	2304      	movs	r3, #4
 8009170:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009174:	e0a5      	b.n	80092c2 <UART_SetConfig+0x2fe>
 8009176:	2308      	movs	r3, #8
 8009178:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800917c:	e0a1      	b.n	80092c2 <UART_SetConfig+0x2fe>
 800917e:	2310      	movs	r3, #16
 8009180:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009184:	e09d      	b.n	80092c2 <UART_SetConfig+0x2fe>
 8009186:	697b      	ldr	r3, [r7, #20]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	4a4a      	ldr	r2, [pc, #296]	; (80092b4 <UART_SetConfig+0x2f0>)
 800918c:	4293      	cmp	r3, r2
 800918e:	d125      	bne.n	80091dc <UART_SetConfig+0x218>
 8009190:	4b45      	ldr	r3, [pc, #276]	; (80092a8 <UART_SetConfig+0x2e4>)
 8009192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009196:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800919a:	2bc0      	cmp	r3, #192	; 0xc0
 800919c:	d016      	beq.n	80091cc <UART_SetConfig+0x208>
 800919e:	2bc0      	cmp	r3, #192	; 0xc0
 80091a0:	d818      	bhi.n	80091d4 <UART_SetConfig+0x210>
 80091a2:	2b80      	cmp	r3, #128	; 0x80
 80091a4:	d00a      	beq.n	80091bc <UART_SetConfig+0x1f8>
 80091a6:	2b80      	cmp	r3, #128	; 0x80
 80091a8:	d814      	bhi.n	80091d4 <UART_SetConfig+0x210>
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d002      	beq.n	80091b4 <UART_SetConfig+0x1f0>
 80091ae:	2b40      	cmp	r3, #64	; 0x40
 80091b0:	d008      	beq.n	80091c4 <UART_SetConfig+0x200>
 80091b2:	e00f      	b.n	80091d4 <UART_SetConfig+0x210>
 80091b4:	2300      	movs	r3, #0
 80091b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80091ba:	e082      	b.n	80092c2 <UART_SetConfig+0x2fe>
 80091bc:	2302      	movs	r3, #2
 80091be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80091c2:	e07e      	b.n	80092c2 <UART_SetConfig+0x2fe>
 80091c4:	2304      	movs	r3, #4
 80091c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80091ca:	e07a      	b.n	80092c2 <UART_SetConfig+0x2fe>
 80091cc:	2308      	movs	r3, #8
 80091ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80091d2:	e076      	b.n	80092c2 <UART_SetConfig+0x2fe>
 80091d4:	2310      	movs	r3, #16
 80091d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80091da:	e072      	b.n	80092c2 <UART_SetConfig+0x2fe>
 80091dc:	697b      	ldr	r3, [r7, #20]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	4a35      	ldr	r2, [pc, #212]	; (80092b8 <UART_SetConfig+0x2f4>)
 80091e2:	4293      	cmp	r3, r2
 80091e4:	d12a      	bne.n	800923c <UART_SetConfig+0x278>
 80091e6:	4b30      	ldr	r3, [pc, #192]	; (80092a8 <UART_SetConfig+0x2e4>)
 80091e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80091f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80091f4:	d01a      	beq.n	800922c <UART_SetConfig+0x268>
 80091f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80091fa:	d81b      	bhi.n	8009234 <UART_SetConfig+0x270>
 80091fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009200:	d00c      	beq.n	800921c <UART_SetConfig+0x258>
 8009202:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009206:	d815      	bhi.n	8009234 <UART_SetConfig+0x270>
 8009208:	2b00      	cmp	r3, #0
 800920a:	d003      	beq.n	8009214 <UART_SetConfig+0x250>
 800920c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009210:	d008      	beq.n	8009224 <UART_SetConfig+0x260>
 8009212:	e00f      	b.n	8009234 <UART_SetConfig+0x270>
 8009214:	2300      	movs	r3, #0
 8009216:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800921a:	e052      	b.n	80092c2 <UART_SetConfig+0x2fe>
 800921c:	2302      	movs	r3, #2
 800921e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009222:	e04e      	b.n	80092c2 <UART_SetConfig+0x2fe>
 8009224:	2304      	movs	r3, #4
 8009226:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800922a:	e04a      	b.n	80092c2 <UART_SetConfig+0x2fe>
 800922c:	2308      	movs	r3, #8
 800922e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009232:	e046      	b.n	80092c2 <UART_SetConfig+0x2fe>
 8009234:	2310      	movs	r3, #16
 8009236:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800923a:	e042      	b.n	80092c2 <UART_SetConfig+0x2fe>
 800923c:	697b      	ldr	r3, [r7, #20]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	4a17      	ldr	r2, [pc, #92]	; (80092a0 <UART_SetConfig+0x2dc>)
 8009242:	4293      	cmp	r3, r2
 8009244:	d13a      	bne.n	80092bc <UART_SetConfig+0x2f8>
 8009246:	4b18      	ldr	r3, [pc, #96]	; (80092a8 <UART_SetConfig+0x2e4>)
 8009248:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800924c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009250:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009254:	d01a      	beq.n	800928c <UART_SetConfig+0x2c8>
 8009256:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800925a:	d81b      	bhi.n	8009294 <UART_SetConfig+0x2d0>
 800925c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009260:	d00c      	beq.n	800927c <UART_SetConfig+0x2b8>
 8009262:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009266:	d815      	bhi.n	8009294 <UART_SetConfig+0x2d0>
 8009268:	2b00      	cmp	r3, #0
 800926a:	d003      	beq.n	8009274 <UART_SetConfig+0x2b0>
 800926c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009270:	d008      	beq.n	8009284 <UART_SetConfig+0x2c0>
 8009272:	e00f      	b.n	8009294 <UART_SetConfig+0x2d0>
 8009274:	2300      	movs	r3, #0
 8009276:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800927a:	e022      	b.n	80092c2 <UART_SetConfig+0x2fe>
 800927c:	2302      	movs	r3, #2
 800927e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009282:	e01e      	b.n	80092c2 <UART_SetConfig+0x2fe>
 8009284:	2304      	movs	r3, #4
 8009286:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800928a:	e01a      	b.n	80092c2 <UART_SetConfig+0x2fe>
 800928c:	2308      	movs	r3, #8
 800928e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009292:	e016      	b.n	80092c2 <UART_SetConfig+0x2fe>
 8009294:	2310      	movs	r3, #16
 8009296:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800929a:	e012      	b.n	80092c2 <UART_SetConfig+0x2fe>
 800929c:	cfff69f3 	.word	0xcfff69f3
 80092a0:	40008000 	.word	0x40008000
 80092a4:	40013800 	.word	0x40013800
 80092a8:	40021000 	.word	0x40021000
 80092ac:	40004400 	.word	0x40004400
 80092b0:	40004800 	.word	0x40004800
 80092b4:	40004c00 	.word	0x40004c00
 80092b8:	40005000 	.word	0x40005000
 80092bc:	2310      	movs	r3, #16
 80092be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80092c2:	697b      	ldr	r3, [r7, #20]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	4aae      	ldr	r2, [pc, #696]	; (8009580 <UART_SetConfig+0x5bc>)
 80092c8:	4293      	cmp	r3, r2
 80092ca:	f040 8097 	bne.w	80093fc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80092ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80092d2:	2b08      	cmp	r3, #8
 80092d4:	d823      	bhi.n	800931e <UART_SetConfig+0x35a>
 80092d6:	a201      	add	r2, pc, #4	; (adr r2, 80092dc <UART_SetConfig+0x318>)
 80092d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092dc:	08009301 	.word	0x08009301
 80092e0:	0800931f 	.word	0x0800931f
 80092e4:	08009309 	.word	0x08009309
 80092e8:	0800931f 	.word	0x0800931f
 80092ec:	0800930f 	.word	0x0800930f
 80092f0:	0800931f 	.word	0x0800931f
 80092f4:	0800931f 	.word	0x0800931f
 80092f8:	0800931f 	.word	0x0800931f
 80092fc:	08009317 	.word	0x08009317
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009300:	f7fc ff3c 	bl	800617c <HAL_RCC_GetPCLK1Freq>
 8009304:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009306:	e010      	b.n	800932a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009308:	4b9e      	ldr	r3, [pc, #632]	; (8009584 <UART_SetConfig+0x5c0>)
 800930a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800930c:	e00d      	b.n	800932a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800930e:	f7fc fec7 	bl	80060a0 <HAL_RCC_GetSysClockFreq>
 8009312:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009314:	e009      	b.n	800932a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009316:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800931a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800931c:	e005      	b.n	800932a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800931e:	2300      	movs	r3, #0
 8009320:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009322:	2301      	movs	r3, #1
 8009324:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009328:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800932a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800932c:	2b00      	cmp	r3, #0
 800932e:	f000 8130 	beq.w	8009592 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009332:	697b      	ldr	r3, [r7, #20]
 8009334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009336:	4a94      	ldr	r2, [pc, #592]	; (8009588 <UART_SetConfig+0x5c4>)
 8009338:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800933c:	461a      	mov	r2, r3
 800933e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009340:	fbb3 f3f2 	udiv	r3, r3, r2
 8009344:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	685a      	ldr	r2, [r3, #4]
 800934a:	4613      	mov	r3, r2
 800934c:	005b      	lsls	r3, r3, #1
 800934e:	4413      	add	r3, r2
 8009350:	69ba      	ldr	r2, [r7, #24]
 8009352:	429a      	cmp	r2, r3
 8009354:	d305      	bcc.n	8009362 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009356:	697b      	ldr	r3, [r7, #20]
 8009358:	685b      	ldr	r3, [r3, #4]
 800935a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800935c:	69ba      	ldr	r2, [r7, #24]
 800935e:	429a      	cmp	r2, r3
 8009360:	d903      	bls.n	800936a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8009362:	2301      	movs	r3, #1
 8009364:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009368:	e113      	b.n	8009592 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800936a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800936c:	2200      	movs	r2, #0
 800936e:	60bb      	str	r3, [r7, #8]
 8009370:	60fa      	str	r2, [r7, #12]
 8009372:	697b      	ldr	r3, [r7, #20]
 8009374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009376:	4a84      	ldr	r2, [pc, #528]	; (8009588 <UART_SetConfig+0x5c4>)
 8009378:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800937c:	b29b      	uxth	r3, r3
 800937e:	2200      	movs	r2, #0
 8009380:	603b      	str	r3, [r7, #0]
 8009382:	607a      	str	r2, [r7, #4]
 8009384:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009388:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800938c:	f7f7 fcb4 	bl	8000cf8 <__aeabi_uldivmod>
 8009390:	4602      	mov	r2, r0
 8009392:	460b      	mov	r3, r1
 8009394:	4610      	mov	r0, r2
 8009396:	4619      	mov	r1, r3
 8009398:	f04f 0200 	mov.w	r2, #0
 800939c:	f04f 0300 	mov.w	r3, #0
 80093a0:	020b      	lsls	r3, r1, #8
 80093a2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80093a6:	0202      	lsls	r2, r0, #8
 80093a8:	6979      	ldr	r1, [r7, #20]
 80093aa:	6849      	ldr	r1, [r1, #4]
 80093ac:	0849      	lsrs	r1, r1, #1
 80093ae:	2000      	movs	r0, #0
 80093b0:	460c      	mov	r4, r1
 80093b2:	4605      	mov	r5, r0
 80093b4:	eb12 0804 	adds.w	r8, r2, r4
 80093b8:	eb43 0905 	adc.w	r9, r3, r5
 80093bc:	697b      	ldr	r3, [r7, #20]
 80093be:	685b      	ldr	r3, [r3, #4]
 80093c0:	2200      	movs	r2, #0
 80093c2:	469a      	mov	sl, r3
 80093c4:	4693      	mov	fp, r2
 80093c6:	4652      	mov	r2, sl
 80093c8:	465b      	mov	r3, fp
 80093ca:	4640      	mov	r0, r8
 80093cc:	4649      	mov	r1, r9
 80093ce:	f7f7 fc93 	bl	8000cf8 <__aeabi_uldivmod>
 80093d2:	4602      	mov	r2, r0
 80093d4:	460b      	mov	r3, r1
 80093d6:	4613      	mov	r3, r2
 80093d8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80093da:	6a3b      	ldr	r3, [r7, #32]
 80093dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80093e0:	d308      	bcc.n	80093f4 <UART_SetConfig+0x430>
 80093e2:	6a3b      	ldr	r3, [r7, #32]
 80093e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80093e8:	d204      	bcs.n	80093f4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80093ea:	697b      	ldr	r3, [r7, #20]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	6a3a      	ldr	r2, [r7, #32]
 80093f0:	60da      	str	r2, [r3, #12]
 80093f2:	e0ce      	b.n	8009592 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80093f4:	2301      	movs	r3, #1
 80093f6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80093fa:	e0ca      	b.n	8009592 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80093fc:	697b      	ldr	r3, [r7, #20]
 80093fe:	69db      	ldr	r3, [r3, #28]
 8009400:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009404:	d166      	bne.n	80094d4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8009406:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800940a:	2b08      	cmp	r3, #8
 800940c:	d827      	bhi.n	800945e <UART_SetConfig+0x49a>
 800940e:	a201      	add	r2, pc, #4	; (adr r2, 8009414 <UART_SetConfig+0x450>)
 8009410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009414:	08009439 	.word	0x08009439
 8009418:	08009441 	.word	0x08009441
 800941c:	08009449 	.word	0x08009449
 8009420:	0800945f 	.word	0x0800945f
 8009424:	0800944f 	.word	0x0800944f
 8009428:	0800945f 	.word	0x0800945f
 800942c:	0800945f 	.word	0x0800945f
 8009430:	0800945f 	.word	0x0800945f
 8009434:	08009457 	.word	0x08009457
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009438:	f7fc fea0 	bl	800617c <HAL_RCC_GetPCLK1Freq>
 800943c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800943e:	e014      	b.n	800946a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009440:	f7fc feb2 	bl	80061a8 <HAL_RCC_GetPCLK2Freq>
 8009444:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009446:	e010      	b.n	800946a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009448:	4b4e      	ldr	r3, [pc, #312]	; (8009584 <UART_SetConfig+0x5c0>)
 800944a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800944c:	e00d      	b.n	800946a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800944e:	f7fc fe27 	bl	80060a0 <HAL_RCC_GetSysClockFreq>
 8009452:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009454:	e009      	b.n	800946a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009456:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800945a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800945c:	e005      	b.n	800946a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800945e:	2300      	movs	r3, #0
 8009460:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009462:	2301      	movs	r3, #1
 8009464:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009468:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800946a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800946c:	2b00      	cmp	r3, #0
 800946e:	f000 8090 	beq.w	8009592 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009472:	697b      	ldr	r3, [r7, #20]
 8009474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009476:	4a44      	ldr	r2, [pc, #272]	; (8009588 <UART_SetConfig+0x5c4>)
 8009478:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800947c:	461a      	mov	r2, r3
 800947e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009480:	fbb3 f3f2 	udiv	r3, r3, r2
 8009484:	005a      	lsls	r2, r3, #1
 8009486:	697b      	ldr	r3, [r7, #20]
 8009488:	685b      	ldr	r3, [r3, #4]
 800948a:	085b      	lsrs	r3, r3, #1
 800948c:	441a      	add	r2, r3
 800948e:	697b      	ldr	r3, [r7, #20]
 8009490:	685b      	ldr	r3, [r3, #4]
 8009492:	fbb2 f3f3 	udiv	r3, r2, r3
 8009496:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009498:	6a3b      	ldr	r3, [r7, #32]
 800949a:	2b0f      	cmp	r3, #15
 800949c:	d916      	bls.n	80094cc <UART_SetConfig+0x508>
 800949e:	6a3b      	ldr	r3, [r7, #32]
 80094a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80094a4:	d212      	bcs.n	80094cc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80094a6:	6a3b      	ldr	r3, [r7, #32]
 80094a8:	b29b      	uxth	r3, r3
 80094aa:	f023 030f 	bic.w	r3, r3, #15
 80094ae:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80094b0:	6a3b      	ldr	r3, [r7, #32]
 80094b2:	085b      	lsrs	r3, r3, #1
 80094b4:	b29b      	uxth	r3, r3
 80094b6:	f003 0307 	and.w	r3, r3, #7
 80094ba:	b29a      	uxth	r2, r3
 80094bc:	8bfb      	ldrh	r3, [r7, #30]
 80094be:	4313      	orrs	r3, r2
 80094c0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80094c2:	697b      	ldr	r3, [r7, #20]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	8bfa      	ldrh	r2, [r7, #30]
 80094c8:	60da      	str	r2, [r3, #12]
 80094ca:	e062      	b.n	8009592 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80094cc:	2301      	movs	r3, #1
 80094ce:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80094d2:	e05e      	b.n	8009592 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80094d4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80094d8:	2b08      	cmp	r3, #8
 80094da:	d828      	bhi.n	800952e <UART_SetConfig+0x56a>
 80094dc:	a201      	add	r2, pc, #4	; (adr r2, 80094e4 <UART_SetConfig+0x520>)
 80094de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094e2:	bf00      	nop
 80094e4:	08009509 	.word	0x08009509
 80094e8:	08009511 	.word	0x08009511
 80094ec:	08009519 	.word	0x08009519
 80094f0:	0800952f 	.word	0x0800952f
 80094f4:	0800951f 	.word	0x0800951f
 80094f8:	0800952f 	.word	0x0800952f
 80094fc:	0800952f 	.word	0x0800952f
 8009500:	0800952f 	.word	0x0800952f
 8009504:	08009527 	.word	0x08009527
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009508:	f7fc fe38 	bl	800617c <HAL_RCC_GetPCLK1Freq>
 800950c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800950e:	e014      	b.n	800953a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009510:	f7fc fe4a 	bl	80061a8 <HAL_RCC_GetPCLK2Freq>
 8009514:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009516:	e010      	b.n	800953a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009518:	4b1a      	ldr	r3, [pc, #104]	; (8009584 <UART_SetConfig+0x5c0>)
 800951a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800951c:	e00d      	b.n	800953a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800951e:	f7fc fdbf 	bl	80060a0 <HAL_RCC_GetSysClockFreq>
 8009522:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009524:	e009      	b.n	800953a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009526:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800952a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800952c:	e005      	b.n	800953a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800952e:	2300      	movs	r3, #0
 8009530:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009532:	2301      	movs	r3, #1
 8009534:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009538:	bf00      	nop
    }

    if (pclk != 0U)
 800953a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800953c:	2b00      	cmp	r3, #0
 800953e:	d028      	beq.n	8009592 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009540:	697b      	ldr	r3, [r7, #20]
 8009542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009544:	4a10      	ldr	r2, [pc, #64]	; (8009588 <UART_SetConfig+0x5c4>)
 8009546:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800954a:	461a      	mov	r2, r3
 800954c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800954e:	fbb3 f2f2 	udiv	r2, r3, r2
 8009552:	697b      	ldr	r3, [r7, #20]
 8009554:	685b      	ldr	r3, [r3, #4]
 8009556:	085b      	lsrs	r3, r3, #1
 8009558:	441a      	add	r2, r3
 800955a:	697b      	ldr	r3, [r7, #20]
 800955c:	685b      	ldr	r3, [r3, #4]
 800955e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009562:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009564:	6a3b      	ldr	r3, [r7, #32]
 8009566:	2b0f      	cmp	r3, #15
 8009568:	d910      	bls.n	800958c <UART_SetConfig+0x5c8>
 800956a:	6a3b      	ldr	r3, [r7, #32]
 800956c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009570:	d20c      	bcs.n	800958c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009572:	6a3b      	ldr	r3, [r7, #32]
 8009574:	b29a      	uxth	r2, r3
 8009576:	697b      	ldr	r3, [r7, #20]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	60da      	str	r2, [r3, #12]
 800957c:	e009      	b.n	8009592 <UART_SetConfig+0x5ce>
 800957e:	bf00      	nop
 8009580:	40008000 	.word	0x40008000
 8009584:	00f42400 	.word	0x00f42400
 8009588:	0800f670 	.word	0x0800f670
      }
      else
      {
        ret = HAL_ERROR;
 800958c:	2301      	movs	r3, #1
 800958e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	2201      	movs	r2, #1
 8009596:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800959a:	697b      	ldr	r3, [r7, #20]
 800959c:	2201      	movs	r2, #1
 800959e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80095a2:	697b      	ldr	r3, [r7, #20]
 80095a4:	2200      	movs	r2, #0
 80095a6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80095a8:	697b      	ldr	r3, [r7, #20]
 80095aa:	2200      	movs	r2, #0
 80095ac:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80095ae:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80095b2:	4618      	mov	r0, r3
 80095b4:	3730      	adds	r7, #48	; 0x30
 80095b6:	46bd      	mov	sp, r7
 80095b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080095bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80095bc:	b480      	push	{r7}
 80095be:	b083      	sub	sp, #12
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095c8:	f003 0301 	and.w	r3, r3, #1
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d00a      	beq.n	80095e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	685b      	ldr	r3, [r3, #4]
 80095d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	430a      	orrs	r2, r1
 80095e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095ea:	f003 0302 	and.w	r3, r3, #2
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d00a      	beq.n	8009608 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	685b      	ldr	r3, [r3, #4]
 80095f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	430a      	orrs	r2, r1
 8009606:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800960c:	f003 0304 	and.w	r3, r3, #4
 8009610:	2b00      	cmp	r3, #0
 8009612:	d00a      	beq.n	800962a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	685b      	ldr	r3, [r3, #4]
 800961a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	430a      	orrs	r2, r1
 8009628:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800962e:	f003 0308 	and.w	r3, r3, #8
 8009632:	2b00      	cmp	r3, #0
 8009634:	d00a      	beq.n	800964c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	685b      	ldr	r3, [r3, #4]
 800963c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	430a      	orrs	r2, r1
 800964a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009650:	f003 0310 	and.w	r3, r3, #16
 8009654:	2b00      	cmp	r3, #0
 8009656:	d00a      	beq.n	800966e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	689b      	ldr	r3, [r3, #8]
 800965e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	430a      	orrs	r2, r1
 800966c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009672:	f003 0320 	and.w	r3, r3, #32
 8009676:	2b00      	cmp	r3, #0
 8009678:	d00a      	beq.n	8009690 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	689b      	ldr	r3, [r3, #8]
 8009680:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	430a      	orrs	r2, r1
 800968e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009698:	2b00      	cmp	r3, #0
 800969a:	d01a      	beq.n	80096d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	685b      	ldr	r3, [r3, #4]
 80096a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	430a      	orrs	r2, r1
 80096b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80096ba:	d10a      	bne.n	80096d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	685b      	ldr	r3, [r3, #4]
 80096c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	430a      	orrs	r2, r1
 80096d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d00a      	beq.n	80096f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	685b      	ldr	r3, [r3, #4]
 80096e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	430a      	orrs	r2, r1
 80096f2:	605a      	str	r2, [r3, #4]
  }
}
 80096f4:	bf00      	nop
 80096f6:	370c      	adds	r7, #12
 80096f8:	46bd      	mov	sp, r7
 80096fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fe:	4770      	bx	lr

08009700 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b086      	sub	sp, #24
 8009704:	af02      	add	r7, sp, #8
 8009706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2200      	movs	r2, #0
 800970c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009710:	f7f9 faca 	bl	8002ca8 <HAL_GetTick>
 8009714:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	f003 0308 	and.w	r3, r3, #8
 8009720:	2b08      	cmp	r3, #8
 8009722:	d10e      	bne.n	8009742 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009724:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009728:	9300      	str	r3, [sp, #0]
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	2200      	movs	r2, #0
 800972e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009732:	6878      	ldr	r0, [r7, #4]
 8009734:	f000 f82f 	bl	8009796 <UART_WaitOnFlagUntilTimeout>
 8009738:	4603      	mov	r3, r0
 800973a:	2b00      	cmp	r3, #0
 800973c:	d001      	beq.n	8009742 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800973e:	2303      	movs	r3, #3
 8009740:	e025      	b.n	800978e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f003 0304 	and.w	r3, r3, #4
 800974c:	2b04      	cmp	r3, #4
 800974e:	d10e      	bne.n	800976e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009750:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009754:	9300      	str	r3, [sp, #0]
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	2200      	movs	r2, #0
 800975a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f000 f819 	bl	8009796 <UART_WaitOnFlagUntilTimeout>
 8009764:	4603      	mov	r3, r0
 8009766:	2b00      	cmp	r3, #0
 8009768:	d001      	beq.n	800976e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800976a:	2303      	movs	r3, #3
 800976c:	e00f      	b.n	800978e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2220      	movs	r2, #32
 8009772:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	2220      	movs	r2, #32
 800977a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	2200      	movs	r2, #0
 8009782:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2200      	movs	r2, #0
 8009788:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800978c:	2300      	movs	r3, #0
}
 800978e:	4618      	mov	r0, r3
 8009790:	3710      	adds	r7, #16
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}

08009796 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009796:	b580      	push	{r7, lr}
 8009798:	b09c      	sub	sp, #112	; 0x70
 800979a:	af00      	add	r7, sp, #0
 800979c:	60f8      	str	r0, [r7, #12]
 800979e:	60b9      	str	r1, [r7, #8]
 80097a0:	603b      	str	r3, [r7, #0]
 80097a2:	4613      	mov	r3, r2
 80097a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80097a6:	e0a9      	b.n	80098fc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80097a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80097aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097ae:	f000 80a5 	beq.w	80098fc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80097b2:	f7f9 fa79 	bl	8002ca8 <HAL_GetTick>
 80097b6:	4602      	mov	r2, r0
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	1ad3      	subs	r3, r2, r3
 80097bc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80097be:	429a      	cmp	r2, r3
 80097c0:	d302      	bcc.n	80097c8 <UART_WaitOnFlagUntilTimeout+0x32>
 80097c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d140      	bne.n	800984a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80097d0:	e853 3f00 	ldrex	r3, [r3]
 80097d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80097d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097d8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80097dc:	667b      	str	r3, [r7, #100]	; 0x64
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	461a      	mov	r2, r3
 80097e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80097e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80097e8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80097ec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80097ee:	e841 2300 	strex	r3, r2, [r1]
 80097f2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80097f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d1e6      	bne.n	80097c8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	3308      	adds	r3, #8
 8009800:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009802:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009804:	e853 3f00 	ldrex	r3, [r3]
 8009808:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800980a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800980c:	f023 0301 	bic.w	r3, r3, #1
 8009810:	663b      	str	r3, [r7, #96]	; 0x60
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	3308      	adds	r3, #8
 8009818:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800981a:	64ba      	str	r2, [r7, #72]	; 0x48
 800981c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800981e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009820:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009822:	e841 2300 	strex	r3, r2, [r1]
 8009826:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009828:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800982a:	2b00      	cmp	r3, #0
 800982c:	d1e5      	bne.n	80097fa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	2220      	movs	r2, #32
 8009832:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	2220      	movs	r2, #32
 800983a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	2200      	movs	r2, #0
 8009842:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8009846:	2303      	movs	r3, #3
 8009848:	e069      	b.n	800991e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f003 0304 	and.w	r3, r3, #4
 8009854:	2b00      	cmp	r3, #0
 8009856:	d051      	beq.n	80098fc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	69db      	ldr	r3, [r3, #28]
 800985e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009862:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009866:	d149      	bne.n	80098fc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009870:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800987a:	e853 3f00 	ldrex	r3, [r3]
 800987e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009882:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009886:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	461a      	mov	r2, r3
 800988e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009890:	637b      	str	r3, [r7, #52]	; 0x34
 8009892:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009894:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009896:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009898:	e841 2300 	strex	r3, r2, [r1]
 800989c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800989e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d1e6      	bne.n	8009872 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	3308      	adds	r3, #8
 80098aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098ac:	697b      	ldr	r3, [r7, #20]
 80098ae:	e853 3f00 	ldrex	r3, [r3]
 80098b2:	613b      	str	r3, [r7, #16]
   return(result);
 80098b4:	693b      	ldr	r3, [r7, #16]
 80098b6:	f023 0301 	bic.w	r3, r3, #1
 80098ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	3308      	adds	r3, #8
 80098c2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80098c4:	623a      	str	r2, [r7, #32]
 80098c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098c8:	69f9      	ldr	r1, [r7, #28]
 80098ca:	6a3a      	ldr	r2, [r7, #32]
 80098cc:	e841 2300 	strex	r3, r2, [r1]
 80098d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80098d2:	69bb      	ldr	r3, [r7, #24]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d1e5      	bne.n	80098a4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	2220      	movs	r2, #32
 80098dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	2220      	movs	r2, #32
 80098e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	2220      	movs	r2, #32
 80098ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	2200      	movs	r2, #0
 80098f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80098f8:	2303      	movs	r3, #3
 80098fa:	e010      	b.n	800991e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	69da      	ldr	r2, [r3, #28]
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	4013      	ands	r3, r2
 8009906:	68ba      	ldr	r2, [r7, #8]
 8009908:	429a      	cmp	r2, r3
 800990a:	bf0c      	ite	eq
 800990c:	2301      	moveq	r3, #1
 800990e:	2300      	movne	r3, #0
 8009910:	b2db      	uxtb	r3, r3
 8009912:	461a      	mov	r2, r3
 8009914:	79fb      	ldrb	r3, [r7, #7]
 8009916:	429a      	cmp	r2, r3
 8009918:	f43f af46 	beq.w	80097a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800991c:	2300      	movs	r3, #0
}
 800991e:	4618      	mov	r0, r3
 8009920:	3770      	adds	r7, #112	; 0x70
 8009922:	46bd      	mov	sp, r7
 8009924:	bd80      	pop	{r7, pc}
	...

08009928 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009928:	b480      	push	{r7}
 800992a:	b0a3      	sub	sp, #140	; 0x8c
 800992c:	af00      	add	r7, sp, #0
 800992e:	60f8      	str	r0, [r7, #12]
 8009930:	60b9      	str	r1, [r7, #8]
 8009932:	4613      	mov	r3, r2
 8009934:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	68ba      	ldr	r2, [r7, #8]
 800993a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	88fa      	ldrh	r2, [r7, #6]
 8009940:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	88fa      	ldrh	r2, [r7, #6]
 8009948:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	2200      	movs	r2, #0
 8009950:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	689b      	ldr	r3, [r3, #8]
 8009956:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800995a:	d10e      	bne.n	800997a <UART_Start_Receive_IT+0x52>
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	691b      	ldr	r3, [r3, #16]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d105      	bne.n	8009970 <UART_Start_Receive_IT+0x48>
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	f240 12ff 	movw	r2, #511	; 0x1ff
 800996a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800996e:	e02d      	b.n	80099cc <UART_Start_Receive_IT+0xa4>
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	22ff      	movs	r2, #255	; 0xff
 8009974:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009978:	e028      	b.n	80099cc <UART_Start_Receive_IT+0xa4>
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	689b      	ldr	r3, [r3, #8]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d10d      	bne.n	800999e <UART_Start_Receive_IT+0x76>
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	691b      	ldr	r3, [r3, #16]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d104      	bne.n	8009994 <UART_Start_Receive_IT+0x6c>
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	22ff      	movs	r2, #255	; 0xff
 800998e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009992:	e01b      	b.n	80099cc <UART_Start_Receive_IT+0xa4>
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	227f      	movs	r2, #127	; 0x7f
 8009998:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800999c:	e016      	b.n	80099cc <UART_Start_Receive_IT+0xa4>
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	689b      	ldr	r3, [r3, #8]
 80099a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80099a6:	d10d      	bne.n	80099c4 <UART_Start_Receive_IT+0x9c>
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	691b      	ldr	r3, [r3, #16]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d104      	bne.n	80099ba <UART_Start_Receive_IT+0x92>
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	227f      	movs	r2, #127	; 0x7f
 80099b4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80099b8:	e008      	b.n	80099cc <UART_Start_Receive_IT+0xa4>
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	223f      	movs	r2, #63	; 0x3f
 80099be:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80099c2:	e003      	b.n	80099cc <UART_Start_Receive_IT+0xa4>
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	2200      	movs	r2, #0
 80099c8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	2200      	movs	r2, #0
 80099d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	2222      	movs	r2, #34	; 0x22
 80099d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	3308      	adds	r3, #8
 80099e2:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80099e6:	e853 3f00 	ldrex	r3, [r3]
 80099ea:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80099ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80099ee:	f043 0301 	orr.w	r3, r3, #1
 80099f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	3308      	adds	r3, #8
 80099fc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8009a00:	673a      	str	r2, [r7, #112]	; 0x70
 8009a02:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a04:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8009a06:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009a08:	e841 2300 	strex	r3, r2, [r1]
 8009a0c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8009a0e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d1e3      	bne.n	80099dc <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009a18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009a1c:	d153      	bne.n	8009ac6 <UART_Start_Receive_IT+0x19e>
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009a24:	88fa      	ldrh	r2, [r7, #6]
 8009a26:	429a      	cmp	r2, r3
 8009a28:	d34d      	bcc.n	8009ac6 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	689b      	ldr	r3, [r3, #8]
 8009a2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a32:	d107      	bne.n	8009a44 <UART_Start_Receive_IT+0x11c>
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	691b      	ldr	r3, [r3, #16]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d103      	bne.n	8009a44 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	4a4b      	ldr	r2, [pc, #300]	; (8009b6c <UART_Start_Receive_IT+0x244>)
 8009a40:	671a      	str	r2, [r3, #112]	; 0x70
 8009a42:	e002      	b.n	8009a4a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	4a4a      	ldr	r2, [pc, #296]	; (8009b70 <UART_Start_Receive_IT+0x248>)
 8009a48:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	691b      	ldr	r3, [r3, #16]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d01a      	beq.n	8009a90 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a62:	e853 3f00 	ldrex	r3, [r3]
 8009a66:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009a68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009a6e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	461a      	mov	r2, r3
 8009a78:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009a7c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009a7e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a80:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009a82:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009a84:	e841 2300 	strex	r3, r2, [r1]
 8009a88:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009a8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d1e4      	bne.n	8009a5a <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	3308      	adds	r3, #8
 8009a96:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a9a:	e853 3f00 	ldrex	r3, [r3]
 8009a9e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009aa6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	3308      	adds	r3, #8
 8009aae:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009ab0:	64ba      	str	r2, [r7, #72]	; 0x48
 8009ab2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ab4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009ab6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009ab8:	e841 2300 	strex	r3, r2, [r1]
 8009abc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009abe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d1e5      	bne.n	8009a90 <UART_Start_Receive_IT+0x168>
 8009ac4:	e04a      	b.n	8009b5c <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	689b      	ldr	r3, [r3, #8]
 8009aca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ace:	d107      	bne.n	8009ae0 <UART_Start_Receive_IT+0x1b8>
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	691b      	ldr	r3, [r3, #16]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d103      	bne.n	8009ae0 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	4a26      	ldr	r2, [pc, #152]	; (8009b74 <UART_Start_Receive_IT+0x24c>)
 8009adc:	671a      	str	r2, [r3, #112]	; 0x70
 8009ade:	e002      	b.n	8009ae6 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	4a25      	ldr	r2, [pc, #148]	; (8009b78 <UART_Start_Receive_IT+0x250>)
 8009ae4:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	2200      	movs	r2, #0
 8009aea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	691b      	ldr	r3, [r3, #16]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d019      	beq.n	8009b2a <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009afe:	e853 3f00 	ldrex	r3, [r3]
 8009b02:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b06:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8009b0a:	677b      	str	r3, [r7, #116]	; 0x74
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	461a      	mov	r2, r3
 8009b12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009b14:	637b      	str	r3, [r7, #52]	; 0x34
 8009b16:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b18:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009b1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009b1c:	e841 2300 	strex	r3, r2, [r1]
 8009b20:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d1e6      	bne.n	8009af6 <UART_Start_Receive_IT+0x1ce>
 8009b28:	e018      	b.n	8009b5c <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b30:	697b      	ldr	r3, [r7, #20]
 8009b32:	e853 3f00 	ldrex	r3, [r3]
 8009b36:	613b      	str	r3, [r7, #16]
   return(result);
 8009b38:	693b      	ldr	r3, [r7, #16]
 8009b3a:	f043 0320 	orr.w	r3, r3, #32
 8009b3e:	67bb      	str	r3, [r7, #120]	; 0x78
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	461a      	mov	r2, r3
 8009b46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009b48:	623b      	str	r3, [r7, #32]
 8009b4a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b4c:	69f9      	ldr	r1, [r7, #28]
 8009b4e:	6a3a      	ldr	r2, [r7, #32]
 8009b50:	e841 2300 	strex	r3, r2, [r1]
 8009b54:	61bb      	str	r3, [r7, #24]
   return(result);
 8009b56:	69bb      	ldr	r3, [r7, #24]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d1e6      	bne.n	8009b2a <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8009b5c:	2300      	movs	r3, #0
}
 8009b5e:	4618      	mov	r0, r3
 8009b60:	378c      	adds	r7, #140	; 0x8c
 8009b62:	46bd      	mov	sp, r7
 8009b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b68:	4770      	bx	lr
 8009b6a:	bf00      	nop
 8009b6c:	0800a285 	.word	0x0800a285
 8009b70:	08009f8d 	.word	0x08009f8d
 8009b74:	08009e2b 	.word	0x08009e2b
 8009b78:	08009ccb 	.word	0x08009ccb

08009b7c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009b7c:	b480      	push	{r7}
 8009b7e:	b095      	sub	sp, #84	; 0x54
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b8c:	e853 3f00 	ldrex	r3, [r3]
 8009b90:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b94:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009b98:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	461a      	mov	r2, r3
 8009ba0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ba2:	643b      	str	r3, [r7, #64]	; 0x40
 8009ba4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ba6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009ba8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009baa:	e841 2300 	strex	r3, r2, [r1]
 8009bae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d1e6      	bne.n	8009b84 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	3308      	adds	r3, #8
 8009bbc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bbe:	6a3b      	ldr	r3, [r7, #32]
 8009bc0:	e853 3f00 	ldrex	r3, [r3]
 8009bc4:	61fb      	str	r3, [r7, #28]
   return(result);
 8009bc6:	69fb      	ldr	r3, [r7, #28]
 8009bc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009bcc:	f023 0301 	bic.w	r3, r3, #1
 8009bd0:	64bb      	str	r3, [r7, #72]	; 0x48
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	3308      	adds	r3, #8
 8009bd8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009bda:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009bdc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bde:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009be0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009be2:	e841 2300 	strex	r3, r2, [r1]
 8009be6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d1e3      	bne.n	8009bb6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009bf2:	2b01      	cmp	r3, #1
 8009bf4:	d118      	bne.n	8009c28 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	e853 3f00 	ldrex	r3, [r3]
 8009c02:	60bb      	str	r3, [r7, #8]
   return(result);
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	f023 0310 	bic.w	r3, r3, #16
 8009c0a:	647b      	str	r3, [r7, #68]	; 0x44
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	461a      	mov	r2, r3
 8009c12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c14:	61bb      	str	r3, [r7, #24]
 8009c16:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c18:	6979      	ldr	r1, [r7, #20]
 8009c1a:	69ba      	ldr	r2, [r7, #24]
 8009c1c:	e841 2300 	strex	r3, r2, [r1]
 8009c20:	613b      	str	r3, [r7, #16]
   return(result);
 8009c22:	693b      	ldr	r3, [r7, #16]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d1e6      	bne.n	8009bf6 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2220      	movs	r2, #32
 8009c2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2200      	movs	r2, #0
 8009c34:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2200      	movs	r2, #0
 8009c3a:	671a      	str	r2, [r3, #112]	; 0x70
}
 8009c3c:	bf00      	nop
 8009c3e:	3754      	adds	r7, #84	; 0x54
 8009c40:	46bd      	mov	sp, r7
 8009c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c46:	4770      	bx	lr

08009c48 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b084      	sub	sp, #16
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c54:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	2200      	movs	r2, #0
 8009c5a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	2200      	movs	r2, #0
 8009c62:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009c66:	68f8      	ldr	r0, [r7, #12]
 8009c68:	f7ff f996 	bl	8008f98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009c6c:	bf00      	nop
 8009c6e:	3710      	adds	r7, #16
 8009c70:	46bd      	mov	sp, r7
 8009c72:	bd80      	pop	{r7, pc}

08009c74 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b088      	sub	sp, #32
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	e853 3f00 	ldrex	r3, [r3]
 8009c88:	60bb      	str	r3, [r7, #8]
   return(result);
 8009c8a:	68bb      	ldr	r3, [r7, #8]
 8009c8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c90:	61fb      	str	r3, [r7, #28]
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	461a      	mov	r2, r3
 8009c98:	69fb      	ldr	r3, [r7, #28]
 8009c9a:	61bb      	str	r3, [r7, #24]
 8009c9c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c9e:	6979      	ldr	r1, [r7, #20]
 8009ca0:	69ba      	ldr	r2, [r7, #24]
 8009ca2:	e841 2300 	strex	r3, r2, [r1]
 8009ca6:	613b      	str	r3, [r7, #16]
   return(result);
 8009ca8:	693b      	ldr	r3, [r7, #16]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d1e6      	bne.n	8009c7c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2220      	movs	r2, #32
 8009cb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2200      	movs	r2, #0
 8009cba:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f7ff f961 	bl	8008f84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009cc2:	bf00      	nop
 8009cc4:	3720      	adds	r7, #32
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	bd80      	pop	{r7, pc}

08009cca <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009cca:	b580      	push	{r7, lr}
 8009ccc:	b096      	sub	sp, #88	; 0x58
 8009cce:	af00      	add	r7, sp, #0
 8009cd0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009cd8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ce2:	2b22      	cmp	r3, #34	; 0x22
 8009ce4:	f040 8095 	bne.w	8009e12 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cee:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009cf2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8009cf6:	b2d9      	uxtb	r1, r3
 8009cf8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009cfc:	b2da      	uxtb	r2, r3
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d02:	400a      	ands	r2, r1
 8009d04:	b2d2      	uxtb	r2, r2
 8009d06:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d0c:	1c5a      	adds	r2, r3, #1
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009d18:	b29b      	uxth	r3, r3
 8009d1a:	3b01      	subs	r3, #1
 8009d1c:	b29a      	uxth	r2, r3
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009d2a:	b29b      	uxth	r3, r3
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d178      	bne.n	8009e22 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d38:	e853 3f00 	ldrex	r3, [r3]
 8009d3c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d40:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009d44:	653b      	str	r3, [r7, #80]	; 0x50
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	461a      	mov	r2, r3
 8009d4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d4e:	647b      	str	r3, [r7, #68]	; 0x44
 8009d50:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d52:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009d54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009d56:	e841 2300 	strex	r3, r2, [r1]
 8009d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009d5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d1e6      	bne.n	8009d30 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	3308      	adds	r3, #8
 8009d68:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d6c:	e853 3f00 	ldrex	r3, [r3]
 8009d70:	623b      	str	r3, [r7, #32]
   return(result);
 8009d72:	6a3b      	ldr	r3, [r7, #32]
 8009d74:	f023 0301 	bic.w	r3, r3, #1
 8009d78:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	3308      	adds	r3, #8
 8009d80:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009d82:	633a      	str	r2, [r7, #48]	; 0x30
 8009d84:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009d88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d8a:	e841 2300 	strex	r3, r2, [r1]
 8009d8e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d1e5      	bne.n	8009d62 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2220      	movs	r2, #32
 8009d9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	2200      	movs	r2, #0
 8009da2:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009da8:	2b01      	cmp	r3, #1
 8009daa:	d12e      	bne.n	8009e0a <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2200      	movs	r2, #0
 8009db0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009db8:	693b      	ldr	r3, [r7, #16]
 8009dba:	e853 3f00 	ldrex	r3, [r3]
 8009dbe:	60fb      	str	r3, [r7, #12]
   return(result);
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	f023 0310 	bic.w	r3, r3, #16
 8009dc6:	64bb      	str	r3, [r7, #72]	; 0x48
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	461a      	mov	r2, r3
 8009dce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009dd0:	61fb      	str	r3, [r7, #28]
 8009dd2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dd4:	69b9      	ldr	r1, [r7, #24]
 8009dd6:	69fa      	ldr	r2, [r7, #28]
 8009dd8:	e841 2300 	strex	r3, r2, [r1]
 8009ddc:	617b      	str	r3, [r7, #20]
   return(result);
 8009dde:	697b      	ldr	r3, [r7, #20]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d1e6      	bne.n	8009db2 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	69db      	ldr	r3, [r3, #28]
 8009dea:	f003 0310 	and.w	r3, r3, #16
 8009dee:	2b10      	cmp	r3, #16
 8009df0:	d103      	bne.n	8009dfa <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	2210      	movs	r2, #16
 8009df8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009e00:	4619      	mov	r1, r3
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	f7ff f8d2 	bl	8008fac <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009e08:	e00b      	b.n	8009e22 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8009e0a:	6878      	ldr	r0, [r7, #4]
 8009e0c:	f7f8 fe36 	bl	8002a7c <HAL_UART_RxCpltCallback>
}
 8009e10:	e007      	b.n	8009e22 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	699a      	ldr	r2, [r3, #24]
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	f042 0208 	orr.w	r2, r2, #8
 8009e20:	619a      	str	r2, [r3, #24]
}
 8009e22:	bf00      	nop
 8009e24:	3758      	adds	r7, #88	; 0x58
 8009e26:	46bd      	mov	sp, r7
 8009e28:	bd80      	pop	{r7, pc}

08009e2a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009e2a:	b580      	push	{r7, lr}
 8009e2c:	b096      	sub	sp, #88	; 0x58
 8009e2e:	af00      	add	r7, sp, #0
 8009e30:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009e38:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e42:	2b22      	cmp	r3, #34	; 0x22
 8009e44:	f040 8095 	bne.w	8009f72 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e4e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e56:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8009e58:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8009e5c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009e60:	4013      	ands	r3, r2
 8009e62:	b29a      	uxth	r2, r3
 8009e64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e66:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e6c:	1c9a      	adds	r2, r3, #2
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009e78:	b29b      	uxth	r3, r3
 8009e7a:	3b01      	subs	r3, #1
 8009e7c:	b29a      	uxth	r2, r3
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009e8a:	b29b      	uxth	r3, r3
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d178      	bne.n	8009f82 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e98:	e853 3f00 	ldrex	r3, [r3]
 8009e9c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ea0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009ea4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	461a      	mov	r2, r3
 8009eac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009eae:	643b      	str	r3, [r7, #64]	; 0x40
 8009eb0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eb2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009eb4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009eb6:	e841 2300 	strex	r3, r2, [r1]
 8009eba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d1e6      	bne.n	8009e90 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	3308      	adds	r3, #8
 8009ec8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eca:	6a3b      	ldr	r3, [r7, #32]
 8009ecc:	e853 3f00 	ldrex	r3, [r3]
 8009ed0:	61fb      	str	r3, [r7, #28]
   return(result);
 8009ed2:	69fb      	ldr	r3, [r7, #28]
 8009ed4:	f023 0301 	bic.w	r3, r3, #1
 8009ed8:	64bb      	str	r3, [r7, #72]	; 0x48
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	3308      	adds	r3, #8
 8009ee0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009ee2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009ee4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ee6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009ee8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009eea:	e841 2300 	strex	r3, r2, [r1]
 8009eee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d1e5      	bne.n	8009ec2 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	2220      	movs	r2, #32
 8009efa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	2200      	movs	r2, #0
 8009f02:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f08:	2b01      	cmp	r3, #1
 8009f0a:	d12e      	bne.n	8009f6a <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2200      	movs	r2, #0
 8009f10:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	e853 3f00 	ldrex	r3, [r3]
 8009f1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	f023 0310 	bic.w	r3, r3, #16
 8009f26:	647b      	str	r3, [r7, #68]	; 0x44
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	461a      	mov	r2, r3
 8009f2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f30:	61bb      	str	r3, [r7, #24]
 8009f32:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f34:	6979      	ldr	r1, [r7, #20]
 8009f36:	69ba      	ldr	r2, [r7, #24]
 8009f38:	e841 2300 	strex	r3, r2, [r1]
 8009f3c:	613b      	str	r3, [r7, #16]
   return(result);
 8009f3e:	693b      	ldr	r3, [r7, #16]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d1e6      	bne.n	8009f12 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	69db      	ldr	r3, [r3, #28]
 8009f4a:	f003 0310 	and.w	r3, r3, #16
 8009f4e:	2b10      	cmp	r3, #16
 8009f50:	d103      	bne.n	8009f5a <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	2210      	movs	r2, #16
 8009f58:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009f60:	4619      	mov	r1, r3
 8009f62:	6878      	ldr	r0, [r7, #4]
 8009f64:	f7ff f822 	bl	8008fac <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009f68:	e00b      	b.n	8009f82 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8009f6a:	6878      	ldr	r0, [r7, #4]
 8009f6c:	f7f8 fd86 	bl	8002a7c <HAL_UART_RxCpltCallback>
}
 8009f70:	e007      	b.n	8009f82 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	699a      	ldr	r2, [r3, #24]
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	f042 0208 	orr.w	r2, r2, #8
 8009f80:	619a      	str	r2, [r3, #24]
}
 8009f82:	bf00      	nop
 8009f84:	3758      	adds	r7, #88	; 0x58
 8009f86:	46bd      	mov	sp, r7
 8009f88:	bd80      	pop	{r7, pc}
	...

08009f8c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b0a6      	sub	sp, #152	; 0x98
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009f9a:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	69db      	ldr	r3, [r3, #28]
 8009fa4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	689b      	ldr	r3, [r3, #8]
 8009fb8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fc2:	2b22      	cmp	r3, #34	; 0x22
 8009fc4:	f040 814f 	bne.w	800a266 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009fce:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009fd2:	e0f6      	b.n	800a1c2 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fda:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009fde:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8009fe2:	b2d9      	uxtb	r1, r3
 8009fe4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8009fe8:	b2da      	uxtb	r2, r3
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fee:	400a      	ands	r2, r1
 8009ff0:	b2d2      	uxtb	r2, r2
 8009ff2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ff8:	1c5a      	adds	r2, r3, #1
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a004:	b29b      	uxth	r3, r3
 800a006:	3b01      	subs	r3, #1
 800a008:	b29a      	uxth	r2, r3
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	69db      	ldr	r3, [r3, #28]
 800a016:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a01a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a01e:	f003 0307 	and.w	r3, r3, #7
 800a022:	2b00      	cmp	r3, #0
 800a024:	d053      	beq.n	800a0ce <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a026:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a02a:	f003 0301 	and.w	r3, r3, #1
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d011      	beq.n	800a056 <UART_RxISR_8BIT_FIFOEN+0xca>
 800a032:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d00b      	beq.n	800a056 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	2201      	movs	r2, #1
 800a044:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a04c:	f043 0201 	orr.w	r2, r3, #1
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a056:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a05a:	f003 0302 	and.w	r3, r3, #2
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d011      	beq.n	800a086 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800a062:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a066:	f003 0301 	and.w	r3, r3, #1
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d00b      	beq.n	800a086 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	2202      	movs	r2, #2
 800a074:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a07c:	f043 0204 	orr.w	r2, r3, #4
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a086:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a08a:	f003 0304 	and.w	r3, r3, #4
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d011      	beq.n	800a0b6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800a092:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a096:	f003 0301 	and.w	r3, r3, #1
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d00b      	beq.n	800a0b6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	2204      	movs	r2, #4
 800a0a4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a0ac:	f043 0202 	orr.w	r2, r3, #2
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d006      	beq.n	800a0ce <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a0c0:	6878      	ldr	r0, [r7, #4]
 800a0c2:	f7fe ff69 	bl	8008f98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a0d4:	b29b      	uxth	r3, r3
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d173      	bne.n	800a1c2 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a0e2:	e853 3f00 	ldrex	r3, [r3]
 800a0e6:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800a0e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a0ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a0ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	461a      	mov	r2, r3
 800a0f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a0fc:	66bb      	str	r3, [r7, #104]	; 0x68
 800a0fe:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a100:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800a102:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a104:	e841 2300 	strex	r3, r2, [r1]
 800a108:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800a10a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d1e4      	bne.n	800a0da <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	3308      	adds	r3, #8
 800a116:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a118:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a11a:	e853 3f00 	ldrex	r3, [r3]
 800a11e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800a120:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a122:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a126:	f023 0301 	bic.w	r3, r3, #1
 800a12a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	3308      	adds	r3, #8
 800a132:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800a134:	657a      	str	r2, [r7, #84]	; 0x54
 800a136:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a138:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a13a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a13c:	e841 2300 	strex	r3, r2, [r1]
 800a140:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a142:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a144:	2b00      	cmp	r3, #0
 800a146:	d1e3      	bne.n	800a110 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2220      	movs	r2, #32
 800a14c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2200      	movs	r2, #0
 800a154:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a15a:	2b01      	cmp	r3, #1
 800a15c:	d12e      	bne.n	800a1bc <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	2200      	movs	r2, #0
 800a162:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a16a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a16c:	e853 3f00 	ldrex	r3, [r3]
 800a170:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a174:	f023 0310 	bic.w	r3, r3, #16
 800a178:	67bb      	str	r3, [r7, #120]	; 0x78
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	461a      	mov	r2, r3
 800a180:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a182:	643b      	str	r3, [r7, #64]	; 0x40
 800a184:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a186:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a188:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a18a:	e841 2300 	strex	r3, r2, [r1]
 800a18e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a192:	2b00      	cmp	r3, #0
 800a194:	d1e6      	bne.n	800a164 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	69db      	ldr	r3, [r3, #28]
 800a19c:	f003 0310 	and.w	r3, r3, #16
 800a1a0:	2b10      	cmp	r3, #16
 800a1a2:	d103      	bne.n	800a1ac <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	2210      	movs	r2, #16
 800a1aa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a1b2:	4619      	mov	r1, r3
 800a1b4:	6878      	ldr	r0, [r7, #4]
 800a1b6:	f7fe fef9 	bl	8008fac <HAL_UARTEx_RxEventCallback>
 800a1ba:	e002      	b.n	800a1c2 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a1bc:	6878      	ldr	r0, [r7, #4]
 800a1be:	f7f8 fc5d 	bl	8002a7c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a1c2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d006      	beq.n	800a1d8 <UART_RxISR_8BIT_FIFOEN+0x24c>
 800a1ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a1ce:	f003 0320 	and.w	r3, r3, #32
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	f47f aefe 	bne.w	8009fd4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a1de:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a1e2:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d045      	beq.n	800a276 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a1f0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a1f4:	429a      	cmp	r2, r3
 800a1f6:	d23e      	bcs.n	800a276 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	3308      	adds	r3, #8
 800a1fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a200:	6a3b      	ldr	r3, [r7, #32]
 800a202:	e853 3f00 	ldrex	r3, [r3]
 800a206:	61fb      	str	r3, [r7, #28]
   return(result);
 800a208:	69fb      	ldr	r3, [r7, #28]
 800a20a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a20e:	673b      	str	r3, [r7, #112]	; 0x70
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	3308      	adds	r3, #8
 800a216:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800a218:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a21a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a21c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a21e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a220:	e841 2300 	strex	r3, r2, [r1]
 800a224:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d1e5      	bne.n	800a1f8 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	4a14      	ldr	r2, [pc, #80]	; (800a280 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800a230:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	e853 3f00 	ldrex	r3, [r3]
 800a23e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a240:	68bb      	ldr	r3, [r7, #8]
 800a242:	f043 0320 	orr.w	r3, r3, #32
 800a246:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	461a      	mov	r2, r3
 800a24e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a250:	61bb      	str	r3, [r7, #24]
 800a252:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a254:	6979      	ldr	r1, [r7, #20]
 800a256:	69ba      	ldr	r2, [r7, #24]
 800a258:	e841 2300 	strex	r3, r2, [r1]
 800a25c:	613b      	str	r3, [r7, #16]
   return(result);
 800a25e:	693b      	ldr	r3, [r7, #16]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d1e6      	bne.n	800a232 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a264:	e007      	b.n	800a276 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	699a      	ldr	r2, [r3, #24]
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	f042 0208 	orr.w	r2, r2, #8
 800a274:	619a      	str	r2, [r3, #24]
}
 800a276:	bf00      	nop
 800a278:	3798      	adds	r7, #152	; 0x98
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd80      	pop	{r7, pc}
 800a27e:	bf00      	nop
 800a280:	08009ccb 	.word	0x08009ccb

0800a284 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b0a8      	sub	sp, #160	; 0xa0
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a292:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	69db      	ldr	r3, [r3, #28]
 800a29c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	689b      	ldr	r3, [r3, #8]
 800a2b0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2ba:	2b22      	cmp	r3, #34	; 0x22
 800a2bc:	f040 8153 	bne.w	800a566 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a2c6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a2ca:	e0fa      	b.n	800a4c2 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2d2:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800a2de:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800a2e2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800a2e6:	4013      	ands	r3, r2
 800a2e8:	b29a      	uxth	r2, r3
 800a2ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a2ee:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2f4:	1c9a      	adds	r2, r3, #2
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a300:	b29b      	uxth	r3, r3
 800a302:	3b01      	subs	r3, #1
 800a304:	b29a      	uxth	r2, r3
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	69db      	ldr	r3, [r3, #28]
 800a312:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a316:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a31a:	f003 0307 	and.w	r3, r3, #7
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d053      	beq.n	800a3ca <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a322:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a326:	f003 0301 	and.w	r3, r3, #1
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d011      	beq.n	800a352 <UART_RxISR_16BIT_FIFOEN+0xce>
 800a32e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a336:	2b00      	cmp	r3, #0
 800a338:	d00b      	beq.n	800a352 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	2201      	movs	r2, #1
 800a340:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a348:	f043 0201 	orr.w	r2, r3, #1
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a352:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a356:	f003 0302 	and.w	r3, r3, #2
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d011      	beq.n	800a382 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800a35e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a362:	f003 0301 	and.w	r3, r3, #1
 800a366:	2b00      	cmp	r3, #0
 800a368:	d00b      	beq.n	800a382 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	2202      	movs	r2, #2
 800a370:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a378:	f043 0204 	orr.w	r2, r3, #4
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a382:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a386:	f003 0304 	and.w	r3, r3, #4
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d011      	beq.n	800a3b2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800a38e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a392:	f003 0301 	and.w	r3, r3, #1
 800a396:	2b00      	cmp	r3, #0
 800a398:	d00b      	beq.n	800a3b2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	2204      	movs	r2, #4
 800a3a0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a3a8:	f043 0202 	orr.w	r2, r3, #2
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d006      	beq.n	800a3ca <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	f7fe fdeb 	bl	8008f98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a3d0:	b29b      	uxth	r3, r3
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d175      	bne.n	800a4c2 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a3de:	e853 3f00 	ldrex	r3, [r3]
 800a3e2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a3e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a3e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a3ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	461a      	mov	r2, r3
 800a3f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a3f8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a3fa:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3fc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a3fe:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a400:	e841 2300 	strex	r3, r2, [r1]
 800a404:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a406:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d1e4      	bne.n	800a3d6 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	3308      	adds	r3, #8
 800a412:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a414:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a416:	e853 3f00 	ldrex	r3, [r3]
 800a41a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a41c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a41e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a422:	f023 0301 	bic.w	r3, r3, #1
 800a426:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	3308      	adds	r3, #8
 800a430:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a434:	65ba      	str	r2, [r7, #88]	; 0x58
 800a436:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a438:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a43a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a43c:	e841 2300 	strex	r3, r2, [r1]
 800a440:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a442:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a444:	2b00      	cmp	r3, #0
 800a446:	d1e1      	bne.n	800a40c <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2220      	movs	r2, #32
 800a44c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	2200      	movs	r2, #0
 800a454:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a45a:	2b01      	cmp	r3, #1
 800a45c:	d12e      	bne.n	800a4bc <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	2200      	movs	r2, #0
 800a462:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a46a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a46c:	e853 3f00 	ldrex	r3, [r3]
 800a470:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a474:	f023 0310 	bic.w	r3, r3, #16
 800a478:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	461a      	mov	r2, r3
 800a480:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a482:	647b      	str	r3, [r7, #68]	; 0x44
 800a484:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a486:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a488:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a48a:	e841 2300 	strex	r3, r2, [r1]
 800a48e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a490:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a492:	2b00      	cmp	r3, #0
 800a494:	d1e6      	bne.n	800a464 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	69db      	ldr	r3, [r3, #28]
 800a49c:	f003 0310 	and.w	r3, r3, #16
 800a4a0:	2b10      	cmp	r3, #16
 800a4a2:	d103      	bne.n	800a4ac <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	2210      	movs	r2, #16
 800a4aa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a4b2:	4619      	mov	r1, r3
 800a4b4:	6878      	ldr	r0, [r7, #4]
 800a4b6:	f7fe fd79 	bl	8008fac <HAL_UARTEx_RxEventCallback>
 800a4ba:	e002      	b.n	800a4c2 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a4bc:	6878      	ldr	r0, [r7, #4]
 800a4be:	f7f8 fadd 	bl	8002a7c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a4c2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d006      	beq.n	800a4d8 <UART_RxISR_16BIT_FIFOEN+0x254>
 800a4ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a4ce:	f003 0320 	and.w	r3, r3, #32
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	f47f aefa 	bne.w	800a2cc <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a4de:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a4e2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d045      	beq.n	800a576 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a4f0:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800a4f4:	429a      	cmp	r2, r3
 800a4f6:	d23e      	bcs.n	800a576 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	3308      	adds	r3, #8
 800a4fe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a502:	e853 3f00 	ldrex	r3, [r3]
 800a506:	623b      	str	r3, [r7, #32]
   return(result);
 800a508:	6a3b      	ldr	r3, [r7, #32]
 800a50a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a50e:	677b      	str	r3, [r7, #116]	; 0x74
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	3308      	adds	r3, #8
 800a516:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a518:	633a      	str	r2, [r7, #48]	; 0x30
 800a51a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a51c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a51e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a520:	e841 2300 	strex	r3, r2, [r1]
 800a524:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d1e5      	bne.n	800a4f8 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	4a14      	ldr	r2, [pc, #80]	; (800a580 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800a530:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a538:	693b      	ldr	r3, [r7, #16]
 800a53a:	e853 3f00 	ldrex	r3, [r3]
 800a53e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	f043 0320 	orr.w	r3, r3, #32
 800a546:	673b      	str	r3, [r7, #112]	; 0x70
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	461a      	mov	r2, r3
 800a54e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a550:	61fb      	str	r3, [r7, #28]
 800a552:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a554:	69b9      	ldr	r1, [r7, #24]
 800a556:	69fa      	ldr	r2, [r7, #28]
 800a558:	e841 2300 	strex	r3, r2, [r1]
 800a55c:	617b      	str	r3, [r7, #20]
   return(result);
 800a55e:	697b      	ldr	r3, [r7, #20]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d1e6      	bne.n	800a532 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a564:	e007      	b.n	800a576 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	699a      	ldr	r2, [r3, #24]
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	f042 0208 	orr.w	r2, r2, #8
 800a574:	619a      	str	r2, [r3, #24]
}
 800a576:	bf00      	nop
 800a578:	37a0      	adds	r7, #160	; 0xa0
 800a57a:	46bd      	mov	sp, r7
 800a57c:	bd80      	pop	{r7, pc}
 800a57e:	bf00      	nop
 800a580:	08009e2b 	.word	0x08009e2b

0800a584 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a584:	b480      	push	{r7}
 800a586:	b083      	sub	sp, #12
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a58c:	bf00      	nop
 800a58e:	370c      	adds	r7, #12
 800a590:	46bd      	mov	sp, r7
 800a592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a596:	4770      	bx	lr

0800a598 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a598:	b480      	push	{r7}
 800a59a:	b083      	sub	sp, #12
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a5a0:	bf00      	nop
 800a5a2:	370c      	adds	r7, #12
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5aa:	4770      	bx	lr

0800a5ac <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a5ac:	b480      	push	{r7}
 800a5ae:	b083      	sub	sp, #12
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a5b4:	bf00      	nop
 800a5b6:	370c      	adds	r7, #12
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5be:	4770      	bx	lr

0800a5c0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a5c0:	b480      	push	{r7}
 800a5c2:	b085      	sub	sp, #20
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a5ce:	2b01      	cmp	r3, #1
 800a5d0:	d101      	bne.n	800a5d6 <HAL_UARTEx_DisableFifoMode+0x16>
 800a5d2:	2302      	movs	r3, #2
 800a5d4:	e027      	b.n	800a626 <HAL_UARTEx_DisableFifoMode+0x66>
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	2201      	movs	r2, #1
 800a5da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	2224      	movs	r2, #36	; 0x24
 800a5e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	681a      	ldr	r2, [r3, #0]
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	f022 0201 	bic.w	r2, r2, #1
 800a5fc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a604:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	2200      	movs	r2, #0
 800a60a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	68fa      	ldr	r2, [r7, #12]
 800a612:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	2220      	movs	r2, #32
 800a618:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2200      	movs	r2, #0
 800a620:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a624:	2300      	movs	r3, #0
}
 800a626:	4618      	mov	r0, r3
 800a628:	3714      	adds	r7, #20
 800a62a:	46bd      	mov	sp, r7
 800a62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a630:	4770      	bx	lr

0800a632 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a632:	b580      	push	{r7, lr}
 800a634:	b084      	sub	sp, #16
 800a636:	af00      	add	r7, sp, #0
 800a638:	6078      	str	r0, [r7, #4]
 800a63a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a642:	2b01      	cmp	r3, #1
 800a644:	d101      	bne.n	800a64a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a646:	2302      	movs	r3, #2
 800a648:	e02d      	b.n	800a6a6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	2201      	movs	r2, #1
 800a64e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	2224      	movs	r2, #36	; 0x24
 800a656:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	681a      	ldr	r2, [r3, #0]
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	f022 0201 	bic.w	r2, r2, #1
 800a670:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	689b      	ldr	r3, [r3, #8]
 800a678:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	683a      	ldr	r2, [r7, #0]
 800a682:	430a      	orrs	r2, r1
 800a684:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a686:	6878      	ldr	r0, [r7, #4]
 800a688:	f000 f850 	bl	800a72c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	68fa      	ldr	r2, [r7, #12]
 800a692:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	2220      	movs	r2, #32
 800a698:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2200      	movs	r2, #0
 800a6a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a6a4:	2300      	movs	r3, #0
}
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	3710      	adds	r7, #16
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	bd80      	pop	{r7, pc}

0800a6ae <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a6ae:	b580      	push	{r7, lr}
 800a6b0:	b084      	sub	sp, #16
 800a6b2:	af00      	add	r7, sp, #0
 800a6b4:	6078      	str	r0, [r7, #4]
 800a6b6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a6be:	2b01      	cmp	r3, #1
 800a6c0:	d101      	bne.n	800a6c6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a6c2:	2302      	movs	r3, #2
 800a6c4:	e02d      	b.n	800a722 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	2201      	movs	r2, #1
 800a6ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	2224      	movs	r2, #36	; 0x24
 800a6d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	681a      	ldr	r2, [r3, #0]
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	f022 0201 	bic.w	r2, r2, #1
 800a6ec:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	689b      	ldr	r3, [r3, #8]
 800a6f4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	683a      	ldr	r2, [r7, #0]
 800a6fe:	430a      	orrs	r2, r1
 800a700:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a702:	6878      	ldr	r0, [r7, #4]
 800a704:	f000 f812 	bl	800a72c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	68fa      	ldr	r2, [r7, #12]
 800a70e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2220      	movs	r2, #32
 800a714:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2200      	movs	r2, #0
 800a71c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a720:	2300      	movs	r3, #0
}
 800a722:	4618      	mov	r0, r3
 800a724:	3710      	adds	r7, #16
 800a726:	46bd      	mov	sp, r7
 800a728:	bd80      	pop	{r7, pc}
	...

0800a72c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a72c:	b480      	push	{r7}
 800a72e:	b085      	sub	sp, #20
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d108      	bne.n	800a74e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2201      	movs	r2, #1
 800a740:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	2201      	movs	r2, #1
 800a748:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a74c:	e031      	b.n	800a7b2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a74e:	2308      	movs	r3, #8
 800a750:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a752:	2308      	movs	r3, #8
 800a754:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	689b      	ldr	r3, [r3, #8]
 800a75c:	0e5b      	lsrs	r3, r3, #25
 800a75e:	b2db      	uxtb	r3, r3
 800a760:	f003 0307 	and.w	r3, r3, #7
 800a764:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	689b      	ldr	r3, [r3, #8]
 800a76c:	0f5b      	lsrs	r3, r3, #29
 800a76e:	b2db      	uxtb	r3, r3
 800a770:	f003 0307 	and.w	r3, r3, #7
 800a774:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a776:	7bbb      	ldrb	r3, [r7, #14]
 800a778:	7b3a      	ldrb	r2, [r7, #12]
 800a77a:	4911      	ldr	r1, [pc, #68]	; (800a7c0 <UARTEx_SetNbDataToProcess+0x94>)
 800a77c:	5c8a      	ldrb	r2, [r1, r2]
 800a77e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a782:	7b3a      	ldrb	r2, [r7, #12]
 800a784:	490f      	ldr	r1, [pc, #60]	; (800a7c4 <UARTEx_SetNbDataToProcess+0x98>)
 800a786:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a788:	fb93 f3f2 	sdiv	r3, r3, r2
 800a78c:	b29a      	uxth	r2, r3
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a794:	7bfb      	ldrb	r3, [r7, #15]
 800a796:	7b7a      	ldrb	r2, [r7, #13]
 800a798:	4909      	ldr	r1, [pc, #36]	; (800a7c0 <UARTEx_SetNbDataToProcess+0x94>)
 800a79a:	5c8a      	ldrb	r2, [r1, r2]
 800a79c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a7a0:	7b7a      	ldrb	r2, [r7, #13]
 800a7a2:	4908      	ldr	r1, [pc, #32]	; (800a7c4 <UARTEx_SetNbDataToProcess+0x98>)
 800a7a4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a7a6:	fb93 f3f2 	sdiv	r3, r3, r2
 800a7aa:	b29a      	uxth	r2, r3
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a7b2:	bf00      	nop
 800a7b4:	3714      	adds	r7, #20
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7bc:	4770      	bx	lr
 800a7be:	bf00      	nop
 800a7c0:	0800f688 	.word	0x0800f688
 800a7c4:	0800f690 	.word	0x0800f690

0800a7c8 <atof>:
 800a7c8:	2100      	movs	r1, #0
 800a7ca:	f001 bd35 	b.w	800c238 <strtod>

0800a7ce <atoi>:
 800a7ce:	220a      	movs	r2, #10
 800a7d0:	2100      	movs	r1, #0
 800a7d2:	f001 be1d 	b.w	800c410 <strtol>
	...

0800a7d8 <__errno>:
 800a7d8:	4b01      	ldr	r3, [pc, #4]	; (800a7e0 <__errno+0x8>)
 800a7da:	6818      	ldr	r0, [r3, #0]
 800a7dc:	4770      	bx	lr
 800a7de:	bf00      	nop
 800a7e0:	20000038 	.word	0x20000038

0800a7e4 <__libc_init_array>:
 800a7e4:	b570      	push	{r4, r5, r6, lr}
 800a7e6:	4d0d      	ldr	r5, [pc, #52]	; (800a81c <__libc_init_array+0x38>)
 800a7e8:	4c0d      	ldr	r4, [pc, #52]	; (800a820 <__libc_init_array+0x3c>)
 800a7ea:	1b64      	subs	r4, r4, r5
 800a7ec:	10a4      	asrs	r4, r4, #2
 800a7ee:	2600      	movs	r6, #0
 800a7f0:	42a6      	cmp	r6, r4
 800a7f2:	d109      	bne.n	800a808 <__libc_init_array+0x24>
 800a7f4:	4d0b      	ldr	r5, [pc, #44]	; (800a824 <__libc_init_array+0x40>)
 800a7f6:	4c0c      	ldr	r4, [pc, #48]	; (800a828 <__libc_init_array+0x44>)
 800a7f8:	f004 fd3a 	bl	800f270 <_init>
 800a7fc:	1b64      	subs	r4, r4, r5
 800a7fe:	10a4      	asrs	r4, r4, #2
 800a800:	2600      	movs	r6, #0
 800a802:	42a6      	cmp	r6, r4
 800a804:	d105      	bne.n	800a812 <__libc_init_array+0x2e>
 800a806:	bd70      	pop	{r4, r5, r6, pc}
 800a808:	f855 3b04 	ldr.w	r3, [r5], #4
 800a80c:	4798      	blx	r3
 800a80e:	3601      	adds	r6, #1
 800a810:	e7ee      	b.n	800a7f0 <__libc_init_array+0xc>
 800a812:	f855 3b04 	ldr.w	r3, [r5], #4
 800a816:	4798      	blx	r3
 800a818:	3601      	adds	r6, #1
 800a81a:	e7f2      	b.n	800a802 <__libc_init_array+0x1e>
 800a81c:	0800fba0 	.word	0x0800fba0
 800a820:	0800fba0 	.word	0x0800fba0
 800a824:	0800fba0 	.word	0x0800fba0
 800a828:	0800fba4 	.word	0x0800fba4

0800a82c <memset>:
 800a82c:	4402      	add	r2, r0
 800a82e:	4603      	mov	r3, r0
 800a830:	4293      	cmp	r3, r2
 800a832:	d100      	bne.n	800a836 <memset+0xa>
 800a834:	4770      	bx	lr
 800a836:	f803 1b01 	strb.w	r1, [r3], #1
 800a83a:	e7f9      	b.n	800a830 <memset+0x4>

0800a83c <__cvt>:
 800a83c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a840:	ec55 4b10 	vmov	r4, r5, d0
 800a844:	2d00      	cmp	r5, #0
 800a846:	460e      	mov	r6, r1
 800a848:	4619      	mov	r1, r3
 800a84a:	462b      	mov	r3, r5
 800a84c:	bfbb      	ittet	lt
 800a84e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a852:	461d      	movlt	r5, r3
 800a854:	2300      	movge	r3, #0
 800a856:	232d      	movlt	r3, #45	; 0x2d
 800a858:	700b      	strb	r3, [r1, #0]
 800a85a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a85c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a860:	4691      	mov	r9, r2
 800a862:	f023 0820 	bic.w	r8, r3, #32
 800a866:	bfbc      	itt	lt
 800a868:	4622      	movlt	r2, r4
 800a86a:	4614      	movlt	r4, r2
 800a86c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a870:	d005      	beq.n	800a87e <__cvt+0x42>
 800a872:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a876:	d100      	bne.n	800a87a <__cvt+0x3e>
 800a878:	3601      	adds	r6, #1
 800a87a:	2102      	movs	r1, #2
 800a87c:	e000      	b.n	800a880 <__cvt+0x44>
 800a87e:	2103      	movs	r1, #3
 800a880:	ab03      	add	r3, sp, #12
 800a882:	9301      	str	r3, [sp, #4]
 800a884:	ab02      	add	r3, sp, #8
 800a886:	9300      	str	r3, [sp, #0]
 800a888:	ec45 4b10 	vmov	d0, r4, r5
 800a88c:	4653      	mov	r3, sl
 800a88e:	4632      	mov	r2, r6
 800a890:	f001 fe72 	bl	800c578 <_dtoa_r>
 800a894:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a898:	4607      	mov	r7, r0
 800a89a:	d102      	bne.n	800a8a2 <__cvt+0x66>
 800a89c:	f019 0f01 	tst.w	r9, #1
 800a8a0:	d022      	beq.n	800a8e8 <__cvt+0xac>
 800a8a2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a8a6:	eb07 0906 	add.w	r9, r7, r6
 800a8aa:	d110      	bne.n	800a8ce <__cvt+0x92>
 800a8ac:	783b      	ldrb	r3, [r7, #0]
 800a8ae:	2b30      	cmp	r3, #48	; 0x30
 800a8b0:	d10a      	bne.n	800a8c8 <__cvt+0x8c>
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	4620      	mov	r0, r4
 800a8b8:	4629      	mov	r1, r5
 800a8ba:	f7f6 f93d 	bl	8000b38 <__aeabi_dcmpeq>
 800a8be:	b918      	cbnz	r0, 800a8c8 <__cvt+0x8c>
 800a8c0:	f1c6 0601 	rsb	r6, r6, #1
 800a8c4:	f8ca 6000 	str.w	r6, [sl]
 800a8c8:	f8da 3000 	ldr.w	r3, [sl]
 800a8cc:	4499      	add	r9, r3
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	4620      	mov	r0, r4
 800a8d4:	4629      	mov	r1, r5
 800a8d6:	f7f6 f92f 	bl	8000b38 <__aeabi_dcmpeq>
 800a8da:	b108      	cbz	r0, 800a8e0 <__cvt+0xa4>
 800a8dc:	f8cd 900c 	str.w	r9, [sp, #12]
 800a8e0:	2230      	movs	r2, #48	; 0x30
 800a8e2:	9b03      	ldr	r3, [sp, #12]
 800a8e4:	454b      	cmp	r3, r9
 800a8e6:	d307      	bcc.n	800a8f8 <__cvt+0xbc>
 800a8e8:	9b03      	ldr	r3, [sp, #12]
 800a8ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a8ec:	1bdb      	subs	r3, r3, r7
 800a8ee:	4638      	mov	r0, r7
 800a8f0:	6013      	str	r3, [r2, #0]
 800a8f2:	b004      	add	sp, #16
 800a8f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8f8:	1c59      	adds	r1, r3, #1
 800a8fa:	9103      	str	r1, [sp, #12]
 800a8fc:	701a      	strb	r2, [r3, #0]
 800a8fe:	e7f0      	b.n	800a8e2 <__cvt+0xa6>

0800a900 <__exponent>:
 800a900:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a902:	4603      	mov	r3, r0
 800a904:	2900      	cmp	r1, #0
 800a906:	bfb8      	it	lt
 800a908:	4249      	neglt	r1, r1
 800a90a:	f803 2b02 	strb.w	r2, [r3], #2
 800a90e:	bfb4      	ite	lt
 800a910:	222d      	movlt	r2, #45	; 0x2d
 800a912:	222b      	movge	r2, #43	; 0x2b
 800a914:	2909      	cmp	r1, #9
 800a916:	7042      	strb	r2, [r0, #1]
 800a918:	dd2a      	ble.n	800a970 <__exponent+0x70>
 800a91a:	f10d 0407 	add.w	r4, sp, #7
 800a91e:	46a4      	mov	ip, r4
 800a920:	270a      	movs	r7, #10
 800a922:	46a6      	mov	lr, r4
 800a924:	460a      	mov	r2, r1
 800a926:	fb91 f6f7 	sdiv	r6, r1, r7
 800a92a:	fb07 1516 	mls	r5, r7, r6, r1
 800a92e:	3530      	adds	r5, #48	; 0x30
 800a930:	2a63      	cmp	r2, #99	; 0x63
 800a932:	f104 34ff 	add.w	r4, r4, #4294967295
 800a936:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a93a:	4631      	mov	r1, r6
 800a93c:	dcf1      	bgt.n	800a922 <__exponent+0x22>
 800a93e:	3130      	adds	r1, #48	; 0x30
 800a940:	f1ae 0502 	sub.w	r5, lr, #2
 800a944:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a948:	1c44      	adds	r4, r0, #1
 800a94a:	4629      	mov	r1, r5
 800a94c:	4561      	cmp	r1, ip
 800a94e:	d30a      	bcc.n	800a966 <__exponent+0x66>
 800a950:	f10d 0209 	add.w	r2, sp, #9
 800a954:	eba2 020e 	sub.w	r2, r2, lr
 800a958:	4565      	cmp	r5, ip
 800a95a:	bf88      	it	hi
 800a95c:	2200      	movhi	r2, #0
 800a95e:	4413      	add	r3, r2
 800a960:	1a18      	subs	r0, r3, r0
 800a962:	b003      	add	sp, #12
 800a964:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a966:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a96a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a96e:	e7ed      	b.n	800a94c <__exponent+0x4c>
 800a970:	2330      	movs	r3, #48	; 0x30
 800a972:	3130      	adds	r1, #48	; 0x30
 800a974:	7083      	strb	r3, [r0, #2]
 800a976:	70c1      	strb	r1, [r0, #3]
 800a978:	1d03      	adds	r3, r0, #4
 800a97a:	e7f1      	b.n	800a960 <__exponent+0x60>

0800a97c <_printf_float>:
 800a97c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a980:	ed2d 8b02 	vpush	{d8}
 800a984:	b08d      	sub	sp, #52	; 0x34
 800a986:	460c      	mov	r4, r1
 800a988:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a98c:	4616      	mov	r6, r2
 800a98e:	461f      	mov	r7, r3
 800a990:	4605      	mov	r5, r0
 800a992:	f002 ff61 	bl	800d858 <_localeconv_r>
 800a996:	f8d0 a000 	ldr.w	sl, [r0]
 800a99a:	4650      	mov	r0, sl
 800a99c:	f7f5 fc4a 	bl	8000234 <strlen>
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	930a      	str	r3, [sp, #40]	; 0x28
 800a9a4:	6823      	ldr	r3, [r4, #0]
 800a9a6:	9305      	str	r3, [sp, #20]
 800a9a8:	f8d8 3000 	ldr.w	r3, [r8]
 800a9ac:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a9b0:	3307      	adds	r3, #7
 800a9b2:	f023 0307 	bic.w	r3, r3, #7
 800a9b6:	f103 0208 	add.w	r2, r3, #8
 800a9ba:	f8c8 2000 	str.w	r2, [r8]
 800a9be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9c2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a9c6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a9ca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a9ce:	9307      	str	r3, [sp, #28]
 800a9d0:	f8cd 8018 	str.w	r8, [sp, #24]
 800a9d4:	ee08 0a10 	vmov	s16, r0
 800a9d8:	4b9f      	ldr	r3, [pc, #636]	; (800ac58 <_printf_float+0x2dc>)
 800a9da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a9de:	f04f 32ff 	mov.w	r2, #4294967295
 800a9e2:	f7f6 f8db 	bl	8000b9c <__aeabi_dcmpun>
 800a9e6:	bb88      	cbnz	r0, 800aa4c <_printf_float+0xd0>
 800a9e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a9ec:	4b9a      	ldr	r3, [pc, #616]	; (800ac58 <_printf_float+0x2dc>)
 800a9ee:	f04f 32ff 	mov.w	r2, #4294967295
 800a9f2:	f7f6 f8b5 	bl	8000b60 <__aeabi_dcmple>
 800a9f6:	bb48      	cbnz	r0, 800aa4c <_printf_float+0xd0>
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	4640      	mov	r0, r8
 800a9fe:	4649      	mov	r1, r9
 800aa00:	f7f6 f8a4 	bl	8000b4c <__aeabi_dcmplt>
 800aa04:	b110      	cbz	r0, 800aa0c <_printf_float+0x90>
 800aa06:	232d      	movs	r3, #45	; 0x2d
 800aa08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa0c:	4b93      	ldr	r3, [pc, #588]	; (800ac5c <_printf_float+0x2e0>)
 800aa0e:	4894      	ldr	r0, [pc, #592]	; (800ac60 <_printf_float+0x2e4>)
 800aa10:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800aa14:	bf94      	ite	ls
 800aa16:	4698      	movls	r8, r3
 800aa18:	4680      	movhi	r8, r0
 800aa1a:	2303      	movs	r3, #3
 800aa1c:	6123      	str	r3, [r4, #16]
 800aa1e:	9b05      	ldr	r3, [sp, #20]
 800aa20:	f023 0204 	bic.w	r2, r3, #4
 800aa24:	6022      	str	r2, [r4, #0]
 800aa26:	f04f 0900 	mov.w	r9, #0
 800aa2a:	9700      	str	r7, [sp, #0]
 800aa2c:	4633      	mov	r3, r6
 800aa2e:	aa0b      	add	r2, sp, #44	; 0x2c
 800aa30:	4621      	mov	r1, r4
 800aa32:	4628      	mov	r0, r5
 800aa34:	f000 f9d8 	bl	800ade8 <_printf_common>
 800aa38:	3001      	adds	r0, #1
 800aa3a:	f040 8090 	bne.w	800ab5e <_printf_float+0x1e2>
 800aa3e:	f04f 30ff 	mov.w	r0, #4294967295
 800aa42:	b00d      	add	sp, #52	; 0x34
 800aa44:	ecbd 8b02 	vpop	{d8}
 800aa48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa4c:	4642      	mov	r2, r8
 800aa4e:	464b      	mov	r3, r9
 800aa50:	4640      	mov	r0, r8
 800aa52:	4649      	mov	r1, r9
 800aa54:	f7f6 f8a2 	bl	8000b9c <__aeabi_dcmpun>
 800aa58:	b140      	cbz	r0, 800aa6c <_printf_float+0xf0>
 800aa5a:	464b      	mov	r3, r9
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	bfbc      	itt	lt
 800aa60:	232d      	movlt	r3, #45	; 0x2d
 800aa62:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800aa66:	487f      	ldr	r0, [pc, #508]	; (800ac64 <_printf_float+0x2e8>)
 800aa68:	4b7f      	ldr	r3, [pc, #508]	; (800ac68 <_printf_float+0x2ec>)
 800aa6a:	e7d1      	b.n	800aa10 <_printf_float+0x94>
 800aa6c:	6863      	ldr	r3, [r4, #4]
 800aa6e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800aa72:	9206      	str	r2, [sp, #24]
 800aa74:	1c5a      	adds	r2, r3, #1
 800aa76:	d13f      	bne.n	800aaf8 <_printf_float+0x17c>
 800aa78:	2306      	movs	r3, #6
 800aa7a:	6063      	str	r3, [r4, #4]
 800aa7c:	9b05      	ldr	r3, [sp, #20]
 800aa7e:	6861      	ldr	r1, [r4, #4]
 800aa80:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800aa84:	2300      	movs	r3, #0
 800aa86:	9303      	str	r3, [sp, #12]
 800aa88:	ab0a      	add	r3, sp, #40	; 0x28
 800aa8a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800aa8e:	ab09      	add	r3, sp, #36	; 0x24
 800aa90:	ec49 8b10 	vmov	d0, r8, r9
 800aa94:	9300      	str	r3, [sp, #0]
 800aa96:	6022      	str	r2, [r4, #0]
 800aa98:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800aa9c:	4628      	mov	r0, r5
 800aa9e:	f7ff fecd 	bl	800a83c <__cvt>
 800aaa2:	9b06      	ldr	r3, [sp, #24]
 800aaa4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aaa6:	2b47      	cmp	r3, #71	; 0x47
 800aaa8:	4680      	mov	r8, r0
 800aaaa:	d108      	bne.n	800aabe <_printf_float+0x142>
 800aaac:	1cc8      	adds	r0, r1, #3
 800aaae:	db02      	blt.n	800aab6 <_printf_float+0x13a>
 800aab0:	6863      	ldr	r3, [r4, #4]
 800aab2:	4299      	cmp	r1, r3
 800aab4:	dd41      	ble.n	800ab3a <_printf_float+0x1be>
 800aab6:	f1ab 0b02 	sub.w	fp, fp, #2
 800aaba:	fa5f fb8b 	uxtb.w	fp, fp
 800aabe:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800aac2:	d820      	bhi.n	800ab06 <_printf_float+0x18a>
 800aac4:	3901      	subs	r1, #1
 800aac6:	465a      	mov	r2, fp
 800aac8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800aacc:	9109      	str	r1, [sp, #36]	; 0x24
 800aace:	f7ff ff17 	bl	800a900 <__exponent>
 800aad2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aad4:	1813      	adds	r3, r2, r0
 800aad6:	2a01      	cmp	r2, #1
 800aad8:	4681      	mov	r9, r0
 800aada:	6123      	str	r3, [r4, #16]
 800aadc:	dc02      	bgt.n	800aae4 <_printf_float+0x168>
 800aade:	6822      	ldr	r2, [r4, #0]
 800aae0:	07d2      	lsls	r2, r2, #31
 800aae2:	d501      	bpl.n	800aae8 <_printf_float+0x16c>
 800aae4:	3301      	adds	r3, #1
 800aae6:	6123      	str	r3, [r4, #16]
 800aae8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d09c      	beq.n	800aa2a <_printf_float+0xae>
 800aaf0:	232d      	movs	r3, #45	; 0x2d
 800aaf2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aaf6:	e798      	b.n	800aa2a <_printf_float+0xae>
 800aaf8:	9a06      	ldr	r2, [sp, #24]
 800aafa:	2a47      	cmp	r2, #71	; 0x47
 800aafc:	d1be      	bne.n	800aa7c <_printf_float+0x100>
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d1bc      	bne.n	800aa7c <_printf_float+0x100>
 800ab02:	2301      	movs	r3, #1
 800ab04:	e7b9      	b.n	800aa7a <_printf_float+0xfe>
 800ab06:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ab0a:	d118      	bne.n	800ab3e <_printf_float+0x1c2>
 800ab0c:	2900      	cmp	r1, #0
 800ab0e:	6863      	ldr	r3, [r4, #4]
 800ab10:	dd0b      	ble.n	800ab2a <_printf_float+0x1ae>
 800ab12:	6121      	str	r1, [r4, #16]
 800ab14:	b913      	cbnz	r3, 800ab1c <_printf_float+0x1a0>
 800ab16:	6822      	ldr	r2, [r4, #0]
 800ab18:	07d0      	lsls	r0, r2, #31
 800ab1a:	d502      	bpl.n	800ab22 <_printf_float+0x1a6>
 800ab1c:	3301      	adds	r3, #1
 800ab1e:	440b      	add	r3, r1
 800ab20:	6123      	str	r3, [r4, #16]
 800ab22:	65a1      	str	r1, [r4, #88]	; 0x58
 800ab24:	f04f 0900 	mov.w	r9, #0
 800ab28:	e7de      	b.n	800aae8 <_printf_float+0x16c>
 800ab2a:	b913      	cbnz	r3, 800ab32 <_printf_float+0x1b6>
 800ab2c:	6822      	ldr	r2, [r4, #0]
 800ab2e:	07d2      	lsls	r2, r2, #31
 800ab30:	d501      	bpl.n	800ab36 <_printf_float+0x1ba>
 800ab32:	3302      	adds	r3, #2
 800ab34:	e7f4      	b.n	800ab20 <_printf_float+0x1a4>
 800ab36:	2301      	movs	r3, #1
 800ab38:	e7f2      	b.n	800ab20 <_printf_float+0x1a4>
 800ab3a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ab3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab40:	4299      	cmp	r1, r3
 800ab42:	db05      	blt.n	800ab50 <_printf_float+0x1d4>
 800ab44:	6823      	ldr	r3, [r4, #0]
 800ab46:	6121      	str	r1, [r4, #16]
 800ab48:	07d8      	lsls	r0, r3, #31
 800ab4a:	d5ea      	bpl.n	800ab22 <_printf_float+0x1a6>
 800ab4c:	1c4b      	adds	r3, r1, #1
 800ab4e:	e7e7      	b.n	800ab20 <_printf_float+0x1a4>
 800ab50:	2900      	cmp	r1, #0
 800ab52:	bfd4      	ite	le
 800ab54:	f1c1 0202 	rsble	r2, r1, #2
 800ab58:	2201      	movgt	r2, #1
 800ab5a:	4413      	add	r3, r2
 800ab5c:	e7e0      	b.n	800ab20 <_printf_float+0x1a4>
 800ab5e:	6823      	ldr	r3, [r4, #0]
 800ab60:	055a      	lsls	r2, r3, #21
 800ab62:	d407      	bmi.n	800ab74 <_printf_float+0x1f8>
 800ab64:	6923      	ldr	r3, [r4, #16]
 800ab66:	4642      	mov	r2, r8
 800ab68:	4631      	mov	r1, r6
 800ab6a:	4628      	mov	r0, r5
 800ab6c:	47b8      	blx	r7
 800ab6e:	3001      	adds	r0, #1
 800ab70:	d12c      	bne.n	800abcc <_printf_float+0x250>
 800ab72:	e764      	b.n	800aa3e <_printf_float+0xc2>
 800ab74:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ab78:	f240 80e0 	bls.w	800ad3c <_printf_float+0x3c0>
 800ab7c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ab80:	2200      	movs	r2, #0
 800ab82:	2300      	movs	r3, #0
 800ab84:	f7f5 ffd8 	bl	8000b38 <__aeabi_dcmpeq>
 800ab88:	2800      	cmp	r0, #0
 800ab8a:	d034      	beq.n	800abf6 <_printf_float+0x27a>
 800ab8c:	4a37      	ldr	r2, [pc, #220]	; (800ac6c <_printf_float+0x2f0>)
 800ab8e:	2301      	movs	r3, #1
 800ab90:	4631      	mov	r1, r6
 800ab92:	4628      	mov	r0, r5
 800ab94:	47b8      	blx	r7
 800ab96:	3001      	adds	r0, #1
 800ab98:	f43f af51 	beq.w	800aa3e <_printf_float+0xc2>
 800ab9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aba0:	429a      	cmp	r2, r3
 800aba2:	db02      	blt.n	800abaa <_printf_float+0x22e>
 800aba4:	6823      	ldr	r3, [r4, #0]
 800aba6:	07d8      	lsls	r0, r3, #31
 800aba8:	d510      	bpl.n	800abcc <_printf_float+0x250>
 800abaa:	ee18 3a10 	vmov	r3, s16
 800abae:	4652      	mov	r2, sl
 800abb0:	4631      	mov	r1, r6
 800abb2:	4628      	mov	r0, r5
 800abb4:	47b8      	blx	r7
 800abb6:	3001      	adds	r0, #1
 800abb8:	f43f af41 	beq.w	800aa3e <_printf_float+0xc2>
 800abbc:	f04f 0800 	mov.w	r8, #0
 800abc0:	f104 091a 	add.w	r9, r4, #26
 800abc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abc6:	3b01      	subs	r3, #1
 800abc8:	4543      	cmp	r3, r8
 800abca:	dc09      	bgt.n	800abe0 <_printf_float+0x264>
 800abcc:	6823      	ldr	r3, [r4, #0]
 800abce:	079b      	lsls	r3, r3, #30
 800abd0:	f100 8105 	bmi.w	800adde <_printf_float+0x462>
 800abd4:	68e0      	ldr	r0, [r4, #12]
 800abd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800abd8:	4298      	cmp	r0, r3
 800abda:	bfb8      	it	lt
 800abdc:	4618      	movlt	r0, r3
 800abde:	e730      	b.n	800aa42 <_printf_float+0xc6>
 800abe0:	2301      	movs	r3, #1
 800abe2:	464a      	mov	r2, r9
 800abe4:	4631      	mov	r1, r6
 800abe6:	4628      	mov	r0, r5
 800abe8:	47b8      	blx	r7
 800abea:	3001      	adds	r0, #1
 800abec:	f43f af27 	beq.w	800aa3e <_printf_float+0xc2>
 800abf0:	f108 0801 	add.w	r8, r8, #1
 800abf4:	e7e6      	b.n	800abc4 <_printf_float+0x248>
 800abf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	dc39      	bgt.n	800ac70 <_printf_float+0x2f4>
 800abfc:	4a1b      	ldr	r2, [pc, #108]	; (800ac6c <_printf_float+0x2f0>)
 800abfe:	2301      	movs	r3, #1
 800ac00:	4631      	mov	r1, r6
 800ac02:	4628      	mov	r0, r5
 800ac04:	47b8      	blx	r7
 800ac06:	3001      	adds	r0, #1
 800ac08:	f43f af19 	beq.w	800aa3e <_printf_float+0xc2>
 800ac0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ac10:	4313      	orrs	r3, r2
 800ac12:	d102      	bne.n	800ac1a <_printf_float+0x29e>
 800ac14:	6823      	ldr	r3, [r4, #0]
 800ac16:	07d9      	lsls	r1, r3, #31
 800ac18:	d5d8      	bpl.n	800abcc <_printf_float+0x250>
 800ac1a:	ee18 3a10 	vmov	r3, s16
 800ac1e:	4652      	mov	r2, sl
 800ac20:	4631      	mov	r1, r6
 800ac22:	4628      	mov	r0, r5
 800ac24:	47b8      	blx	r7
 800ac26:	3001      	adds	r0, #1
 800ac28:	f43f af09 	beq.w	800aa3e <_printf_float+0xc2>
 800ac2c:	f04f 0900 	mov.w	r9, #0
 800ac30:	f104 0a1a 	add.w	sl, r4, #26
 800ac34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac36:	425b      	negs	r3, r3
 800ac38:	454b      	cmp	r3, r9
 800ac3a:	dc01      	bgt.n	800ac40 <_printf_float+0x2c4>
 800ac3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac3e:	e792      	b.n	800ab66 <_printf_float+0x1ea>
 800ac40:	2301      	movs	r3, #1
 800ac42:	4652      	mov	r2, sl
 800ac44:	4631      	mov	r1, r6
 800ac46:	4628      	mov	r0, r5
 800ac48:	47b8      	blx	r7
 800ac4a:	3001      	adds	r0, #1
 800ac4c:	f43f aef7 	beq.w	800aa3e <_printf_float+0xc2>
 800ac50:	f109 0901 	add.w	r9, r9, #1
 800ac54:	e7ee      	b.n	800ac34 <_printf_float+0x2b8>
 800ac56:	bf00      	nop
 800ac58:	7fefffff 	.word	0x7fefffff
 800ac5c:	0800f69c 	.word	0x0800f69c
 800ac60:	0800f6a0 	.word	0x0800f6a0
 800ac64:	0800f6a8 	.word	0x0800f6a8
 800ac68:	0800f6a4 	.word	0x0800f6a4
 800ac6c:	0800f6ac 	.word	0x0800f6ac
 800ac70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ac72:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ac74:	429a      	cmp	r2, r3
 800ac76:	bfa8      	it	ge
 800ac78:	461a      	movge	r2, r3
 800ac7a:	2a00      	cmp	r2, #0
 800ac7c:	4691      	mov	r9, r2
 800ac7e:	dc37      	bgt.n	800acf0 <_printf_float+0x374>
 800ac80:	f04f 0b00 	mov.w	fp, #0
 800ac84:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ac88:	f104 021a 	add.w	r2, r4, #26
 800ac8c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ac8e:	9305      	str	r3, [sp, #20]
 800ac90:	eba3 0309 	sub.w	r3, r3, r9
 800ac94:	455b      	cmp	r3, fp
 800ac96:	dc33      	bgt.n	800ad00 <_printf_float+0x384>
 800ac98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ac9c:	429a      	cmp	r2, r3
 800ac9e:	db3b      	blt.n	800ad18 <_printf_float+0x39c>
 800aca0:	6823      	ldr	r3, [r4, #0]
 800aca2:	07da      	lsls	r2, r3, #31
 800aca4:	d438      	bmi.n	800ad18 <_printf_float+0x39c>
 800aca6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aca8:	9a05      	ldr	r2, [sp, #20]
 800acaa:	9909      	ldr	r1, [sp, #36]	; 0x24
 800acac:	1a9a      	subs	r2, r3, r2
 800acae:	eba3 0901 	sub.w	r9, r3, r1
 800acb2:	4591      	cmp	r9, r2
 800acb4:	bfa8      	it	ge
 800acb6:	4691      	movge	r9, r2
 800acb8:	f1b9 0f00 	cmp.w	r9, #0
 800acbc:	dc35      	bgt.n	800ad2a <_printf_float+0x3ae>
 800acbe:	f04f 0800 	mov.w	r8, #0
 800acc2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800acc6:	f104 0a1a 	add.w	sl, r4, #26
 800acca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800acce:	1a9b      	subs	r3, r3, r2
 800acd0:	eba3 0309 	sub.w	r3, r3, r9
 800acd4:	4543      	cmp	r3, r8
 800acd6:	f77f af79 	ble.w	800abcc <_printf_float+0x250>
 800acda:	2301      	movs	r3, #1
 800acdc:	4652      	mov	r2, sl
 800acde:	4631      	mov	r1, r6
 800ace0:	4628      	mov	r0, r5
 800ace2:	47b8      	blx	r7
 800ace4:	3001      	adds	r0, #1
 800ace6:	f43f aeaa 	beq.w	800aa3e <_printf_float+0xc2>
 800acea:	f108 0801 	add.w	r8, r8, #1
 800acee:	e7ec      	b.n	800acca <_printf_float+0x34e>
 800acf0:	4613      	mov	r3, r2
 800acf2:	4631      	mov	r1, r6
 800acf4:	4642      	mov	r2, r8
 800acf6:	4628      	mov	r0, r5
 800acf8:	47b8      	blx	r7
 800acfa:	3001      	adds	r0, #1
 800acfc:	d1c0      	bne.n	800ac80 <_printf_float+0x304>
 800acfe:	e69e      	b.n	800aa3e <_printf_float+0xc2>
 800ad00:	2301      	movs	r3, #1
 800ad02:	4631      	mov	r1, r6
 800ad04:	4628      	mov	r0, r5
 800ad06:	9205      	str	r2, [sp, #20]
 800ad08:	47b8      	blx	r7
 800ad0a:	3001      	adds	r0, #1
 800ad0c:	f43f ae97 	beq.w	800aa3e <_printf_float+0xc2>
 800ad10:	9a05      	ldr	r2, [sp, #20]
 800ad12:	f10b 0b01 	add.w	fp, fp, #1
 800ad16:	e7b9      	b.n	800ac8c <_printf_float+0x310>
 800ad18:	ee18 3a10 	vmov	r3, s16
 800ad1c:	4652      	mov	r2, sl
 800ad1e:	4631      	mov	r1, r6
 800ad20:	4628      	mov	r0, r5
 800ad22:	47b8      	blx	r7
 800ad24:	3001      	adds	r0, #1
 800ad26:	d1be      	bne.n	800aca6 <_printf_float+0x32a>
 800ad28:	e689      	b.n	800aa3e <_printf_float+0xc2>
 800ad2a:	9a05      	ldr	r2, [sp, #20]
 800ad2c:	464b      	mov	r3, r9
 800ad2e:	4442      	add	r2, r8
 800ad30:	4631      	mov	r1, r6
 800ad32:	4628      	mov	r0, r5
 800ad34:	47b8      	blx	r7
 800ad36:	3001      	adds	r0, #1
 800ad38:	d1c1      	bne.n	800acbe <_printf_float+0x342>
 800ad3a:	e680      	b.n	800aa3e <_printf_float+0xc2>
 800ad3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ad3e:	2a01      	cmp	r2, #1
 800ad40:	dc01      	bgt.n	800ad46 <_printf_float+0x3ca>
 800ad42:	07db      	lsls	r3, r3, #31
 800ad44:	d538      	bpl.n	800adb8 <_printf_float+0x43c>
 800ad46:	2301      	movs	r3, #1
 800ad48:	4642      	mov	r2, r8
 800ad4a:	4631      	mov	r1, r6
 800ad4c:	4628      	mov	r0, r5
 800ad4e:	47b8      	blx	r7
 800ad50:	3001      	adds	r0, #1
 800ad52:	f43f ae74 	beq.w	800aa3e <_printf_float+0xc2>
 800ad56:	ee18 3a10 	vmov	r3, s16
 800ad5a:	4652      	mov	r2, sl
 800ad5c:	4631      	mov	r1, r6
 800ad5e:	4628      	mov	r0, r5
 800ad60:	47b8      	blx	r7
 800ad62:	3001      	adds	r0, #1
 800ad64:	f43f ae6b 	beq.w	800aa3e <_printf_float+0xc2>
 800ad68:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	2300      	movs	r3, #0
 800ad70:	f7f5 fee2 	bl	8000b38 <__aeabi_dcmpeq>
 800ad74:	b9d8      	cbnz	r0, 800adae <_printf_float+0x432>
 800ad76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad78:	f108 0201 	add.w	r2, r8, #1
 800ad7c:	3b01      	subs	r3, #1
 800ad7e:	4631      	mov	r1, r6
 800ad80:	4628      	mov	r0, r5
 800ad82:	47b8      	blx	r7
 800ad84:	3001      	adds	r0, #1
 800ad86:	d10e      	bne.n	800ada6 <_printf_float+0x42a>
 800ad88:	e659      	b.n	800aa3e <_printf_float+0xc2>
 800ad8a:	2301      	movs	r3, #1
 800ad8c:	4652      	mov	r2, sl
 800ad8e:	4631      	mov	r1, r6
 800ad90:	4628      	mov	r0, r5
 800ad92:	47b8      	blx	r7
 800ad94:	3001      	adds	r0, #1
 800ad96:	f43f ae52 	beq.w	800aa3e <_printf_float+0xc2>
 800ad9a:	f108 0801 	add.w	r8, r8, #1
 800ad9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ada0:	3b01      	subs	r3, #1
 800ada2:	4543      	cmp	r3, r8
 800ada4:	dcf1      	bgt.n	800ad8a <_printf_float+0x40e>
 800ada6:	464b      	mov	r3, r9
 800ada8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800adac:	e6dc      	b.n	800ab68 <_printf_float+0x1ec>
 800adae:	f04f 0800 	mov.w	r8, #0
 800adb2:	f104 0a1a 	add.w	sl, r4, #26
 800adb6:	e7f2      	b.n	800ad9e <_printf_float+0x422>
 800adb8:	2301      	movs	r3, #1
 800adba:	4642      	mov	r2, r8
 800adbc:	e7df      	b.n	800ad7e <_printf_float+0x402>
 800adbe:	2301      	movs	r3, #1
 800adc0:	464a      	mov	r2, r9
 800adc2:	4631      	mov	r1, r6
 800adc4:	4628      	mov	r0, r5
 800adc6:	47b8      	blx	r7
 800adc8:	3001      	adds	r0, #1
 800adca:	f43f ae38 	beq.w	800aa3e <_printf_float+0xc2>
 800adce:	f108 0801 	add.w	r8, r8, #1
 800add2:	68e3      	ldr	r3, [r4, #12]
 800add4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800add6:	1a5b      	subs	r3, r3, r1
 800add8:	4543      	cmp	r3, r8
 800adda:	dcf0      	bgt.n	800adbe <_printf_float+0x442>
 800addc:	e6fa      	b.n	800abd4 <_printf_float+0x258>
 800adde:	f04f 0800 	mov.w	r8, #0
 800ade2:	f104 0919 	add.w	r9, r4, #25
 800ade6:	e7f4      	b.n	800add2 <_printf_float+0x456>

0800ade8 <_printf_common>:
 800ade8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800adec:	4616      	mov	r6, r2
 800adee:	4699      	mov	r9, r3
 800adf0:	688a      	ldr	r2, [r1, #8]
 800adf2:	690b      	ldr	r3, [r1, #16]
 800adf4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800adf8:	4293      	cmp	r3, r2
 800adfa:	bfb8      	it	lt
 800adfc:	4613      	movlt	r3, r2
 800adfe:	6033      	str	r3, [r6, #0]
 800ae00:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ae04:	4607      	mov	r7, r0
 800ae06:	460c      	mov	r4, r1
 800ae08:	b10a      	cbz	r2, 800ae0e <_printf_common+0x26>
 800ae0a:	3301      	adds	r3, #1
 800ae0c:	6033      	str	r3, [r6, #0]
 800ae0e:	6823      	ldr	r3, [r4, #0]
 800ae10:	0699      	lsls	r1, r3, #26
 800ae12:	bf42      	ittt	mi
 800ae14:	6833      	ldrmi	r3, [r6, #0]
 800ae16:	3302      	addmi	r3, #2
 800ae18:	6033      	strmi	r3, [r6, #0]
 800ae1a:	6825      	ldr	r5, [r4, #0]
 800ae1c:	f015 0506 	ands.w	r5, r5, #6
 800ae20:	d106      	bne.n	800ae30 <_printf_common+0x48>
 800ae22:	f104 0a19 	add.w	sl, r4, #25
 800ae26:	68e3      	ldr	r3, [r4, #12]
 800ae28:	6832      	ldr	r2, [r6, #0]
 800ae2a:	1a9b      	subs	r3, r3, r2
 800ae2c:	42ab      	cmp	r3, r5
 800ae2e:	dc26      	bgt.n	800ae7e <_printf_common+0x96>
 800ae30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ae34:	1e13      	subs	r3, r2, #0
 800ae36:	6822      	ldr	r2, [r4, #0]
 800ae38:	bf18      	it	ne
 800ae3a:	2301      	movne	r3, #1
 800ae3c:	0692      	lsls	r2, r2, #26
 800ae3e:	d42b      	bmi.n	800ae98 <_printf_common+0xb0>
 800ae40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ae44:	4649      	mov	r1, r9
 800ae46:	4638      	mov	r0, r7
 800ae48:	47c0      	blx	r8
 800ae4a:	3001      	adds	r0, #1
 800ae4c:	d01e      	beq.n	800ae8c <_printf_common+0xa4>
 800ae4e:	6823      	ldr	r3, [r4, #0]
 800ae50:	68e5      	ldr	r5, [r4, #12]
 800ae52:	6832      	ldr	r2, [r6, #0]
 800ae54:	f003 0306 	and.w	r3, r3, #6
 800ae58:	2b04      	cmp	r3, #4
 800ae5a:	bf08      	it	eq
 800ae5c:	1aad      	subeq	r5, r5, r2
 800ae5e:	68a3      	ldr	r3, [r4, #8]
 800ae60:	6922      	ldr	r2, [r4, #16]
 800ae62:	bf0c      	ite	eq
 800ae64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ae68:	2500      	movne	r5, #0
 800ae6a:	4293      	cmp	r3, r2
 800ae6c:	bfc4      	itt	gt
 800ae6e:	1a9b      	subgt	r3, r3, r2
 800ae70:	18ed      	addgt	r5, r5, r3
 800ae72:	2600      	movs	r6, #0
 800ae74:	341a      	adds	r4, #26
 800ae76:	42b5      	cmp	r5, r6
 800ae78:	d11a      	bne.n	800aeb0 <_printf_common+0xc8>
 800ae7a:	2000      	movs	r0, #0
 800ae7c:	e008      	b.n	800ae90 <_printf_common+0xa8>
 800ae7e:	2301      	movs	r3, #1
 800ae80:	4652      	mov	r2, sl
 800ae82:	4649      	mov	r1, r9
 800ae84:	4638      	mov	r0, r7
 800ae86:	47c0      	blx	r8
 800ae88:	3001      	adds	r0, #1
 800ae8a:	d103      	bne.n	800ae94 <_printf_common+0xac>
 800ae8c:	f04f 30ff 	mov.w	r0, #4294967295
 800ae90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae94:	3501      	adds	r5, #1
 800ae96:	e7c6      	b.n	800ae26 <_printf_common+0x3e>
 800ae98:	18e1      	adds	r1, r4, r3
 800ae9a:	1c5a      	adds	r2, r3, #1
 800ae9c:	2030      	movs	r0, #48	; 0x30
 800ae9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aea2:	4422      	add	r2, r4
 800aea4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aea8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aeac:	3302      	adds	r3, #2
 800aeae:	e7c7      	b.n	800ae40 <_printf_common+0x58>
 800aeb0:	2301      	movs	r3, #1
 800aeb2:	4622      	mov	r2, r4
 800aeb4:	4649      	mov	r1, r9
 800aeb6:	4638      	mov	r0, r7
 800aeb8:	47c0      	blx	r8
 800aeba:	3001      	adds	r0, #1
 800aebc:	d0e6      	beq.n	800ae8c <_printf_common+0xa4>
 800aebe:	3601      	adds	r6, #1
 800aec0:	e7d9      	b.n	800ae76 <_printf_common+0x8e>
	...

0800aec4 <_printf_i>:
 800aec4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aec8:	7e0f      	ldrb	r7, [r1, #24]
 800aeca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800aecc:	2f78      	cmp	r7, #120	; 0x78
 800aece:	4691      	mov	r9, r2
 800aed0:	4680      	mov	r8, r0
 800aed2:	460c      	mov	r4, r1
 800aed4:	469a      	mov	sl, r3
 800aed6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800aeda:	d807      	bhi.n	800aeec <_printf_i+0x28>
 800aedc:	2f62      	cmp	r7, #98	; 0x62
 800aede:	d80a      	bhi.n	800aef6 <_printf_i+0x32>
 800aee0:	2f00      	cmp	r7, #0
 800aee2:	f000 80d8 	beq.w	800b096 <_printf_i+0x1d2>
 800aee6:	2f58      	cmp	r7, #88	; 0x58
 800aee8:	f000 80a3 	beq.w	800b032 <_printf_i+0x16e>
 800aeec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aef0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800aef4:	e03a      	b.n	800af6c <_printf_i+0xa8>
 800aef6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800aefa:	2b15      	cmp	r3, #21
 800aefc:	d8f6      	bhi.n	800aeec <_printf_i+0x28>
 800aefe:	a101      	add	r1, pc, #4	; (adr r1, 800af04 <_printf_i+0x40>)
 800af00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800af04:	0800af5d 	.word	0x0800af5d
 800af08:	0800af71 	.word	0x0800af71
 800af0c:	0800aeed 	.word	0x0800aeed
 800af10:	0800aeed 	.word	0x0800aeed
 800af14:	0800aeed 	.word	0x0800aeed
 800af18:	0800aeed 	.word	0x0800aeed
 800af1c:	0800af71 	.word	0x0800af71
 800af20:	0800aeed 	.word	0x0800aeed
 800af24:	0800aeed 	.word	0x0800aeed
 800af28:	0800aeed 	.word	0x0800aeed
 800af2c:	0800aeed 	.word	0x0800aeed
 800af30:	0800b07d 	.word	0x0800b07d
 800af34:	0800afa1 	.word	0x0800afa1
 800af38:	0800b05f 	.word	0x0800b05f
 800af3c:	0800aeed 	.word	0x0800aeed
 800af40:	0800aeed 	.word	0x0800aeed
 800af44:	0800b09f 	.word	0x0800b09f
 800af48:	0800aeed 	.word	0x0800aeed
 800af4c:	0800afa1 	.word	0x0800afa1
 800af50:	0800aeed 	.word	0x0800aeed
 800af54:	0800aeed 	.word	0x0800aeed
 800af58:	0800b067 	.word	0x0800b067
 800af5c:	682b      	ldr	r3, [r5, #0]
 800af5e:	1d1a      	adds	r2, r3, #4
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	602a      	str	r2, [r5, #0]
 800af64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800af68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800af6c:	2301      	movs	r3, #1
 800af6e:	e0a3      	b.n	800b0b8 <_printf_i+0x1f4>
 800af70:	6820      	ldr	r0, [r4, #0]
 800af72:	6829      	ldr	r1, [r5, #0]
 800af74:	0606      	lsls	r6, r0, #24
 800af76:	f101 0304 	add.w	r3, r1, #4
 800af7a:	d50a      	bpl.n	800af92 <_printf_i+0xce>
 800af7c:	680e      	ldr	r6, [r1, #0]
 800af7e:	602b      	str	r3, [r5, #0]
 800af80:	2e00      	cmp	r6, #0
 800af82:	da03      	bge.n	800af8c <_printf_i+0xc8>
 800af84:	232d      	movs	r3, #45	; 0x2d
 800af86:	4276      	negs	r6, r6
 800af88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af8c:	485e      	ldr	r0, [pc, #376]	; (800b108 <_printf_i+0x244>)
 800af8e:	230a      	movs	r3, #10
 800af90:	e019      	b.n	800afc6 <_printf_i+0x102>
 800af92:	680e      	ldr	r6, [r1, #0]
 800af94:	602b      	str	r3, [r5, #0]
 800af96:	f010 0f40 	tst.w	r0, #64	; 0x40
 800af9a:	bf18      	it	ne
 800af9c:	b236      	sxthne	r6, r6
 800af9e:	e7ef      	b.n	800af80 <_printf_i+0xbc>
 800afa0:	682b      	ldr	r3, [r5, #0]
 800afa2:	6820      	ldr	r0, [r4, #0]
 800afa4:	1d19      	adds	r1, r3, #4
 800afa6:	6029      	str	r1, [r5, #0]
 800afa8:	0601      	lsls	r1, r0, #24
 800afaa:	d501      	bpl.n	800afb0 <_printf_i+0xec>
 800afac:	681e      	ldr	r6, [r3, #0]
 800afae:	e002      	b.n	800afb6 <_printf_i+0xf2>
 800afb0:	0646      	lsls	r6, r0, #25
 800afb2:	d5fb      	bpl.n	800afac <_printf_i+0xe8>
 800afb4:	881e      	ldrh	r6, [r3, #0]
 800afb6:	4854      	ldr	r0, [pc, #336]	; (800b108 <_printf_i+0x244>)
 800afb8:	2f6f      	cmp	r7, #111	; 0x6f
 800afba:	bf0c      	ite	eq
 800afbc:	2308      	moveq	r3, #8
 800afbe:	230a      	movne	r3, #10
 800afc0:	2100      	movs	r1, #0
 800afc2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800afc6:	6865      	ldr	r5, [r4, #4]
 800afc8:	60a5      	str	r5, [r4, #8]
 800afca:	2d00      	cmp	r5, #0
 800afcc:	bfa2      	ittt	ge
 800afce:	6821      	ldrge	r1, [r4, #0]
 800afd0:	f021 0104 	bicge.w	r1, r1, #4
 800afd4:	6021      	strge	r1, [r4, #0]
 800afd6:	b90e      	cbnz	r6, 800afdc <_printf_i+0x118>
 800afd8:	2d00      	cmp	r5, #0
 800afda:	d04d      	beq.n	800b078 <_printf_i+0x1b4>
 800afdc:	4615      	mov	r5, r2
 800afde:	fbb6 f1f3 	udiv	r1, r6, r3
 800afe2:	fb03 6711 	mls	r7, r3, r1, r6
 800afe6:	5dc7      	ldrb	r7, [r0, r7]
 800afe8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800afec:	4637      	mov	r7, r6
 800afee:	42bb      	cmp	r3, r7
 800aff0:	460e      	mov	r6, r1
 800aff2:	d9f4      	bls.n	800afde <_printf_i+0x11a>
 800aff4:	2b08      	cmp	r3, #8
 800aff6:	d10b      	bne.n	800b010 <_printf_i+0x14c>
 800aff8:	6823      	ldr	r3, [r4, #0]
 800affa:	07de      	lsls	r6, r3, #31
 800affc:	d508      	bpl.n	800b010 <_printf_i+0x14c>
 800affe:	6923      	ldr	r3, [r4, #16]
 800b000:	6861      	ldr	r1, [r4, #4]
 800b002:	4299      	cmp	r1, r3
 800b004:	bfde      	ittt	le
 800b006:	2330      	movle	r3, #48	; 0x30
 800b008:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b00c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b010:	1b52      	subs	r2, r2, r5
 800b012:	6122      	str	r2, [r4, #16]
 800b014:	f8cd a000 	str.w	sl, [sp]
 800b018:	464b      	mov	r3, r9
 800b01a:	aa03      	add	r2, sp, #12
 800b01c:	4621      	mov	r1, r4
 800b01e:	4640      	mov	r0, r8
 800b020:	f7ff fee2 	bl	800ade8 <_printf_common>
 800b024:	3001      	adds	r0, #1
 800b026:	d14c      	bne.n	800b0c2 <_printf_i+0x1fe>
 800b028:	f04f 30ff 	mov.w	r0, #4294967295
 800b02c:	b004      	add	sp, #16
 800b02e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b032:	4835      	ldr	r0, [pc, #212]	; (800b108 <_printf_i+0x244>)
 800b034:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b038:	6829      	ldr	r1, [r5, #0]
 800b03a:	6823      	ldr	r3, [r4, #0]
 800b03c:	f851 6b04 	ldr.w	r6, [r1], #4
 800b040:	6029      	str	r1, [r5, #0]
 800b042:	061d      	lsls	r5, r3, #24
 800b044:	d514      	bpl.n	800b070 <_printf_i+0x1ac>
 800b046:	07df      	lsls	r7, r3, #31
 800b048:	bf44      	itt	mi
 800b04a:	f043 0320 	orrmi.w	r3, r3, #32
 800b04e:	6023      	strmi	r3, [r4, #0]
 800b050:	b91e      	cbnz	r6, 800b05a <_printf_i+0x196>
 800b052:	6823      	ldr	r3, [r4, #0]
 800b054:	f023 0320 	bic.w	r3, r3, #32
 800b058:	6023      	str	r3, [r4, #0]
 800b05a:	2310      	movs	r3, #16
 800b05c:	e7b0      	b.n	800afc0 <_printf_i+0xfc>
 800b05e:	6823      	ldr	r3, [r4, #0]
 800b060:	f043 0320 	orr.w	r3, r3, #32
 800b064:	6023      	str	r3, [r4, #0]
 800b066:	2378      	movs	r3, #120	; 0x78
 800b068:	4828      	ldr	r0, [pc, #160]	; (800b10c <_printf_i+0x248>)
 800b06a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b06e:	e7e3      	b.n	800b038 <_printf_i+0x174>
 800b070:	0659      	lsls	r1, r3, #25
 800b072:	bf48      	it	mi
 800b074:	b2b6      	uxthmi	r6, r6
 800b076:	e7e6      	b.n	800b046 <_printf_i+0x182>
 800b078:	4615      	mov	r5, r2
 800b07a:	e7bb      	b.n	800aff4 <_printf_i+0x130>
 800b07c:	682b      	ldr	r3, [r5, #0]
 800b07e:	6826      	ldr	r6, [r4, #0]
 800b080:	6961      	ldr	r1, [r4, #20]
 800b082:	1d18      	adds	r0, r3, #4
 800b084:	6028      	str	r0, [r5, #0]
 800b086:	0635      	lsls	r5, r6, #24
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	d501      	bpl.n	800b090 <_printf_i+0x1cc>
 800b08c:	6019      	str	r1, [r3, #0]
 800b08e:	e002      	b.n	800b096 <_printf_i+0x1d2>
 800b090:	0670      	lsls	r0, r6, #25
 800b092:	d5fb      	bpl.n	800b08c <_printf_i+0x1c8>
 800b094:	8019      	strh	r1, [r3, #0]
 800b096:	2300      	movs	r3, #0
 800b098:	6123      	str	r3, [r4, #16]
 800b09a:	4615      	mov	r5, r2
 800b09c:	e7ba      	b.n	800b014 <_printf_i+0x150>
 800b09e:	682b      	ldr	r3, [r5, #0]
 800b0a0:	1d1a      	adds	r2, r3, #4
 800b0a2:	602a      	str	r2, [r5, #0]
 800b0a4:	681d      	ldr	r5, [r3, #0]
 800b0a6:	6862      	ldr	r2, [r4, #4]
 800b0a8:	2100      	movs	r1, #0
 800b0aa:	4628      	mov	r0, r5
 800b0ac:	f7f5 f8d0 	bl	8000250 <memchr>
 800b0b0:	b108      	cbz	r0, 800b0b6 <_printf_i+0x1f2>
 800b0b2:	1b40      	subs	r0, r0, r5
 800b0b4:	6060      	str	r0, [r4, #4]
 800b0b6:	6863      	ldr	r3, [r4, #4]
 800b0b8:	6123      	str	r3, [r4, #16]
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b0c0:	e7a8      	b.n	800b014 <_printf_i+0x150>
 800b0c2:	6923      	ldr	r3, [r4, #16]
 800b0c4:	462a      	mov	r2, r5
 800b0c6:	4649      	mov	r1, r9
 800b0c8:	4640      	mov	r0, r8
 800b0ca:	47d0      	blx	sl
 800b0cc:	3001      	adds	r0, #1
 800b0ce:	d0ab      	beq.n	800b028 <_printf_i+0x164>
 800b0d0:	6823      	ldr	r3, [r4, #0]
 800b0d2:	079b      	lsls	r3, r3, #30
 800b0d4:	d413      	bmi.n	800b0fe <_printf_i+0x23a>
 800b0d6:	68e0      	ldr	r0, [r4, #12]
 800b0d8:	9b03      	ldr	r3, [sp, #12]
 800b0da:	4298      	cmp	r0, r3
 800b0dc:	bfb8      	it	lt
 800b0de:	4618      	movlt	r0, r3
 800b0e0:	e7a4      	b.n	800b02c <_printf_i+0x168>
 800b0e2:	2301      	movs	r3, #1
 800b0e4:	4632      	mov	r2, r6
 800b0e6:	4649      	mov	r1, r9
 800b0e8:	4640      	mov	r0, r8
 800b0ea:	47d0      	blx	sl
 800b0ec:	3001      	adds	r0, #1
 800b0ee:	d09b      	beq.n	800b028 <_printf_i+0x164>
 800b0f0:	3501      	adds	r5, #1
 800b0f2:	68e3      	ldr	r3, [r4, #12]
 800b0f4:	9903      	ldr	r1, [sp, #12]
 800b0f6:	1a5b      	subs	r3, r3, r1
 800b0f8:	42ab      	cmp	r3, r5
 800b0fa:	dcf2      	bgt.n	800b0e2 <_printf_i+0x21e>
 800b0fc:	e7eb      	b.n	800b0d6 <_printf_i+0x212>
 800b0fe:	2500      	movs	r5, #0
 800b100:	f104 0619 	add.w	r6, r4, #25
 800b104:	e7f5      	b.n	800b0f2 <_printf_i+0x22e>
 800b106:	bf00      	nop
 800b108:	0800f6ae 	.word	0x0800f6ae
 800b10c:	0800f6bf 	.word	0x0800f6bf

0800b110 <_scanf_float>:
 800b110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b114:	b087      	sub	sp, #28
 800b116:	4617      	mov	r7, r2
 800b118:	9303      	str	r3, [sp, #12]
 800b11a:	688b      	ldr	r3, [r1, #8]
 800b11c:	1e5a      	subs	r2, r3, #1
 800b11e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b122:	bf83      	ittte	hi
 800b124:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b128:	195b      	addhi	r3, r3, r5
 800b12a:	9302      	strhi	r3, [sp, #8]
 800b12c:	2300      	movls	r3, #0
 800b12e:	bf86      	itte	hi
 800b130:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b134:	608b      	strhi	r3, [r1, #8]
 800b136:	9302      	strls	r3, [sp, #8]
 800b138:	680b      	ldr	r3, [r1, #0]
 800b13a:	468b      	mov	fp, r1
 800b13c:	2500      	movs	r5, #0
 800b13e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800b142:	f84b 3b1c 	str.w	r3, [fp], #28
 800b146:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b14a:	4680      	mov	r8, r0
 800b14c:	460c      	mov	r4, r1
 800b14e:	465e      	mov	r6, fp
 800b150:	46aa      	mov	sl, r5
 800b152:	46a9      	mov	r9, r5
 800b154:	9501      	str	r5, [sp, #4]
 800b156:	68a2      	ldr	r2, [r4, #8]
 800b158:	b152      	cbz	r2, 800b170 <_scanf_float+0x60>
 800b15a:	683b      	ldr	r3, [r7, #0]
 800b15c:	781b      	ldrb	r3, [r3, #0]
 800b15e:	2b4e      	cmp	r3, #78	; 0x4e
 800b160:	d864      	bhi.n	800b22c <_scanf_float+0x11c>
 800b162:	2b40      	cmp	r3, #64	; 0x40
 800b164:	d83c      	bhi.n	800b1e0 <_scanf_float+0xd0>
 800b166:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800b16a:	b2c8      	uxtb	r0, r1
 800b16c:	280e      	cmp	r0, #14
 800b16e:	d93a      	bls.n	800b1e6 <_scanf_float+0xd6>
 800b170:	f1b9 0f00 	cmp.w	r9, #0
 800b174:	d003      	beq.n	800b17e <_scanf_float+0x6e>
 800b176:	6823      	ldr	r3, [r4, #0]
 800b178:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b17c:	6023      	str	r3, [r4, #0]
 800b17e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b182:	f1ba 0f01 	cmp.w	sl, #1
 800b186:	f200 8113 	bhi.w	800b3b0 <_scanf_float+0x2a0>
 800b18a:	455e      	cmp	r6, fp
 800b18c:	f200 8105 	bhi.w	800b39a <_scanf_float+0x28a>
 800b190:	2501      	movs	r5, #1
 800b192:	4628      	mov	r0, r5
 800b194:	b007      	add	sp, #28
 800b196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b19a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800b19e:	2a0d      	cmp	r2, #13
 800b1a0:	d8e6      	bhi.n	800b170 <_scanf_float+0x60>
 800b1a2:	a101      	add	r1, pc, #4	; (adr r1, 800b1a8 <_scanf_float+0x98>)
 800b1a4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b1a8:	0800b2e7 	.word	0x0800b2e7
 800b1ac:	0800b171 	.word	0x0800b171
 800b1b0:	0800b171 	.word	0x0800b171
 800b1b4:	0800b171 	.word	0x0800b171
 800b1b8:	0800b347 	.word	0x0800b347
 800b1bc:	0800b31f 	.word	0x0800b31f
 800b1c0:	0800b171 	.word	0x0800b171
 800b1c4:	0800b171 	.word	0x0800b171
 800b1c8:	0800b2f5 	.word	0x0800b2f5
 800b1cc:	0800b171 	.word	0x0800b171
 800b1d0:	0800b171 	.word	0x0800b171
 800b1d4:	0800b171 	.word	0x0800b171
 800b1d8:	0800b171 	.word	0x0800b171
 800b1dc:	0800b2ad 	.word	0x0800b2ad
 800b1e0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800b1e4:	e7db      	b.n	800b19e <_scanf_float+0x8e>
 800b1e6:	290e      	cmp	r1, #14
 800b1e8:	d8c2      	bhi.n	800b170 <_scanf_float+0x60>
 800b1ea:	a001      	add	r0, pc, #4	; (adr r0, 800b1f0 <_scanf_float+0xe0>)
 800b1ec:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b1f0:	0800b29f 	.word	0x0800b29f
 800b1f4:	0800b171 	.word	0x0800b171
 800b1f8:	0800b29f 	.word	0x0800b29f
 800b1fc:	0800b333 	.word	0x0800b333
 800b200:	0800b171 	.word	0x0800b171
 800b204:	0800b24d 	.word	0x0800b24d
 800b208:	0800b289 	.word	0x0800b289
 800b20c:	0800b289 	.word	0x0800b289
 800b210:	0800b289 	.word	0x0800b289
 800b214:	0800b289 	.word	0x0800b289
 800b218:	0800b289 	.word	0x0800b289
 800b21c:	0800b289 	.word	0x0800b289
 800b220:	0800b289 	.word	0x0800b289
 800b224:	0800b289 	.word	0x0800b289
 800b228:	0800b289 	.word	0x0800b289
 800b22c:	2b6e      	cmp	r3, #110	; 0x6e
 800b22e:	d809      	bhi.n	800b244 <_scanf_float+0x134>
 800b230:	2b60      	cmp	r3, #96	; 0x60
 800b232:	d8b2      	bhi.n	800b19a <_scanf_float+0x8a>
 800b234:	2b54      	cmp	r3, #84	; 0x54
 800b236:	d077      	beq.n	800b328 <_scanf_float+0x218>
 800b238:	2b59      	cmp	r3, #89	; 0x59
 800b23a:	d199      	bne.n	800b170 <_scanf_float+0x60>
 800b23c:	2d07      	cmp	r5, #7
 800b23e:	d197      	bne.n	800b170 <_scanf_float+0x60>
 800b240:	2508      	movs	r5, #8
 800b242:	e029      	b.n	800b298 <_scanf_float+0x188>
 800b244:	2b74      	cmp	r3, #116	; 0x74
 800b246:	d06f      	beq.n	800b328 <_scanf_float+0x218>
 800b248:	2b79      	cmp	r3, #121	; 0x79
 800b24a:	e7f6      	b.n	800b23a <_scanf_float+0x12a>
 800b24c:	6821      	ldr	r1, [r4, #0]
 800b24e:	05c8      	lsls	r0, r1, #23
 800b250:	d51a      	bpl.n	800b288 <_scanf_float+0x178>
 800b252:	9b02      	ldr	r3, [sp, #8]
 800b254:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800b258:	6021      	str	r1, [r4, #0]
 800b25a:	f109 0901 	add.w	r9, r9, #1
 800b25e:	b11b      	cbz	r3, 800b268 <_scanf_float+0x158>
 800b260:	3b01      	subs	r3, #1
 800b262:	3201      	adds	r2, #1
 800b264:	9302      	str	r3, [sp, #8]
 800b266:	60a2      	str	r2, [r4, #8]
 800b268:	68a3      	ldr	r3, [r4, #8]
 800b26a:	3b01      	subs	r3, #1
 800b26c:	60a3      	str	r3, [r4, #8]
 800b26e:	6923      	ldr	r3, [r4, #16]
 800b270:	3301      	adds	r3, #1
 800b272:	6123      	str	r3, [r4, #16]
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	3b01      	subs	r3, #1
 800b278:	2b00      	cmp	r3, #0
 800b27a:	607b      	str	r3, [r7, #4]
 800b27c:	f340 8084 	ble.w	800b388 <_scanf_float+0x278>
 800b280:	683b      	ldr	r3, [r7, #0]
 800b282:	3301      	adds	r3, #1
 800b284:	603b      	str	r3, [r7, #0]
 800b286:	e766      	b.n	800b156 <_scanf_float+0x46>
 800b288:	eb1a 0f05 	cmn.w	sl, r5
 800b28c:	f47f af70 	bne.w	800b170 <_scanf_float+0x60>
 800b290:	6822      	ldr	r2, [r4, #0]
 800b292:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800b296:	6022      	str	r2, [r4, #0]
 800b298:	f806 3b01 	strb.w	r3, [r6], #1
 800b29c:	e7e4      	b.n	800b268 <_scanf_float+0x158>
 800b29e:	6822      	ldr	r2, [r4, #0]
 800b2a0:	0610      	lsls	r0, r2, #24
 800b2a2:	f57f af65 	bpl.w	800b170 <_scanf_float+0x60>
 800b2a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b2aa:	e7f4      	b.n	800b296 <_scanf_float+0x186>
 800b2ac:	f1ba 0f00 	cmp.w	sl, #0
 800b2b0:	d10e      	bne.n	800b2d0 <_scanf_float+0x1c0>
 800b2b2:	f1b9 0f00 	cmp.w	r9, #0
 800b2b6:	d10e      	bne.n	800b2d6 <_scanf_float+0x1c6>
 800b2b8:	6822      	ldr	r2, [r4, #0]
 800b2ba:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b2be:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b2c2:	d108      	bne.n	800b2d6 <_scanf_float+0x1c6>
 800b2c4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b2c8:	6022      	str	r2, [r4, #0]
 800b2ca:	f04f 0a01 	mov.w	sl, #1
 800b2ce:	e7e3      	b.n	800b298 <_scanf_float+0x188>
 800b2d0:	f1ba 0f02 	cmp.w	sl, #2
 800b2d4:	d055      	beq.n	800b382 <_scanf_float+0x272>
 800b2d6:	2d01      	cmp	r5, #1
 800b2d8:	d002      	beq.n	800b2e0 <_scanf_float+0x1d0>
 800b2da:	2d04      	cmp	r5, #4
 800b2dc:	f47f af48 	bne.w	800b170 <_scanf_float+0x60>
 800b2e0:	3501      	adds	r5, #1
 800b2e2:	b2ed      	uxtb	r5, r5
 800b2e4:	e7d8      	b.n	800b298 <_scanf_float+0x188>
 800b2e6:	f1ba 0f01 	cmp.w	sl, #1
 800b2ea:	f47f af41 	bne.w	800b170 <_scanf_float+0x60>
 800b2ee:	f04f 0a02 	mov.w	sl, #2
 800b2f2:	e7d1      	b.n	800b298 <_scanf_float+0x188>
 800b2f4:	b97d      	cbnz	r5, 800b316 <_scanf_float+0x206>
 800b2f6:	f1b9 0f00 	cmp.w	r9, #0
 800b2fa:	f47f af3c 	bne.w	800b176 <_scanf_float+0x66>
 800b2fe:	6822      	ldr	r2, [r4, #0]
 800b300:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b304:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b308:	f47f af39 	bne.w	800b17e <_scanf_float+0x6e>
 800b30c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b310:	6022      	str	r2, [r4, #0]
 800b312:	2501      	movs	r5, #1
 800b314:	e7c0      	b.n	800b298 <_scanf_float+0x188>
 800b316:	2d03      	cmp	r5, #3
 800b318:	d0e2      	beq.n	800b2e0 <_scanf_float+0x1d0>
 800b31a:	2d05      	cmp	r5, #5
 800b31c:	e7de      	b.n	800b2dc <_scanf_float+0x1cc>
 800b31e:	2d02      	cmp	r5, #2
 800b320:	f47f af26 	bne.w	800b170 <_scanf_float+0x60>
 800b324:	2503      	movs	r5, #3
 800b326:	e7b7      	b.n	800b298 <_scanf_float+0x188>
 800b328:	2d06      	cmp	r5, #6
 800b32a:	f47f af21 	bne.w	800b170 <_scanf_float+0x60>
 800b32e:	2507      	movs	r5, #7
 800b330:	e7b2      	b.n	800b298 <_scanf_float+0x188>
 800b332:	6822      	ldr	r2, [r4, #0]
 800b334:	0591      	lsls	r1, r2, #22
 800b336:	f57f af1b 	bpl.w	800b170 <_scanf_float+0x60>
 800b33a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800b33e:	6022      	str	r2, [r4, #0]
 800b340:	f8cd 9004 	str.w	r9, [sp, #4]
 800b344:	e7a8      	b.n	800b298 <_scanf_float+0x188>
 800b346:	6822      	ldr	r2, [r4, #0]
 800b348:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800b34c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800b350:	d006      	beq.n	800b360 <_scanf_float+0x250>
 800b352:	0550      	lsls	r0, r2, #21
 800b354:	f57f af0c 	bpl.w	800b170 <_scanf_float+0x60>
 800b358:	f1b9 0f00 	cmp.w	r9, #0
 800b35c:	f43f af0f 	beq.w	800b17e <_scanf_float+0x6e>
 800b360:	0591      	lsls	r1, r2, #22
 800b362:	bf58      	it	pl
 800b364:	9901      	ldrpl	r1, [sp, #4]
 800b366:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b36a:	bf58      	it	pl
 800b36c:	eba9 0101 	subpl.w	r1, r9, r1
 800b370:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800b374:	bf58      	it	pl
 800b376:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b37a:	6022      	str	r2, [r4, #0]
 800b37c:	f04f 0900 	mov.w	r9, #0
 800b380:	e78a      	b.n	800b298 <_scanf_float+0x188>
 800b382:	f04f 0a03 	mov.w	sl, #3
 800b386:	e787      	b.n	800b298 <_scanf_float+0x188>
 800b388:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b38c:	4639      	mov	r1, r7
 800b38e:	4640      	mov	r0, r8
 800b390:	4798      	blx	r3
 800b392:	2800      	cmp	r0, #0
 800b394:	f43f aedf 	beq.w	800b156 <_scanf_float+0x46>
 800b398:	e6ea      	b.n	800b170 <_scanf_float+0x60>
 800b39a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b39e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b3a2:	463a      	mov	r2, r7
 800b3a4:	4640      	mov	r0, r8
 800b3a6:	4798      	blx	r3
 800b3a8:	6923      	ldr	r3, [r4, #16]
 800b3aa:	3b01      	subs	r3, #1
 800b3ac:	6123      	str	r3, [r4, #16]
 800b3ae:	e6ec      	b.n	800b18a <_scanf_float+0x7a>
 800b3b0:	1e6b      	subs	r3, r5, #1
 800b3b2:	2b06      	cmp	r3, #6
 800b3b4:	d825      	bhi.n	800b402 <_scanf_float+0x2f2>
 800b3b6:	2d02      	cmp	r5, #2
 800b3b8:	d836      	bhi.n	800b428 <_scanf_float+0x318>
 800b3ba:	455e      	cmp	r6, fp
 800b3bc:	f67f aee8 	bls.w	800b190 <_scanf_float+0x80>
 800b3c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b3c4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b3c8:	463a      	mov	r2, r7
 800b3ca:	4640      	mov	r0, r8
 800b3cc:	4798      	blx	r3
 800b3ce:	6923      	ldr	r3, [r4, #16]
 800b3d0:	3b01      	subs	r3, #1
 800b3d2:	6123      	str	r3, [r4, #16]
 800b3d4:	e7f1      	b.n	800b3ba <_scanf_float+0x2aa>
 800b3d6:	9802      	ldr	r0, [sp, #8]
 800b3d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b3dc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800b3e0:	9002      	str	r0, [sp, #8]
 800b3e2:	463a      	mov	r2, r7
 800b3e4:	4640      	mov	r0, r8
 800b3e6:	4798      	blx	r3
 800b3e8:	6923      	ldr	r3, [r4, #16]
 800b3ea:	3b01      	subs	r3, #1
 800b3ec:	6123      	str	r3, [r4, #16]
 800b3ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b3f2:	fa5f fa8a 	uxtb.w	sl, sl
 800b3f6:	f1ba 0f02 	cmp.w	sl, #2
 800b3fa:	d1ec      	bne.n	800b3d6 <_scanf_float+0x2c6>
 800b3fc:	3d03      	subs	r5, #3
 800b3fe:	b2ed      	uxtb	r5, r5
 800b400:	1b76      	subs	r6, r6, r5
 800b402:	6823      	ldr	r3, [r4, #0]
 800b404:	05da      	lsls	r2, r3, #23
 800b406:	d52f      	bpl.n	800b468 <_scanf_float+0x358>
 800b408:	055b      	lsls	r3, r3, #21
 800b40a:	d510      	bpl.n	800b42e <_scanf_float+0x31e>
 800b40c:	455e      	cmp	r6, fp
 800b40e:	f67f aebf 	bls.w	800b190 <_scanf_float+0x80>
 800b412:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b416:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b41a:	463a      	mov	r2, r7
 800b41c:	4640      	mov	r0, r8
 800b41e:	4798      	blx	r3
 800b420:	6923      	ldr	r3, [r4, #16]
 800b422:	3b01      	subs	r3, #1
 800b424:	6123      	str	r3, [r4, #16]
 800b426:	e7f1      	b.n	800b40c <_scanf_float+0x2fc>
 800b428:	46aa      	mov	sl, r5
 800b42a:	9602      	str	r6, [sp, #8]
 800b42c:	e7df      	b.n	800b3ee <_scanf_float+0x2de>
 800b42e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b432:	6923      	ldr	r3, [r4, #16]
 800b434:	2965      	cmp	r1, #101	; 0x65
 800b436:	f103 33ff 	add.w	r3, r3, #4294967295
 800b43a:	f106 35ff 	add.w	r5, r6, #4294967295
 800b43e:	6123      	str	r3, [r4, #16]
 800b440:	d00c      	beq.n	800b45c <_scanf_float+0x34c>
 800b442:	2945      	cmp	r1, #69	; 0x45
 800b444:	d00a      	beq.n	800b45c <_scanf_float+0x34c>
 800b446:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b44a:	463a      	mov	r2, r7
 800b44c:	4640      	mov	r0, r8
 800b44e:	4798      	blx	r3
 800b450:	6923      	ldr	r3, [r4, #16]
 800b452:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b456:	3b01      	subs	r3, #1
 800b458:	1eb5      	subs	r5, r6, #2
 800b45a:	6123      	str	r3, [r4, #16]
 800b45c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b460:	463a      	mov	r2, r7
 800b462:	4640      	mov	r0, r8
 800b464:	4798      	blx	r3
 800b466:	462e      	mov	r6, r5
 800b468:	6825      	ldr	r5, [r4, #0]
 800b46a:	f015 0510 	ands.w	r5, r5, #16
 800b46e:	d159      	bne.n	800b524 <_scanf_float+0x414>
 800b470:	7035      	strb	r5, [r6, #0]
 800b472:	6823      	ldr	r3, [r4, #0]
 800b474:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b478:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b47c:	d11b      	bne.n	800b4b6 <_scanf_float+0x3a6>
 800b47e:	9b01      	ldr	r3, [sp, #4]
 800b480:	454b      	cmp	r3, r9
 800b482:	eba3 0209 	sub.w	r2, r3, r9
 800b486:	d123      	bne.n	800b4d0 <_scanf_float+0x3c0>
 800b488:	2200      	movs	r2, #0
 800b48a:	4659      	mov	r1, fp
 800b48c:	4640      	mov	r0, r8
 800b48e:	f000 fecd 	bl	800c22c <_strtod_r>
 800b492:	6822      	ldr	r2, [r4, #0]
 800b494:	9b03      	ldr	r3, [sp, #12]
 800b496:	f012 0f02 	tst.w	r2, #2
 800b49a:	ec57 6b10 	vmov	r6, r7, d0
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	d021      	beq.n	800b4e6 <_scanf_float+0x3d6>
 800b4a2:	9903      	ldr	r1, [sp, #12]
 800b4a4:	1d1a      	adds	r2, r3, #4
 800b4a6:	600a      	str	r2, [r1, #0]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	e9c3 6700 	strd	r6, r7, [r3]
 800b4ae:	68e3      	ldr	r3, [r4, #12]
 800b4b0:	3301      	adds	r3, #1
 800b4b2:	60e3      	str	r3, [r4, #12]
 800b4b4:	e66d      	b.n	800b192 <_scanf_float+0x82>
 800b4b6:	9b04      	ldr	r3, [sp, #16]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d0e5      	beq.n	800b488 <_scanf_float+0x378>
 800b4bc:	9905      	ldr	r1, [sp, #20]
 800b4be:	230a      	movs	r3, #10
 800b4c0:	462a      	mov	r2, r5
 800b4c2:	3101      	adds	r1, #1
 800b4c4:	4640      	mov	r0, r8
 800b4c6:	f000 ffa1 	bl	800c40c <_strtol_r>
 800b4ca:	9b04      	ldr	r3, [sp, #16]
 800b4cc:	9e05      	ldr	r6, [sp, #20]
 800b4ce:	1ac2      	subs	r2, r0, r3
 800b4d0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800b4d4:	429e      	cmp	r6, r3
 800b4d6:	bf28      	it	cs
 800b4d8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800b4dc:	4912      	ldr	r1, [pc, #72]	; (800b528 <_scanf_float+0x418>)
 800b4de:	4630      	mov	r0, r6
 800b4e0:	f000 f860 	bl	800b5a4 <siprintf>
 800b4e4:	e7d0      	b.n	800b488 <_scanf_float+0x378>
 800b4e6:	9903      	ldr	r1, [sp, #12]
 800b4e8:	f012 0f04 	tst.w	r2, #4
 800b4ec:	f103 0204 	add.w	r2, r3, #4
 800b4f0:	600a      	str	r2, [r1, #0]
 800b4f2:	d1d9      	bne.n	800b4a8 <_scanf_float+0x398>
 800b4f4:	f8d3 8000 	ldr.w	r8, [r3]
 800b4f8:	ee10 2a10 	vmov	r2, s0
 800b4fc:	ee10 0a10 	vmov	r0, s0
 800b500:	463b      	mov	r3, r7
 800b502:	4639      	mov	r1, r7
 800b504:	f7f5 fb4a 	bl	8000b9c <__aeabi_dcmpun>
 800b508:	b128      	cbz	r0, 800b516 <_scanf_float+0x406>
 800b50a:	4808      	ldr	r0, [pc, #32]	; (800b52c <_scanf_float+0x41c>)
 800b50c:	f000 f810 	bl	800b530 <nanf>
 800b510:	ed88 0a00 	vstr	s0, [r8]
 800b514:	e7cb      	b.n	800b4ae <_scanf_float+0x39e>
 800b516:	4630      	mov	r0, r6
 800b518:	4639      	mov	r1, r7
 800b51a:	f7f5 fb9d 	bl	8000c58 <__aeabi_d2f>
 800b51e:	f8c8 0000 	str.w	r0, [r8]
 800b522:	e7c4      	b.n	800b4ae <_scanf_float+0x39e>
 800b524:	2500      	movs	r5, #0
 800b526:	e634      	b.n	800b192 <_scanf_float+0x82>
 800b528:	0800f6d0 	.word	0x0800f6d0
 800b52c:	0800f7d7 	.word	0x0800f7d7

0800b530 <nanf>:
 800b530:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b538 <nanf+0x8>
 800b534:	4770      	bx	lr
 800b536:	bf00      	nop
 800b538:	7fc00000 	.word	0x7fc00000

0800b53c <sniprintf>:
 800b53c:	b40c      	push	{r2, r3}
 800b53e:	b530      	push	{r4, r5, lr}
 800b540:	4b17      	ldr	r3, [pc, #92]	; (800b5a0 <sniprintf+0x64>)
 800b542:	1e0c      	subs	r4, r1, #0
 800b544:	681d      	ldr	r5, [r3, #0]
 800b546:	b09d      	sub	sp, #116	; 0x74
 800b548:	da08      	bge.n	800b55c <sniprintf+0x20>
 800b54a:	238b      	movs	r3, #139	; 0x8b
 800b54c:	602b      	str	r3, [r5, #0]
 800b54e:	f04f 30ff 	mov.w	r0, #4294967295
 800b552:	b01d      	add	sp, #116	; 0x74
 800b554:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b558:	b002      	add	sp, #8
 800b55a:	4770      	bx	lr
 800b55c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b560:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b564:	bf14      	ite	ne
 800b566:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b56a:	4623      	moveq	r3, r4
 800b56c:	9304      	str	r3, [sp, #16]
 800b56e:	9307      	str	r3, [sp, #28]
 800b570:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b574:	9002      	str	r0, [sp, #8]
 800b576:	9006      	str	r0, [sp, #24]
 800b578:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b57c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b57e:	ab21      	add	r3, sp, #132	; 0x84
 800b580:	a902      	add	r1, sp, #8
 800b582:	4628      	mov	r0, r5
 800b584:	9301      	str	r3, [sp, #4]
 800b586:	f002 ffa7 	bl	800e4d8 <_svfiprintf_r>
 800b58a:	1c43      	adds	r3, r0, #1
 800b58c:	bfbc      	itt	lt
 800b58e:	238b      	movlt	r3, #139	; 0x8b
 800b590:	602b      	strlt	r3, [r5, #0]
 800b592:	2c00      	cmp	r4, #0
 800b594:	d0dd      	beq.n	800b552 <sniprintf+0x16>
 800b596:	9b02      	ldr	r3, [sp, #8]
 800b598:	2200      	movs	r2, #0
 800b59a:	701a      	strb	r2, [r3, #0]
 800b59c:	e7d9      	b.n	800b552 <sniprintf+0x16>
 800b59e:	bf00      	nop
 800b5a0:	20000038 	.word	0x20000038

0800b5a4 <siprintf>:
 800b5a4:	b40e      	push	{r1, r2, r3}
 800b5a6:	b500      	push	{lr}
 800b5a8:	b09c      	sub	sp, #112	; 0x70
 800b5aa:	ab1d      	add	r3, sp, #116	; 0x74
 800b5ac:	9002      	str	r0, [sp, #8]
 800b5ae:	9006      	str	r0, [sp, #24]
 800b5b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b5b4:	4809      	ldr	r0, [pc, #36]	; (800b5dc <siprintf+0x38>)
 800b5b6:	9107      	str	r1, [sp, #28]
 800b5b8:	9104      	str	r1, [sp, #16]
 800b5ba:	4909      	ldr	r1, [pc, #36]	; (800b5e0 <siprintf+0x3c>)
 800b5bc:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5c0:	9105      	str	r1, [sp, #20]
 800b5c2:	6800      	ldr	r0, [r0, #0]
 800b5c4:	9301      	str	r3, [sp, #4]
 800b5c6:	a902      	add	r1, sp, #8
 800b5c8:	f002 ff86 	bl	800e4d8 <_svfiprintf_r>
 800b5cc:	9b02      	ldr	r3, [sp, #8]
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	701a      	strb	r2, [r3, #0]
 800b5d2:	b01c      	add	sp, #112	; 0x70
 800b5d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b5d8:	b003      	add	sp, #12
 800b5da:	4770      	bx	lr
 800b5dc:	20000038 	.word	0x20000038
 800b5e0:	ffff0208 	.word	0xffff0208

0800b5e4 <sulp>:
 800b5e4:	b570      	push	{r4, r5, r6, lr}
 800b5e6:	4604      	mov	r4, r0
 800b5e8:	460d      	mov	r5, r1
 800b5ea:	ec45 4b10 	vmov	d0, r4, r5
 800b5ee:	4616      	mov	r6, r2
 800b5f0:	f002 fcd0 	bl	800df94 <__ulp>
 800b5f4:	ec51 0b10 	vmov	r0, r1, d0
 800b5f8:	b17e      	cbz	r6, 800b61a <sulp+0x36>
 800b5fa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b5fe:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b602:	2b00      	cmp	r3, #0
 800b604:	dd09      	ble.n	800b61a <sulp+0x36>
 800b606:	051b      	lsls	r3, r3, #20
 800b608:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800b60c:	2400      	movs	r4, #0
 800b60e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800b612:	4622      	mov	r2, r4
 800b614:	462b      	mov	r3, r5
 800b616:	f7f5 f827 	bl	8000668 <__aeabi_dmul>
 800b61a:	bd70      	pop	{r4, r5, r6, pc}
 800b61c:	0000      	movs	r0, r0
	...

0800b620 <_strtod_l>:
 800b620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b624:	ed2d 8b02 	vpush	{d8}
 800b628:	b09d      	sub	sp, #116	; 0x74
 800b62a:	461f      	mov	r7, r3
 800b62c:	2300      	movs	r3, #0
 800b62e:	9318      	str	r3, [sp, #96]	; 0x60
 800b630:	4ba2      	ldr	r3, [pc, #648]	; (800b8bc <_strtod_l+0x29c>)
 800b632:	9213      	str	r2, [sp, #76]	; 0x4c
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	9305      	str	r3, [sp, #20]
 800b638:	4604      	mov	r4, r0
 800b63a:	4618      	mov	r0, r3
 800b63c:	4688      	mov	r8, r1
 800b63e:	f7f4 fdf9 	bl	8000234 <strlen>
 800b642:	f04f 0a00 	mov.w	sl, #0
 800b646:	4605      	mov	r5, r0
 800b648:	f04f 0b00 	mov.w	fp, #0
 800b64c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b650:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b652:	781a      	ldrb	r2, [r3, #0]
 800b654:	2a2b      	cmp	r2, #43	; 0x2b
 800b656:	d04e      	beq.n	800b6f6 <_strtod_l+0xd6>
 800b658:	d83b      	bhi.n	800b6d2 <_strtod_l+0xb2>
 800b65a:	2a0d      	cmp	r2, #13
 800b65c:	d834      	bhi.n	800b6c8 <_strtod_l+0xa8>
 800b65e:	2a08      	cmp	r2, #8
 800b660:	d834      	bhi.n	800b6cc <_strtod_l+0xac>
 800b662:	2a00      	cmp	r2, #0
 800b664:	d03e      	beq.n	800b6e4 <_strtod_l+0xc4>
 800b666:	2300      	movs	r3, #0
 800b668:	930a      	str	r3, [sp, #40]	; 0x28
 800b66a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800b66c:	7833      	ldrb	r3, [r6, #0]
 800b66e:	2b30      	cmp	r3, #48	; 0x30
 800b670:	f040 80b0 	bne.w	800b7d4 <_strtod_l+0x1b4>
 800b674:	7873      	ldrb	r3, [r6, #1]
 800b676:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b67a:	2b58      	cmp	r3, #88	; 0x58
 800b67c:	d168      	bne.n	800b750 <_strtod_l+0x130>
 800b67e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b680:	9301      	str	r3, [sp, #4]
 800b682:	ab18      	add	r3, sp, #96	; 0x60
 800b684:	9702      	str	r7, [sp, #8]
 800b686:	9300      	str	r3, [sp, #0]
 800b688:	4a8d      	ldr	r2, [pc, #564]	; (800b8c0 <_strtod_l+0x2a0>)
 800b68a:	ab19      	add	r3, sp, #100	; 0x64
 800b68c:	a917      	add	r1, sp, #92	; 0x5c
 800b68e:	4620      	mov	r0, r4
 800b690:	f001 fdda 	bl	800d248 <__gethex>
 800b694:	f010 0707 	ands.w	r7, r0, #7
 800b698:	4605      	mov	r5, r0
 800b69a:	d005      	beq.n	800b6a8 <_strtod_l+0x88>
 800b69c:	2f06      	cmp	r7, #6
 800b69e:	d12c      	bne.n	800b6fa <_strtod_l+0xda>
 800b6a0:	3601      	adds	r6, #1
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	9617      	str	r6, [sp, #92]	; 0x5c
 800b6a6:	930a      	str	r3, [sp, #40]	; 0x28
 800b6a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	f040 8590 	bne.w	800c1d0 <_strtod_l+0xbb0>
 800b6b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6b2:	b1eb      	cbz	r3, 800b6f0 <_strtod_l+0xd0>
 800b6b4:	4652      	mov	r2, sl
 800b6b6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b6ba:	ec43 2b10 	vmov	d0, r2, r3
 800b6be:	b01d      	add	sp, #116	; 0x74
 800b6c0:	ecbd 8b02 	vpop	{d8}
 800b6c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6c8:	2a20      	cmp	r2, #32
 800b6ca:	d1cc      	bne.n	800b666 <_strtod_l+0x46>
 800b6cc:	3301      	adds	r3, #1
 800b6ce:	9317      	str	r3, [sp, #92]	; 0x5c
 800b6d0:	e7be      	b.n	800b650 <_strtod_l+0x30>
 800b6d2:	2a2d      	cmp	r2, #45	; 0x2d
 800b6d4:	d1c7      	bne.n	800b666 <_strtod_l+0x46>
 800b6d6:	2201      	movs	r2, #1
 800b6d8:	920a      	str	r2, [sp, #40]	; 0x28
 800b6da:	1c5a      	adds	r2, r3, #1
 800b6dc:	9217      	str	r2, [sp, #92]	; 0x5c
 800b6de:	785b      	ldrb	r3, [r3, #1]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d1c2      	bne.n	800b66a <_strtod_l+0x4a>
 800b6e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b6e6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	f040 856e 	bne.w	800c1cc <_strtod_l+0xbac>
 800b6f0:	4652      	mov	r2, sl
 800b6f2:	465b      	mov	r3, fp
 800b6f4:	e7e1      	b.n	800b6ba <_strtod_l+0x9a>
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	e7ee      	b.n	800b6d8 <_strtod_l+0xb8>
 800b6fa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b6fc:	b13a      	cbz	r2, 800b70e <_strtod_l+0xee>
 800b6fe:	2135      	movs	r1, #53	; 0x35
 800b700:	a81a      	add	r0, sp, #104	; 0x68
 800b702:	f002 fd52 	bl	800e1aa <__copybits>
 800b706:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b708:	4620      	mov	r0, r4
 800b70a:	f002 f911 	bl	800d930 <_Bfree>
 800b70e:	3f01      	subs	r7, #1
 800b710:	2f04      	cmp	r7, #4
 800b712:	d806      	bhi.n	800b722 <_strtod_l+0x102>
 800b714:	e8df f007 	tbb	[pc, r7]
 800b718:	1714030a 	.word	0x1714030a
 800b71c:	0a          	.byte	0x0a
 800b71d:	00          	.byte	0x00
 800b71e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800b722:	0728      	lsls	r0, r5, #28
 800b724:	d5c0      	bpl.n	800b6a8 <_strtod_l+0x88>
 800b726:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800b72a:	e7bd      	b.n	800b6a8 <_strtod_l+0x88>
 800b72c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800b730:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b732:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b736:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b73a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b73e:	e7f0      	b.n	800b722 <_strtod_l+0x102>
 800b740:	f8df b180 	ldr.w	fp, [pc, #384]	; 800b8c4 <_strtod_l+0x2a4>
 800b744:	e7ed      	b.n	800b722 <_strtod_l+0x102>
 800b746:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800b74a:	f04f 3aff 	mov.w	sl, #4294967295
 800b74e:	e7e8      	b.n	800b722 <_strtod_l+0x102>
 800b750:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b752:	1c5a      	adds	r2, r3, #1
 800b754:	9217      	str	r2, [sp, #92]	; 0x5c
 800b756:	785b      	ldrb	r3, [r3, #1]
 800b758:	2b30      	cmp	r3, #48	; 0x30
 800b75a:	d0f9      	beq.n	800b750 <_strtod_l+0x130>
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d0a3      	beq.n	800b6a8 <_strtod_l+0x88>
 800b760:	2301      	movs	r3, #1
 800b762:	f04f 0900 	mov.w	r9, #0
 800b766:	9304      	str	r3, [sp, #16]
 800b768:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b76a:	9308      	str	r3, [sp, #32]
 800b76c:	f8cd 901c 	str.w	r9, [sp, #28]
 800b770:	464f      	mov	r7, r9
 800b772:	220a      	movs	r2, #10
 800b774:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800b776:	7806      	ldrb	r6, [r0, #0]
 800b778:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800b77c:	b2d9      	uxtb	r1, r3
 800b77e:	2909      	cmp	r1, #9
 800b780:	d92a      	bls.n	800b7d8 <_strtod_l+0x1b8>
 800b782:	9905      	ldr	r1, [sp, #20]
 800b784:	462a      	mov	r2, r5
 800b786:	f003 f91b 	bl	800e9c0 <strncmp>
 800b78a:	b398      	cbz	r0, 800b7f4 <_strtod_l+0x1d4>
 800b78c:	2000      	movs	r0, #0
 800b78e:	4632      	mov	r2, r6
 800b790:	463d      	mov	r5, r7
 800b792:	9005      	str	r0, [sp, #20]
 800b794:	4603      	mov	r3, r0
 800b796:	2a65      	cmp	r2, #101	; 0x65
 800b798:	d001      	beq.n	800b79e <_strtod_l+0x17e>
 800b79a:	2a45      	cmp	r2, #69	; 0x45
 800b79c:	d118      	bne.n	800b7d0 <_strtod_l+0x1b0>
 800b79e:	b91d      	cbnz	r5, 800b7a8 <_strtod_l+0x188>
 800b7a0:	9a04      	ldr	r2, [sp, #16]
 800b7a2:	4302      	orrs	r2, r0
 800b7a4:	d09e      	beq.n	800b6e4 <_strtod_l+0xc4>
 800b7a6:	2500      	movs	r5, #0
 800b7a8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800b7ac:	f108 0201 	add.w	r2, r8, #1
 800b7b0:	9217      	str	r2, [sp, #92]	; 0x5c
 800b7b2:	f898 2001 	ldrb.w	r2, [r8, #1]
 800b7b6:	2a2b      	cmp	r2, #43	; 0x2b
 800b7b8:	d075      	beq.n	800b8a6 <_strtod_l+0x286>
 800b7ba:	2a2d      	cmp	r2, #45	; 0x2d
 800b7bc:	d07b      	beq.n	800b8b6 <_strtod_l+0x296>
 800b7be:	f04f 0c00 	mov.w	ip, #0
 800b7c2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800b7c6:	2909      	cmp	r1, #9
 800b7c8:	f240 8082 	bls.w	800b8d0 <_strtod_l+0x2b0>
 800b7cc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b7d0:	2600      	movs	r6, #0
 800b7d2:	e09d      	b.n	800b910 <_strtod_l+0x2f0>
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	e7c4      	b.n	800b762 <_strtod_l+0x142>
 800b7d8:	2f08      	cmp	r7, #8
 800b7da:	bfd8      	it	le
 800b7dc:	9907      	ldrle	r1, [sp, #28]
 800b7de:	f100 0001 	add.w	r0, r0, #1
 800b7e2:	bfda      	itte	le
 800b7e4:	fb02 3301 	mlale	r3, r2, r1, r3
 800b7e8:	9307      	strle	r3, [sp, #28]
 800b7ea:	fb02 3909 	mlagt	r9, r2, r9, r3
 800b7ee:	3701      	adds	r7, #1
 800b7f0:	9017      	str	r0, [sp, #92]	; 0x5c
 800b7f2:	e7bf      	b.n	800b774 <_strtod_l+0x154>
 800b7f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b7f6:	195a      	adds	r2, r3, r5
 800b7f8:	9217      	str	r2, [sp, #92]	; 0x5c
 800b7fa:	5d5a      	ldrb	r2, [r3, r5]
 800b7fc:	2f00      	cmp	r7, #0
 800b7fe:	d037      	beq.n	800b870 <_strtod_l+0x250>
 800b800:	9005      	str	r0, [sp, #20]
 800b802:	463d      	mov	r5, r7
 800b804:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800b808:	2b09      	cmp	r3, #9
 800b80a:	d912      	bls.n	800b832 <_strtod_l+0x212>
 800b80c:	2301      	movs	r3, #1
 800b80e:	e7c2      	b.n	800b796 <_strtod_l+0x176>
 800b810:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b812:	1c5a      	adds	r2, r3, #1
 800b814:	9217      	str	r2, [sp, #92]	; 0x5c
 800b816:	785a      	ldrb	r2, [r3, #1]
 800b818:	3001      	adds	r0, #1
 800b81a:	2a30      	cmp	r2, #48	; 0x30
 800b81c:	d0f8      	beq.n	800b810 <_strtod_l+0x1f0>
 800b81e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800b822:	2b08      	cmp	r3, #8
 800b824:	f200 84d9 	bhi.w	800c1da <_strtod_l+0xbba>
 800b828:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b82a:	9005      	str	r0, [sp, #20]
 800b82c:	2000      	movs	r0, #0
 800b82e:	9308      	str	r3, [sp, #32]
 800b830:	4605      	mov	r5, r0
 800b832:	3a30      	subs	r2, #48	; 0x30
 800b834:	f100 0301 	add.w	r3, r0, #1
 800b838:	d014      	beq.n	800b864 <_strtod_l+0x244>
 800b83a:	9905      	ldr	r1, [sp, #20]
 800b83c:	4419      	add	r1, r3
 800b83e:	9105      	str	r1, [sp, #20]
 800b840:	462b      	mov	r3, r5
 800b842:	eb00 0e05 	add.w	lr, r0, r5
 800b846:	210a      	movs	r1, #10
 800b848:	4573      	cmp	r3, lr
 800b84a:	d113      	bne.n	800b874 <_strtod_l+0x254>
 800b84c:	182b      	adds	r3, r5, r0
 800b84e:	2b08      	cmp	r3, #8
 800b850:	f105 0501 	add.w	r5, r5, #1
 800b854:	4405      	add	r5, r0
 800b856:	dc1c      	bgt.n	800b892 <_strtod_l+0x272>
 800b858:	9907      	ldr	r1, [sp, #28]
 800b85a:	230a      	movs	r3, #10
 800b85c:	fb03 2301 	mla	r3, r3, r1, r2
 800b860:	9307      	str	r3, [sp, #28]
 800b862:	2300      	movs	r3, #0
 800b864:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b866:	1c51      	adds	r1, r2, #1
 800b868:	9117      	str	r1, [sp, #92]	; 0x5c
 800b86a:	7852      	ldrb	r2, [r2, #1]
 800b86c:	4618      	mov	r0, r3
 800b86e:	e7c9      	b.n	800b804 <_strtod_l+0x1e4>
 800b870:	4638      	mov	r0, r7
 800b872:	e7d2      	b.n	800b81a <_strtod_l+0x1fa>
 800b874:	2b08      	cmp	r3, #8
 800b876:	dc04      	bgt.n	800b882 <_strtod_l+0x262>
 800b878:	9e07      	ldr	r6, [sp, #28]
 800b87a:	434e      	muls	r6, r1
 800b87c:	9607      	str	r6, [sp, #28]
 800b87e:	3301      	adds	r3, #1
 800b880:	e7e2      	b.n	800b848 <_strtod_l+0x228>
 800b882:	f103 0c01 	add.w	ip, r3, #1
 800b886:	f1bc 0f10 	cmp.w	ip, #16
 800b88a:	bfd8      	it	le
 800b88c:	fb01 f909 	mulle.w	r9, r1, r9
 800b890:	e7f5      	b.n	800b87e <_strtod_l+0x25e>
 800b892:	2d10      	cmp	r5, #16
 800b894:	bfdc      	itt	le
 800b896:	230a      	movle	r3, #10
 800b898:	fb03 2909 	mlale	r9, r3, r9, r2
 800b89c:	e7e1      	b.n	800b862 <_strtod_l+0x242>
 800b89e:	2300      	movs	r3, #0
 800b8a0:	9305      	str	r3, [sp, #20]
 800b8a2:	2301      	movs	r3, #1
 800b8a4:	e77c      	b.n	800b7a0 <_strtod_l+0x180>
 800b8a6:	f04f 0c00 	mov.w	ip, #0
 800b8aa:	f108 0202 	add.w	r2, r8, #2
 800b8ae:	9217      	str	r2, [sp, #92]	; 0x5c
 800b8b0:	f898 2002 	ldrb.w	r2, [r8, #2]
 800b8b4:	e785      	b.n	800b7c2 <_strtod_l+0x1a2>
 800b8b6:	f04f 0c01 	mov.w	ip, #1
 800b8ba:	e7f6      	b.n	800b8aa <_strtod_l+0x28a>
 800b8bc:	0800f9b8 	.word	0x0800f9b8
 800b8c0:	0800f6d8 	.word	0x0800f6d8
 800b8c4:	7ff00000 	.word	0x7ff00000
 800b8c8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b8ca:	1c51      	adds	r1, r2, #1
 800b8cc:	9117      	str	r1, [sp, #92]	; 0x5c
 800b8ce:	7852      	ldrb	r2, [r2, #1]
 800b8d0:	2a30      	cmp	r2, #48	; 0x30
 800b8d2:	d0f9      	beq.n	800b8c8 <_strtod_l+0x2a8>
 800b8d4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800b8d8:	2908      	cmp	r1, #8
 800b8da:	f63f af79 	bhi.w	800b7d0 <_strtod_l+0x1b0>
 800b8de:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800b8e2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b8e4:	9206      	str	r2, [sp, #24]
 800b8e6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b8e8:	1c51      	adds	r1, r2, #1
 800b8ea:	9117      	str	r1, [sp, #92]	; 0x5c
 800b8ec:	7852      	ldrb	r2, [r2, #1]
 800b8ee:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800b8f2:	2e09      	cmp	r6, #9
 800b8f4:	d937      	bls.n	800b966 <_strtod_l+0x346>
 800b8f6:	9e06      	ldr	r6, [sp, #24]
 800b8f8:	1b89      	subs	r1, r1, r6
 800b8fa:	2908      	cmp	r1, #8
 800b8fc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800b900:	dc02      	bgt.n	800b908 <_strtod_l+0x2e8>
 800b902:	4576      	cmp	r6, lr
 800b904:	bfa8      	it	ge
 800b906:	4676      	movge	r6, lr
 800b908:	f1bc 0f00 	cmp.w	ip, #0
 800b90c:	d000      	beq.n	800b910 <_strtod_l+0x2f0>
 800b90e:	4276      	negs	r6, r6
 800b910:	2d00      	cmp	r5, #0
 800b912:	d14d      	bne.n	800b9b0 <_strtod_l+0x390>
 800b914:	9904      	ldr	r1, [sp, #16]
 800b916:	4301      	orrs	r1, r0
 800b918:	f47f aec6 	bne.w	800b6a8 <_strtod_l+0x88>
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	f47f aee1 	bne.w	800b6e4 <_strtod_l+0xc4>
 800b922:	2a69      	cmp	r2, #105	; 0x69
 800b924:	d027      	beq.n	800b976 <_strtod_l+0x356>
 800b926:	dc24      	bgt.n	800b972 <_strtod_l+0x352>
 800b928:	2a49      	cmp	r2, #73	; 0x49
 800b92a:	d024      	beq.n	800b976 <_strtod_l+0x356>
 800b92c:	2a4e      	cmp	r2, #78	; 0x4e
 800b92e:	f47f aed9 	bne.w	800b6e4 <_strtod_l+0xc4>
 800b932:	499f      	ldr	r1, [pc, #636]	; (800bbb0 <_strtod_l+0x590>)
 800b934:	a817      	add	r0, sp, #92	; 0x5c
 800b936:	f001 fedf 	bl	800d6f8 <__match>
 800b93a:	2800      	cmp	r0, #0
 800b93c:	f43f aed2 	beq.w	800b6e4 <_strtod_l+0xc4>
 800b940:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b942:	781b      	ldrb	r3, [r3, #0]
 800b944:	2b28      	cmp	r3, #40	; 0x28
 800b946:	d12d      	bne.n	800b9a4 <_strtod_l+0x384>
 800b948:	499a      	ldr	r1, [pc, #616]	; (800bbb4 <_strtod_l+0x594>)
 800b94a:	aa1a      	add	r2, sp, #104	; 0x68
 800b94c:	a817      	add	r0, sp, #92	; 0x5c
 800b94e:	f001 fee7 	bl	800d720 <__hexnan>
 800b952:	2805      	cmp	r0, #5
 800b954:	d126      	bne.n	800b9a4 <_strtod_l+0x384>
 800b956:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b958:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800b95c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800b960:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800b964:	e6a0      	b.n	800b6a8 <_strtod_l+0x88>
 800b966:	210a      	movs	r1, #10
 800b968:	fb01 2e0e 	mla	lr, r1, lr, r2
 800b96c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800b970:	e7b9      	b.n	800b8e6 <_strtod_l+0x2c6>
 800b972:	2a6e      	cmp	r2, #110	; 0x6e
 800b974:	e7db      	b.n	800b92e <_strtod_l+0x30e>
 800b976:	4990      	ldr	r1, [pc, #576]	; (800bbb8 <_strtod_l+0x598>)
 800b978:	a817      	add	r0, sp, #92	; 0x5c
 800b97a:	f001 febd 	bl	800d6f8 <__match>
 800b97e:	2800      	cmp	r0, #0
 800b980:	f43f aeb0 	beq.w	800b6e4 <_strtod_l+0xc4>
 800b984:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b986:	498d      	ldr	r1, [pc, #564]	; (800bbbc <_strtod_l+0x59c>)
 800b988:	3b01      	subs	r3, #1
 800b98a:	a817      	add	r0, sp, #92	; 0x5c
 800b98c:	9317      	str	r3, [sp, #92]	; 0x5c
 800b98e:	f001 feb3 	bl	800d6f8 <__match>
 800b992:	b910      	cbnz	r0, 800b99a <_strtod_l+0x37a>
 800b994:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b996:	3301      	adds	r3, #1
 800b998:	9317      	str	r3, [sp, #92]	; 0x5c
 800b99a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800bbcc <_strtod_l+0x5ac>
 800b99e:	f04f 0a00 	mov.w	sl, #0
 800b9a2:	e681      	b.n	800b6a8 <_strtod_l+0x88>
 800b9a4:	4886      	ldr	r0, [pc, #536]	; (800bbc0 <_strtod_l+0x5a0>)
 800b9a6:	f002 fff3 	bl	800e990 <nan>
 800b9aa:	ec5b ab10 	vmov	sl, fp, d0
 800b9ae:	e67b      	b.n	800b6a8 <_strtod_l+0x88>
 800b9b0:	9b05      	ldr	r3, [sp, #20]
 800b9b2:	9807      	ldr	r0, [sp, #28]
 800b9b4:	1af3      	subs	r3, r6, r3
 800b9b6:	2f00      	cmp	r7, #0
 800b9b8:	bf08      	it	eq
 800b9ba:	462f      	moveq	r7, r5
 800b9bc:	2d10      	cmp	r5, #16
 800b9be:	9306      	str	r3, [sp, #24]
 800b9c0:	46a8      	mov	r8, r5
 800b9c2:	bfa8      	it	ge
 800b9c4:	f04f 0810 	movge.w	r8, #16
 800b9c8:	f7f4 fdd4 	bl	8000574 <__aeabi_ui2d>
 800b9cc:	2d09      	cmp	r5, #9
 800b9ce:	4682      	mov	sl, r0
 800b9d0:	468b      	mov	fp, r1
 800b9d2:	dd13      	ble.n	800b9fc <_strtod_l+0x3dc>
 800b9d4:	4b7b      	ldr	r3, [pc, #492]	; (800bbc4 <_strtod_l+0x5a4>)
 800b9d6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b9da:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b9de:	f7f4 fe43 	bl	8000668 <__aeabi_dmul>
 800b9e2:	4682      	mov	sl, r0
 800b9e4:	4648      	mov	r0, r9
 800b9e6:	468b      	mov	fp, r1
 800b9e8:	f7f4 fdc4 	bl	8000574 <__aeabi_ui2d>
 800b9ec:	4602      	mov	r2, r0
 800b9ee:	460b      	mov	r3, r1
 800b9f0:	4650      	mov	r0, sl
 800b9f2:	4659      	mov	r1, fp
 800b9f4:	f7f4 fc82 	bl	80002fc <__adddf3>
 800b9f8:	4682      	mov	sl, r0
 800b9fa:	468b      	mov	fp, r1
 800b9fc:	2d0f      	cmp	r5, #15
 800b9fe:	dc38      	bgt.n	800ba72 <_strtod_l+0x452>
 800ba00:	9b06      	ldr	r3, [sp, #24]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	f43f ae50 	beq.w	800b6a8 <_strtod_l+0x88>
 800ba08:	dd24      	ble.n	800ba54 <_strtod_l+0x434>
 800ba0a:	2b16      	cmp	r3, #22
 800ba0c:	dc0b      	bgt.n	800ba26 <_strtod_l+0x406>
 800ba0e:	496d      	ldr	r1, [pc, #436]	; (800bbc4 <_strtod_l+0x5a4>)
 800ba10:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ba14:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba18:	4652      	mov	r2, sl
 800ba1a:	465b      	mov	r3, fp
 800ba1c:	f7f4 fe24 	bl	8000668 <__aeabi_dmul>
 800ba20:	4682      	mov	sl, r0
 800ba22:	468b      	mov	fp, r1
 800ba24:	e640      	b.n	800b6a8 <_strtod_l+0x88>
 800ba26:	9a06      	ldr	r2, [sp, #24]
 800ba28:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800ba2c:	4293      	cmp	r3, r2
 800ba2e:	db20      	blt.n	800ba72 <_strtod_l+0x452>
 800ba30:	4c64      	ldr	r4, [pc, #400]	; (800bbc4 <_strtod_l+0x5a4>)
 800ba32:	f1c5 050f 	rsb	r5, r5, #15
 800ba36:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ba3a:	4652      	mov	r2, sl
 800ba3c:	465b      	mov	r3, fp
 800ba3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba42:	f7f4 fe11 	bl	8000668 <__aeabi_dmul>
 800ba46:	9b06      	ldr	r3, [sp, #24]
 800ba48:	1b5d      	subs	r5, r3, r5
 800ba4a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ba4e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ba52:	e7e3      	b.n	800ba1c <_strtod_l+0x3fc>
 800ba54:	9b06      	ldr	r3, [sp, #24]
 800ba56:	3316      	adds	r3, #22
 800ba58:	db0b      	blt.n	800ba72 <_strtod_l+0x452>
 800ba5a:	9b05      	ldr	r3, [sp, #20]
 800ba5c:	1b9e      	subs	r6, r3, r6
 800ba5e:	4b59      	ldr	r3, [pc, #356]	; (800bbc4 <_strtod_l+0x5a4>)
 800ba60:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800ba64:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ba68:	4650      	mov	r0, sl
 800ba6a:	4659      	mov	r1, fp
 800ba6c:	f7f4 ff26 	bl	80008bc <__aeabi_ddiv>
 800ba70:	e7d6      	b.n	800ba20 <_strtod_l+0x400>
 800ba72:	9b06      	ldr	r3, [sp, #24]
 800ba74:	eba5 0808 	sub.w	r8, r5, r8
 800ba78:	4498      	add	r8, r3
 800ba7a:	f1b8 0f00 	cmp.w	r8, #0
 800ba7e:	dd74      	ble.n	800bb6a <_strtod_l+0x54a>
 800ba80:	f018 030f 	ands.w	r3, r8, #15
 800ba84:	d00a      	beq.n	800ba9c <_strtod_l+0x47c>
 800ba86:	494f      	ldr	r1, [pc, #316]	; (800bbc4 <_strtod_l+0x5a4>)
 800ba88:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ba8c:	4652      	mov	r2, sl
 800ba8e:	465b      	mov	r3, fp
 800ba90:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba94:	f7f4 fde8 	bl	8000668 <__aeabi_dmul>
 800ba98:	4682      	mov	sl, r0
 800ba9a:	468b      	mov	fp, r1
 800ba9c:	f038 080f 	bics.w	r8, r8, #15
 800baa0:	d04f      	beq.n	800bb42 <_strtod_l+0x522>
 800baa2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800baa6:	dd22      	ble.n	800baee <_strtod_l+0x4ce>
 800baa8:	2500      	movs	r5, #0
 800baaa:	462e      	mov	r6, r5
 800baac:	9507      	str	r5, [sp, #28]
 800baae:	9505      	str	r5, [sp, #20]
 800bab0:	2322      	movs	r3, #34	; 0x22
 800bab2:	f8df b118 	ldr.w	fp, [pc, #280]	; 800bbcc <_strtod_l+0x5ac>
 800bab6:	6023      	str	r3, [r4, #0]
 800bab8:	f04f 0a00 	mov.w	sl, #0
 800babc:	9b07      	ldr	r3, [sp, #28]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	f43f adf2 	beq.w	800b6a8 <_strtod_l+0x88>
 800bac4:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bac6:	4620      	mov	r0, r4
 800bac8:	f001 ff32 	bl	800d930 <_Bfree>
 800bacc:	9905      	ldr	r1, [sp, #20]
 800bace:	4620      	mov	r0, r4
 800bad0:	f001 ff2e 	bl	800d930 <_Bfree>
 800bad4:	4631      	mov	r1, r6
 800bad6:	4620      	mov	r0, r4
 800bad8:	f001 ff2a 	bl	800d930 <_Bfree>
 800badc:	9907      	ldr	r1, [sp, #28]
 800bade:	4620      	mov	r0, r4
 800bae0:	f001 ff26 	bl	800d930 <_Bfree>
 800bae4:	4629      	mov	r1, r5
 800bae6:	4620      	mov	r0, r4
 800bae8:	f001 ff22 	bl	800d930 <_Bfree>
 800baec:	e5dc      	b.n	800b6a8 <_strtod_l+0x88>
 800baee:	4b36      	ldr	r3, [pc, #216]	; (800bbc8 <_strtod_l+0x5a8>)
 800baf0:	9304      	str	r3, [sp, #16]
 800baf2:	2300      	movs	r3, #0
 800baf4:	ea4f 1828 	mov.w	r8, r8, asr #4
 800baf8:	4650      	mov	r0, sl
 800bafa:	4659      	mov	r1, fp
 800bafc:	4699      	mov	r9, r3
 800bafe:	f1b8 0f01 	cmp.w	r8, #1
 800bb02:	dc21      	bgt.n	800bb48 <_strtod_l+0x528>
 800bb04:	b10b      	cbz	r3, 800bb0a <_strtod_l+0x4ea>
 800bb06:	4682      	mov	sl, r0
 800bb08:	468b      	mov	fp, r1
 800bb0a:	4b2f      	ldr	r3, [pc, #188]	; (800bbc8 <_strtod_l+0x5a8>)
 800bb0c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800bb10:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800bb14:	4652      	mov	r2, sl
 800bb16:	465b      	mov	r3, fp
 800bb18:	e9d9 0100 	ldrd	r0, r1, [r9]
 800bb1c:	f7f4 fda4 	bl	8000668 <__aeabi_dmul>
 800bb20:	4b2a      	ldr	r3, [pc, #168]	; (800bbcc <_strtod_l+0x5ac>)
 800bb22:	460a      	mov	r2, r1
 800bb24:	400b      	ands	r3, r1
 800bb26:	492a      	ldr	r1, [pc, #168]	; (800bbd0 <_strtod_l+0x5b0>)
 800bb28:	428b      	cmp	r3, r1
 800bb2a:	4682      	mov	sl, r0
 800bb2c:	d8bc      	bhi.n	800baa8 <_strtod_l+0x488>
 800bb2e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800bb32:	428b      	cmp	r3, r1
 800bb34:	bf86      	itte	hi
 800bb36:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800bbd4 <_strtod_l+0x5b4>
 800bb3a:	f04f 3aff 	movhi.w	sl, #4294967295
 800bb3e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800bb42:	2300      	movs	r3, #0
 800bb44:	9304      	str	r3, [sp, #16]
 800bb46:	e084      	b.n	800bc52 <_strtod_l+0x632>
 800bb48:	f018 0f01 	tst.w	r8, #1
 800bb4c:	d005      	beq.n	800bb5a <_strtod_l+0x53a>
 800bb4e:	9b04      	ldr	r3, [sp, #16]
 800bb50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb54:	f7f4 fd88 	bl	8000668 <__aeabi_dmul>
 800bb58:	2301      	movs	r3, #1
 800bb5a:	9a04      	ldr	r2, [sp, #16]
 800bb5c:	3208      	adds	r2, #8
 800bb5e:	f109 0901 	add.w	r9, r9, #1
 800bb62:	ea4f 0868 	mov.w	r8, r8, asr #1
 800bb66:	9204      	str	r2, [sp, #16]
 800bb68:	e7c9      	b.n	800bafe <_strtod_l+0x4de>
 800bb6a:	d0ea      	beq.n	800bb42 <_strtod_l+0x522>
 800bb6c:	f1c8 0800 	rsb	r8, r8, #0
 800bb70:	f018 020f 	ands.w	r2, r8, #15
 800bb74:	d00a      	beq.n	800bb8c <_strtod_l+0x56c>
 800bb76:	4b13      	ldr	r3, [pc, #76]	; (800bbc4 <_strtod_l+0x5a4>)
 800bb78:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bb7c:	4650      	mov	r0, sl
 800bb7e:	4659      	mov	r1, fp
 800bb80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb84:	f7f4 fe9a 	bl	80008bc <__aeabi_ddiv>
 800bb88:	4682      	mov	sl, r0
 800bb8a:	468b      	mov	fp, r1
 800bb8c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800bb90:	d0d7      	beq.n	800bb42 <_strtod_l+0x522>
 800bb92:	f1b8 0f1f 	cmp.w	r8, #31
 800bb96:	dd1f      	ble.n	800bbd8 <_strtod_l+0x5b8>
 800bb98:	2500      	movs	r5, #0
 800bb9a:	462e      	mov	r6, r5
 800bb9c:	9507      	str	r5, [sp, #28]
 800bb9e:	9505      	str	r5, [sp, #20]
 800bba0:	2322      	movs	r3, #34	; 0x22
 800bba2:	f04f 0a00 	mov.w	sl, #0
 800bba6:	f04f 0b00 	mov.w	fp, #0
 800bbaa:	6023      	str	r3, [r4, #0]
 800bbac:	e786      	b.n	800babc <_strtod_l+0x49c>
 800bbae:	bf00      	nop
 800bbb0:	0800f6a9 	.word	0x0800f6a9
 800bbb4:	0800f6ec 	.word	0x0800f6ec
 800bbb8:	0800f6a1 	.word	0x0800f6a1
 800bbbc:	0800f8dc 	.word	0x0800f8dc
 800bbc0:	0800f7d7 	.word	0x0800f7d7
 800bbc4:	0800fa50 	.word	0x0800fa50
 800bbc8:	0800fa28 	.word	0x0800fa28
 800bbcc:	7ff00000 	.word	0x7ff00000
 800bbd0:	7ca00000 	.word	0x7ca00000
 800bbd4:	7fefffff 	.word	0x7fefffff
 800bbd8:	f018 0310 	ands.w	r3, r8, #16
 800bbdc:	bf18      	it	ne
 800bbde:	236a      	movne	r3, #106	; 0x6a
 800bbe0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800bf90 <_strtod_l+0x970>
 800bbe4:	9304      	str	r3, [sp, #16]
 800bbe6:	4650      	mov	r0, sl
 800bbe8:	4659      	mov	r1, fp
 800bbea:	2300      	movs	r3, #0
 800bbec:	f018 0f01 	tst.w	r8, #1
 800bbf0:	d004      	beq.n	800bbfc <_strtod_l+0x5dc>
 800bbf2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800bbf6:	f7f4 fd37 	bl	8000668 <__aeabi_dmul>
 800bbfa:	2301      	movs	r3, #1
 800bbfc:	ea5f 0868 	movs.w	r8, r8, asr #1
 800bc00:	f109 0908 	add.w	r9, r9, #8
 800bc04:	d1f2      	bne.n	800bbec <_strtod_l+0x5cc>
 800bc06:	b10b      	cbz	r3, 800bc0c <_strtod_l+0x5ec>
 800bc08:	4682      	mov	sl, r0
 800bc0a:	468b      	mov	fp, r1
 800bc0c:	9b04      	ldr	r3, [sp, #16]
 800bc0e:	b1c3      	cbz	r3, 800bc42 <_strtod_l+0x622>
 800bc10:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800bc14:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	4659      	mov	r1, fp
 800bc1c:	dd11      	ble.n	800bc42 <_strtod_l+0x622>
 800bc1e:	2b1f      	cmp	r3, #31
 800bc20:	f340 8124 	ble.w	800be6c <_strtod_l+0x84c>
 800bc24:	2b34      	cmp	r3, #52	; 0x34
 800bc26:	bfde      	ittt	le
 800bc28:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800bc2c:	f04f 33ff 	movle.w	r3, #4294967295
 800bc30:	fa03 f202 	lslle.w	r2, r3, r2
 800bc34:	f04f 0a00 	mov.w	sl, #0
 800bc38:	bfcc      	ite	gt
 800bc3a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800bc3e:	ea02 0b01 	andle.w	fp, r2, r1
 800bc42:	2200      	movs	r2, #0
 800bc44:	2300      	movs	r3, #0
 800bc46:	4650      	mov	r0, sl
 800bc48:	4659      	mov	r1, fp
 800bc4a:	f7f4 ff75 	bl	8000b38 <__aeabi_dcmpeq>
 800bc4e:	2800      	cmp	r0, #0
 800bc50:	d1a2      	bne.n	800bb98 <_strtod_l+0x578>
 800bc52:	9b07      	ldr	r3, [sp, #28]
 800bc54:	9300      	str	r3, [sp, #0]
 800bc56:	9908      	ldr	r1, [sp, #32]
 800bc58:	462b      	mov	r3, r5
 800bc5a:	463a      	mov	r2, r7
 800bc5c:	4620      	mov	r0, r4
 800bc5e:	f001 fecf 	bl	800da00 <__s2b>
 800bc62:	9007      	str	r0, [sp, #28]
 800bc64:	2800      	cmp	r0, #0
 800bc66:	f43f af1f 	beq.w	800baa8 <_strtod_l+0x488>
 800bc6a:	9b05      	ldr	r3, [sp, #20]
 800bc6c:	1b9e      	subs	r6, r3, r6
 800bc6e:	9b06      	ldr	r3, [sp, #24]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	bfb4      	ite	lt
 800bc74:	4633      	movlt	r3, r6
 800bc76:	2300      	movge	r3, #0
 800bc78:	930c      	str	r3, [sp, #48]	; 0x30
 800bc7a:	9b06      	ldr	r3, [sp, #24]
 800bc7c:	2500      	movs	r5, #0
 800bc7e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800bc82:	9312      	str	r3, [sp, #72]	; 0x48
 800bc84:	462e      	mov	r6, r5
 800bc86:	9b07      	ldr	r3, [sp, #28]
 800bc88:	4620      	mov	r0, r4
 800bc8a:	6859      	ldr	r1, [r3, #4]
 800bc8c:	f001 fe10 	bl	800d8b0 <_Balloc>
 800bc90:	9005      	str	r0, [sp, #20]
 800bc92:	2800      	cmp	r0, #0
 800bc94:	f43f af0c 	beq.w	800bab0 <_strtod_l+0x490>
 800bc98:	9b07      	ldr	r3, [sp, #28]
 800bc9a:	691a      	ldr	r2, [r3, #16]
 800bc9c:	3202      	adds	r2, #2
 800bc9e:	f103 010c 	add.w	r1, r3, #12
 800bca2:	0092      	lsls	r2, r2, #2
 800bca4:	300c      	adds	r0, #12
 800bca6:	f001 fdf5 	bl	800d894 <memcpy>
 800bcaa:	ec4b ab10 	vmov	d0, sl, fp
 800bcae:	aa1a      	add	r2, sp, #104	; 0x68
 800bcb0:	a919      	add	r1, sp, #100	; 0x64
 800bcb2:	4620      	mov	r0, r4
 800bcb4:	f002 f9ea 	bl	800e08c <__d2b>
 800bcb8:	ec4b ab18 	vmov	d8, sl, fp
 800bcbc:	9018      	str	r0, [sp, #96]	; 0x60
 800bcbe:	2800      	cmp	r0, #0
 800bcc0:	f43f aef6 	beq.w	800bab0 <_strtod_l+0x490>
 800bcc4:	2101      	movs	r1, #1
 800bcc6:	4620      	mov	r0, r4
 800bcc8:	f001 ff34 	bl	800db34 <__i2b>
 800bccc:	4606      	mov	r6, r0
 800bcce:	2800      	cmp	r0, #0
 800bcd0:	f43f aeee 	beq.w	800bab0 <_strtod_l+0x490>
 800bcd4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800bcd6:	9904      	ldr	r1, [sp, #16]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	bfab      	itete	ge
 800bcdc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800bcde:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800bce0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800bce2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800bce6:	bfac      	ite	ge
 800bce8:	eb03 0902 	addge.w	r9, r3, r2
 800bcec:	1ad7      	sublt	r7, r2, r3
 800bcee:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800bcf0:	eba3 0801 	sub.w	r8, r3, r1
 800bcf4:	4490      	add	r8, r2
 800bcf6:	4ba1      	ldr	r3, [pc, #644]	; (800bf7c <_strtod_l+0x95c>)
 800bcf8:	f108 38ff 	add.w	r8, r8, #4294967295
 800bcfc:	4598      	cmp	r8, r3
 800bcfe:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800bd02:	f280 80c7 	bge.w	800be94 <_strtod_l+0x874>
 800bd06:	eba3 0308 	sub.w	r3, r3, r8
 800bd0a:	2b1f      	cmp	r3, #31
 800bd0c:	eba2 0203 	sub.w	r2, r2, r3
 800bd10:	f04f 0101 	mov.w	r1, #1
 800bd14:	f300 80b1 	bgt.w	800be7a <_strtod_l+0x85a>
 800bd18:	fa01 f303 	lsl.w	r3, r1, r3
 800bd1c:	930d      	str	r3, [sp, #52]	; 0x34
 800bd1e:	2300      	movs	r3, #0
 800bd20:	9308      	str	r3, [sp, #32]
 800bd22:	eb09 0802 	add.w	r8, r9, r2
 800bd26:	9b04      	ldr	r3, [sp, #16]
 800bd28:	45c1      	cmp	r9, r8
 800bd2a:	4417      	add	r7, r2
 800bd2c:	441f      	add	r7, r3
 800bd2e:	464b      	mov	r3, r9
 800bd30:	bfa8      	it	ge
 800bd32:	4643      	movge	r3, r8
 800bd34:	42bb      	cmp	r3, r7
 800bd36:	bfa8      	it	ge
 800bd38:	463b      	movge	r3, r7
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	bfc2      	ittt	gt
 800bd3e:	eba8 0803 	subgt.w	r8, r8, r3
 800bd42:	1aff      	subgt	r7, r7, r3
 800bd44:	eba9 0903 	subgt.w	r9, r9, r3
 800bd48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	dd17      	ble.n	800bd7e <_strtod_l+0x75e>
 800bd4e:	4631      	mov	r1, r6
 800bd50:	461a      	mov	r2, r3
 800bd52:	4620      	mov	r0, r4
 800bd54:	f001 ffae 	bl	800dcb4 <__pow5mult>
 800bd58:	4606      	mov	r6, r0
 800bd5a:	2800      	cmp	r0, #0
 800bd5c:	f43f aea8 	beq.w	800bab0 <_strtod_l+0x490>
 800bd60:	4601      	mov	r1, r0
 800bd62:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800bd64:	4620      	mov	r0, r4
 800bd66:	f001 fefb 	bl	800db60 <__multiply>
 800bd6a:	900b      	str	r0, [sp, #44]	; 0x2c
 800bd6c:	2800      	cmp	r0, #0
 800bd6e:	f43f ae9f 	beq.w	800bab0 <_strtod_l+0x490>
 800bd72:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bd74:	4620      	mov	r0, r4
 800bd76:	f001 fddb 	bl	800d930 <_Bfree>
 800bd7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd7c:	9318      	str	r3, [sp, #96]	; 0x60
 800bd7e:	f1b8 0f00 	cmp.w	r8, #0
 800bd82:	f300 808c 	bgt.w	800be9e <_strtod_l+0x87e>
 800bd86:	9b06      	ldr	r3, [sp, #24]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	dd08      	ble.n	800bd9e <_strtod_l+0x77e>
 800bd8c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bd8e:	9905      	ldr	r1, [sp, #20]
 800bd90:	4620      	mov	r0, r4
 800bd92:	f001 ff8f 	bl	800dcb4 <__pow5mult>
 800bd96:	9005      	str	r0, [sp, #20]
 800bd98:	2800      	cmp	r0, #0
 800bd9a:	f43f ae89 	beq.w	800bab0 <_strtod_l+0x490>
 800bd9e:	2f00      	cmp	r7, #0
 800bda0:	dd08      	ble.n	800bdb4 <_strtod_l+0x794>
 800bda2:	9905      	ldr	r1, [sp, #20]
 800bda4:	463a      	mov	r2, r7
 800bda6:	4620      	mov	r0, r4
 800bda8:	f001 ffde 	bl	800dd68 <__lshift>
 800bdac:	9005      	str	r0, [sp, #20]
 800bdae:	2800      	cmp	r0, #0
 800bdb0:	f43f ae7e 	beq.w	800bab0 <_strtod_l+0x490>
 800bdb4:	f1b9 0f00 	cmp.w	r9, #0
 800bdb8:	dd08      	ble.n	800bdcc <_strtod_l+0x7ac>
 800bdba:	4631      	mov	r1, r6
 800bdbc:	464a      	mov	r2, r9
 800bdbe:	4620      	mov	r0, r4
 800bdc0:	f001 ffd2 	bl	800dd68 <__lshift>
 800bdc4:	4606      	mov	r6, r0
 800bdc6:	2800      	cmp	r0, #0
 800bdc8:	f43f ae72 	beq.w	800bab0 <_strtod_l+0x490>
 800bdcc:	9a05      	ldr	r2, [sp, #20]
 800bdce:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bdd0:	4620      	mov	r0, r4
 800bdd2:	f002 f855 	bl	800de80 <__mdiff>
 800bdd6:	4605      	mov	r5, r0
 800bdd8:	2800      	cmp	r0, #0
 800bdda:	f43f ae69 	beq.w	800bab0 <_strtod_l+0x490>
 800bdde:	68c3      	ldr	r3, [r0, #12]
 800bde0:	930b      	str	r3, [sp, #44]	; 0x2c
 800bde2:	2300      	movs	r3, #0
 800bde4:	60c3      	str	r3, [r0, #12]
 800bde6:	4631      	mov	r1, r6
 800bde8:	f002 f82e 	bl	800de48 <__mcmp>
 800bdec:	2800      	cmp	r0, #0
 800bdee:	da60      	bge.n	800beb2 <_strtod_l+0x892>
 800bdf0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bdf2:	ea53 030a 	orrs.w	r3, r3, sl
 800bdf6:	f040 8082 	bne.w	800befe <_strtod_l+0x8de>
 800bdfa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d17d      	bne.n	800befe <_strtod_l+0x8de>
 800be02:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800be06:	0d1b      	lsrs	r3, r3, #20
 800be08:	051b      	lsls	r3, r3, #20
 800be0a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800be0e:	d976      	bls.n	800befe <_strtod_l+0x8de>
 800be10:	696b      	ldr	r3, [r5, #20]
 800be12:	b913      	cbnz	r3, 800be1a <_strtod_l+0x7fa>
 800be14:	692b      	ldr	r3, [r5, #16]
 800be16:	2b01      	cmp	r3, #1
 800be18:	dd71      	ble.n	800befe <_strtod_l+0x8de>
 800be1a:	4629      	mov	r1, r5
 800be1c:	2201      	movs	r2, #1
 800be1e:	4620      	mov	r0, r4
 800be20:	f001 ffa2 	bl	800dd68 <__lshift>
 800be24:	4631      	mov	r1, r6
 800be26:	4605      	mov	r5, r0
 800be28:	f002 f80e 	bl	800de48 <__mcmp>
 800be2c:	2800      	cmp	r0, #0
 800be2e:	dd66      	ble.n	800befe <_strtod_l+0x8de>
 800be30:	9904      	ldr	r1, [sp, #16]
 800be32:	4a53      	ldr	r2, [pc, #332]	; (800bf80 <_strtod_l+0x960>)
 800be34:	465b      	mov	r3, fp
 800be36:	2900      	cmp	r1, #0
 800be38:	f000 8081 	beq.w	800bf3e <_strtod_l+0x91e>
 800be3c:	ea02 010b 	and.w	r1, r2, fp
 800be40:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800be44:	dc7b      	bgt.n	800bf3e <_strtod_l+0x91e>
 800be46:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800be4a:	f77f aea9 	ble.w	800bba0 <_strtod_l+0x580>
 800be4e:	4b4d      	ldr	r3, [pc, #308]	; (800bf84 <_strtod_l+0x964>)
 800be50:	4650      	mov	r0, sl
 800be52:	4659      	mov	r1, fp
 800be54:	2200      	movs	r2, #0
 800be56:	f7f4 fc07 	bl	8000668 <__aeabi_dmul>
 800be5a:	460b      	mov	r3, r1
 800be5c:	4303      	orrs	r3, r0
 800be5e:	bf08      	it	eq
 800be60:	2322      	moveq	r3, #34	; 0x22
 800be62:	4682      	mov	sl, r0
 800be64:	468b      	mov	fp, r1
 800be66:	bf08      	it	eq
 800be68:	6023      	streq	r3, [r4, #0]
 800be6a:	e62b      	b.n	800bac4 <_strtod_l+0x4a4>
 800be6c:	f04f 32ff 	mov.w	r2, #4294967295
 800be70:	fa02 f303 	lsl.w	r3, r2, r3
 800be74:	ea03 0a0a 	and.w	sl, r3, sl
 800be78:	e6e3      	b.n	800bc42 <_strtod_l+0x622>
 800be7a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800be7e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800be82:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800be86:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800be8a:	fa01 f308 	lsl.w	r3, r1, r8
 800be8e:	9308      	str	r3, [sp, #32]
 800be90:	910d      	str	r1, [sp, #52]	; 0x34
 800be92:	e746      	b.n	800bd22 <_strtod_l+0x702>
 800be94:	2300      	movs	r3, #0
 800be96:	9308      	str	r3, [sp, #32]
 800be98:	2301      	movs	r3, #1
 800be9a:	930d      	str	r3, [sp, #52]	; 0x34
 800be9c:	e741      	b.n	800bd22 <_strtod_l+0x702>
 800be9e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bea0:	4642      	mov	r2, r8
 800bea2:	4620      	mov	r0, r4
 800bea4:	f001 ff60 	bl	800dd68 <__lshift>
 800bea8:	9018      	str	r0, [sp, #96]	; 0x60
 800beaa:	2800      	cmp	r0, #0
 800beac:	f47f af6b 	bne.w	800bd86 <_strtod_l+0x766>
 800beb0:	e5fe      	b.n	800bab0 <_strtod_l+0x490>
 800beb2:	465f      	mov	r7, fp
 800beb4:	d16e      	bne.n	800bf94 <_strtod_l+0x974>
 800beb6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800beb8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bebc:	b342      	cbz	r2, 800bf10 <_strtod_l+0x8f0>
 800bebe:	4a32      	ldr	r2, [pc, #200]	; (800bf88 <_strtod_l+0x968>)
 800bec0:	4293      	cmp	r3, r2
 800bec2:	d128      	bne.n	800bf16 <_strtod_l+0x8f6>
 800bec4:	9b04      	ldr	r3, [sp, #16]
 800bec6:	4651      	mov	r1, sl
 800bec8:	b1eb      	cbz	r3, 800bf06 <_strtod_l+0x8e6>
 800beca:	4b2d      	ldr	r3, [pc, #180]	; (800bf80 <_strtod_l+0x960>)
 800becc:	403b      	ands	r3, r7
 800bece:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800bed2:	f04f 32ff 	mov.w	r2, #4294967295
 800bed6:	d819      	bhi.n	800bf0c <_strtod_l+0x8ec>
 800bed8:	0d1b      	lsrs	r3, r3, #20
 800beda:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bede:	fa02 f303 	lsl.w	r3, r2, r3
 800bee2:	4299      	cmp	r1, r3
 800bee4:	d117      	bne.n	800bf16 <_strtod_l+0x8f6>
 800bee6:	4b29      	ldr	r3, [pc, #164]	; (800bf8c <_strtod_l+0x96c>)
 800bee8:	429f      	cmp	r7, r3
 800beea:	d102      	bne.n	800bef2 <_strtod_l+0x8d2>
 800beec:	3101      	adds	r1, #1
 800beee:	f43f addf 	beq.w	800bab0 <_strtod_l+0x490>
 800bef2:	4b23      	ldr	r3, [pc, #140]	; (800bf80 <_strtod_l+0x960>)
 800bef4:	403b      	ands	r3, r7
 800bef6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800befa:	f04f 0a00 	mov.w	sl, #0
 800befe:	9b04      	ldr	r3, [sp, #16]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d1a4      	bne.n	800be4e <_strtod_l+0x82e>
 800bf04:	e5de      	b.n	800bac4 <_strtod_l+0x4a4>
 800bf06:	f04f 33ff 	mov.w	r3, #4294967295
 800bf0a:	e7ea      	b.n	800bee2 <_strtod_l+0x8c2>
 800bf0c:	4613      	mov	r3, r2
 800bf0e:	e7e8      	b.n	800bee2 <_strtod_l+0x8c2>
 800bf10:	ea53 030a 	orrs.w	r3, r3, sl
 800bf14:	d08c      	beq.n	800be30 <_strtod_l+0x810>
 800bf16:	9b08      	ldr	r3, [sp, #32]
 800bf18:	b1db      	cbz	r3, 800bf52 <_strtod_l+0x932>
 800bf1a:	423b      	tst	r3, r7
 800bf1c:	d0ef      	beq.n	800befe <_strtod_l+0x8de>
 800bf1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf20:	9a04      	ldr	r2, [sp, #16]
 800bf22:	4650      	mov	r0, sl
 800bf24:	4659      	mov	r1, fp
 800bf26:	b1c3      	cbz	r3, 800bf5a <_strtod_l+0x93a>
 800bf28:	f7ff fb5c 	bl	800b5e4 <sulp>
 800bf2c:	4602      	mov	r2, r0
 800bf2e:	460b      	mov	r3, r1
 800bf30:	ec51 0b18 	vmov	r0, r1, d8
 800bf34:	f7f4 f9e2 	bl	80002fc <__adddf3>
 800bf38:	4682      	mov	sl, r0
 800bf3a:	468b      	mov	fp, r1
 800bf3c:	e7df      	b.n	800befe <_strtod_l+0x8de>
 800bf3e:	4013      	ands	r3, r2
 800bf40:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800bf44:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800bf48:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800bf4c:	f04f 3aff 	mov.w	sl, #4294967295
 800bf50:	e7d5      	b.n	800befe <_strtod_l+0x8de>
 800bf52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bf54:	ea13 0f0a 	tst.w	r3, sl
 800bf58:	e7e0      	b.n	800bf1c <_strtod_l+0x8fc>
 800bf5a:	f7ff fb43 	bl	800b5e4 <sulp>
 800bf5e:	4602      	mov	r2, r0
 800bf60:	460b      	mov	r3, r1
 800bf62:	ec51 0b18 	vmov	r0, r1, d8
 800bf66:	f7f4 f9c7 	bl	80002f8 <__aeabi_dsub>
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	4682      	mov	sl, r0
 800bf70:	468b      	mov	fp, r1
 800bf72:	f7f4 fde1 	bl	8000b38 <__aeabi_dcmpeq>
 800bf76:	2800      	cmp	r0, #0
 800bf78:	d0c1      	beq.n	800befe <_strtod_l+0x8de>
 800bf7a:	e611      	b.n	800bba0 <_strtod_l+0x580>
 800bf7c:	fffffc02 	.word	0xfffffc02
 800bf80:	7ff00000 	.word	0x7ff00000
 800bf84:	39500000 	.word	0x39500000
 800bf88:	000fffff 	.word	0x000fffff
 800bf8c:	7fefffff 	.word	0x7fefffff
 800bf90:	0800f700 	.word	0x0800f700
 800bf94:	4631      	mov	r1, r6
 800bf96:	4628      	mov	r0, r5
 800bf98:	f002 f8d4 	bl	800e144 <__ratio>
 800bf9c:	ec59 8b10 	vmov	r8, r9, d0
 800bfa0:	ee10 0a10 	vmov	r0, s0
 800bfa4:	2200      	movs	r2, #0
 800bfa6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bfaa:	4649      	mov	r1, r9
 800bfac:	f7f4 fdd8 	bl	8000b60 <__aeabi_dcmple>
 800bfb0:	2800      	cmp	r0, #0
 800bfb2:	d07a      	beq.n	800c0aa <_strtod_l+0xa8a>
 800bfb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d04a      	beq.n	800c050 <_strtod_l+0xa30>
 800bfba:	4b95      	ldr	r3, [pc, #596]	; (800c210 <_strtod_l+0xbf0>)
 800bfbc:	2200      	movs	r2, #0
 800bfbe:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800bfc2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800c210 <_strtod_l+0xbf0>
 800bfc6:	f04f 0800 	mov.w	r8, #0
 800bfca:	4b92      	ldr	r3, [pc, #584]	; (800c214 <_strtod_l+0xbf4>)
 800bfcc:	403b      	ands	r3, r7
 800bfce:	930d      	str	r3, [sp, #52]	; 0x34
 800bfd0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bfd2:	4b91      	ldr	r3, [pc, #580]	; (800c218 <_strtod_l+0xbf8>)
 800bfd4:	429a      	cmp	r2, r3
 800bfd6:	f040 80b0 	bne.w	800c13a <_strtod_l+0xb1a>
 800bfda:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bfde:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800bfe2:	ec4b ab10 	vmov	d0, sl, fp
 800bfe6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bfea:	f001 ffd3 	bl	800df94 <__ulp>
 800bfee:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bff2:	ec53 2b10 	vmov	r2, r3, d0
 800bff6:	f7f4 fb37 	bl	8000668 <__aeabi_dmul>
 800bffa:	4652      	mov	r2, sl
 800bffc:	465b      	mov	r3, fp
 800bffe:	f7f4 f97d 	bl	80002fc <__adddf3>
 800c002:	460b      	mov	r3, r1
 800c004:	4983      	ldr	r1, [pc, #524]	; (800c214 <_strtod_l+0xbf4>)
 800c006:	4a85      	ldr	r2, [pc, #532]	; (800c21c <_strtod_l+0xbfc>)
 800c008:	4019      	ands	r1, r3
 800c00a:	4291      	cmp	r1, r2
 800c00c:	4682      	mov	sl, r0
 800c00e:	d960      	bls.n	800c0d2 <_strtod_l+0xab2>
 800c010:	ee18 3a90 	vmov	r3, s17
 800c014:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800c018:	4293      	cmp	r3, r2
 800c01a:	d104      	bne.n	800c026 <_strtod_l+0xa06>
 800c01c:	ee18 3a10 	vmov	r3, s16
 800c020:	3301      	adds	r3, #1
 800c022:	f43f ad45 	beq.w	800bab0 <_strtod_l+0x490>
 800c026:	f8df b200 	ldr.w	fp, [pc, #512]	; 800c228 <_strtod_l+0xc08>
 800c02a:	f04f 3aff 	mov.w	sl, #4294967295
 800c02e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c030:	4620      	mov	r0, r4
 800c032:	f001 fc7d 	bl	800d930 <_Bfree>
 800c036:	9905      	ldr	r1, [sp, #20]
 800c038:	4620      	mov	r0, r4
 800c03a:	f001 fc79 	bl	800d930 <_Bfree>
 800c03e:	4631      	mov	r1, r6
 800c040:	4620      	mov	r0, r4
 800c042:	f001 fc75 	bl	800d930 <_Bfree>
 800c046:	4629      	mov	r1, r5
 800c048:	4620      	mov	r0, r4
 800c04a:	f001 fc71 	bl	800d930 <_Bfree>
 800c04e:	e61a      	b.n	800bc86 <_strtod_l+0x666>
 800c050:	f1ba 0f00 	cmp.w	sl, #0
 800c054:	d11b      	bne.n	800c08e <_strtod_l+0xa6e>
 800c056:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c05a:	b9f3      	cbnz	r3, 800c09a <_strtod_l+0xa7a>
 800c05c:	4b6c      	ldr	r3, [pc, #432]	; (800c210 <_strtod_l+0xbf0>)
 800c05e:	2200      	movs	r2, #0
 800c060:	4640      	mov	r0, r8
 800c062:	4649      	mov	r1, r9
 800c064:	f7f4 fd72 	bl	8000b4c <__aeabi_dcmplt>
 800c068:	b9d0      	cbnz	r0, 800c0a0 <_strtod_l+0xa80>
 800c06a:	4640      	mov	r0, r8
 800c06c:	4649      	mov	r1, r9
 800c06e:	4b6c      	ldr	r3, [pc, #432]	; (800c220 <_strtod_l+0xc00>)
 800c070:	2200      	movs	r2, #0
 800c072:	f7f4 faf9 	bl	8000668 <__aeabi_dmul>
 800c076:	4680      	mov	r8, r0
 800c078:	4689      	mov	r9, r1
 800c07a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c07e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800c082:	9315      	str	r3, [sp, #84]	; 0x54
 800c084:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800c088:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c08c:	e79d      	b.n	800bfca <_strtod_l+0x9aa>
 800c08e:	f1ba 0f01 	cmp.w	sl, #1
 800c092:	d102      	bne.n	800c09a <_strtod_l+0xa7a>
 800c094:	2f00      	cmp	r7, #0
 800c096:	f43f ad83 	beq.w	800bba0 <_strtod_l+0x580>
 800c09a:	4b62      	ldr	r3, [pc, #392]	; (800c224 <_strtod_l+0xc04>)
 800c09c:	2200      	movs	r2, #0
 800c09e:	e78e      	b.n	800bfbe <_strtod_l+0x99e>
 800c0a0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800c220 <_strtod_l+0xc00>
 800c0a4:	f04f 0800 	mov.w	r8, #0
 800c0a8:	e7e7      	b.n	800c07a <_strtod_l+0xa5a>
 800c0aa:	4b5d      	ldr	r3, [pc, #372]	; (800c220 <_strtod_l+0xc00>)
 800c0ac:	4640      	mov	r0, r8
 800c0ae:	4649      	mov	r1, r9
 800c0b0:	2200      	movs	r2, #0
 800c0b2:	f7f4 fad9 	bl	8000668 <__aeabi_dmul>
 800c0b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c0b8:	4680      	mov	r8, r0
 800c0ba:	4689      	mov	r9, r1
 800c0bc:	b933      	cbnz	r3, 800c0cc <_strtod_l+0xaac>
 800c0be:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c0c2:	900e      	str	r0, [sp, #56]	; 0x38
 800c0c4:	930f      	str	r3, [sp, #60]	; 0x3c
 800c0c6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800c0ca:	e7dd      	b.n	800c088 <_strtod_l+0xa68>
 800c0cc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800c0d0:	e7f9      	b.n	800c0c6 <_strtod_l+0xaa6>
 800c0d2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800c0d6:	9b04      	ldr	r3, [sp, #16]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d1a8      	bne.n	800c02e <_strtod_l+0xa0e>
 800c0dc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c0e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c0e2:	0d1b      	lsrs	r3, r3, #20
 800c0e4:	051b      	lsls	r3, r3, #20
 800c0e6:	429a      	cmp	r2, r3
 800c0e8:	d1a1      	bne.n	800c02e <_strtod_l+0xa0e>
 800c0ea:	4640      	mov	r0, r8
 800c0ec:	4649      	mov	r1, r9
 800c0ee:	f7f4 fe1b 	bl	8000d28 <__aeabi_d2lz>
 800c0f2:	f7f4 fa8b 	bl	800060c <__aeabi_l2d>
 800c0f6:	4602      	mov	r2, r0
 800c0f8:	460b      	mov	r3, r1
 800c0fa:	4640      	mov	r0, r8
 800c0fc:	4649      	mov	r1, r9
 800c0fe:	f7f4 f8fb 	bl	80002f8 <__aeabi_dsub>
 800c102:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c104:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c108:	ea43 030a 	orr.w	r3, r3, sl
 800c10c:	4313      	orrs	r3, r2
 800c10e:	4680      	mov	r8, r0
 800c110:	4689      	mov	r9, r1
 800c112:	d055      	beq.n	800c1c0 <_strtod_l+0xba0>
 800c114:	a336      	add	r3, pc, #216	; (adr r3, 800c1f0 <_strtod_l+0xbd0>)
 800c116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c11a:	f7f4 fd17 	bl	8000b4c <__aeabi_dcmplt>
 800c11e:	2800      	cmp	r0, #0
 800c120:	f47f acd0 	bne.w	800bac4 <_strtod_l+0x4a4>
 800c124:	a334      	add	r3, pc, #208	; (adr r3, 800c1f8 <_strtod_l+0xbd8>)
 800c126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c12a:	4640      	mov	r0, r8
 800c12c:	4649      	mov	r1, r9
 800c12e:	f7f4 fd2b 	bl	8000b88 <__aeabi_dcmpgt>
 800c132:	2800      	cmp	r0, #0
 800c134:	f43f af7b 	beq.w	800c02e <_strtod_l+0xa0e>
 800c138:	e4c4      	b.n	800bac4 <_strtod_l+0x4a4>
 800c13a:	9b04      	ldr	r3, [sp, #16]
 800c13c:	b333      	cbz	r3, 800c18c <_strtod_l+0xb6c>
 800c13e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c140:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c144:	d822      	bhi.n	800c18c <_strtod_l+0xb6c>
 800c146:	a32e      	add	r3, pc, #184	; (adr r3, 800c200 <_strtod_l+0xbe0>)
 800c148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c14c:	4640      	mov	r0, r8
 800c14e:	4649      	mov	r1, r9
 800c150:	f7f4 fd06 	bl	8000b60 <__aeabi_dcmple>
 800c154:	b1a0      	cbz	r0, 800c180 <_strtod_l+0xb60>
 800c156:	4649      	mov	r1, r9
 800c158:	4640      	mov	r0, r8
 800c15a:	f7f4 fd5d 	bl	8000c18 <__aeabi_d2uiz>
 800c15e:	2801      	cmp	r0, #1
 800c160:	bf38      	it	cc
 800c162:	2001      	movcc	r0, #1
 800c164:	f7f4 fa06 	bl	8000574 <__aeabi_ui2d>
 800c168:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c16a:	4680      	mov	r8, r0
 800c16c:	4689      	mov	r9, r1
 800c16e:	bb23      	cbnz	r3, 800c1ba <_strtod_l+0xb9a>
 800c170:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c174:	9010      	str	r0, [sp, #64]	; 0x40
 800c176:	9311      	str	r3, [sp, #68]	; 0x44
 800c178:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c17c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c180:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c182:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c184:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c188:	1a9b      	subs	r3, r3, r2
 800c18a:	9309      	str	r3, [sp, #36]	; 0x24
 800c18c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c190:	eeb0 0a48 	vmov.f32	s0, s16
 800c194:	eef0 0a68 	vmov.f32	s1, s17
 800c198:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c19c:	f001 fefa 	bl	800df94 <__ulp>
 800c1a0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c1a4:	ec53 2b10 	vmov	r2, r3, d0
 800c1a8:	f7f4 fa5e 	bl	8000668 <__aeabi_dmul>
 800c1ac:	ec53 2b18 	vmov	r2, r3, d8
 800c1b0:	f7f4 f8a4 	bl	80002fc <__adddf3>
 800c1b4:	4682      	mov	sl, r0
 800c1b6:	468b      	mov	fp, r1
 800c1b8:	e78d      	b.n	800c0d6 <_strtod_l+0xab6>
 800c1ba:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800c1be:	e7db      	b.n	800c178 <_strtod_l+0xb58>
 800c1c0:	a311      	add	r3, pc, #68	; (adr r3, 800c208 <_strtod_l+0xbe8>)
 800c1c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1c6:	f7f4 fcc1 	bl	8000b4c <__aeabi_dcmplt>
 800c1ca:	e7b2      	b.n	800c132 <_strtod_l+0xb12>
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	930a      	str	r3, [sp, #40]	; 0x28
 800c1d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c1d2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c1d4:	6013      	str	r3, [r2, #0]
 800c1d6:	f7ff ba6b 	b.w	800b6b0 <_strtod_l+0x90>
 800c1da:	2a65      	cmp	r2, #101	; 0x65
 800c1dc:	f43f ab5f 	beq.w	800b89e <_strtod_l+0x27e>
 800c1e0:	2a45      	cmp	r2, #69	; 0x45
 800c1e2:	f43f ab5c 	beq.w	800b89e <_strtod_l+0x27e>
 800c1e6:	2301      	movs	r3, #1
 800c1e8:	f7ff bb94 	b.w	800b914 <_strtod_l+0x2f4>
 800c1ec:	f3af 8000 	nop.w
 800c1f0:	94a03595 	.word	0x94a03595
 800c1f4:	3fdfffff 	.word	0x3fdfffff
 800c1f8:	35afe535 	.word	0x35afe535
 800c1fc:	3fe00000 	.word	0x3fe00000
 800c200:	ffc00000 	.word	0xffc00000
 800c204:	41dfffff 	.word	0x41dfffff
 800c208:	94a03595 	.word	0x94a03595
 800c20c:	3fcfffff 	.word	0x3fcfffff
 800c210:	3ff00000 	.word	0x3ff00000
 800c214:	7ff00000 	.word	0x7ff00000
 800c218:	7fe00000 	.word	0x7fe00000
 800c21c:	7c9fffff 	.word	0x7c9fffff
 800c220:	3fe00000 	.word	0x3fe00000
 800c224:	bff00000 	.word	0xbff00000
 800c228:	7fefffff 	.word	0x7fefffff

0800c22c <_strtod_r>:
 800c22c:	4b01      	ldr	r3, [pc, #4]	; (800c234 <_strtod_r+0x8>)
 800c22e:	f7ff b9f7 	b.w	800b620 <_strtod_l>
 800c232:	bf00      	nop
 800c234:	200000a0 	.word	0x200000a0

0800c238 <strtod>:
 800c238:	460a      	mov	r2, r1
 800c23a:	4601      	mov	r1, r0
 800c23c:	4802      	ldr	r0, [pc, #8]	; (800c248 <strtod+0x10>)
 800c23e:	4b03      	ldr	r3, [pc, #12]	; (800c24c <strtod+0x14>)
 800c240:	6800      	ldr	r0, [r0, #0]
 800c242:	f7ff b9ed 	b.w	800b620 <_strtod_l>
 800c246:	bf00      	nop
 800c248:	20000038 	.word	0x20000038
 800c24c:	200000a0 	.word	0x200000a0

0800c250 <strtok>:
 800c250:	4b16      	ldr	r3, [pc, #88]	; (800c2ac <strtok+0x5c>)
 800c252:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c254:	681e      	ldr	r6, [r3, #0]
 800c256:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800c258:	4605      	mov	r5, r0
 800c25a:	b9fc      	cbnz	r4, 800c29c <strtok+0x4c>
 800c25c:	2050      	movs	r0, #80	; 0x50
 800c25e:	9101      	str	r1, [sp, #4]
 800c260:	f001 fafe 	bl	800d860 <malloc>
 800c264:	9901      	ldr	r1, [sp, #4]
 800c266:	65b0      	str	r0, [r6, #88]	; 0x58
 800c268:	4602      	mov	r2, r0
 800c26a:	b920      	cbnz	r0, 800c276 <strtok+0x26>
 800c26c:	4b10      	ldr	r3, [pc, #64]	; (800c2b0 <strtok+0x60>)
 800c26e:	4811      	ldr	r0, [pc, #68]	; (800c2b4 <strtok+0x64>)
 800c270:	2157      	movs	r1, #87	; 0x57
 800c272:	f000 f8d7 	bl	800c424 <__assert_func>
 800c276:	e9c0 4400 	strd	r4, r4, [r0]
 800c27a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800c27e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800c282:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800c286:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800c28a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800c28e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800c292:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800c296:	6184      	str	r4, [r0, #24]
 800c298:	7704      	strb	r4, [r0, #28]
 800c29a:	6244      	str	r4, [r0, #36]	; 0x24
 800c29c:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800c29e:	2301      	movs	r3, #1
 800c2a0:	4628      	mov	r0, r5
 800c2a2:	b002      	add	sp, #8
 800c2a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c2a8:	f000 b806 	b.w	800c2b8 <__strtok_r>
 800c2ac:	20000038 	.word	0x20000038
 800c2b0:	0800f728 	.word	0x0800f728
 800c2b4:	0800f73f 	.word	0x0800f73f

0800c2b8 <__strtok_r>:
 800c2b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c2ba:	b908      	cbnz	r0, 800c2c0 <__strtok_r+0x8>
 800c2bc:	6810      	ldr	r0, [r2, #0]
 800c2be:	b188      	cbz	r0, 800c2e4 <__strtok_r+0x2c>
 800c2c0:	4604      	mov	r4, r0
 800c2c2:	4620      	mov	r0, r4
 800c2c4:	f814 5b01 	ldrb.w	r5, [r4], #1
 800c2c8:	460f      	mov	r7, r1
 800c2ca:	f817 6b01 	ldrb.w	r6, [r7], #1
 800c2ce:	b91e      	cbnz	r6, 800c2d8 <__strtok_r+0x20>
 800c2d0:	b965      	cbnz	r5, 800c2ec <__strtok_r+0x34>
 800c2d2:	6015      	str	r5, [r2, #0]
 800c2d4:	4628      	mov	r0, r5
 800c2d6:	e005      	b.n	800c2e4 <__strtok_r+0x2c>
 800c2d8:	42b5      	cmp	r5, r6
 800c2da:	d1f6      	bne.n	800c2ca <__strtok_r+0x12>
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d1f0      	bne.n	800c2c2 <__strtok_r+0xa>
 800c2e0:	6014      	str	r4, [r2, #0]
 800c2e2:	7003      	strb	r3, [r0, #0]
 800c2e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c2e6:	461c      	mov	r4, r3
 800c2e8:	e00c      	b.n	800c304 <__strtok_r+0x4c>
 800c2ea:	b915      	cbnz	r5, 800c2f2 <__strtok_r+0x3a>
 800c2ec:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c2f0:	460e      	mov	r6, r1
 800c2f2:	f816 5b01 	ldrb.w	r5, [r6], #1
 800c2f6:	42ab      	cmp	r3, r5
 800c2f8:	d1f7      	bne.n	800c2ea <__strtok_r+0x32>
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d0f3      	beq.n	800c2e6 <__strtok_r+0x2e>
 800c2fe:	2300      	movs	r3, #0
 800c300:	f804 3c01 	strb.w	r3, [r4, #-1]
 800c304:	6014      	str	r4, [r2, #0]
 800c306:	e7ed      	b.n	800c2e4 <__strtok_r+0x2c>

0800c308 <_strtol_l.constprop.0>:
 800c308:	2b01      	cmp	r3, #1
 800c30a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c30e:	d001      	beq.n	800c314 <_strtol_l.constprop.0+0xc>
 800c310:	2b24      	cmp	r3, #36	; 0x24
 800c312:	d906      	bls.n	800c322 <_strtol_l.constprop.0+0x1a>
 800c314:	f7fe fa60 	bl	800a7d8 <__errno>
 800c318:	2316      	movs	r3, #22
 800c31a:	6003      	str	r3, [r0, #0]
 800c31c:	2000      	movs	r0, #0
 800c31e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c322:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c408 <_strtol_l.constprop.0+0x100>
 800c326:	460d      	mov	r5, r1
 800c328:	462e      	mov	r6, r5
 800c32a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c32e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800c332:	f017 0708 	ands.w	r7, r7, #8
 800c336:	d1f7      	bne.n	800c328 <_strtol_l.constprop.0+0x20>
 800c338:	2c2d      	cmp	r4, #45	; 0x2d
 800c33a:	d132      	bne.n	800c3a2 <_strtol_l.constprop.0+0x9a>
 800c33c:	782c      	ldrb	r4, [r5, #0]
 800c33e:	2701      	movs	r7, #1
 800c340:	1cb5      	adds	r5, r6, #2
 800c342:	2b00      	cmp	r3, #0
 800c344:	d05b      	beq.n	800c3fe <_strtol_l.constprop.0+0xf6>
 800c346:	2b10      	cmp	r3, #16
 800c348:	d109      	bne.n	800c35e <_strtol_l.constprop.0+0x56>
 800c34a:	2c30      	cmp	r4, #48	; 0x30
 800c34c:	d107      	bne.n	800c35e <_strtol_l.constprop.0+0x56>
 800c34e:	782c      	ldrb	r4, [r5, #0]
 800c350:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c354:	2c58      	cmp	r4, #88	; 0x58
 800c356:	d14d      	bne.n	800c3f4 <_strtol_l.constprop.0+0xec>
 800c358:	786c      	ldrb	r4, [r5, #1]
 800c35a:	2310      	movs	r3, #16
 800c35c:	3502      	adds	r5, #2
 800c35e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c362:	f108 38ff 	add.w	r8, r8, #4294967295
 800c366:	f04f 0c00 	mov.w	ip, #0
 800c36a:	fbb8 f9f3 	udiv	r9, r8, r3
 800c36e:	4666      	mov	r6, ip
 800c370:	fb03 8a19 	mls	sl, r3, r9, r8
 800c374:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800c378:	f1be 0f09 	cmp.w	lr, #9
 800c37c:	d816      	bhi.n	800c3ac <_strtol_l.constprop.0+0xa4>
 800c37e:	4674      	mov	r4, lr
 800c380:	42a3      	cmp	r3, r4
 800c382:	dd24      	ble.n	800c3ce <_strtol_l.constprop.0+0xc6>
 800c384:	f1bc 0f00 	cmp.w	ip, #0
 800c388:	db1e      	blt.n	800c3c8 <_strtol_l.constprop.0+0xc0>
 800c38a:	45b1      	cmp	r9, r6
 800c38c:	d31c      	bcc.n	800c3c8 <_strtol_l.constprop.0+0xc0>
 800c38e:	d101      	bne.n	800c394 <_strtol_l.constprop.0+0x8c>
 800c390:	45a2      	cmp	sl, r4
 800c392:	db19      	blt.n	800c3c8 <_strtol_l.constprop.0+0xc0>
 800c394:	fb06 4603 	mla	r6, r6, r3, r4
 800c398:	f04f 0c01 	mov.w	ip, #1
 800c39c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c3a0:	e7e8      	b.n	800c374 <_strtol_l.constprop.0+0x6c>
 800c3a2:	2c2b      	cmp	r4, #43	; 0x2b
 800c3a4:	bf04      	itt	eq
 800c3a6:	782c      	ldrbeq	r4, [r5, #0]
 800c3a8:	1cb5      	addeq	r5, r6, #2
 800c3aa:	e7ca      	b.n	800c342 <_strtol_l.constprop.0+0x3a>
 800c3ac:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800c3b0:	f1be 0f19 	cmp.w	lr, #25
 800c3b4:	d801      	bhi.n	800c3ba <_strtol_l.constprop.0+0xb2>
 800c3b6:	3c37      	subs	r4, #55	; 0x37
 800c3b8:	e7e2      	b.n	800c380 <_strtol_l.constprop.0+0x78>
 800c3ba:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800c3be:	f1be 0f19 	cmp.w	lr, #25
 800c3c2:	d804      	bhi.n	800c3ce <_strtol_l.constprop.0+0xc6>
 800c3c4:	3c57      	subs	r4, #87	; 0x57
 800c3c6:	e7db      	b.n	800c380 <_strtol_l.constprop.0+0x78>
 800c3c8:	f04f 3cff 	mov.w	ip, #4294967295
 800c3cc:	e7e6      	b.n	800c39c <_strtol_l.constprop.0+0x94>
 800c3ce:	f1bc 0f00 	cmp.w	ip, #0
 800c3d2:	da05      	bge.n	800c3e0 <_strtol_l.constprop.0+0xd8>
 800c3d4:	2322      	movs	r3, #34	; 0x22
 800c3d6:	6003      	str	r3, [r0, #0]
 800c3d8:	4646      	mov	r6, r8
 800c3da:	b942      	cbnz	r2, 800c3ee <_strtol_l.constprop.0+0xe6>
 800c3dc:	4630      	mov	r0, r6
 800c3de:	e79e      	b.n	800c31e <_strtol_l.constprop.0+0x16>
 800c3e0:	b107      	cbz	r7, 800c3e4 <_strtol_l.constprop.0+0xdc>
 800c3e2:	4276      	negs	r6, r6
 800c3e4:	2a00      	cmp	r2, #0
 800c3e6:	d0f9      	beq.n	800c3dc <_strtol_l.constprop.0+0xd4>
 800c3e8:	f1bc 0f00 	cmp.w	ip, #0
 800c3ec:	d000      	beq.n	800c3f0 <_strtol_l.constprop.0+0xe8>
 800c3ee:	1e69      	subs	r1, r5, #1
 800c3f0:	6011      	str	r1, [r2, #0]
 800c3f2:	e7f3      	b.n	800c3dc <_strtol_l.constprop.0+0xd4>
 800c3f4:	2430      	movs	r4, #48	; 0x30
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d1b1      	bne.n	800c35e <_strtol_l.constprop.0+0x56>
 800c3fa:	2308      	movs	r3, #8
 800c3fc:	e7af      	b.n	800c35e <_strtol_l.constprop.0+0x56>
 800c3fe:	2c30      	cmp	r4, #48	; 0x30
 800c400:	d0a5      	beq.n	800c34e <_strtol_l.constprop.0+0x46>
 800c402:	230a      	movs	r3, #10
 800c404:	e7ab      	b.n	800c35e <_strtol_l.constprop.0+0x56>
 800c406:	bf00      	nop
 800c408:	0800f7d9 	.word	0x0800f7d9

0800c40c <_strtol_r>:
 800c40c:	f7ff bf7c 	b.w	800c308 <_strtol_l.constprop.0>

0800c410 <strtol>:
 800c410:	4613      	mov	r3, r2
 800c412:	460a      	mov	r2, r1
 800c414:	4601      	mov	r1, r0
 800c416:	4802      	ldr	r0, [pc, #8]	; (800c420 <strtol+0x10>)
 800c418:	6800      	ldr	r0, [r0, #0]
 800c41a:	f7ff bf75 	b.w	800c308 <_strtol_l.constprop.0>
 800c41e:	bf00      	nop
 800c420:	20000038 	.word	0x20000038

0800c424 <__assert_func>:
 800c424:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c426:	4614      	mov	r4, r2
 800c428:	461a      	mov	r2, r3
 800c42a:	4b09      	ldr	r3, [pc, #36]	; (800c450 <__assert_func+0x2c>)
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	4605      	mov	r5, r0
 800c430:	68d8      	ldr	r0, [r3, #12]
 800c432:	b14c      	cbz	r4, 800c448 <__assert_func+0x24>
 800c434:	4b07      	ldr	r3, [pc, #28]	; (800c454 <__assert_func+0x30>)
 800c436:	9100      	str	r1, [sp, #0]
 800c438:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c43c:	4906      	ldr	r1, [pc, #24]	; (800c458 <__assert_func+0x34>)
 800c43e:	462b      	mov	r3, r5
 800c440:	f000 fe88 	bl	800d154 <fiprintf>
 800c444:	f002 fb9e 	bl	800eb84 <abort>
 800c448:	4b04      	ldr	r3, [pc, #16]	; (800c45c <__assert_func+0x38>)
 800c44a:	461c      	mov	r4, r3
 800c44c:	e7f3      	b.n	800c436 <__assert_func+0x12>
 800c44e:	bf00      	nop
 800c450:	20000038 	.word	0x20000038
 800c454:	0800f79c 	.word	0x0800f79c
 800c458:	0800f7a9 	.word	0x0800f7a9
 800c45c:	0800f7d7 	.word	0x0800f7d7

0800c460 <quorem>:
 800c460:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c464:	6903      	ldr	r3, [r0, #16]
 800c466:	690c      	ldr	r4, [r1, #16]
 800c468:	42a3      	cmp	r3, r4
 800c46a:	4607      	mov	r7, r0
 800c46c:	f2c0 8081 	blt.w	800c572 <quorem+0x112>
 800c470:	3c01      	subs	r4, #1
 800c472:	f101 0814 	add.w	r8, r1, #20
 800c476:	f100 0514 	add.w	r5, r0, #20
 800c47a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c47e:	9301      	str	r3, [sp, #4]
 800c480:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c484:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c488:	3301      	adds	r3, #1
 800c48a:	429a      	cmp	r2, r3
 800c48c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c490:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c494:	fbb2 f6f3 	udiv	r6, r2, r3
 800c498:	d331      	bcc.n	800c4fe <quorem+0x9e>
 800c49a:	f04f 0e00 	mov.w	lr, #0
 800c49e:	4640      	mov	r0, r8
 800c4a0:	46ac      	mov	ip, r5
 800c4a2:	46f2      	mov	sl, lr
 800c4a4:	f850 2b04 	ldr.w	r2, [r0], #4
 800c4a8:	b293      	uxth	r3, r2
 800c4aa:	fb06 e303 	mla	r3, r6, r3, lr
 800c4ae:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c4b2:	b29b      	uxth	r3, r3
 800c4b4:	ebaa 0303 	sub.w	r3, sl, r3
 800c4b8:	f8dc a000 	ldr.w	sl, [ip]
 800c4bc:	0c12      	lsrs	r2, r2, #16
 800c4be:	fa13 f38a 	uxtah	r3, r3, sl
 800c4c2:	fb06 e202 	mla	r2, r6, r2, lr
 800c4c6:	9300      	str	r3, [sp, #0]
 800c4c8:	9b00      	ldr	r3, [sp, #0]
 800c4ca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c4ce:	b292      	uxth	r2, r2
 800c4d0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c4d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c4d8:	f8bd 3000 	ldrh.w	r3, [sp]
 800c4dc:	4581      	cmp	r9, r0
 800c4de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c4e2:	f84c 3b04 	str.w	r3, [ip], #4
 800c4e6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c4ea:	d2db      	bcs.n	800c4a4 <quorem+0x44>
 800c4ec:	f855 300b 	ldr.w	r3, [r5, fp]
 800c4f0:	b92b      	cbnz	r3, 800c4fe <quorem+0x9e>
 800c4f2:	9b01      	ldr	r3, [sp, #4]
 800c4f4:	3b04      	subs	r3, #4
 800c4f6:	429d      	cmp	r5, r3
 800c4f8:	461a      	mov	r2, r3
 800c4fa:	d32e      	bcc.n	800c55a <quorem+0xfa>
 800c4fc:	613c      	str	r4, [r7, #16]
 800c4fe:	4638      	mov	r0, r7
 800c500:	f001 fca2 	bl	800de48 <__mcmp>
 800c504:	2800      	cmp	r0, #0
 800c506:	db24      	blt.n	800c552 <quorem+0xf2>
 800c508:	3601      	adds	r6, #1
 800c50a:	4628      	mov	r0, r5
 800c50c:	f04f 0c00 	mov.w	ip, #0
 800c510:	f858 2b04 	ldr.w	r2, [r8], #4
 800c514:	f8d0 e000 	ldr.w	lr, [r0]
 800c518:	b293      	uxth	r3, r2
 800c51a:	ebac 0303 	sub.w	r3, ip, r3
 800c51e:	0c12      	lsrs	r2, r2, #16
 800c520:	fa13 f38e 	uxtah	r3, r3, lr
 800c524:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c528:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c52c:	b29b      	uxth	r3, r3
 800c52e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c532:	45c1      	cmp	r9, r8
 800c534:	f840 3b04 	str.w	r3, [r0], #4
 800c538:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c53c:	d2e8      	bcs.n	800c510 <quorem+0xb0>
 800c53e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c542:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c546:	b922      	cbnz	r2, 800c552 <quorem+0xf2>
 800c548:	3b04      	subs	r3, #4
 800c54a:	429d      	cmp	r5, r3
 800c54c:	461a      	mov	r2, r3
 800c54e:	d30a      	bcc.n	800c566 <quorem+0x106>
 800c550:	613c      	str	r4, [r7, #16]
 800c552:	4630      	mov	r0, r6
 800c554:	b003      	add	sp, #12
 800c556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c55a:	6812      	ldr	r2, [r2, #0]
 800c55c:	3b04      	subs	r3, #4
 800c55e:	2a00      	cmp	r2, #0
 800c560:	d1cc      	bne.n	800c4fc <quorem+0x9c>
 800c562:	3c01      	subs	r4, #1
 800c564:	e7c7      	b.n	800c4f6 <quorem+0x96>
 800c566:	6812      	ldr	r2, [r2, #0]
 800c568:	3b04      	subs	r3, #4
 800c56a:	2a00      	cmp	r2, #0
 800c56c:	d1f0      	bne.n	800c550 <quorem+0xf0>
 800c56e:	3c01      	subs	r4, #1
 800c570:	e7eb      	b.n	800c54a <quorem+0xea>
 800c572:	2000      	movs	r0, #0
 800c574:	e7ee      	b.n	800c554 <quorem+0xf4>
	...

0800c578 <_dtoa_r>:
 800c578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c57c:	ed2d 8b04 	vpush	{d8-d9}
 800c580:	ec57 6b10 	vmov	r6, r7, d0
 800c584:	b093      	sub	sp, #76	; 0x4c
 800c586:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c588:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c58c:	9106      	str	r1, [sp, #24]
 800c58e:	ee10 aa10 	vmov	sl, s0
 800c592:	4604      	mov	r4, r0
 800c594:	9209      	str	r2, [sp, #36]	; 0x24
 800c596:	930c      	str	r3, [sp, #48]	; 0x30
 800c598:	46bb      	mov	fp, r7
 800c59a:	b975      	cbnz	r5, 800c5ba <_dtoa_r+0x42>
 800c59c:	2010      	movs	r0, #16
 800c59e:	f001 f95f 	bl	800d860 <malloc>
 800c5a2:	4602      	mov	r2, r0
 800c5a4:	6260      	str	r0, [r4, #36]	; 0x24
 800c5a6:	b920      	cbnz	r0, 800c5b2 <_dtoa_r+0x3a>
 800c5a8:	4ba7      	ldr	r3, [pc, #668]	; (800c848 <_dtoa_r+0x2d0>)
 800c5aa:	21ea      	movs	r1, #234	; 0xea
 800c5ac:	48a7      	ldr	r0, [pc, #668]	; (800c84c <_dtoa_r+0x2d4>)
 800c5ae:	f7ff ff39 	bl	800c424 <__assert_func>
 800c5b2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c5b6:	6005      	str	r5, [r0, #0]
 800c5b8:	60c5      	str	r5, [r0, #12]
 800c5ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c5bc:	6819      	ldr	r1, [r3, #0]
 800c5be:	b151      	cbz	r1, 800c5d6 <_dtoa_r+0x5e>
 800c5c0:	685a      	ldr	r2, [r3, #4]
 800c5c2:	604a      	str	r2, [r1, #4]
 800c5c4:	2301      	movs	r3, #1
 800c5c6:	4093      	lsls	r3, r2
 800c5c8:	608b      	str	r3, [r1, #8]
 800c5ca:	4620      	mov	r0, r4
 800c5cc:	f001 f9b0 	bl	800d930 <_Bfree>
 800c5d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c5d2:	2200      	movs	r2, #0
 800c5d4:	601a      	str	r2, [r3, #0]
 800c5d6:	1e3b      	subs	r3, r7, #0
 800c5d8:	bfaa      	itet	ge
 800c5da:	2300      	movge	r3, #0
 800c5dc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800c5e0:	f8c8 3000 	strge.w	r3, [r8]
 800c5e4:	4b9a      	ldr	r3, [pc, #616]	; (800c850 <_dtoa_r+0x2d8>)
 800c5e6:	bfbc      	itt	lt
 800c5e8:	2201      	movlt	r2, #1
 800c5ea:	f8c8 2000 	strlt.w	r2, [r8]
 800c5ee:	ea33 030b 	bics.w	r3, r3, fp
 800c5f2:	d11b      	bne.n	800c62c <_dtoa_r+0xb4>
 800c5f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c5f6:	f242 730f 	movw	r3, #9999	; 0x270f
 800c5fa:	6013      	str	r3, [r2, #0]
 800c5fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c600:	4333      	orrs	r3, r6
 800c602:	f000 8592 	beq.w	800d12a <_dtoa_r+0xbb2>
 800c606:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c608:	b963      	cbnz	r3, 800c624 <_dtoa_r+0xac>
 800c60a:	4b92      	ldr	r3, [pc, #584]	; (800c854 <_dtoa_r+0x2dc>)
 800c60c:	e022      	b.n	800c654 <_dtoa_r+0xdc>
 800c60e:	4b92      	ldr	r3, [pc, #584]	; (800c858 <_dtoa_r+0x2e0>)
 800c610:	9301      	str	r3, [sp, #4]
 800c612:	3308      	adds	r3, #8
 800c614:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c616:	6013      	str	r3, [r2, #0]
 800c618:	9801      	ldr	r0, [sp, #4]
 800c61a:	b013      	add	sp, #76	; 0x4c
 800c61c:	ecbd 8b04 	vpop	{d8-d9}
 800c620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c624:	4b8b      	ldr	r3, [pc, #556]	; (800c854 <_dtoa_r+0x2dc>)
 800c626:	9301      	str	r3, [sp, #4]
 800c628:	3303      	adds	r3, #3
 800c62a:	e7f3      	b.n	800c614 <_dtoa_r+0x9c>
 800c62c:	2200      	movs	r2, #0
 800c62e:	2300      	movs	r3, #0
 800c630:	4650      	mov	r0, sl
 800c632:	4659      	mov	r1, fp
 800c634:	f7f4 fa80 	bl	8000b38 <__aeabi_dcmpeq>
 800c638:	ec4b ab19 	vmov	d9, sl, fp
 800c63c:	4680      	mov	r8, r0
 800c63e:	b158      	cbz	r0, 800c658 <_dtoa_r+0xe0>
 800c640:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c642:	2301      	movs	r3, #1
 800c644:	6013      	str	r3, [r2, #0]
 800c646:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c648:	2b00      	cmp	r3, #0
 800c64a:	f000 856b 	beq.w	800d124 <_dtoa_r+0xbac>
 800c64e:	4883      	ldr	r0, [pc, #524]	; (800c85c <_dtoa_r+0x2e4>)
 800c650:	6018      	str	r0, [r3, #0]
 800c652:	1e43      	subs	r3, r0, #1
 800c654:	9301      	str	r3, [sp, #4]
 800c656:	e7df      	b.n	800c618 <_dtoa_r+0xa0>
 800c658:	ec4b ab10 	vmov	d0, sl, fp
 800c65c:	aa10      	add	r2, sp, #64	; 0x40
 800c65e:	a911      	add	r1, sp, #68	; 0x44
 800c660:	4620      	mov	r0, r4
 800c662:	f001 fd13 	bl	800e08c <__d2b>
 800c666:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800c66a:	ee08 0a10 	vmov	s16, r0
 800c66e:	2d00      	cmp	r5, #0
 800c670:	f000 8084 	beq.w	800c77c <_dtoa_r+0x204>
 800c674:	ee19 3a90 	vmov	r3, s19
 800c678:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c67c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c680:	4656      	mov	r6, sl
 800c682:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c686:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c68a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800c68e:	4b74      	ldr	r3, [pc, #464]	; (800c860 <_dtoa_r+0x2e8>)
 800c690:	2200      	movs	r2, #0
 800c692:	4630      	mov	r0, r6
 800c694:	4639      	mov	r1, r7
 800c696:	f7f3 fe2f 	bl	80002f8 <__aeabi_dsub>
 800c69a:	a365      	add	r3, pc, #404	; (adr r3, 800c830 <_dtoa_r+0x2b8>)
 800c69c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6a0:	f7f3 ffe2 	bl	8000668 <__aeabi_dmul>
 800c6a4:	a364      	add	r3, pc, #400	; (adr r3, 800c838 <_dtoa_r+0x2c0>)
 800c6a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6aa:	f7f3 fe27 	bl	80002fc <__adddf3>
 800c6ae:	4606      	mov	r6, r0
 800c6b0:	4628      	mov	r0, r5
 800c6b2:	460f      	mov	r7, r1
 800c6b4:	f7f3 ff6e 	bl	8000594 <__aeabi_i2d>
 800c6b8:	a361      	add	r3, pc, #388	; (adr r3, 800c840 <_dtoa_r+0x2c8>)
 800c6ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6be:	f7f3 ffd3 	bl	8000668 <__aeabi_dmul>
 800c6c2:	4602      	mov	r2, r0
 800c6c4:	460b      	mov	r3, r1
 800c6c6:	4630      	mov	r0, r6
 800c6c8:	4639      	mov	r1, r7
 800c6ca:	f7f3 fe17 	bl	80002fc <__adddf3>
 800c6ce:	4606      	mov	r6, r0
 800c6d0:	460f      	mov	r7, r1
 800c6d2:	f7f4 fa79 	bl	8000bc8 <__aeabi_d2iz>
 800c6d6:	2200      	movs	r2, #0
 800c6d8:	9000      	str	r0, [sp, #0]
 800c6da:	2300      	movs	r3, #0
 800c6dc:	4630      	mov	r0, r6
 800c6de:	4639      	mov	r1, r7
 800c6e0:	f7f4 fa34 	bl	8000b4c <__aeabi_dcmplt>
 800c6e4:	b150      	cbz	r0, 800c6fc <_dtoa_r+0x184>
 800c6e6:	9800      	ldr	r0, [sp, #0]
 800c6e8:	f7f3 ff54 	bl	8000594 <__aeabi_i2d>
 800c6ec:	4632      	mov	r2, r6
 800c6ee:	463b      	mov	r3, r7
 800c6f0:	f7f4 fa22 	bl	8000b38 <__aeabi_dcmpeq>
 800c6f4:	b910      	cbnz	r0, 800c6fc <_dtoa_r+0x184>
 800c6f6:	9b00      	ldr	r3, [sp, #0]
 800c6f8:	3b01      	subs	r3, #1
 800c6fa:	9300      	str	r3, [sp, #0]
 800c6fc:	9b00      	ldr	r3, [sp, #0]
 800c6fe:	2b16      	cmp	r3, #22
 800c700:	d85a      	bhi.n	800c7b8 <_dtoa_r+0x240>
 800c702:	9a00      	ldr	r2, [sp, #0]
 800c704:	4b57      	ldr	r3, [pc, #348]	; (800c864 <_dtoa_r+0x2ec>)
 800c706:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c70a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c70e:	ec51 0b19 	vmov	r0, r1, d9
 800c712:	f7f4 fa1b 	bl	8000b4c <__aeabi_dcmplt>
 800c716:	2800      	cmp	r0, #0
 800c718:	d050      	beq.n	800c7bc <_dtoa_r+0x244>
 800c71a:	9b00      	ldr	r3, [sp, #0]
 800c71c:	3b01      	subs	r3, #1
 800c71e:	9300      	str	r3, [sp, #0]
 800c720:	2300      	movs	r3, #0
 800c722:	930b      	str	r3, [sp, #44]	; 0x2c
 800c724:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c726:	1b5d      	subs	r5, r3, r5
 800c728:	1e6b      	subs	r3, r5, #1
 800c72a:	9305      	str	r3, [sp, #20]
 800c72c:	bf45      	ittet	mi
 800c72e:	f1c5 0301 	rsbmi	r3, r5, #1
 800c732:	9304      	strmi	r3, [sp, #16]
 800c734:	2300      	movpl	r3, #0
 800c736:	2300      	movmi	r3, #0
 800c738:	bf4c      	ite	mi
 800c73a:	9305      	strmi	r3, [sp, #20]
 800c73c:	9304      	strpl	r3, [sp, #16]
 800c73e:	9b00      	ldr	r3, [sp, #0]
 800c740:	2b00      	cmp	r3, #0
 800c742:	db3d      	blt.n	800c7c0 <_dtoa_r+0x248>
 800c744:	9b05      	ldr	r3, [sp, #20]
 800c746:	9a00      	ldr	r2, [sp, #0]
 800c748:	920a      	str	r2, [sp, #40]	; 0x28
 800c74a:	4413      	add	r3, r2
 800c74c:	9305      	str	r3, [sp, #20]
 800c74e:	2300      	movs	r3, #0
 800c750:	9307      	str	r3, [sp, #28]
 800c752:	9b06      	ldr	r3, [sp, #24]
 800c754:	2b09      	cmp	r3, #9
 800c756:	f200 8089 	bhi.w	800c86c <_dtoa_r+0x2f4>
 800c75a:	2b05      	cmp	r3, #5
 800c75c:	bfc4      	itt	gt
 800c75e:	3b04      	subgt	r3, #4
 800c760:	9306      	strgt	r3, [sp, #24]
 800c762:	9b06      	ldr	r3, [sp, #24]
 800c764:	f1a3 0302 	sub.w	r3, r3, #2
 800c768:	bfcc      	ite	gt
 800c76a:	2500      	movgt	r5, #0
 800c76c:	2501      	movle	r5, #1
 800c76e:	2b03      	cmp	r3, #3
 800c770:	f200 8087 	bhi.w	800c882 <_dtoa_r+0x30a>
 800c774:	e8df f003 	tbb	[pc, r3]
 800c778:	59383a2d 	.word	0x59383a2d
 800c77c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c780:	441d      	add	r5, r3
 800c782:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c786:	2b20      	cmp	r3, #32
 800c788:	bfc1      	itttt	gt
 800c78a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c78e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c792:	fa0b f303 	lslgt.w	r3, fp, r3
 800c796:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c79a:	bfda      	itte	le
 800c79c:	f1c3 0320 	rsble	r3, r3, #32
 800c7a0:	fa06 f003 	lslle.w	r0, r6, r3
 800c7a4:	4318      	orrgt	r0, r3
 800c7a6:	f7f3 fee5 	bl	8000574 <__aeabi_ui2d>
 800c7aa:	2301      	movs	r3, #1
 800c7ac:	4606      	mov	r6, r0
 800c7ae:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c7b2:	3d01      	subs	r5, #1
 800c7b4:	930e      	str	r3, [sp, #56]	; 0x38
 800c7b6:	e76a      	b.n	800c68e <_dtoa_r+0x116>
 800c7b8:	2301      	movs	r3, #1
 800c7ba:	e7b2      	b.n	800c722 <_dtoa_r+0x1aa>
 800c7bc:	900b      	str	r0, [sp, #44]	; 0x2c
 800c7be:	e7b1      	b.n	800c724 <_dtoa_r+0x1ac>
 800c7c0:	9b04      	ldr	r3, [sp, #16]
 800c7c2:	9a00      	ldr	r2, [sp, #0]
 800c7c4:	1a9b      	subs	r3, r3, r2
 800c7c6:	9304      	str	r3, [sp, #16]
 800c7c8:	4253      	negs	r3, r2
 800c7ca:	9307      	str	r3, [sp, #28]
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	930a      	str	r3, [sp, #40]	; 0x28
 800c7d0:	e7bf      	b.n	800c752 <_dtoa_r+0x1da>
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	9308      	str	r3, [sp, #32]
 800c7d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	dc55      	bgt.n	800c888 <_dtoa_r+0x310>
 800c7dc:	2301      	movs	r3, #1
 800c7de:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c7e2:	461a      	mov	r2, r3
 800c7e4:	9209      	str	r2, [sp, #36]	; 0x24
 800c7e6:	e00c      	b.n	800c802 <_dtoa_r+0x28a>
 800c7e8:	2301      	movs	r3, #1
 800c7ea:	e7f3      	b.n	800c7d4 <_dtoa_r+0x25c>
 800c7ec:	2300      	movs	r3, #0
 800c7ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c7f0:	9308      	str	r3, [sp, #32]
 800c7f2:	9b00      	ldr	r3, [sp, #0]
 800c7f4:	4413      	add	r3, r2
 800c7f6:	9302      	str	r3, [sp, #8]
 800c7f8:	3301      	adds	r3, #1
 800c7fa:	2b01      	cmp	r3, #1
 800c7fc:	9303      	str	r3, [sp, #12]
 800c7fe:	bfb8      	it	lt
 800c800:	2301      	movlt	r3, #1
 800c802:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c804:	2200      	movs	r2, #0
 800c806:	6042      	str	r2, [r0, #4]
 800c808:	2204      	movs	r2, #4
 800c80a:	f102 0614 	add.w	r6, r2, #20
 800c80e:	429e      	cmp	r6, r3
 800c810:	6841      	ldr	r1, [r0, #4]
 800c812:	d93d      	bls.n	800c890 <_dtoa_r+0x318>
 800c814:	4620      	mov	r0, r4
 800c816:	f001 f84b 	bl	800d8b0 <_Balloc>
 800c81a:	9001      	str	r0, [sp, #4]
 800c81c:	2800      	cmp	r0, #0
 800c81e:	d13b      	bne.n	800c898 <_dtoa_r+0x320>
 800c820:	4b11      	ldr	r3, [pc, #68]	; (800c868 <_dtoa_r+0x2f0>)
 800c822:	4602      	mov	r2, r0
 800c824:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c828:	e6c0      	b.n	800c5ac <_dtoa_r+0x34>
 800c82a:	2301      	movs	r3, #1
 800c82c:	e7df      	b.n	800c7ee <_dtoa_r+0x276>
 800c82e:	bf00      	nop
 800c830:	636f4361 	.word	0x636f4361
 800c834:	3fd287a7 	.word	0x3fd287a7
 800c838:	8b60c8b3 	.word	0x8b60c8b3
 800c83c:	3fc68a28 	.word	0x3fc68a28
 800c840:	509f79fb 	.word	0x509f79fb
 800c844:	3fd34413 	.word	0x3fd34413
 800c848:	0800f728 	.word	0x0800f728
 800c84c:	0800f8e6 	.word	0x0800f8e6
 800c850:	7ff00000 	.word	0x7ff00000
 800c854:	0800f8e2 	.word	0x0800f8e2
 800c858:	0800f8d9 	.word	0x0800f8d9
 800c85c:	0800f6ad 	.word	0x0800f6ad
 800c860:	3ff80000 	.word	0x3ff80000
 800c864:	0800fa50 	.word	0x0800fa50
 800c868:	0800f941 	.word	0x0800f941
 800c86c:	2501      	movs	r5, #1
 800c86e:	2300      	movs	r3, #0
 800c870:	9306      	str	r3, [sp, #24]
 800c872:	9508      	str	r5, [sp, #32]
 800c874:	f04f 33ff 	mov.w	r3, #4294967295
 800c878:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c87c:	2200      	movs	r2, #0
 800c87e:	2312      	movs	r3, #18
 800c880:	e7b0      	b.n	800c7e4 <_dtoa_r+0x26c>
 800c882:	2301      	movs	r3, #1
 800c884:	9308      	str	r3, [sp, #32]
 800c886:	e7f5      	b.n	800c874 <_dtoa_r+0x2fc>
 800c888:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c88a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c88e:	e7b8      	b.n	800c802 <_dtoa_r+0x28a>
 800c890:	3101      	adds	r1, #1
 800c892:	6041      	str	r1, [r0, #4]
 800c894:	0052      	lsls	r2, r2, #1
 800c896:	e7b8      	b.n	800c80a <_dtoa_r+0x292>
 800c898:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c89a:	9a01      	ldr	r2, [sp, #4]
 800c89c:	601a      	str	r2, [r3, #0]
 800c89e:	9b03      	ldr	r3, [sp, #12]
 800c8a0:	2b0e      	cmp	r3, #14
 800c8a2:	f200 809d 	bhi.w	800c9e0 <_dtoa_r+0x468>
 800c8a6:	2d00      	cmp	r5, #0
 800c8a8:	f000 809a 	beq.w	800c9e0 <_dtoa_r+0x468>
 800c8ac:	9b00      	ldr	r3, [sp, #0]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	dd32      	ble.n	800c918 <_dtoa_r+0x3a0>
 800c8b2:	4ab7      	ldr	r2, [pc, #732]	; (800cb90 <_dtoa_r+0x618>)
 800c8b4:	f003 030f 	and.w	r3, r3, #15
 800c8b8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c8bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c8c0:	9b00      	ldr	r3, [sp, #0]
 800c8c2:	05d8      	lsls	r0, r3, #23
 800c8c4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800c8c8:	d516      	bpl.n	800c8f8 <_dtoa_r+0x380>
 800c8ca:	4bb2      	ldr	r3, [pc, #712]	; (800cb94 <_dtoa_r+0x61c>)
 800c8cc:	ec51 0b19 	vmov	r0, r1, d9
 800c8d0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c8d4:	f7f3 fff2 	bl	80008bc <__aeabi_ddiv>
 800c8d8:	f007 070f 	and.w	r7, r7, #15
 800c8dc:	4682      	mov	sl, r0
 800c8de:	468b      	mov	fp, r1
 800c8e0:	2503      	movs	r5, #3
 800c8e2:	4eac      	ldr	r6, [pc, #688]	; (800cb94 <_dtoa_r+0x61c>)
 800c8e4:	b957      	cbnz	r7, 800c8fc <_dtoa_r+0x384>
 800c8e6:	4642      	mov	r2, r8
 800c8e8:	464b      	mov	r3, r9
 800c8ea:	4650      	mov	r0, sl
 800c8ec:	4659      	mov	r1, fp
 800c8ee:	f7f3 ffe5 	bl	80008bc <__aeabi_ddiv>
 800c8f2:	4682      	mov	sl, r0
 800c8f4:	468b      	mov	fp, r1
 800c8f6:	e028      	b.n	800c94a <_dtoa_r+0x3d2>
 800c8f8:	2502      	movs	r5, #2
 800c8fa:	e7f2      	b.n	800c8e2 <_dtoa_r+0x36a>
 800c8fc:	07f9      	lsls	r1, r7, #31
 800c8fe:	d508      	bpl.n	800c912 <_dtoa_r+0x39a>
 800c900:	4640      	mov	r0, r8
 800c902:	4649      	mov	r1, r9
 800c904:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c908:	f7f3 feae 	bl	8000668 <__aeabi_dmul>
 800c90c:	3501      	adds	r5, #1
 800c90e:	4680      	mov	r8, r0
 800c910:	4689      	mov	r9, r1
 800c912:	107f      	asrs	r7, r7, #1
 800c914:	3608      	adds	r6, #8
 800c916:	e7e5      	b.n	800c8e4 <_dtoa_r+0x36c>
 800c918:	f000 809b 	beq.w	800ca52 <_dtoa_r+0x4da>
 800c91c:	9b00      	ldr	r3, [sp, #0]
 800c91e:	4f9d      	ldr	r7, [pc, #628]	; (800cb94 <_dtoa_r+0x61c>)
 800c920:	425e      	negs	r6, r3
 800c922:	4b9b      	ldr	r3, [pc, #620]	; (800cb90 <_dtoa_r+0x618>)
 800c924:	f006 020f 	and.w	r2, r6, #15
 800c928:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c92c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c930:	ec51 0b19 	vmov	r0, r1, d9
 800c934:	f7f3 fe98 	bl	8000668 <__aeabi_dmul>
 800c938:	1136      	asrs	r6, r6, #4
 800c93a:	4682      	mov	sl, r0
 800c93c:	468b      	mov	fp, r1
 800c93e:	2300      	movs	r3, #0
 800c940:	2502      	movs	r5, #2
 800c942:	2e00      	cmp	r6, #0
 800c944:	d17a      	bne.n	800ca3c <_dtoa_r+0x4c4>
 800c946:	2b00      	cmp	r3, #0
 800c948:	d1d3      	bne.n	800c8f2 <_dtoa_r+0x37a>
 800c94a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	f000 8082 	beq.w	800ca56 <_dtoa_r+0x4de>
 800c952:	4b91      	ldr	r3, [pc, #580]	; (800cb98 <_dtoa_r+0x620>)
 800c954:	2200      	movs	r2, #0
 800c956:	4650      	mov	r0, sl
 800c958:	4659      	mov	r1, fp
 800c95a:	f7f4 f8f7 	bl	8000b4c <__aeabi_dcmplt>
 800c95e:	2800      	cmp	r0, #0
 800c960:	d079      	beq.n	800ca56 <_dtoa_r+0x4de>
 800c962:	9b03      	ldr	r3, [sp, #12]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d076      	beq.n	800ca56 <_dtoa_r+0x4de>
 800c968:	9b02      	ldr	r3, [sp, #8]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	dd36      	ble.n	800c9dc <_dtoa_r+0x464>
 800c96e:	9b00      	ldr	r3, [sp, #0]
 800c970:	4650      	mov	r0, sl
 800c972:	4659      	mov	r1, fp
 800c974:	1e5f      	subs	r7, r3, #1
 800c976:	2200      	movs	r2, #0
 800c978:	4b88      	ldr	r3, [pc, #544]	; (800cb9c <_dtoa_r+0x624>)
 800c97a:	f7f3 fe75 	bl	8000668 <__aeabi_dmul>
 800c97e:	9e02      	ldr	r6, [sp, #8]
 800c980:	4682      	mov	sl, r0
 800c982:	468b      	mov	fp, r1
 800c984:	3501      	adds	r5, #1
 800c986:	4628      	mov	r0, r5
 800c988:	f7f3 fe04 	bl	8000594 <__aeabi_i2d>
 800c98c:	4652      	mov	r2, sl
 800c98e:	465b      	mov	r3, fp
 800c990:	f7f3 fe6a 	bl	8000668 <__aeabi_dmul>
 800c994:	4b82      	ldr	r3, [pc, #520]	; (800cba0 <_dtoa_r+0x628>)
 800c996:	2200      	movs	r2, #0
 800c998:	f7f3 fcb0 	bl	80002fc <__adddf3>
 800c99c:	46d0      	mov	r8, sl
 800c99e:	46d9      	mov	r9, fp
 800c9a0:	4682      	mov	sl, r0
 800c9a2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800c9a6:	2e00      	cmp	r6, #0
 800c9a8:	d158      	bne.n	800ca5c <_dtoa_r+0x4e4>
 800c9aa:	4b7e      	ldr	r3, [pc, #504]	; (800cba4 <_dtoa_r+0x62c>)
 800c9ac:	2200      	movs	r2, #0
 800c9ae:	4640      	mov	r0, r8
 800c9b0:	4649      	mov	r1, r9
 800c9b2:	f7f3 fca1 	bl	80002f8 <__aeabi_dsub>
 800c9b6:	4652      	mov	r2, sl
 800c9b8:	465b      	mov	r3, fp
 800c9ba:	4680      	mov	r8, r0
 800c9bc:	4689      	mov	r9, r1
 800c9be:	f7f4 f8e3 	bl	8000b88 <__aeabi_dcmpgt>
 800c9c2:	2800      	cmp	r0, #0
 800c9c4:	f040 8295 	bne.w	800cef2 <_dtoa_r+0x97a>
 800c9c8:	4652      	mov	r2, sl
 800c9ca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c9ce:	4640      	mov	r0, r8
 800c9d0:	4649      	mov	r1, r9
 800c9d2:	f7f4 f8bb 	bl	8000b4c <__aeabi_dcmplt>
 800c9d6:	2800      	cmp	r0, #0
 800c9d8:	f040 8289 	bne.w	800ceee <_dtoa_r+0x976>
 800c9dc:	ec5b ab19 	vmov	sl, fp, d9
 800c9e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	f2c0 8148 	blt.w	800cc78 <_dtoa_r+0x700>
 800c9e8:	9a00      	ldr	r2, [sp, #0]
 800c9ea:	2a0e      	cmp	r2, #14
 800c9ec:	f300 8144 	bgt.w	800cc78 <_dtoa_r+0x700>
 800c9f0:	4b67      	ldr	r3, [pc, #412]	; (800cb90 <_dtoa_r+0x618>)
 800c9f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c9f6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c9fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	f280 80d5 	bge.w	800cbac <_dtoa_r+0x634>
 800ca02:	9b03      	ldr	r3, [sp, #12]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	f300 80d1 	bgt.w	800cbac <_dtoa_r+0x634>
 800ca0a:	f040 826f 	bne.w	800ceec <_dtoa_r+0x974>
 800ca0e:	4b65      	ldr	r3, [pc, #404]	; (800cba4 <_dtoa_r+0x62c>)
 800ca10:	2200      	movs	r2, #0
 800ca12:	4640      	mov	r0, r8
 800ca14:	4649      	mov	r1, r9
 800ca16:	f7f3 fe27 	bl	8000668 <__aeabi_dmul>
 800ca1a:	4652      	mov	r2, sl
 800ca1c:	465b      	mov	r3, fp
 800ca1e:	f7f4 f8a9 	bl	8000b74 <__aeabi_dcmpge>
 800ca22:	9e03      	ldr	r6, [sp, #12]
 800ca24:	4637      	mov	r7, r6
 800ca26:	2800      	cmp	r0, #0
 800ca28:	f040 8245 	bne.w	800ceb6 <_dtoa_r+0x93e>
 800ca2c:	9d01      	ldr	r5, [sp, #4]
 800ca2e:	2331      	movs	r3, #49	; 0x31
 800ca30:	f805 3b01 	strb.w	r3, [r5], #1
 800ca34:	9b00      	ldr	r3, [sp, #0]
 800ca36:	3301      	adds	r3, #1
 800ca38:	9300      	str	r3, [sp, #0]
 800ca3a:	e240      	b.n	800cebe <_dtoa_r+0x946>
 800ca3c:	07f2      	lsls	r2, r6, #31
 800ca3e:	d505      	bpl.n	800ca4c <_dtoa_r+0x4d4>
 800ca40:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca44:	f7f3 fe10 	bl	8000668 <__aeabi_dmul>
 800ca48:	3501      	adds	r5, #1
 800ca4a:	2301      	movs	r3, #1
 800ca4c:	1076      	asrs	r6, r6, #1
 800ca4e:	3708      	adds	r7, #8
 800ca50:	e777      	b.n	800c942 <_dtoa_r+0x3ca>
 800ca52:	2502      	movs	r5, #2
 800ca54:	e779      	b.n	800c94a <_dtoa_r+0x3d2>
 800ca56:	9f00      	ldr	r7, [sp, #0]
 800ca58:	9e03      	ldr	r6, [sp, #12]
 800ca5a:	e794      	b.n	800c986 <_dtoa_r+0x40e>
 800ca5c:	9901      	ldr	r1, [sp, #4]
 800ca5e:	4b4c      	ldr	r3, [pc, #304]	; (800cb90 <_dtoa_r+0x618>)
 800ca60:	4431      	add	r1, r6
 800ca62:	910d      	str	r1, [sp, #52]	; 0x34
 800ca64:	9908      	ldr	r1, [sp, #32]
 800ca66:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ca6a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ca6e:	2900      	cmp	r1, #0
 800ca70:	d043      	beq.n	800cafa <_dtoa_r+0x582>
 800ca72:	494d      	ldr	r1, [pc, #308]	; (800cba8 <_dtoa_r+0x630>)
 800ca74:	2000      	movs	r0, #0
 800ca76:	f7f3 ff21 	bl	80008bc <__aeabi_ddiv>
 800ca7a:	4652      	mov	r2, sl
 800ca7c:	465b      	mov	r3, fp
 800ca7e:	f7f3 fc3b 	bl	80002f8 <__aeabi_dsub>
 800ca82:	9d01      	ldr	r5, [sp, #4]
 800ca84:	4682      	mov	sl, r0
 800ca86:	468b      	mov	fp, r1
 800ca88:	4649      	mov	r1, r9
 800ca8a:	4640      	mov	r0, r8
 800ca8c:	f7f4 f89c 	bl	8000bc8 <__aeabi_d2iz>
 800ca90:	4606      	mov	r6, r0
 800ca92:	f7f3 fd7f 	bl	8000594 <__aeabi_i2d>
 800ca96:	4602      	mov	r2, r0
 800ca98:	460b      	mov	r3, r1
 800ca9a:	4640      	mov	r0, r8
 800ca9c:	4649      	mov	r1, r9
 800ca9e:	f7f3 fc2b 	bl	80002f8 <__aeabi_dsub>
 800caa2:	3630      	adds	r6, #48	; 0x30
 800caa4:	f805 6b01 	strb.w	r6, [r5], #1
 800caa8:	4652      	mov	r2, sl
 800caaa:	465b      	mov	r3, fp
 800caac:	4680      	mov	r8, r0
 800caae:	4689      	mov	r9, r1
 800cab0:	f7f4 f84c 	bl	8000b4c <__aeabi_dcmplt>
 800cab4:	2800      	cmp	r0, #0
 800cab6:	d163      	bne.n	800cb80 <_dtoa_r+0x608>
 800cab8:	4642      	mov	r2, r8
 800caba:	464b      	mov	r3, r9
 800cabc:	4936      	ldr	r1, [pc, #216]	; (800cb98 <_dtoa_r+0x620>)
 800cabe:	2000      	movs	r0, #0
 800cac0:	f7f3 fc1a 	bl	80002f8 <__aeabi_dsub>
 800cac4:	4652      	mov	r2, sl
 800cac6:	465b      	mov	r3, fp
 800cac8:	f7f4 f840 	bl	8000b4c <__aeabi_dcmplt>
 800cacc:	2800      	cmp	r0, #0
 800cace:	f040 80b5 	bne.w	800cc3c <_dtoa_r+0x6c4>
 800cad2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cad4:	429d      	cmp	r5, r3
 800cad6:	d081      	beq.n	800c9dc <_dtoa_r+0x464>
 800cad8:	4b30      	ldr	r3, [pc, #192]	; (800cb9c <_dtoa_r+0x624>)
 800cada:	2200      	movs	r2, #0
 800cadc:	4650      	mov	r0, sl
 800cade:	4659      	mov	r1, fp
 800cae0:	f7f3 fdc2 	bl	8000668 <__aeabi_dmul>
 800cae4:	4b2d      	ldr	r3, [pc, #180]	; (800cb9c <_dtoa_r+0x624>)
 800cae6:	4682      	mov	sl, r0
 800cae8:	468b      	mov	fp, r1
 800caea:	4640      	mov	r0, r8
 800caec:	4649      	mov	r1, r9
 800caee:	2200      	movs	r2, #0
 800caf0:	f7f3 fdba 	bl	8000668 <__aeabi_dmul>
 800caf4:	4680      	mov	r8, r0
 800caf6:	4689      	mov	r9, r1
 800caf8:	e7c6      	b.n	800ca88 <_dtoa_r+0x510>
 800cafa:	4650      	mov	r0, sl
 800cafc:	4659      	mov	r1, fp
 800cafe:	f7f3 fdb3 	bl	8000668 <__aeabi_dmul>
 800cb02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cb04:	9d01      	ldr	r5, [sp, #4]
 800cb06:	930f      	str	r3, [sp, #60]	; 0x3c
 800cb08:	4682      	mov	sl, r0
 800cb0a:	468b      	mov	fp, r1
 800cb0c:	4649      	mov	r1, r9
 800cb0e:	4640      	mov	r0, r8
 800cb10:	f7f4 f85a 	bl	8000bc8 <__aeabi_d2iz>
 800cb14:	4606      	mov	r6, r0
 800cb16:	f7f3 fd3d 	bl	8000594 <__aeabi_i2d>
 800cb1a:	3630      	adds	r6, #48	; 0x30
 800cb1c:	4602      	mov	r2, r0
 800cb1e:	460b      	mov	r3, r1
 800cb20:	4640      	mov	r0, r8
 800cb22:	4649      	mov	r1, r9
 800cb24:	f7f3 fbe8 	bl	80002f8 <__aeabi_dsub>
 800cb28:	f805 6b01 	strb.w	r6, [r5], #1
 800cb2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cb2e:	429d      	cmp	r5, r3
 800cb30:	4680      	mov	r8, r0
 800cb32:	4689      	mov	r9, r1
 800cb34:	f04f 0200 	mov.w	r2, #0
 800cb38:	d124      	bne.n	800cb84 <_dtoa_r+0x60c>
 800cb3a:	4b1b      	ldr	r3, [pc, #108]	; (800cba8 <_dtoa_r+0x630>)
 800cb3c:	4650      	mov	r0, sl
 800cb3e:	4659      	mov	r1, fp
 800cb40:	f7f3 fbdc 	bl	80002fc <__adddf3>
 800cb44:	4602      	mov	r2, r0
 800cb46:	460b      	mov	r3, r1
 800cb48:	4640      	mov	r0, r8
 800cb4a:	4649      	mov	r1, r9
 800cb4c:	f7f4 f81c 	bl	8000b88 <__aeabi_dcmpgt>
 800cb50:	2800      	cmp	r0, #0
 800cb52:	d173      	bne.n	800cc3c <_dtoa_r+0x6c4>
 800cb54:	4652      	mov	r2, sl
 800cb56:	465b      	mov	r3, fp
 800cb58:	4913      	ldr	r1, [pc, #76]	; (800cba8 <_dtoa_r+0x630>)
 800cb5a:	2000      	movs	r0, #0
 800cb5c:	f7f3 fbcc 	bl	80002f8 <__aeabi_dsub>
 800cb60:	4602      	mov	r2, r0
 800cb62:	460b      	mov	r3, r1
 800cb64:	4640      	mov	r0, r8
 800cb66:	4649      	mov	r1, r9
 800cb68:	f7f3 fff0 	bl	8000b4c <__aeabi_dcmplt>
 800cb6c:	2800      	cmp	r0, #0
 800cb6e:	f43f af35 	beq.w	800c9dc <_dtoa_r+0x464>
 800cb72:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800cb74:	1e6b      	subs	r3, r5, #1
 800cb76:	930f      	str	r3, [sp, #60]	; 0x3c
 800cb78:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cb7c:	2b30      	cmp	r3, #48	; 0x30
 800cb7e:	d0f8      	beq.n	800cb72 <_dtoa_r+0x5fa>
 800cb80:	9700      	str	r7, [sp, #0]
 800cb82:	e049      	b.n	800cc18 <_dtoa_r+0x6a0>
 800cb84:	4b05      	ldr	r3, [pc, #20]	; (800cb9c <_dtoa_r+0x624>)
 800cb86:	f7f3 fd6f 	bl	8000668 <__aeabi_dmul>
 800cb8a:	4680      	mov	r8, r0
 800cb8c:	4689      	mov	r9, r1
 800cb8e:	e7bd      	b.n	800cb0c <_dtoa_r+0x594>
 800cb90:	0800fa50 	.word	0x0800fa50
 800cb94:	0800fa28 	.word	0x0800fa28
 800cb98:	3ff00000 	.word	0x3ff00000
 800cb9c:	40240000 	.word	0x40240000
 800cba0:	401c0000 	.word	0x401c0000
 800cba4:	40140000 	.word	0x40140000
 800cba8:	3fe00000 	.word	0x3fe00000
 800cbac:	9d01      	ldr	r5, [sp, #4]
 800cbae:	4656      	mov	r6, sl
 800cbb0:	465f      	mov	r7, fp
 800cbb2:	4642      	mov	r2, r8
 800cbb4:	464b      	mov	r3, r9
 800cbb6:	4630      	mov	r0, r6
 800cbb8:	4639      	mov	r1, r7
 800cbba:	f7f3 fe7f 	bl	80008bc <__aeabi_ddiv>
 800cbbe:	f7f4 f803 	bl	8000bc8 <__aeabi_d2iz>
 800cbc2:	4682      	mov	sl, r0
 800cbc4:	f7f3 fce6 	bl	8000594 <__aeabi_i2d>
 800cbc8:	4642      	mov	r2, r8
 800cbca:	464b      	mov	r3, r9
 800cbcc:	f7f3 fd4c 	bl	8000668 <__aeabi_dmul>
 800cbd0:	4602      	mov	r2, r0
 800cbd2:	460b      	mov	r3, r1
 800cbd4:	4630      	mov	r0, r6
 800cbd6:	4639      	mov	r1, r7
 800cbd8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800cbdc:	f7f3 fb8c 	bl	80002f8 <__aeabi_dsub>
 800cbe0:	f805 6b01 	strb.w	r6, [r5], #1
 800cbe4:	9e01      	ldr	r6, [sp, #4]
 800cbe6:	9f03      	ldr	r7, [sp, #12]
 800cbe8:	1bae      	subs	r6, r5, r6
 800cbea:	42b7      	cmp	r7, r6
 800cbec:	4602      	mov	r2, r0
 800cbee:	460b      	mov	r3, r1
 800cbf0:	d135      	bne.n	800cc5e <_dtoa_r+0x6e6>
 800cbf2:	f7f3 fb83 	bl	80002fc <__adddf3>
 800cbf6:	4642      	mov	r2, r8
 800cbf8:	464b      	mov	r3, r9
 800cbfa:	4606      	mov	r6, r0
 800cbfc:	460f      	mov	r7, r1
 800cbfe:	f7f3 ffc3 	bl	8000b88 <__aeabi_dcmpgt>
 800cc02:	b9d0      	cbnz	r0, 800cc3a <_dtoa_r+0x6c2>
 800cc04:	4642      	mov	r2, r8
 800cc06:	464b      	mov	r3, r9
 800cc08:	4630      	mov	r0, r6
 800cc0a:	4639      	mov	r1, r7
 800cc0c:	f7f3 ff94 	bl	8000b38 <__aeabi_dcmpeq>
 800cc10:	b110      	cbz	r0, 800cc18 <_dtoa_r+0x6a0>
 800cc12:	f01a 0f01 	tst.w	sl, #1
 800cc16:	d110      	bne.n	800cc3a <_dtoa_r+0x6c2>
 800cc18:	4620      	mov	r0, r4
 800cc1a:	ee18 1a10 	vmov	r1, s16
 800cc1e:	f000 fe87 	bl	800d930 <_Bfree>
 800cc22:	2300      	movs	r3, #0
 800cc24:	9800      	ldr	r0, [sp, #0]
 800cc26:	702b      	strb	r3, [r5, #0]
 800cc28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cc2a:	3001      	adds	r0, #1
 800cc2c:	6018      	str	r0, [r3, #0]
 800cc2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	f43f acf1 	beq.w	800c618 <_dtoa_r+0xa0>
 800cc36:	601d      	str	r5, [r3, #0]
 800cc38:	e4ee      	b.n	800c618 <_dtoa_r+0xa0>
 800cc3a:	9f00      	ldr	r7, [sp, #0]
 800cc3c:	462b      	mov	r3, r5
 800cc3e:	461d      	mov	r5, r3
 800cc40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cc44:	2a39      	cmp	r2, #57	; 0x39
 800cc46:	d106      	bne.n	800cc56 <_dtoa_r+0x6de>
 800cc48:	9a01      	ldr	r2, [sp, #4]
 800cc4a:	429a      	cmp	r2, r3
 800cc4c:	d1f7      	bne.n	800cc3e <_dtoa_r+0x6c6>
 800cc4e:	9901      	ldr	r1, [sp, #4]
 800cc50:	2230      	movs	r2, #48	; 0x30
 800cc52:	3701      	adds	r7, #1
 800cc54:	700a      	strb	r2, [r1, #0]
 800cc56:	781a      	ldrb	r2, [r3, #0]
 800cc58:	3201      	adds	r2, #1
 800cc5a:	701a      	strb	r2, [r3, #0]
 800cc5c:	e790      	b.n	800cb80 <_dtoa_r+0x608>
 800cc5e:	4ba6      	ldr	r3, [pc, #664]	; (800cef8 <_dtoa_r+0x980>)
 800cc60:	2200      	movs	r2, #0
 800cc62:	f7f3 fd01 	bl	8000668 <__aeabi_dmul>
 800cc66:	2200      	movs	r2, #0
 800cc68:	2300      	movs	r3, #0
 800cc6a:	4606      	mov	r6, r0
 800cc6c:	460f      	mov	r7, r1
 800cc6e:	f7f3 ff63 	bl	8000b38 <__aeabi_dcmpeq>
 800cc72:	2800      	cmp	r0, #0
 800cc74:	d09d      	beq.n	800cbb2 <_dtoa_r+0x63a>
 800cc76:	e7cf      	b.n	800cc18 <_dtoa_r+0x6a0>
 800cc78:	9a08      	ldr	r2, [sp, #32]
 800cc7a:	2a00      	cmp	r2, #0
 800cc7c:	f000 80d7 	beq.w	800ce2e <_dtoa_r+0x8b6>
 800cc80:	9a06      	ldr	r2, [sp, #24]
 800cc82:	2a01      	cmp	r2, #1
 800cc84:	f300 80ba 	bgt.w	800cdfc <_dtoa_r+0x884>
 800cc88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cc8a:	2a00      	cmp	r2, #0
 800cc8c:	f000 80b2 	beq.w	800cdf4 <_dtoa_r+0x87c>
 800cc90:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800cc94:	9e07      	ldr	r6, [sp, #28]
 800cc96:	9d04      	ldr	r5, [sp, #16]
 800cc98:	9a04      	ldr	r2, [sp, #16]
 800cc9a:	441a      	add	r2, r3
 800cc9c:	9204      	str	r2, [sp, #16]
 800cc9e:	9a05      	ldr	r2, [sp, #20]
 800cca0:	2101      	movs	r1, #1
 800cca2:	441a      	add	r2, r3
 800cca4:	4620      	mov	r0, r4
 800cca6:	9205      	str	r2, [sp, #20]
 800cca8:	f000 ff44 	bl	800db34 <__i2b>
 800ccac:	4607      	mov	r7, r0
 800ccae:	2d00      	cmp	r5, #0
 800ccb0:	dd0c      	ble.n	800cccc <_dtoa_r+0x754>
 800ccb2:	9b05      	ldr	r3, [sp, #20]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	dd09      	ble.n	800cccc <_dtoa_r+0x754>
 800ccb8:	42ab      	cmp	r3, r5
 800ccba:	9a04      	ldr	r2, [sp, #16]
 800ccbc:	bfa8      	it	ge
 800ccbe:	462b      	movge	r3, r5
 800ccc0:	1ad2      	subs	r2, r2, r3
 800ccc2:	9204      	str	r2, [sp, #16]
 800ccc4:	9a05      	ldr	r2, [sp, #20]
 800ccc6:	1aed      	subs	r5, r5, r3
 800ccc8:	1ad3      	subs	r3, r2, r3
 800ccca:	9305      	str	r3, [sp, #20]
 800cccc:	9b07      	ldr	r3, [sp, #28]
 800ccce:	b31b      	cbz	r3, 800cd18 <_dtoa_r+0x7a0>
 800ccd0:	9b08      	ldr	r3, [sp, #32]
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	f000 80af 	beq.w	800ce36 <_dtoa_r+0x8be>
 800ccd8:	2e00      	cmp	r6, #0
 800ccda:	dd13      	ble.n	800cd04 <_dtoa_r+0x78c>
 800ccdc:	4639      	mov	r1, r7
 800ccde:	4632      	mov	r2, r6
 800cce0:	4620      	mov	r0, r4
 800cce2:	f000 ffe7 	bl	800dcb4 <__pow5mult>
 800cce6:	ee18 2a10 	vmov	r2, s16
 800ccea:	4601      	mov	r1, r0
 800ccec:	4607      	mov	r7, r0
 800ccee:	4620      	mov	r0, r4
 800ccf0:	f000 ff36 	bl	800db60 <__multiply>
 800ccf4:	ee18 1a10 	vmov	r1, s16
 800ccf8:	4680      	mov	r8, r0
 800ccfa:	4620      	mov	r0, r4
 800ccfc:	f000 fe18 	bl	800d930 <_Bfree>
 800cd00:	ee08 8a10 	vmov	s16, r8
 800cd04:	9b07      	ldr	r3, [sp, #28]
 800cd06:	1b9a      	subs	r2, r3, r6
 800cd08:	d006      	beq.n	800cd18 <_dtoa_r+0x7a0>
 800cd0a:	ee18 1a10 	vmov	r1, s16
 800cd0e:	4620      	mov	r0, r4
 800cd10:	f000 ffd0 	bl	800dcb4 <__pow5mult>
 800cd14:	ee08 0a10 	vmov	s16, r0
 800cd18:	2101      	movs	r1, #1
 800cd1a:	4620      	mov	r0, r4
 800cd1c:	f000 ff0a 	bl	800db34 <__i2b>
 800cd20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	4606      	mov	r6, r0
 800cd26:	f340 8088 	ble.w	800ce3a <_dtoa_r+0x8c2>
 800cd2a:	461a      	mov	r2, r3
 800cd2c:	4601      	mov	r1, r0
 800cd2e:	4620      	mov	r0, r4
 800cd30:	f000 ffc0 	bl	800dcb4 <__pow5mult>
 800cd34:	9b06      	ldr	r3, [sp, #24]
 800cd36:	2b01      	cmp	r3, #1
 800cd38:	4606      	mov	r6, r0
 800cd3a:	f340 8081 	ble.w	800ce40 <_dtoa_r+0x8c8>
 800cd3e:	f04f 0800 	mov.w	r8, #0
 800cd42:	6933      	ldr	r3, [r6, #16]
 800cd44:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800cd48:	6918      	ldr	r0, [r3, #16]
 800cd4a:	f000 fea3 	bl	800da94 <__hi0bits>
 800cd4e:	f1c0 0020 	rsb	r0, r0, #32
 800cd52:	9b05      	ldr	r3, [sp, #20]
 800cd54:	4418      	add	r0, r3
 800cd56:	f010 001f 	ands.w	r0, r0, #31
 800cd5a:	f000 8092 	beq.w	800ce82 <_dtoa_r+0x90a>
 800cd5e:	f1c0 0320 	rsb	r3, r0, #32
 800cd62:	2b04      	cmp	r3, #4
 800cd64:	f340 808a 	ble.w	800ce7c <_dtoa_r+0x904>
 800cd68:	f1c0 001c 	rsb	r0, r0, #28
 800cd6c:	9b04      	ldr	r3, [sp, #16]
 800cd6e:	4403      	add	r3, r0
 800cd70:	9304      	str	r3, [sp, #16]
 800cd72:	9b05      	ldr	r3, [sp, #20]
 800cd74:	4403      	add	r3, r0
 800cd76:	4405      	add	r5, r0
 800cd78:	9305      	str	r3, [sp, #20]
 800cd7a:	9b04      	ldr	r3, [sp, #16]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	dd07      	ble.n	800cd90 <_dtoa_r+0x818>
 800cd80:	ee18 1a10 	vmov	r1, s16
 800cd84:	461a      	mov	r2, r3
 800cd86:	4620      	mov	r0, r4
 800cd88:	f000 ffee 	bl	800dd68 <__lshift>
 800cd8c:	ee08 0a10 	vmov	s16, r0
 800cd90:	9b05      	ldr	r3, [sp, #20]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	dd05      	ble.n	800cda2 <_dtoa_r+0x82a>
 800cd96:	4631      	mov	r1, r6
 800cd98:	461a      	mov	r2, r3
 800cd9a:	4620      	mov	r0, r4
 800cd9c:	f000 ffe4 	bl	800dd68 <__lshift>
 800cda0:	4606      	mov	r6, r0
 800cda2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d06e      	beq.n	800ce86 <_dtoa_r+0x90e>
 800cda8:	ee18 0a10 	vmov	r0, s16
 800cdac:	4631      	mov	r1, r6
 800cdae:	f001 f84b 	bl	800de48 <__mcmp>
 800cdb2:	2800      	cmp	r0, #0
 800cdb4:	da67      	bge.n	800ce86 <_dtoa_r+0x90e>
 800cdb6:	9b00      	ldr	r3, [sp, #0]
 800cdb8:	3b01      	subs	r3, #1
 800cdba:	ee18 1a10 	vmov	r1, s16
 800cdbe:	9300      	str	r3, [sp, #0]
 800cdc0:	220a      	movs	r2, #10
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	4620      	mov	r0, r4
 800cdc6:	f000 fdd5 	bl	800d974 <__multadd>
 800cdca:	9b08      	ldr	r3, [sp, #32]
 800cdcc:	ee08 0a10 	vmov	s16, r0
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	f000 81b1 	beq.w	800d138 <_dtoa_r+0xbc0>
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	4639      	mov	r1, r7
 800cdda:	220a      	movs	r2, #10
 800cddc:	4620      	mov	r0, r4
 800cdde:	f000 fdc9 	bl	800d974 <__multadd>
 800cde2:	9b02      	ldr	r3, [sp, #8]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	4607      	mov	r7, r0
 800cde8:	f300 808e 	bgt.w	800cf08 <_dtoa_r+0x990>
 800cdec:	9b06      	ldr	r3, [sp, #24]
 800cdee:	2b02      	cmp	r3, #2
 800cdf0:	dc51      	bgt.n	800ce96 <_dtoa_r+0x91e>
 800cdf2:	e089      	b.n	800cf08 <_dtoa_r+0x990>
 800cdf4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cdf6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cdfa:	e74b      	b.n	800cc94 <_dtoa_r+0x71c>
 800cdfc:	9b03      	ldr	r3, [sp, #12]
 800cdfe:	1e5e      	subs	r6, r3, #1
 800ce00:	9b07      	ldr	r3, [sp, #28]
 800ce02:	42b3      	cmp	r3, r6
 800ce04:	bfbf      	itttt	lt
 800ce06:	9b07      	ldrlt	r3, [sp, #28]
 800ce08:	9607      	strlt	r6, [sp, #28]
 800ce0a:	1af2      	sublt	r2, r6, r3
 800ce0c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ce0e:	bfb6      	itet	lt
 800ce10:	189b      	addlt	r3, r3, r2
 800ce12:	1b9e      	subge	r6, r3, r6
 800ce14:	930a      	strlt	r3, [sp, #40]	; 0x28
 800ce16:	9b03      	ldr	r3, [sp, #12]
 800ce18:	bfb8      	it	lt
 800ce1a:	2600      	movlt	r6, #0
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	bfb7      	itett	lt
 800ce20:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800ce24:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800ce28:	1a9d      	sublt	r5, r3, r2
 800ce2a:	2300      	movlt	r3, #0
 800ce2c:	e734      	b.n	800cc98 <_dtoa_r+0x720>
 800ce2e:	9e07      	ldr	r6, [sp, #28]
 800ce30:	9d04      	ldr	r5, [sp, #16]
 800ce32:	9f08      	ldr	r7, [sp, #32]
 800ce34:	e73b      	b.n	800ccae <_dtoa_r+0x736>
 800ce36:	9a07      	ldr	r2, [sp, #28]
 800ce38:	e767      	b.n	800cd0a <_dtoa_r+0x792>
 800ce3a:	9b06      	ldr	r3, [sp, #24]
 800ce3c:	2b01      	cmp	r3, #1
 800ce3e:	dc18      	bgt.n	800ce72 <_dtoa_r+0x8fa>
 800ce40:	f1ba 0f00 	cmp.w	sl, #0
 800ce44:	d115      	bne.n	800ce72 <_dtoa_r+0x8fa>
 800ce46:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ce4a:	b993      	cbnz	r3, 800ce72 <_dtoa_r+0x8fa>
 800ce4c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ce50:	0d1b      	lsrs	r3, r3, #20
 800ce52:	051b      	lsls	r3, r3, #20
 800ce54:	b183      	cbz	r3, 800ce78 <_dtoa_r+0x900>
 800ce56:	9b04      	ldr	r3, [sp, #16]
 800ce58:	3301      	adds	r3, #1
 800ce5a:	9304      	str	r3, [sp, #16]
 800ce5c:	9b05      	ldr	r3, [sp, #20]
 800ce5e:	3301      	adds	r3, #1
 800ce60:	9305      	str	r3, [sp, #20]
 800ce62:	f04f 0801 	mov.w	r8, #1
 800ce66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	f47f af6a 	bne.w	800cd42 <_dtoa_r+0x7ca>
 800ce6e:	2001      	movs	r0, #1
 800ce70:	e76f      	b.n	800cd52 <_dtoa_r+0x7da>
 800ce72:	f04f 0800 	mov.w	r8, #0
 800ce76:	e7f6      	b.n	800ce66 <_dtoa_r+0x8ee>
 800ce78:	4698      	mov	r8, r3
 800ce7a:	e7f4      	b.n	800ce66 <_dtoa_r+0x8ee>
 800ce7c:	f43f af7d 	beq.w	800cd7a <_dtoa_r+0x802>
 800ce80:	4618      	mov	r0, r3
 800ce82:	301c      	adds	r0, #28
 800ce84:	e772      	b.n	800cd6c <_dtoa_r+0x7f4>
 800ce86:	9b03      	ldr	r3, [sp, #12]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	dc37      	bgt.n	800cefc <_dtoa_r+0x984>
 800ce8c:	9b06      	ldr	r3, [sp, #24]
 800ce8e:	2b02      	cmp	r3, #2
 800ce90:	dd34      	ble.n	800cefc <_dtoa_r+0x984>
 800ce92:	9b03      	ldr	r3, [sp, #12]
 800ce94:	9302      	str	r3, [sp, #8]
 800ce96:	9b02      	ldr	r3, [sp, #8]
 800ce98:	b96b      	cbnz	r3, 800ceb6 <_dtoa_r+0x93e>
 800ce9a:	4631      	mov	r1, r6
 800ce9c:	2205      	movs	r2, #5
 800ce9e:	4620      	mov	r0, r4
 800cea0:	f000 fd68 	bl	800d974 <__multadd>
 800cea4:	4601      	mov	r1, r0
 800cea6:	4606      	mov	r6, r0
 800cea8:	ee18 0a10 	vmov	r0, s16
 800ceac:	f000 ffcc 	bl	800de48 <__mcmp>
 800ceb0:	2800      	cmp	r0, #0
 800ceb2:	f73f adbb 	bgt.w	800ca2c <_dtoa_r+0x4b4>
 800ceb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ceb8:	9d01      	ldr	r5, [sp, #4]
 800ceba:	43db      	mvns	r3, r3
 800cebc:	9300      	str	r3, [sp, #0]
 800cebe:	f04f 0800 	mov.w	r8, #0
 800cec2:	4631      	mov	r1, r6
 800cec4:	4620      	mov	r0, r4
 800cec6:	f000 fd33 	bl	800d930 <_Bfree>
 800ceca:	2f00      	cmp	r7, #0
 800cecc:	f43f aea4 	beq.w	800cc18 <_dtoa_r+0x6a0>
 800ced0:	f1b8 0f00 	cmp.w	r8, #0
 800ced4:	d005      	beq.n	800cee2 <_dtoa_r+0x96a>
 800ced6:	45b8      	cmp	r8, r7
 800ced8:	d003      	beq.n	800cee2 <_dtoa_r+0x96a>
 800ceda:	4641      	mov	r1, r8
 800cedc:	4620      	mov	r0, r4
 800cede:	f000 fd27 	bl	800d930 <_Bfree>
 800cee2:	4639      	mov	r1, r7
 800cee4:	4620      	mov	r0, r4
 800cee6:	f000 fd23 	bl	800d930 <_Bfree>
 800ceea:	e695      	b.n	800cc18 <_dtoa_r+0x6a0>
 800ceec:	2600      	movs	r6, #0
 800ceee:	4637      	mov	r7, r6
 800cef0:	e7e1      	b.n	800ceb6 <_dtoa_r+0x93e>
 800cef2:	9700      	str	r7, [sp, #0]
 800cef4:	4637      	mov	r7, r6
 800cef6:	e599      	b.n	800ca2c <_dtoa_r+0x4b4>
 800cef8:	40240000 	.word	0x40240000
 800cefc:	9b08      	ldr	r3, [sp, #32]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	f000 80ca 	beq.w	800d098 <_dtoa_r+0xb20>
 800cf04:	9b03      	ldr	r3, [sp, #12]
 800cf06:	9302      	str	r3, [sp, #8]
 800cf08:	2d00      	cmp	r5, #0
 800cf0a:	dd05      	ble.n	800cf18 <_dtoa_r+0x9a0>
 800cf0c:	4639      	mov	r1, r7
 800cf0e:	462a      	mov	r2, r5
 800cf10:	4620      	mov	r0, r4
 800cf12:	f000 ff29 	bl	800dd68 <__lshift>
 800cf16:	4607      	mov	r7, r0
 800cf18:	f1b8 0f00 	cmp.w	r8, #0
 800cf1c:	d05b      	beq.n	800cfd6 <_dtoa_r+0xa5e>
 800cf1e:	6879      	ldr	r1, [r7, #4]
 800cf20:	4620      	mov	r0, r4
 800cf22:	f000 fcc5 	bl	800d8b0 <_Balloc>
 800cf26:	4605      	mov	r5, r0
 800cf28:	b928      	cbnz	r0, 800cf36 <_dtoa_r+0x9be>
 800cf2a:	4b87      	ldr	r3, [pc, #540]	; (800d148 <_dtoa_r+0xbd0>)
 800cf2c:	4602      	mov	r2, r0
 800cf2e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800cf32:	f7ff bb3b 	b.w	800c5ac <_dtoa_r+0x34>
 800cf36:	693a      	ldr	r2, [r7, #16]
 800cf38:	3202      	adds	r2, #2
 800cf3a:	0092      	lsls	r2, r2, #2
 800cf3c:	f107 010c 	add.w	r1, r7, #12
 800cf40:	300c      	adds	r0, #12
 800cf42:	f000 fca7 	bl	800d894 <memcpy>
 800cf46:	2201      	movs	r2, #1
 800cf48:	4629      	mov	r1, r5
 800cf4a:	4620      	mov	r0, r4
 800cf4c:	f000 ff0c 	bl	800dd68 <__lshift>
 800cf50:	9b01      	ldr	r3, [sp, #4]
 800cf52:	f103 0901 	add.w	r9, r3, #1
 800cf56:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800cf5a:	4413      	add	r3, r2
 800cf5c:	9305      	str	r3, [sp, #20]
 800cf5e:	f00a 0301 	and.w	r3, sl, #1
 800cf62:	46b8      	mov	r8, r7
 800cf64:	9304      	str	r3, [sp, #16]
 800cf66:	4607      	mov	r7, r0
 800cf68:	4631      	mov	r1, r6
 800cf6a:	ee18 0a10 	vmov	r0, s16
 800cf6e:	f7ff fa77 	bl	800c460 <quorem>
 800cf72:	4641      	mov	r1, r8
 800cf74:	9002      	str	r0, [sp, #8]
 800cf76:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800cf7a:	ee18 0a10 	vmov	r0, s16
 800cf7e:	f000 ff63 	bl	800de48 <__mcmp>
 800cf82:	463a      	mov	r2, r7
 800cf84:	9003      	str	r0, [sp, #12]
 800cf86:	4631      	mov	r1, r6
 800cf88:	4620      	mov	r0, r4
 800cf8a:	f000 ff79 	bl	800de80 <__mdiff>
 800cf8e:	68c2      	ldr	r2, [r0, #12]
 800cf90:	f109 3bff 	add.w	fp, r9, #4294967295
 800cf94:	4605      	mov	r5, r0
 800cf96:	bb02      	cbnz	r2, 800cfda <_dtoa_r+0xa62>
 800cf98:	4601      	mov	r1, r0
 800cf9a:	ee18 0a10 	vmov	r0, s16
 800cf9e:	f000 ff53 	bl	800de48 <__mcmp>
 800cfa2:	4602      	mov	r2, r0
 800cfa4:	4629      	mov	r1, r5
 800cfa6:	4620      	mov	r0, r4
 800cfa8:	9207      	str	r2, [sp, #28]
 800cfaa:	f000 fcc1 	bl	800d930 <_Bfree>
 800cfae:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800cfb2:	ea43 0102 	orr.w	r1, r3, r2
 800cfb6:	9b04      	ldr	r3, [sp, #16]
 800cfb8:	430b      	orrs	r3, r1
 800cfba:	464d      	mov	r5, r9
 800cfbc:	d10f      	bne.n	800cfde <_dtoa_r+0xa66>
 800cfbe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800cfc2:	d02a      	beq.n	800d01a <_dtoa_r+0xaa2>
 800cfc4:	9b03      	ldr	r3, [sp, #12]
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	dd02      	ble.n	800cfd0 <_dtoa_r+0xa58>
 800cfca:	9b02      	ldr	r3, [sp, #8]
 800cfcc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800cfd0:	f88b a000 	strb.w	sl, [fp]
 800cfd4:	e775      	b.n	800cec2 <_dtoa_r+0x94a>
 800cfd6:	4638      	mov	r0, r7
 800cfd8:	e7ba      	b.n	800cf50 <_dtoa_r+0x9d8>
 800cfda:	2201      	movs	r2, #1
 800cfdc:	e7e2      	b.n	800cfa4 <_dtoa_r+0xa2c>
 800cfde:	9b03      	ldr	r3, [sp, #12]
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	db04      	blt.n	800cfee <_dtoa_r+0xa76>
 800cfe4:	9906      	ldr	r1, [sp, #24]
 800cfe6:	430b      	orrs	r3, r1
 800cfe8:	9904      	ldr	r1, [sp, #16]
 800cfea:	430b      	orrs	r3, r1
 800cfec:	d122      	bne.n	800d034 <_dtoa_r+0xabc>
 800cfee:	2a00      	cmp	r2, #0
 800cff0:	ddee      	ble.n	800cfd0 <_dtoa_r+0xa58>
 800cff2:	ee18 1a10 	vmov	r1, s16
 800cff6:	2201      	movs	r2, #1
 800cff8:	4620      	mov	r0, r4
 800cffa:	f000 feb5 	bl	800dd68 <__lshift>
 800cffe:	4631      	mov	r1, r6
 800d000:	ee08 0a10 	vmov	s16, r0
 800d004:	f000 ff20 	bl	800de48 <__mcmp>
 800d008:	2800      	cmp	r0, #0
 800d00a:	dc03      	bgt.n	800d014 <_dtoa_r+0xa9c>
 800d00c:	d1e0      	bne.n	800cfd0 <_dtoa_r+0xa58>
 800d00e:	f01a 0f01 	tst.w	sl, #1
 800d012:	d0dd      	beq.n	800cfd0 <_dtoa_r+0xa58>
 800d014:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d018:	d1d7      	bne.n	800cfca <_dtoa_r+0xa52>
 800d01a:	2339      	movs	r3, #57	; 0x39
 800d01c:	f88b 3000 	strb.w	r3, [fp]
 800d020:	462b      	mov	r3, r5
 800d022:	461d      	mov	r5, r3
 800d024:	3b01      	subs	r3, #1
 800d026:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d02a:	2a39      	cmp	r2, #57	; 0x39
 800d02c:	d071      	beq.n	800d112 <_dtoa_r+0xb9a>
 800d02e:	3201      	adds	r2, #1
 800d030:	701a      	strb	r2, [r3, #0]
 800d032:	e746      	b.n	800cec2 <_dtoa_r+0x94a>
 800d034:	2a00      	cmp	r2, #0
 800d036:	dd07      	ble.n	800d048 <_dtoa_r+0xad0>
 800d038:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d03c:	d0ed      	beq.n	800d01a <_dtoa_r+0xaa2>
 800d03e:	f10a 0301 	add.w	r3, sl, #1
 800d042:	f88b 3000 	strb.w	r3, [fp]
 800d046:	e73c      	b.n	800cec2 <_dtoa_r+0x94a>
 800d048:	9b05      	ldr	r3, [sp, #20]
 800d04a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800d04e:	4599      	cmp	r9, r3
 800d050:	d047      	beq.n	800d0e2 <_dtoa_r+0xb6a>
 800d052:	ee18 1a10 	vmov	r1, s16
 800d056:	2300      	movs	r3, #0
 800d058:	220a      	movs	r2, #10
 800d05a:	4620      	mov	r0, r4
 800d05c:	f000 fc8a 	bl	800d974 <__multadd>
 800d060:	45b8      	cmp	r8, r7
 800d062:	ee08 0a10 	vmov	s16, r0
 800d066:	f04f 0300 	mov.w	r3, #0
 800d06a:	f04f 020a 	mov.w	r2, #10
 800d06e:	4641      	mov	r1, r8
 800d070:	4620      	mov	r0, r4
 800d072:	d106      	bne.n	800d082 <_dtoa_r+0xb0a>
 800d074:	f000 fc7e 	bl	800d974 <__multadd>
 800d078:	4680      	mov	r8, r0
 800d07a:	4607      	mov	r7, r0
 800d07c:	f109 0901 	add.w	r9, r9, #1
 800d080:	e772      	b.n	800cf68 <_dtoa_r+0x9f0>
 800d082:	f000 fc77 	bl	800d974 <__multadd>
 800d086:	4639      	mov	r1, r7
 800d088:	4680      	mov	r8, r0
 800d08a:	2300      	movs	r3, #0
 800d08c:	220a      	movs	r2, #10
 800d08e:	4620      	mov	r0, r4
 800d090:	f000 fc70 	bl	800d974 <__multadd>
 800d094:	4607      	mov	r7, r0
 800d096:	e7f1      	b.n	800d07c <_dtoa_r+0xb04>
 800d098:	9b03      	ldr	r3, [sp, #12]
 800d09a:	9302      	str	r3, [sp, #8]
 800d09c:	9d01      	ldr	r5, [sp, #4]
 800d09e:	ee18 0a10 	vmov	r0, s16
 800d0a2:	4631      	mov	r1, r6
 800d0a4:	f7ff f9dc 	bl	800c460 <quorem>
 800d0a8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d0ac:	9b01      	ldr	r3, [sp, #4]
 800d0ae:	f805 ab01 	strb.w	sl, [r5], #1
 800d0b2:	1aea      	subs	r2, r5, r3
 800d0b4:	9b02      	ldr	r3, [sp, #8]
 800d0b6:	4293      	cmp	r3, r2
 800d0b8:	dd09      	ble.n	800d0ce <_dtoa_r+0xb56>
 800d0ba:	ee18 1a10 	vmov	r1, s16
 800d0be:	2300      	movs	r3, #0
 800d0c0:	220a      	movs	r2, #10
 800d0c2:	4620      	mov	r0, r4
 800d0c4:	f000 fc56 	bl	800d974 <__multadd>
 800d0c8:	ee08 0a10 	vmov	s16, r0
 800d0cc:	e7e7      	b.n	800d09e <_dtoa_r+0xb26>
 800d0ce:	9b02      	ldr	r3, [sp, #8]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	bfc8      	it	gt
 800d0d4:	461d      	movgt	r5, r3
 800d0d6:	9b01      	ldr	r3, [sp, #4]
 800d0d8:	bfd8      	it	le
 800d0da:	2501      	movle	r5, #1
 800d0dc:	441d      	add	r5, r3
 800d0de:	f04f 0800 	mov.w	r8, #0
 800d0e2:	ee18 1a10 	vmov	r1, s16
 800d0e6:	2201      	movs	r2, #1
 800d0e8:	4620      	mov	r0, r4
 800d0ea:	f000 fe3d 	bl	800dd68 <__lshift>
 800d0ee:	4631      	mov	r1, r6
 800d0f0:	ee08 0a10 	vmov	s16, r0
 800d0f4:	f000 fea8 	bl	800de48 <__mcmp>
 800d0f8:	2800      	cmp	r0, #0
 800d0fa:	dc91      	bgt.n	800d020 <_dtoa_r+0xaa8>
 800d0fc:	d102      	bne.n	800d104 <_dtoa_r+0xb8c>
 800d0fe:	f01a 0f01 	tst.w	sl, #1
 800d102:	d18d      	bne.n	800d020 <_dtoa_r+0xaa8>
 800d104:	462b      	mov	r3, r5
 800d106:	461d      	mov	r5, r3
 800d108:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d10c:	2a30      	cmp	r2, #48	; 0x30
 800d10e:	d0fa      	beq.n	800d106 <_dtoa_r+0xb8e>
 800d110:	e6d7      	b.n	800cec2 <_dtoa_r+0x94a>
 800d112:	9a01      	ldr	r2, [sp, #4]
 800d114:	429a      	cmp	r2, r3
 800d116:	d184      	bne.n	800d022 <_dtoa_r+0xaaa>
 800d118:	9b00      	ldr	r3, [sp, #0]
 800d11a:	3301      	adds	r3, #1
 800d11c:	9300      	str	r3, [sp, #0]
 800d11e:	2331      	movs	r3, #49	; 0x31
 800d120:	7013      	strb	r3, [r2, #0]
 800d122:	e6ce      	b.n	800cec2 <_dtoa_r+0x94a>
 800d124:	4b09      	ldr	r3, [pc, #36]	; (800d14c <_dtoa_r+0xbd4>)
 800d126:	f7ff ba95 	b.w	800c654 <_dtoa_r+0xdc>
 800d12a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	f47f aa6e 	bne.w	800c60e <_dtoa_r+0x96>
 800d132:	4b07      	ldr	r3, [pc, #28]	; (800d150 <_dtoa_r+0xbd8>)
 800d134:	f7ff ba8e 	b.w	800c654 <_dtoa_r+0xdc>
 800d138:	9b02      	ldr	r3, [sp, #8]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	dcae      	bgt.n	800d09c <_dtoa_r+0xb24>
 800d13e:	9b06      	ldr	r3, [sp, #24]
 800d140:	2b02      	cmp	r3, #2
 800d142:	f73f aea8 	bgt.w	800ce96 <_dtoa_r+0x91e>
 800d146:	e7a9      	b.n	800d09c <_dtoa_r+0xb24>
 800d148:	0800f941 	.word	0x0800f941
 800d14c:	0800f6ac 	.word	0x0800f6ac
 800d150:	0800f8d9 	.word	0x0800f8d9

0800d154 <fiprintf>:
 800d154:	b40e      	push	{r1, r2, r3}
 800d156:	b503      	push	{r0, r1, lr}
 800d158:	4601      	mov	r1, r0
 800d15a:	ab03      	add	r3, sp, #12
 800d15c:	4805      	ldr	r0, [pc, #20]	; (800d174 <fiprintf+0x20>)
 800d15e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d162:	6800      	ldr	r0, [r0, #0]
 800d164:	9301      	str	r3, [sp, #4]
 800d166:	f001 fae1 	bl	800e72c <_vfiprintf_r>
 800d16a:	b002      	add	sp, #8
 800d16c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d170:	b003      	add	sp, #12
 800d172:	4770      	bx	lr
 800d174:	20000038 	.word	0x20000038

0800d178 <rshift>:
 800d178:	6903      	ldr	r3, [r0, #16]
 800d17a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d17e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d182:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d186:	f100 0414 	add.w	r4, r0, #20
 800d18a:	dd45      	ble.n	800d218 <rshift+0xa0>
 800d18c:	f011 011f 	ands.w	r1, r1, #31
 800d190:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d194:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d198:	d10c      	bne.n	800d1b4 <rshift+0x3c>
 800d19a:	f100 0710 	add.w	r7, r0, #16
 800d19e:	4629      	mov	r1, r5
 800d1a0:	42b1      	cmp	r1, r6
 800d1a2:	d334      	bcc.n	800d20e <rshift+0x96>
 800d1a4:	1a9b      	subs	r3, r3, r2
 800d1a6:	009b      	lsls	r3, r3, #2
 800d1a8:	1eea      	subs	r2, r5, #3
 800d1aa:	4296      	cmp	r6, r2
 800d1ac:	bf38      	it	cc
 800d1ae:	2300      	movcc	r3, #0
 800d1b0:	4423      	add	r3, r4
 800d1b2:	e015      	b.n	800d1e0 <rshift+0x68>
 800d1b4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d1b8:	f1c1 0820 	rsb	r8, r1, #32
 800d1bc:	40cf      	lsrs	r7, r1
 800d1be:	f105 0e04 	add.w	lr, r5, #4
 800d1c2:	46a1      	mov	r9, r4
 800d1c4:	4576      	cmp	r6, lr
 800d1c6:	46f4      	mov	ip, lr
 800d1c8:	d815      	bhi.n	800d1f6 <rshift+0x7e>
 800d1ca:	1a9a      	subs	r2, r3, r2
 800d1cc:	0092      	lsls	r2, r2, #2
 800d1ce:	3a04      	subs	r2, #4
 800d1d0:	3501      	adds	r5, #1
 800d1d2:	42ae      	cmp	r6, r5
 800d1d4:	bf38      	it	cc
 800d1d6:	2200      	movcc	r2, #0
 800d1d8:	18a3      	adds	r3, r4, r2
 800d1da:	50a7      	str	r7, [r4, r2]
 800d1dc:	b107      	cbz	r7, 800d1e0 <rshift+0x68>
 800d1de:	3304      	adds	r3, #4
 800d1e0:	1b1a      	subs	r2, r3, r4
 800d1e2:	42a3      	cmp	r3, r4
 800d1e4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d1e8:	bf08      	it	eq
 800d1ea:	2300      	moveq	r3, #0
 800d1ec:	6102      	str	r2, [r0, #16]
 800d1ee:	bf08      	it	eq
 800d1f0:	6143      	streq	r3, [r0, #20]
 800d1f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d1f6:	f8dc c000 	ldr.w	ip, [ip]
 800d1fa:	fa0c fc08 	lsl.w	ip, ip, r8
 800d1fe:	ea4c 0707 	orr.w	r7, ip, r7
 800d202:	f849 7b04 	str.w	r7, [r9], #4
 800d206:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d20a:	40cf      	lsrs	r7, r1
 800d20c:	e7da      	b.n	800d1c4 <rshift+0x4c>
 800d20e:	f851 cb04 	ldr.w	ip, [r1], #4
 800d212:	f847 cf04 	str.w	ip, [r7, #4]!
 800d216:	e7c3      	b.n	800d1a0 <rshift+0x28>
 800d218:	4623      	mov	r3, r4
 800d21a:	e7e1      	b.n	800d1e0 <rshift+0x68>

0800d21c <__hexdig_fun>:
 800d21c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d220:	2b09      	cmp	r3, #9
 800d222:	d802      	bhi.n	800d22a <__hexdig_fun+0xe>
 800d224:	3820      	subs	r0, #32
 800d226:	b2c0      	uxtb	r0, r0
 800d228:	4770      	bx	lr
 800d22a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d22e:	2b05      	cmp	r3, #5
 800d230:	d801      	bhi.n	800d236 <__hexdig_fun+0x1a>
 800d232:	3847      	subs	r0, #71	; 0x47
 800d234:	e7f7      	b.n	800d226 <__hexdig_fun+0xa>
 800d236:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d23a:	2b05      	cmp	r3, #5
 800d23c:	d801      	bhi.n	800d242 <__hexdig_fun+0x26>
 800d23e:	3827      	subs	r0, #39	; 0x27
 800d240:	e7f1      	b.n	800d226 <__hexdig_fun+0xa>
 800d242:	2000      	movs	r0, #0
 800d244:	4770      	bx	lr
	...

0800d248 <__gethex>:
 800d248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d24c:	ed2d 8b02 	vpush	{d8}
 800d250:	b089      	sub	sp, #36	; 0x24
 800d252:	ee08 0a10 	vmov	s16, r0
 800d256:	9304      	str	r3, [sp, #16]
 800d258:	4bb4      	ldr	r3, [pc, #720]	; (800d52c <__gethex+0x2e4>)
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	9301      	str	r3, [sp, #4]
 800d25e:	4618      	mov	r0, r3
 800d260:	468b      	mov	fp, r1
 800d262:	4690      	mov	r8, r2
 800d264:	f7f2 ffe6 	bl	8000234 <strlen>
 800d268:	9b01      	ldr	r3, [sp, #4]
 800d26a:	f8db 2000 	ldr.w	r2, [fp]
 800d26e:	4403      	add	r3, r0
 800d270:	4682      	mov	sl, r0
 800d272:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800d276:	9305      	str	r3, [sp, #20]
 800d278:	1c93      	adds	r3, r2, #2
 800d27a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d27e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d282:	32fe      	adds	r2, #254	; 0xfe
 800d284:	18d1      	adds	r1, r2, r3
 800d286:	461f      	mov	r7, r3
 800d288:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d28c:	9100      	str	r1, [sp, #0]
 800d28e:	2830      	cmp	r0, #48	; 0x30
 800d290:	d0f8      	beq.n	800d284 <__gethex+0x3c>
 800d292:	f7ff ffc3 	bl	800d21c <__hexdig_fun>
 800d296:	4604      	mov	r4, r0
 800d298:	2800      	cmp	r0, #0
 800d29a:	d13a      	bne.n	800d312 <__gethex+0xca>
 800d29c:	9901      	ldr	r1, [sp, #4]
 800d29e:	4652      	mov	r2, sl
 800d2a0:	4638      	mov	r0, r7
 800d2a2:	f001 fb8d 	bl	800e9c0 <strncmp>
 800d2a6:	4605      	mov	r5, r0
 800d2a8:	2800      	cmp	r0, #0
 800d2aa:	d168      	bne.n	800d37e <__gethex+0x136>
 800d2ac:	f817 000a 	ldrb.w	r0, [r7, sl]
 800d2b0:	eb07 060a 	add.w	r6, r7, sl
 800d2b4:	f7ff ffb2 	bl	800d21c <__hexdig_fun>
 800d2b8:	2800      	cmp	r0, #0
 800d2ba:	d062      	beq.n	800d382 <__gethex+0x13a>
 800d2bc:	4633      	mov	r3, r6
 800d2be:	7818      	ldrb	r0, [r3, #0]
 800d2c0:	2830      	cmp	r0, #48	; 0x30
 800d2c2:	461f      	mov	r7, r3
 800d2c4:	f103 0301 	add.w	r3, r3, #1
 800d2c8:	d0f9      	beq.n	800d2be <__gethex+0x76>
 800d2ca:	f7ff ffa7 	bl	800d21c <__hexdig_fun>
 800d2ce:	2301      	movs	r3, #1
 800d2d0:	fab0 f480 	clz	r4, r0
 800d2d4:	0964      	lsrs	r4, r4, #5
 800d2d6:	4635      	mov	r5, r6
 800d2d8:	9300      	str	r3, [sp, #0]
 800d2da:	463a      	mov	r2, r7
 800d2dc:	4616      	mov	r6, r2
 800d2de:	3201      	adds	r2, #1
 800d2e0:	7830      	ldrb	r0, [r6, #0]
 800d2e2:	f7ff ff9b 	bl	800d21c <__hexdig_fun>
 800d2e6:	2800      	cmp	r0, #0
 800d2e8:	d1f8      	bne.n	800d2dc <__gethex+0x94>
 800d2ea:	9901      	ldr	r1, [sp, #4]
 800d2ec:	4652      	mov	r2, sl
 800d2ee:	4630      	mov	r0, r6
 800d2f0:	f001 fb66 	bl	800e9c0 <strncmp>
 800d2f4:	b980      	cbnz	r0, 800d318 <__gethex+0xd0>
 800d2f6:	b94d      	cbnz	r5, 800d30c <__gethex+0xc4>
 800d2f8:	eb06 050a 	add.w	r5, r6, sl
 800d2fc:	462a      	mov	r2, r5
 800d2fe:	4616      	mov	r6, r2
 800d300:	3201      	adds	r2, #1
 800d302:	7830      	ldrb	r0, [r6, #0]
 800d304:	f7ff ff8a 	bl	800d21c <__hexdig_fun>
 800d308:	2800      	cmp	r0, #0
 800d30a:	d1f8      	bne.n	800d2fe <__gethex+0xb6>
 800d30c:	1bad      	subs	r5, r5, r6
 800d30e:	00ad      	lsls	r5, r5, #2
 800d310:	e004      	b.n	800d31c <__gethex+0xd4>
 800d312:	2400      	movs	r4, #0
 800d314:	4625      	mov	r5, r4
 800d316:	e7e0      	b.n	800d2da <__gethex+0x92>
 800d318:	2d00      	cmp	r5, #0
 800d31a:	d1f7      	bne.n	800d30c <__gethex+0xc4>
 800d31c:	7833      	ldrb	r3, [r6, #0]
 800d31e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d322:	2b50      	cmp	r3, #80	; 0x50
 800d324:	d13b      	bne.n	800d39e <__gethex+0x156>
 800d326:	7873      	ldrb	r3, [r6, #1]
 800d328:	2b2b      	cmp	r3, #43	; 0x2b
 800d32a:	d02c      	beq.n	800d386 <__gethex+0x13e>
 800d32c:	2b2d      	cmp	r3, #45	; 0x2d
 800d32e:	d02e      	beq.n	800d38e <__gethex+0x146>
 800d330:	1c71      	adds	r1, r6, #1
 800d332:	f04f 0900 	mov.w	r9, #0
 800d336:	7808      	ldrb	r0, [r1, #0]
 800d338:	f7ff ff70 	bl	800d21c <__hexdig_fun>
 800d33c:	1e43      	subs	r3, r0, #1
 800d33e:	b2db      	uxtb	r3, r3
 800d340:	2b18      	cmp	r3, #24
 800d342:	d82c      	bhi.n	800d39e <__gethex+0x156>
 800d344:	f1a0 0210 	sub.w	r2, r0, #16
 800d348:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d34c:	f7ff ff66 	bl	800d21c <__hexdig_fun>
 800d350:	1e43      	subs	r3, r0, #1
 800d352:	b2db      	uxtb	r3, r3
 800d354:	2b18      	cmp	r3, #24
 800d356:	d91d      	bls.n	800d394 <__gethex+0x14c>
 800d358:	f1b9 0f00 	cmp.w	r9, #0
 800d35c:	d000      	beq.n	800d360 <__gethex+0x118>
 800d35e:	4252      	negs	r2, r2
 800d360:	4415      	add	r5, r2
 800d362:	f8cb 1000 	str.w	r1, [fp]
 800d366:	b1e4      	cbz	r4, 800d3a2 <__gethex+0x15a>
 800d368:	9b00      	ldr	r3, [sp, #0]
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	bf14      	ite	ne
 800d36e:	2700      	movne	r7, #0
 800d370:	2706      	moveq	r7, #6
 800d372:	4638      	mov	r0, r7
 800d374:	b009      	add	sp, #36	; 0x24
 800d376:	ecbd 8b02 	vpop	{d8}
 800d37a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d37e:	463e      	mov	r6, r7
 800d380:	4625      	mov	r5, r4
 800d382:	2401      	movs	r4, #1
 800d384:	e7ca      	b.n	800d31c <__gethex+0xd4>
 800d386:	f04f 0900 	mov.w	r9, #0
 800d38a:	1cb1      	adds	r1, r6, #2
 800d38c:	e7d3      	b.n	800d336 <__gethex+0xee>
 800d38e:	f04f 0901 	mov.w	r9, #1
 800d392:	e7fa      	b.n	800d38a <__gethex+0x142>
 800d394:	230a      	movs	r3, #10
 800d396:	fb03 0202 	mla	r2, r3, r2, r0
 800d39a:	3a10      	subs	r2, #16
 800d39c:	e7d4      	b.n	800d348 <__gethex+0x100>
 800d39e:	4631      	mov	r1, r6
 800d3a0:	e7df      	b.n	800d362 <__gethex+0x11a>
 800d3a2:	1bf3      	subs	r3, r6, r7
 800d3a4:	3b01      	subs	r3, #1
 800d3a6:	4621      	mov	r1, r4
 800d3a8:	2b07      	cmp	r3, #7
 800d3aa:	dc0b      	bgt.n	800d3c4 <__gethex+0x17c>
 800d3ac:	ee18 0a10 	vmov	r0, s16
 800d3b0:	f000 fa7e 	bl	800d8b0 <_Balloc>
 800d3b4:	4604      	mov	r4, r0
 800d3b6:	b940      	cbnz	r0, 800d3ca <__gethex+0x182>
 800d3b8:	4b5d      	ldr	r3, [pc, #372]	; (800d530 <__gethex+0x2e8>)
 800d3ba:	4602      	mov	r2, r0
 800d3bc:	21de      	movs	r1, #222	; 0xde
 800d3be:	485d      	ldr	r0, [pc, #372]	; (800d534 <__gethex+0x2ec>)
 800d3c0:	f7ff f830 	bl	800c424 <__assert_func>
 800d3c4:	3101      	adds	r1, #1
 800d3c6:	105b      	asrs	r3, r3, #1
 800d3c8:	e7ee      	b.n	800d3a8 <__gethex+0x160>
 800d3ca:	f100 0914 	add.w	r9, r0, #20
 800d3ce:	f04f 0b00 	mov.w	fp, #0
 800d3d2:	f1ca 0301 	rsb	r3, sl, #1
 800d3d6:	f8cd 9008 	str.w	r9, [sp, #8]
 800d3da:	f8cd b000 	str.w	fp, [sp]
 800d3de:	9306      	str	r3, [sp, #24]
 800d3e0:	42b7      	cmp	r7, r6
 800d3e2:	d340      	bcc.n	800d466 <__gethex+0x21e>
 800d3e4:	9802      	ldr	r0, [sp, #8]
 800d3e6:	9b00      	ldr	r3, [sp, #0]
 800d3e8:	f840 3b04 	str.w	r3, [r0], #4
 800d3ec:	eba0 0009 	sub.w	r0, r0, r9
 800d3f0:	1080      	asrs	r0, r0, #2
 800d3f2:	0146      	lsls	r6, r0, #5
 800d3f4:	6120      	str	r0, [r4, #16]
 800d3f6:	4618      	mov	r0, r3
 800d3f8:	f000 fb4c 	bl	800da94 <__hi0bits>
 800d3fc:	1a30      	subs	r0, r6, r0
 800d3fe:	f8d8 6000 	ldr.w	r6, [r8]
 800d402:	42b0      	cmp	r0, r6
 800d404:	dd63      	ble.n	800d4ce <__gethex+0x286>
 800d406:	1b87      	subs	r7, r0, r6
 800d408:	4639      	mov	r1, r7
 800d40a:	4620      	mov	r0, r4
 800d40c:	f000 fef0 	bl	800e1f0 <__any_on>
 800d410:	4682      	mov	sl, r0
 800d412:	b1a8      	cbz	r0, 800d440 <__gethex+0x1f8>
 800d414:	1e7b      	subs	r3, r7, #1
 800d416:	1159      	asrs	r1, r3, #5
 800d418:	f003 021f 	and.w	r2, r3, #31
 800d41c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800d420:	f04f 0a01 	mov.w	sl, #1
 800d424:	fa0a f202 	lsl.w	r2, sl, r2
 800d428:	420a      	tst	r2, r1
 800d42a:	d009      	beq.n	800d440 <__gethex+0x1f8>
 800d42c:	4553      	cmp	r3, sl
 800d42e:	dd05      	ble.n	800d43c <__gethex+0x1f4>
 800d430:	1eb9      	subs	r1, r7, #2
 800d432:	4620      	mov	r0, r4
 800d434:	f000 fedc 	bl	800e1f0 <__any_on>
 800d438:	2800      	cmp	r0, #0
 800d43a:	d145      	bne.n	800d4c8 <__gethex+0x280>
 800d43c:	f04f 0a02 	mov.w	sl, #2
 800d440:	4639      	mov	r1, r7
 800d442:	4620      	mov	r0, r4
 800d444:	f7ff fe98 	bl	800d178 <rshift>
 800d448:	443d      	add	r5, r7
 800d44a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d44e:	42ab      	cmp	r3, r5
 800d450:	da4c      	bge.n	800d4ec <__gethex+0x2a4>
 800d452:	ee18 0a10 	vmov	r0, s16
 800d456:	4621      	mov	r1, r4
 800d458:	f000 fa6a 	bl	800d930 <_Bfree>
 800d45c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d45e:	2300      	movs	r3, #0
 800d460:	6013      	str	r3, [r2, #0]
 800d462:	27a3      	movs	r7, #163	; 0xa3
 800d464:	e785      	b.n	800d372 <__gethex+0x12a>
 800d466:	1e73      	subs	r3, r6, #1
 800d468:	9a05      	ldr	r2, [sp, #20]
 800d46a:	9303      	str	r3, [sp, #12]
 800d46c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d470:	4293      	cmp	r3, r2
 800d472:	d019      	beq.n	800d4a8 <__gethex+0x260>
 800d474:	f1bb 0f20 	cmp.w	fp, #32
 800d478:	d107      	bne.n	800d48a <__gethex+0x242>
 800d47a:	9b02      	ldr	r3, [sp, #8]
 800d47c:	9a00      	ldr	r2, [sp, #0]
 800d47e:	f843 2b04 	str.w	r2, [r3], #4
 800d482:	9302      	str	r3, [sp, #8]
 800d484:	2300      	movs	r3, #0
 800d486:	9300      	str	r3, [sp, #0]
 800d488:	469b      	mov	fp, r3
 800d48a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800d48e:	f7ff fec5 	bl	800d21c <__hexdig_fun>
 800d492:	9b00      	ldr	r3, [sp, #0]
 800d494:	f000 000f 	and.w	r0, r0, #15
 800d498:	fa00 f00b 	lsl.w	r0, r0, fp
 800d49c:	4303      	orrs	r3, r0
 800d49e:	9300      	str	r3, [sp, #0]
 800d4a0:	f10b 0b04 	add.w	fp, fp, #4
 800d4a4:	9b03      	ldr	r3, [sp, #12]
 800d4a6:	e00d      	b.n	800d4c4 <__gethex+0x27c>
 800d4a8:	9b03      	ldr	r3, [sp, #12]
 800d4aa:	9a06      	ldr	r2, [sp, #24]
 800d4ac:	4413      	add	r3, r2
 800d4ae:	42bb      	cmp	r3, r7
 800d4b0:	d3e0      	bcc.n	800d474 <__gethex+0x22c>
 800d4b2:	4618      	mov	r0, r3
 800d4b4:	9901      	ldr	r1, [sp, #4]
 800d4b6:	9307      	str	r3, [sp, #28]
 800d4b8:	4652      	mov	r2, sl
 800d4ba:	f001 fa81 	bl	800e9c0 <strncmp>
 800d4be:	9b07      	ldr	r3, [sp, #28]
 800d4c0:	2800      	cmp	r0, #0
 800d4c2:	d1d7      	bne.n	800d474 <__gethex+0x22c>
 800d4c4:	461e      	mov	r6, r3
 800d4c6:	e78b      	b.n	800d3e0 <__gethex+0x198>
 800d4c8:	f04f 0a03 	mov.w	sl, #3
 800d4cc:	e7b8      	b.n	800d440 <__gethex+0x1f8>
 800d4ce:	da0a      	bge.n	800d4e6 <__gethex+0x29e>
 800d4d0:	1a37      	subs	r7, r6, r0
 800d4d2:	4621      	mov	r1, r4
 800d4d4:	ee18 0a10 	vmov	r0, s16
 800d4d8:	463a      	mov	r2, r7
 800d4da:	f000 fc45 	bl	800dd68 <__lshift>
 800d4de:	1bed      	subs	r5, r5, r7
 800d4e0:	4604      	mov	r4, r0
 800d4e2:	f100 0914 	add.w	r9, r0, #20
 800d4e6:	f04f 0a00 	mov.w	sl, #0
 800d4ea:	e7ae      	b.n	800d44a <__gethex+0x202>
 800d4ec:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800d4f0:	42a8      	cmp	r0, r5
 800d4f2:	dd72      	ble.n	800d5da <__gethex+0x392>
 800d4f4:	1b45      	subs	r5, r0, r5
 800d4f6:	42ae      	cmp	r6, r5
 800d4f8:	dc36      	bgt.n	800d568 <__gethex+0x320>
 800d4fa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d4fe:	2b02      	cmp	r3, #2
 800d500:	d02a      	beq.n	800d558 <__gethex+0x310>
 800d502:	2b03      	cmp	r3, #3
 800d504:	d02c      	beq.n	800d560 <__gethex+0x318>
 800d506:	2b01      	cmp	r3, #1
 800d508:	d11c      	bne.n	800d544 <__gethex+0x2fc>
 800d50a:	42ae      	cmp	r6, r5
 800d50c:	d11a      	bne.n	800d544 <__gethex+0x2fc>
 800d50e:	2e01      	cmp	r6, #1
 800d510:	d112      	bne.n	800d538 <__gethex+0x2f0>
 800d512:	9a04      	ldr	r2, [sp, #16]
 800d514:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d518:	6013      	str	r3, [r2, #0]
 800d51a:	2301      	movs	r3, #1
 800d51c:	6123      	str	r3, [r4, #16]
 800d51e:	f8c9 3000 	str.w	r3, [r9]
 800d522:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d524:	2762      	movs	r7, #98	; 0x62
 800d526:	601c      	str	r4, [r3, #0]
 800d528:	e723      	b.n	800d372 <__gethex+0x12a>
 800d52a:	bf00      	nop
 800d52c:	0800f9b8 	.word	0x0800f9b8
 800d530:	0800f941 	.word	0x0800f941
 800d534:	0800f952 	.word	0x0800f952
 800d538:	1e71      	subs	r1, r6, #1
 800d53a:	4620      	mov	r0, r4
 800d53c:	f000 fe58 	bl	800e1f0 <__any_on>
 800d540:	2800      	cmp	r0, #0
 800d542:	d1e6      	bne.n	800d512 <__gethex+0x2ca>
 800d544:	ee18 0a10 	vmov	r0, s16
 800d548:	4621      	mov	r1, r4
 800d54a:	f000 f9f1 	bl	800d930 <_Bfree>
 800d54e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d550:	2300      	movs	r3, #0
 800d552:	6013      	str	r3, [r2, #0]
 800d554:	2750      	movs	r7, #80	; 0x50
 800d556:	e70c      	b.n	800d372 <__gethex+0x12a>
 800d558:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d1f2      	bne.n	800d544 <__gethex+0x2fc>
 800d55e:	e7d8      	b.n	800d512 <__gethex+0x2ca>
 800d560:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d562:	2b00      	cmp	r3, #0
 800d564:	d1d5      	bne.n	800d512 <__gethex+0x2ca>
 800d566:	e7ed      	b.n	800d544 <__gethex+0x2fc>
 800d568:	1e6f      	subs	r7, r5, #1
 800d56a:	f1ba 0f00 	cmp.w	sl, #0
 800d56e:	d131      	bne.n	800d5d4 <__gethex+0x38c>
 800d570:	b127      	cbz	r7, 800d57c <__gethex+0x334>
 800d572:	4639      	mov	r1, r7
 800d574:	4620      	mov	r0, r4
 800d576:	f000 fe3b 	bl	800e1f0 <__any_on>
 800d57a:	4682      	mov	sl, r0
 800d57c:	117b      	asrs	r3, r7, #5
 800d57e:	2101      	movs	r1, #1
 800d580:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800d584:	f007 071f 	and.w	r7, r7, #31
 800d588:	fa01 f707 	lsl.w	r7, r1, r7
 800d58c:	421f      	tst	r7, r3
 800d58e:	4629      	mov	r1, r5
 800d590:	4620      	mov	r0, r4
 800d592:	bf18      	it	ne
 800d594:	f04a 0a02 	orrne.w	sl, sl, #2
 800d598:	1b76      	subs	r6, r6, r5
 800d59a:	f7ff fded 	bl	800d178 <rshift>
 800d59e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d5a2:	2702      	movs	r7, #2
 800d5a4:	f1ba 0f00 	cmp.w	sl, #0
 800d5a8:	d048      	beq.n	800d63c <__gethex+0x3f4>
 800d5aa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d5ae:	2b02      	cmp	r3, #2
 800d5b0:	d015      	beq.n	800d5de <__gethex+0x396>
 800d5b2:	2b03      	cmp	r3, #3
 800d5b4:	d017      	beq.n	800d5e6 <__gethex+0x39e>
 800d5b6:	2b01      	cmp	r3, #1
 800d5b8:	d109      	bne.n	800d5ce <__gethex+0x386>
 800d5ba:	f01a 0f02 	tst.w	sl, #2
 800d5be:	d006      	beq.n	800d5ce <__gethex+0x386>
 800d5c0:	f8d9 0000 	ldr.w	r0, [r9]
 800d5c4:	ea4a 0a00 	orr.w	sl, sl, r0
 800d5c8:	f01a 0f01 	tst.w	sl, #1
 800d5cc:	d10e      	bne.n	800d5ec <__gethex+0x3a4>
 800d5ce:	f047 0710 	orr.w	r7, r7, #16
 800d5d2:	e033      	b.n	800d63c <__gethex+0x3f4>
 800d5d4:	f04f 0a01 	mov.w	sl, #1
 800d5d8:	e7d0      	b.n	800d57c <__gethex+0x334>
 800d5da:	2701      	movs	r7, #1
 800d5dc:	e7e2      	b.n	800d5a4 <__gethex+0x35c>
 800d5de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d5e0:	f1c3 0301 	rsb	r3, r3, #1
 800d5e4:	9315      	str	r3, [sp, #84]	; 0x54
 800d5e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d0f0      	beq.n	800d5ce <__gethex+0x386>
 800d5ec:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d5f0:	f104 0314 	add.w	r3, r4, #20
 800d5f4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d5f8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d5fc:	f04f 0c00 	mov.w	ip, #0
 800d600:	4618      	mov	r0, r3
 800d602:	f853 2b04 	ldr.w	r2, [r3], #4
 800d606:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d60a:	d01c      	beq.n	800d646 <__gethex+0x3fe>
 800d60c:	3201      	adds	r2, #1
 800d60e:	6002      	str	r2, [r0, #0]
 800d610:	2f02      	cmp	r7, #2
 800d612:	f104 0314 	add.w	r3, r4, #20
 800d616:	d13f      	bne.n	800d698 <__gethex+0x450>
 800d618:	f8d8 2000 	ldr.w	r2, [r8]
 800d61c:	3a01      	subs	r2, #1
 800d61e:	42b2      	cmp	r2, r6
 800d620:	d10a      	bne.n	800d638 <__gethex+0x3f0>
 800d622:	1171      	asrs	r1, r6, #5
 800d624:	2201      	movs	r2, #1
 800d626:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d62a:	f006 061f 	and.w	r6, r6, #31
 800d62e:	fa02 f606 	lsl.w	r6, r2, r6
 800d632:	421e      	tst	r6, r3
 800d634:	bf18      	it	ne
 800d636:	4617      	movne	r7, r2
 800d638:	f047 0720 	orr.w	r7, r7, #32
 800d63c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d63e:	601c      	str	r4, [r3, #0]
 800d640:	9b04      	ldr	r3, [sp, #16]
 800d642:	601d      	str	r5, [r3, #0]
 800d644:	e695      	b.n	800d372 <__gethex+0x12a>
 800d646:	4299      	cmp	r1, r3
 800d648:	f843 cc04 	str.w	ip, [r3, #-4]
 800d64c:	d8d8      	bhi.n	800d600 <__gethex+0x3b8>
 800d64e:	68a3      	ldr	r3, [r4, #8]
 800d650:	459b      	cmp	fp, r3
 800d652:	db19      	blt.n	800d688 <__gethex+0x440>
 800d654:	6861      	ldr	r1, [r4, #4]
 800d656:	ee18 0a10 	vmov	r0, s16
 800d65a:	3101      	adds	r1, #1
 800d65c:	f000 f928 	bl	800d8b0 <_Balloc>
 800d660:	4681      	mov	r9, r0
 800d662:	b918      	cbnz	r0, 800d66c <__gethex+0x424>
 800d664:	4b1a      	ldr	r3, [pc, #104]	; (800d6d0 <__gethex+0x488>)
 800d666:	4602      	mov	r2, r0
 800d668:	2184      	movs	r1, #132	; 0x84
 800d66a:	e6a8      	b.n	800d3be <__gethex+0x176>
 800d66c:	6922      	ldr	r2, [r4, #16]
 800d66e:	3202      	adds	r2, #2
 800d670:	f104 010c 	add.w	r1, r4, #12
 800d674:	0092      	lsls	r2, r2, #2
 800d676:	300c      	adds	r0, #12
 800d678:	f000 f90c 	bl	800d894 <memcpy>
 800d67c:	4621      	mov	r1, r4
 800d67e:	ee18 0a10 	vmov	r0, s16
 800d682:	f000 f955 	bl	800d930 <_Bfree>
 800d686:	464c      	mov	r4, r9
 800d688:	6923      	ldr	r3, [r4, #16]
 800d68a:	1c5a      	adds	r2, r3, #1
 800d68c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d690:	6122      	str	r2, [r4, #16]
 800d692:	2201      	movs	r2, #1
 800d694:	615a      	str	r2, [r3, #20]
 800d696:	e7bb      	b.n	800d610 <__gethex+0x3c8>
 800d698:	6922      	ldr	r2, [r4, #16]
 800d69a:	455a      	cmp	r2, fp
 800d69c:	dd0b      	ble.n	800d6b6 <__gethex+0x46e>
 800d69e:	2101      	movs	r1, #1
 800d6a0:	4620      	mov	r0, r4
 800d6a2:	f7ff fd69 	bl	800d178 <rshift>
 800d6a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d6aa:	3501      	adds	r5, #1
 800d6ac:	42ab      	cmp	r3, r5
 800d6ae:	f6ff aed0 	blt.w	800d452 <__gethex+0x20a>
 800d6b2:	2701      	movs	r7, #1
 800d6b4:	e7c0      	b.n	800d638 <__gethex+0x3f0>
 800d6b6:	f016 061f 	ands.w	r6, r6, #31
 800d6ba:	d0fa      	beq.n	800d6b2 <__gethex+0x46a>
 800d6bc:	4453      	add	r3, sl
 800d6be:	f1c6 0620 	rsb	r6, r6, #32
 800d6c2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d6c6:	f000 f9e5 	bl	800da94 <__hi0bits>
 800d6ca:	42b0      	cmp	r0, r6
 800d6cc:	dbe7      	blt.n	800d69e <__gethex+0x456>
 800d6ce:	e7f0      	b.n	800d6b2 <__gethex+0x46a>
 800d6d0:	0800f941 	.word	0x0800f941

0800d6d4 <L_shift>:
 800d6d4:	f1c2 0208 	rsb	r2, r2, #8
 800d6d8:	0092      	lsls	r2, r2, #2
 800d6da:	b570      	push	{r4, r5, r6, lr}
 800d6dc:	f1c2 0620 	rsb	r6, r2, #32
 800d6e0:	6843      	ldr	r3, [r0, #4]
 800d6e2:	6804      	ldr	r4, [r0, #0]
 800d6e4:	fa03 f506 	lsl.w	r5, r3, r6
 800d6e8:	432c      	orrs	r4, r5
 800d6ea:	40d3      	lsrs	r3, r2
 800d6ec:	6004      	str	r4, [r0, #0]
 800d6ee:	f840 3f04 	str.w	r3, [r0, #4]!
 800d6f2:	4288      	cmp	r0, r1
 800d6f4:	d3f4      	bcc.n	800d6e0 <L_shift+0xc>
 800d6f6:	bd70      	pop	{r4, r5, r6, pc}

0800d6f8 <__match>:
 800d6f8:	b530      	push	{r4, r5, lr}
 800d6fa:	6803      	ldr	r3, [r0, #0]
 800d6fc:	3301      	adds	r3, #1
 800d6fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d702:	b914      	cbnz	r4, 800d70a <__match+0x12>
 800d704:	6003      	str	r3, [r0, #0]
 800d706:	2001      	movs	r0, #1
 800d708:	bd30      	pop	{r4, r5, pc}
 800d70a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d70e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d712:	2d19      	cmp	r5, #25
 800d714:	bf98      	it	ls
 800d716:	3220      	addls	r2, #32
 800d718:	42a2      	cmp	r2, r4
 800d71a:	d0f0      	beq.n	800d6fe <__match+0x6>
 800d71c:	2000      	movs	r0, #0
 800d71e:	e7f3      	b.n	800d708 <__match+0x10>

0800d720 <__hexnan>:
 800d720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d724:	680b      	ldr	r3, [r1, #0]
 800d726:	115e      	asrs	r6, r3, #5
 800d728:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d72c:	f013 031f 	ands.w	r3, r3, #31
 800d730:	b087      	sub	sp, #28
 800d732:	bf18      	it	ne
 800d734:	3604      	addne	r6, #4
 800d736:	2500      	movs	r5, #0
 800d738:	1f37      	subs	r7, r6, #4
 800d73a:	4690      	mov	r8, r2
 800d73c:	6802      	ldr	r2, [r0, #0]
 800d73e:	9301      	str	r3, [sp, #4]
 800d740:	4682      	mov	sl, r0
 800d742:	f846 5c04 	str.w	r5, [r6, #-4]
 800d746:	46b9      	mov	r9, r7
 800d748:	463c      	mov	r4, r7
 800d74a:	9502      	str	r5, [sp, #8]
 800d74c:	46ab      	mov	fp, r5
 800d74e:	7851      	ldrb	r1, [r2, #1]
 800d750:	1c53      	adds	r3, r2, #1
 800d752:	9303      	str	r3, [sp, #12]
 800d754:	b341      	cbz	r1, 800d7a8 <__hexnan+0x88>
 800d756:	4608      	mov	r0, r1
 800d758:	9205      	str	r2, [sp, #20]
 800d75a:	9104      	str	r1, [sp, #16]
 800d75c:	f7ff fd5e 	bl	800d21c <__hexdig_fun>
 800d760:	2800      	cmp	r0, #0
 800d762:	d14f      	bne.n	800d804 <__hexnan+0xe4>
 800d764:	9904      	ldr	r1, [sp, #16]
 800d766:	9a05      	ldr	r2, [sp, #20]
 800d768:	2920      	cmp	r1, #32
 800d76a:	d818      	bhi.n	800d79e <__hexnan+0x7e>
 800d76c:	9b02      	ldr	r3, [sp, #8]
 800d76e:	459b      	cmp	fp, r3
 800d770:	dd13      	ble.n	800d79a <__hexnan+0x7a>
 800d772:	454c      	cmp	r4, r9
 800d774:	d206      	bcs.n	800d784 <__hexnan+0x64>
 800d776:	2d07      	cmp	r5, #7
 800d778:	dc04      	bgt.n	800d784 <__hexnan+0x64>
 800d77a:	462a      	mov	r2, r5
 800d77c:	4649      	mov	r1, r9
 800d77e:	4620      	mov	r0, r4
 800d780:	f7ff ffa8 	bl	800d6d4 <L_shift>
 800d784:	4544      	cmp	r4, r8
 800d786:	d950      	bls.n	800d82a <__hexnan+0x10a>
 800d788:	2300      	movs	r3, #0
 800d78a:	f1a4 0904 	sub.w	r9, r4, #4
 800d78e:	f844 3c04 	str.w	r3, [r4, #-4]
 800d792:	f8cd b008 	str.w	fp, [sp, #8]
 800d796:	464c      	mov	r4, r9
 800d798:	461d      	mov	r5, r3
 800d79a:	9a03      	ldr	r2, [sp, #12]
 800d79c:	e7d7      	b.n	800d74e <__hexnan+0x2e>
 800d79e:	2929      	cmp	r1, #41	; 0x29
 800d7a0:	d156      	bne.n	800d850 <__hexnan+0x130>
 800d7a2:	3202      	adds	r2, #2
 800d7a4:	f8ca 2000 	str.w	r2, [sl]
 800d7a8:	f1bb 0f00 	cmp.w	fp, #0
 800d7ac:	d050      	beq.n	800d850 <__hexnan+0x130>
 800d7ae:	454c      	cmp	r4, r9
 800d7b0:	d206      	bcs.n	800d7c0 <__hexnan+0xa0>
 800d7b2:	2d07      	cmp	r5, #7
 800d7b4:	dc04      	bgt.n	800d7c0 <__hexnan+0xa0>
 800d7b6:	462a      	mov	r2, r5
 800d7b8:	4649      	mov	r1, r9
 800d7ba:	4620      	mov	r0, r4
 800d7bc:	f7ff ff8a 	bl	800d6d4 <L_shift>
 800d7c0:	4544      	cmp	r4, r8
 800d7c2:	d934      	bls.n	800d82e <__hexnan+0x10e>
 800d7c4:	f1a8 0204 	sub.w	r2, r8, #4
 800d7c8:	4623      	mov	r3, r4
 800d7ca:	f853 1b04 	ldr.w	r1, [r3], #4
 800d7ce:	f842 1f04 	str.w	r1, [r2, #4]!
 800d7d2:	429f      	cmp	r7, r3
 800d7d4:	d2f9      	bcs.n	800d7ca <__hexnan+0xaa>
 800d7d6:	1b3b      	subs	r3, r7, r4
 800d7d8:	f023 0303 	bic.w	r3, r3, #3
 800d7dc:	3304      	adds	r3, #4
 800d7de:	3401      	adds	r4, #1
 800d7e0:	3e03      	subs	r6, #3
 800d7e2:	42b4      	cmp	r4, r6
 800d7e4:	bf88      	it	hi
 800d7e6:	2304      	movhi	r3, #4
 800d7e8:	4443      	add	r3, r8
 800d7ea:	2200      	movs	r2, #0
 800d7ec:	f843 2b04 	str.w	r2, [r3], #4
 800d7f0:	429f      	cmp	r7, r3
 800d7f2:	d2fb      	bcs.n	800d7ec <__hexnan+0xcc>
 800d7f4:	683b      	ldr	r3, [r7, #0]
 800d7f6:	b91b      	cbnz	r3, 800d800 <__hexnan+0xe0>
 800d7f8:	4547      	cmp	r7, r8
 800d7fa:	d127      	bne.n	800d84c <__hexnan+0x12c>
 800d7fc:	2301      	movs	r3, #1
 800d7fe:	603b      	str	r3, [r7, #0]
 800d800:	2005      	movs	r0, #5
 800d802:	e026      	b.n	800d852 <__hexnan+0x132>
 800d804:	3501      	adds	r5, #1
 800d806:	2d08      	cmp	r5, #8
 800d808:	f10b 0b01 	add.w	fp, fp, #1
 800d80c:	dd06      	ble.n	800d81c <__hexnan+0xfc>
 800d80e:	4544      	cmp	r4, r8
 800d810:	d9c3      	bls.n	800d79a <__hexnan+0x7a>
 800d812:	2300      	movs	r3, #0
 800d814:	f844 3c04 	str.w	r3, [r4, #-4]
 800d818:	2501      	movs	r5, #1
 800d81a:	3c04      	subs	r4, #4
 800d81c:	6822      	ldr	r2, [r4, #0]
 800d81e:	f000 000f 	and.w	r0, r0, #15
 800d822:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800d826:	6022      	str	r2, [r4, #0]
 800d828:	e7b7      	b.n	800d79a <__hexnan+0x7a>
 800d82a:	2508      	movs	r5, #8
 800d82c:	e7b5      	b.n	800d79a <__hexnan+0x7a>
 800d82e:	9b01      	ldr	r3, [sp, #4]
 800d830:	2b00      	cmp	r3, #0
 800d832:	d0df      	beq.n	800d7f4 <__hexnan+0xd4>
 800d834:	f04f 32ff 	mov.w	r2, #4294967295
 800d838:	f1c3 0320 	rsb	r3, r3, #32
 800d83c:	fa22 f303 	lsr.w	r3, r2, r3
 800d840:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d844:	401a      	ands	r2, r3
 800d846:	f846 2c04 	str.w	r2, [r6, #-4]
 800d84a:	e7d3      	b.n	800d7f4 <__hexnan+0xd4>
 800d84c:	3f04      	subs	r7, #4
 800d84e:	e7d1      	b.n	800d7f4 <__hexnan+0xd4>
 800d850:	2004      	movs	r0, #4
 800d852:	b007      	add	sp, #28
 800d854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d858 <_localeconv_r>:
 800d858:	4800      	ldr	r0, [pc, #0]	; (800d85c <_localeconv_r+0x4>)
 800d85a:	4770      	bx	lr
 800d85c:	20000190 	.word	0x20000190

0800d860 <malloc>:
 800d860:	4b02      	ldr	r3, [pc, #8]	; (800d86c <malloc+0xc>)
 800d862:	4601      	mov	r1, r0
 800d864:	6818      	ldr	r0, [r3, #0]
 800d866:	f000 bd67 	b.w	800e338 <_malloc_r>
 800d86a:	bf00      	nop
 800d86c:	20000038 	.word	0x20000038

0800d870 <__ascii_mbtowc>:
 800d870:	b082      	sub	sp, #8
 800d872:	b901      	cbnz	r1, 800d876 <__ascii_mbtowc+0x6>
 800d874:	a901      	add	r1, sp, #4
 800d876:	b142      	cbz	r2, 800d88a <__ascii_mbtowc+0x1a>
 800d878:	b14b      	cbz	r3, 800d88e <__ascii_mbtowc+0x1e>
 800d87a:	7813      	ldrb	r3, [r2, #0]
 800d87c:	600b      	str	r3, [r1, #0]
 800d87e:	7812      	ldrb	r2, [r2, #0]
 800d880:	1e10      	subs	r0, r2, #0
 800d882:	bf18      	it	ne
 800d884:	2001      	movne	r0, #1
 800d886:	b002      	add	sp, #8
 800d888:	4770      	bx	lr
 800d88a:	4610      	mov	r0, r2
 800d88c:	e7fb      	b.n	800d886 <__ascii_mbtowc+0x16>
 800d88e:	f06f 0001 	mvn.w	r0, #1
 800d892:	e7f8      	b.n	800d886 <__ascii_mbtowc+0x16>

0800d894 <memcpy>:
 800d894:	440a      	add	r2, r1
 800d896:	4291      	cmp	r1, r2
 800d898:	f100 33ff 	add.w	r3, r0, #4294967295
 800d89c:	d100      	bne.n	800d8a0 <memcpy+0xc>
 800d89e:	4770      	bx	lr
 800d8a0:	b510      	push	{r4, lr}
 800d8a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d8a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d8aa:	4291      	cmp	r1, r2
 800d8ac:	d1f9      	bne.n	800d8a2 <memcpy+0xe>
 800d8ae:	bd10      	pop	{r4, pc}

0800d8b0 <_Balloc>:
 800d8b0:	b570      	push	{r4, r5, r6, lr}
 800d8b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d8b4:	4604      	mov	r4, r0
 800d8b6:	460d      	mov	r5, r1
 800d8b8:	b976      	cbnz	r6, 800d8d8 <_Balloc+0x28>
 800d8ba:	2010      	movs	r0, #16
 800d8bc:	f7ff ffd0 	bl	800d860 <malloc>
 800d8c0:	4602      	mov	r2, r0
 800d8c2:	6260      	str	r0, [r4, #36]	; 0x24
 800d8c4:	b920      	cbnz	r0, 800d8d0 <_Balloc+0x20>
 800d8c6:	4b18      	ldr	r3, [pc, #96]	; (800d928 <_Balloc+0x78>)
 800d8c8:	4818      	ldr	r0, [pc, #96]	; (800d92c <_Balloc+0x7c>)
 800d8ca:	2166      	movs	r1, #102	; 0x66
 800d8cc:	f7fe fdaa 	bl	800c424 <__assert_func>
 800d8d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d8d4:	6006      	str	r6, [r0, #0]
 800d8d6:	60c6      	str	r6, [r0, #12]
 800d8d8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d8da:	68f3      	ldr	r3, [r6, #12]
 800d8dc:	b183      	cbz	r3, 800d900 <_Balloc+0x50>
 800d8de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d8e0:	68db      	ldr	r3, [r3, #12]
 800d8e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d8e6:	b9b8      	cbnz	r0, 800d918 <_Balloc+0x68>
 800d8e8:	2101      	movs	r1, #1
 800d8ea:	fa01 f605 	lsl.w	r6, r1, r5
 800d8ee:	1d72      	adds	r2, r6, #5
 800d8f0:	0092      	lsls	r2, r2, #2
 800d8f2:	4620      	mov	r0, r4
 800d8f4:	f000 fc9d 	bl	800e232 <_calloc_r>
 800d8f8:	b160      	cbz	r0, 800d914 <_Balloc+0x64>
 800d8fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d8fe:	e00e      	b.n	800d91e <_Balloc+0x6e>
 800d900:	2221      	movs	r2, #33	; 0x21
 800d902:	2104      	movs	r1, #4
 800d904:	4620      	mov	r0, r4
 800d906:	f000 fc94 	bl	800e232 <_calloc_r>
 800d90a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d90c:	60f0      	str	r0, [r6, #12]
 800d90e:	68db      	ldr	r3, [r3, #12]
 800d910:	2b00      	cmp	r3, #0
 800d912:	d1e4      	bne.n	800d8de <_Balloc+0x2e>
 800d914:	2000      	movs	r0, #0
 800d916:	bd70      	pop	{r4, r5, r6, pc}
 800d918:	6802      	ldr	r2, [r0, #0]
 800d91a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d91e:	2300      	movs	r3, #0
 800d920:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d924:	e7f7      	b.n	800d916 <_Balloc+0x66>
 800d926:	bf00      	nop
 800d928:	0800f728 	.word	0x0800f728
 800d92c:	0800f9cc 	.word	0x0800f9cc

0800d930 <_Bfree>:
 800d930:	b570      	push	{r4, r5, r6, lr}
 800d932:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d934:	4605      	mov	r5, r0
 800d936:	460c      	mov	r4, r1
 800d938:	b976      	cbnz	r6, 800d958 <_Bfree+0x28>
 800d93a:	2010      	movs	r0, #16
 800d93c:	f7ff ff90 	bl	800d860 <malloc>
 800d940:	4602      	mov	r2, r0
 800d942:	6268      	str	r0, [r5, #36]	; 0x24
 800d944:	b920      	cbnz	r0, 800d950 <_Bfree+0x20>
 800d946:	4b09      	ldr	r3, [pc, #36]	; (800d96c <_Bfree+0x3c>)
 800d948:	4809      	ldr	r0, [pc, #36]	; (800d970 <_Bfree+0x40>)
 800d94a:	218a      	movs	r1, #138	; 0x8a
 800d94c:	f7fe fd6a 	bl	800c424 <__assert_func>
 800d950:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d954:	6006      	str	r6, [r0, #0]
 800d956:	60c6      	str	r6, [r0, #12]
 800d958:	b13c      	cbz	r4, 800d96a <_Bfree+0x3a>
 800d95a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d95c:	6862      	ldr	r2, [r4, #4]
 800d95e:	68db      	ldr	r3, [r3, #12]
 800d960:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d964:	6021      	str	r1, [r4, #0]
 800d966:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d96a:	bd70      	pop	{r4, r5, r6, pc}
 800d96c:	0800f728 	.word	0x0800f728
 800d970:	0800f9cc 	.word	0x0800f9cc

0800d974 <__multadd>:
 800d974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d978:	690d      	ldr	r5, [r1, #16]
 800d97a:	4607      	mov	r7, r0
 800d97c:	460c      	mov	r4, r1
 800d97e:	461e      	mov	r6, r3
 800d980:	f101 0c14 	add.w	ip, r1, #20
 800d984:	2000      	movs	r0, #0
 800d986:	f8dc 3000 	ldr.w	r3, [ip]
 800d98a:	b299      	uxth	r1, r3
 800d98c:	fb02 6101 	mla	r1, r2, r1, r6
 800d990:	0c1e      	lsrs	r6, r3, #16
 800d992:	0c0b      	lsrs	r3, r1, #16
 800d994:	fb02 3306 	mla	r3, r2, r6, r3
 800d998:	b289      	uxth	r1, r1
 800d99a:	3001      	adds	r0, #1
 800d99c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d9a0:	4285      	cmp	r5, r0
 800d9a2:	f84c 1b04 	str.w	r1, [ip], #4
 800d9a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d9aa:	dcec      	bgt.n	800d986 <__multadd+0x12>
 800d9ac:	b30e      	cbz	r6, 800d9f2 <__multadd+0x7e>
 800d9ae:	68a3      	ldr	r3, [r4, #8]
 800d9b0:	42ab      	cmp	r3, r5
 800d9b2:	dc19      	bgt.n	800d9e8 <__multadd+0x74>
 800d9b4:	6861      	ldr	r1, [r4, #4]
 800d9b6:	4638      	mov	r0, r7
 800d9b8:	3101      	adds	r1, #1
 800d9ba:	f7ff ff79 	bl	800d8b0 <_Balloc>
 800d9be:	4680      	mov	r8, r0
 800d9c0:	b928      	cbnz	r0, 800d9ce <__multadd+0x5a>
 800d9c2:	4602      	mov	r2, r0
 800d9c4:	4b0c      	ldr	r3, [pc, #48]	; (800d9f8 <__multadd+0x84>)
 800d9c6:	480d      	ldr	r0, [pc, #52]	; (800d9fc <__multadd+0x88>)
 800d9c8:	21b5      	movs	r1, #181	; 0xb5
 800d9ca:	f7fe fd2b 	bl	800c424 <__assert_func>
 800d9ce:	6922      	ldr	r2, [r4, #16]
 800d9d0:	3202      	adds	r2, #2
 800d9d2:	f104 010c 	add.w	r1, r4, #12
 800d9d6:	0092      	lsls	r2, r2, #2
 800d9d8:	300c      	adds	r0, #12
 800d9da:	f7ff ff5b 	bl	800d894 <memcpy>
 800d9de:	4621      	mov	r1, r4
 800d9e0:	4638      	mov	r0, r7
 800d9e2:	f7ff ffa5 	bl	800d930 <_Bfree>
 800d9e6:	4644      	mov	r4, r8
 800d9e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d9ec:	3501      	adds	r5, #1
 800d9ee:	615e      	str	r6, [r3, #20]
 800d9f0:	6125      	str	r5, [r4, #16]
 800d9f2:	4620      	mov	r0, r4
 800d9f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9f8:	0800f941 	.word	0x0800f941
 800d9fc:	0800f9cc 	.word	0x0800f9cc

0800da00 <__s2b>:
 800da00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da04:	460c      	mov	r4, r1
 800da06:	4615      	mov	r5, r2
 800da08:	461f      	mov	r7, r3
 800da0a:	2209      	movs	r2, #9
 800da0c:	3308      	adds	r3, #8
 800da0e:	4606      	mov	r6, r0
 800da10:	fb93 f3f2 	sdiv	r3, r3, r2
 800da14:	2100      	movs	r1, #0
 800da16:	2201      	movs	r2, #1
 800da18:	429a      	cmp	r2, r3
 800da1a:	db09      	blt.n	800da30 <__s2b+0x30>
 800da1c:	4630      	mov	r0, r6
 800da1e:	f7ff ff47 	bl	800d8b0 <_Balloc>
 800da22:	b940      	cbnz	r0, 800da36 <__s2b+0x36>
 800da24:	4602      	mov	r2, r0
 800da26:	4b19      	ldr	r3, [pc, #100]	; (800da8c <__s2b+0x8c>)
 800da28:	4819      	ldr	r0, [pc, #100]	; (800da90 <__s2b+0x90>)
 800da2a:	21ce      	movs	r1, #206	; 0xce
 800da2c:	f7fe fcfa 	bl	800c424 <__assert_func>
 800da30:	0052      	lsls	r2, r2, #1
 800da32:	3101      	adds	r1, #1
 800da34:	e7f0      	b.n	800da18 <__s2b+0x18>
 800da36:	9b08      	ldr	r3, [sp, #32]
 800da38:	6143      	str	r3, [r0, #20]
 800da3a:	2d09      	cmp	r5, #9
 800da3c:	f04f 0301 	mov.w	r3, #1
 800da40:	6103      	str	r3, [r0, #16]
 800da42:	dd16      	ble.n	800da72 <__s2b+0x72>
 800da44:	f104 0909 	add.w	r9, r4, #9
 800da48:	46c8      	mov	r8, r9
 800da4a:	442c      	add	r4, r5
 800da4c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800da50:	4601      	mov	r1, r0
 800da52:	3b30      	subs	r3, #48	; 0x30
 800da54:	220a      	movs	r2, #10
 800da56:	4630      	mov	r0, r6
 800da58:	f7ff ff8c 	bl	800d974 <__multadd>
 800da5c:	45a0      	cmp	r8, r4
 800da5e:	d1f5      	bne.n	800da4c <__s2b+0x4c>
 800da60:	f1a5 0408 	sub.w	r4, r5, #8
 800da64:	444c      	add	r4, r9
 800da66:	1b2d      	subs	r5, r5, r4
 800da68:	1963      	adds	r3, r4, r5
 800da6a:	42bb      	cmp	r3, r7
 800da6c:	db04      	blt.n	800da78 <__s2b+0x78>
 800da6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da72:	340a      	adds	r4, #10
 800da74:	2509      	movs	r5, #9
 800da76:	e7f6      	b.n	800da66 <__s2b+0x66>
 800da78:	f814 3b01 	ldrb.w	r3, [r4], #1
 800da7c:	4601      	mov	r1, r0
 800da7e:	3b30      	subs	r3, #48	; 0x30
 800da80:	220a      	movs	r2, #10
 800da82:	4630      	mov	r0, r6
 800da84:	f7ff ff76 	bl	800d974 <__multadd>
 800da88:	e7ee      	b.n	800da68 <__s2b+0x68>
 800da8a:	bf00      	nop
 800da8c:	0800f941 	.word	0x0800f941
 800da90:	0800f9cc 	.word	0x0800f9cc

0800da94 <__hi0bits>:
 800da94:	0c03      	lsrs	r3, r0, #16
 800da96:	041b      	lsls	r3, r3, #16
 800da98:	b9d3      	cbnz	r3, 800dad0 <__hi0bits+0x3c>
 800da9a:	0400      	lsls	r0, r0, #16
 800da9c:	2310      	movs	r3, #16
 800da9e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800daa2:	bf04      	itt	eq
 800daa4:	0200      	lsleq	r0, r0, #8
 800daa6:	3308      	addeq	r3, #8
 800daa8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800daac:	bf04      	itt	eq
 800daae:	0100      	lsleq	r0, r0, #4
 800dab0:	3304      	addeq	r3, #4
 800dab2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800dab6:	bf04      	itt	eq
 800dab8:	0080      	lsleq	r0, r0, #2
 800daba:	3302      	addeq	r3, #2
 800dabc:	2800      	cmp	r0, #0
 800dabe:	db05      	blt.n	800dacc <__hi0bits+0x38>
 800dac0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800dac4:	f103 0301 	add.w	r3, r3, #1
 800dac8:	bf08      	it	eq
 800daca:	2320      	moveq	r3, #32
 800dacc:	4618      	mov	r0, r3
 800dace:	4770      	bx	lr
 800dad0:	2300      	movs	r3, #0
 800dad2:	e7e4      	b.n	800da9e <__hi0bits+0xa>

0800dad4 <__lo0bits>:
 800dad4:	6803      	ldr	r3, [r0, #0]
 800dad6:	f013 0207 	ands.w	r2, r3, #7
 800dada:	4601      	mov	r1, r0
 800dadc:	d00b      	beq.n	800daf6 <__lo0bits+0x22>
 800dade:	07da      	lsls	r2, r3, #31
 800dae0:	d423      	bmi.n	800db2a <__lo0bits+0x56>
 800dae2:	0798      	lsls	r0, r3, #30
 800dae4:	bf49      	itett	mi
 800dae6:	085b      	lsrmi	r3, r3, #1
 800dae8:	089b      	lsrpl	r3, r3, #2
 800daea:	2001      	movmi	r0, #1
 800daec:	600b      	strmi	r3, [r1, #0]
 800daee:	bf5c      	itt	pl
 800daf0:	600b      	strpl	r3, [r1, #0]
 800daf2:	2002      	movpl	r0, #2
 800daf4:	4770      	bx	lr
 800daf6:	b298      	uxth	r0, r3
 800daf8:	b9a8      	cbnz	r0, 800db26 <__lo0bits+0x52>
 800dafa:	0c1b      	lsrs	r3, r3, #16
 800dafc:	2010      	movs	r0, #16
 800dafe:	b2da      	uxtb	r2, r3
 800db00:	b90a      	cbnz	r2, 800db06 <__lo0bits+0x32>
 800db02:	3008      	adds	r0, #8
 800db04:	0a1b      	lsrs	r3, r3, #8
 800db06:	071a      	lsls	r2, r3, #28
 800db08:	bf04      	itt	eq
 800db0a:	091b      	lsreq	r3, r3, #4
 800db0c:	3004      	addeq	r0, #4
 800db0e:	079a      	lsls	r2, r3, #30
 800db10:	bf04      	itt	eq
 800db12:	089b      	lsreq	r3, r3, #2
 800db14:	3002      	addeq	r0, #2
 800db16:	07da      	lsls	r2, r3, #31
 800db18:	d403      	bmi.n	800db22 <__lo0bits+0x4e>
 800db1a:	085b      	lsrs	r3, r3, #1
 800db1c:	f100 0001 	add.w	r0, r0, #1
 800db20:	d005      	beq.n	800db2e <__lo0bits+0x5a>
 800db22:	600b      	str	r3, [r1, #0]
 800db24:	4770      	bx	lr
 800db26:	4610      	mov	r0, r2
 800db28:	e7e9      	b.n	800dafe <__lo0bits+0x2a>
 800db2a:	2000      	movs	r0, #0
 800db2c:	4770      	bx	lr
 800db2e:	2020      	movs	r0, #32
 800db30:	4770      	bx	lr
	...

0800db34 <__i2b>:
 800db34:	b510      	push	{r4, lr}
 800db36:	460c      	mov	r4, r1
 800db38:	2101      	movs	r1, #1
 800db3a:	f7ff feb9 	bl	800d8b0 <_Balloc>
 800db3e:	4602      	mov	r2, r0
 800db40:	b928      	cbnz	r0, 800db4e <__i2b+0x1a>
 800db42:	4b05      	ldr	r3, [pc, #20]	; (800db58 <__i2b+0x24>)
 800db44:	4805      	ldr	r0, [pc, #20]	; (800db5c <__i2b+0x28>)
 800db46:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800db4a:	f7fe fc6b 	bl	800c424 <__assert_func>
 800db4e:	2301      	movs	r3, #1
 800db50:	6144      	str	r4, [r0, #20]
 800db52:	6103      	str	r3, [r0, #16]
 800db54:	bd10      	pop	{r4, pc}
 800db56:	bf00      	nop
 800db58:	0800f941 	.word	0x0800f941
 800db5c:	0800f9cc 	.word	0x0800f9cc

0800db60 <__multiply>:
 800db60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db64:	4691      	mov	r9, r2
 800db66:	690a      	ldr	r2, [r1, #16]
 800db68:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800db6c:	429a      	cmp	r2, r3
 800db6e:	bfb8      	it	lt
 800db70:	460b      	movlt	r3, r1
 800db72:	460c      	mov	r4, r1
 800db74:	bfbc      	itt	lt
 800db76:	464c      	movlt	r4, r9
 800db78:	4699      	movlt	r9, r3
 800db7a:	6927      	ldr	r7, [r4, #16]
 800db7c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800db80:	68a3      	ldr	r3, [r4, #8]
 800db82:	6861      	ldr	r1, [r4, #4]
 800db84:	eb07 060a 	add.w	r6, r7, sl
 800db88:	42b3      	cmp	r3, r6
 800db8a:	b085      	sub	sp, #20
 800db8c:	bfb8      	it	lt
 800db8e:	3101      	addlt	r1, #1
 800db90:	f7ff fe8e 	bl	800d8b0 <_Balloc>
 800db94:	b930      	cbnz	r0, 800dba4 <__multiply+0x44>
 800db96:	4602      	mov	r2, r0
 800db98:	4b44      	ldr	r3, [pc, #272]	; (800dcac <__multiply+0x14c>)
 800db9a:	4845      	ldr	r0, [pc, #276]	; (800dcb0 <__multiply+0x150>)
 800db9c:	f240 115d 	movw	r1, #349	; 0x15d
 800dba0:	f7fe fc40 	bl	800c424 <__assert_func>
 800dba4:	f100 0514 	add.w	r5, r0, #20
 800dba8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800dbac:	462b      	mov	r3, r5
 800dbae:	2200      	movs	r2, #0
 800dbb0:	4543      	cmp	r3, r8
 800dbb2:	d321      	bcc.n	800dbf8 <__multiply+0x98>
 800dbb4:	f104 0314 	add.w	r3, r4, #20
 800dbb8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800dbbc:	f109 0314 	add.w	r3, r9, #20
 800dbc0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800dbc4:	9202      	str	r2, [sp, #8]
 800dbc6:	1b3a      	subs	r2, r7, r4
 800dbc8:	3a15      	subs	r2, #21
 800dbca:	f022 0203 	bic.w	r2, r2, #3
 800dbce:	3204      	adds	r2, #4
 800dbd0:	f104 0115 	add.w	r1, r4, #21
 800dbd4:	428f      	cmp	r7, r1
 800dbd6:	bf38      	it	cc
 800dbd8:	2204      	movcc	r2, #4
 800dbda:	9201      	str	r2, [sp, #4]
 800dbdc:	9a02      	ldr	r2, [sp, #8]
 800dbde:	9303      	str	r3, [sp, #12]
 800dbe0:	429a      	cmp	r2, r3
 800dbe2:	d80c      	bhi.n	800dbfe <__multiply+0x9e>
 800dbe4:	2e00      	cmp	r6, #0
 800dbe6:	dd03      	ble.n	800dbf0 <__multiply+0x90>
 800dbe8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d05a      	beq.n	800dca6 <__multiply+0x146>
 800dbf0:	6106      	str	r6, [r0, #16]
 800dbf2:	b005      	add	sp, #20
 800dbf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbf8:	f843 2b04 	str.w	r2, [r3], #4
 800dbfc:	e7d8      	b.n	800dbb0 <__multiply+0x50>
 800dbfe:	f8b3 a000 	ldrh.w	sl, [r3]
 800dc02:	f1ba 0f00 	cmp.w	sl, #0
 800dc06:	d024      	beq.n	800dc52 <__multiply+0xf2>
 800dc08:	f104 0e14 	add.w	lr, r4, #20
 800dc0c:	46a9      	mov	r9, r5
 800dc0e:	f04f 0c00 	mov.w	ip, #0
 800dc12:	f85e 2b04 	ldr.w	r2, [lr], #4
 800dc16:	f8d9 1000 	ldr.w	r1, [r9]
 800dc1a:	fa1f fb82 	uxth.w	fp, r2
 800dc1e:	b289      	uxth	r1, r1
 800dc20:	fb0a 110b 	mla	r1, sl, fp, r1
 800dc24:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800dc28:	f8d9 2000 	ldr.w	r2, [r9]
 800dc2c:	4461      	add	r1, ip
 800dc2e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800dc32:	fb0a c20b 	mla	r2, sl, fp, ip
 800dc36:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800dc3a:	b289      	uxth	r1, r1
 800dc3c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800dc40:	4577      	cmp	r7, lr
 800dc42:	f849 1b04 	str.w	r1, [r9], #4
 800dc46:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800dc4a:	d8e2      	bhi.n	800dc12 <__multiply+0xb2>
 800dc4c:	9a01      	ldr	r2, [sp, #4]
 800dc4e:	f845 c002 	str.w	ip, [r5, r2]
 800dc52:	9a03      	ldr	r2, [sp, #12]
 800dc54:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800dc58:	3304      	adds	r3, #4
 800dc5a:	f1b9 0f00 	cmp.w	r9, #0
 800dc5e:	d020      	beq.n	800dca2 <__multiply+0x142>
 800dc60:	6829      	ldr	r1, [r5, #0]
 800dc62:	f104 0c14 	add.w	ip, r4, #20
 800dc66:	46ae      	mov	lr, r5
 800dc68:	f04f 0a00 	mov.w	sl, #0
 800dc6c:	f8bc b000 	ldrh.w	fp, [ip]
 800dc70:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800dc74:	fb09 220b 	mla	r2, r9, fp, r2
 800dc78:	4492      	add	sl, r2
 800dc7a:	b289      	uxth	r1, r1
 800dc7c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800dc80:	f84e 1b04 	str.w	r1, [lr], #4
 800dc84:	f85c 2b04 	ldr.w	r2, [ip], #4
 800dc88:	f8be 1000 	ldrh.w	r1, [lr]
 800dc8c:	0c12      	lsrs	r2, r2, #16
 800dc8e:	fb09 1102 	mla	r1, r9, r2, r1
 800dc92:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800dc96:	4567      	cmp	r7, ip
 800dc98:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800dc9c:	d8e6      	bhi.n	800dc6c <__multiply+0x10c>
 800dc9e:	9a01      	ldr	r2, [sp, #4]
 800dca0:	50a9      	str	r1, [r5, r2]
 800dca2:	3504      	adds	r5, #4
 800dca4:	e79a      	b.n	800dbdc <__multiply+0x7c>
 800dca6:	3e01      	subs	r6, #1
 800dca8:	e79c      	b.n	800dbe4 <__multiply+0x84>
 800dcaa:	bf00      	nop
 800dcac:	0800f941 	.word	0x0800f941
 800dcb0:	0800f9cc 	.word	0x0800f9cc

0800dcb4 <__pow5mult>:
 800dcb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dcb8:	4615      	mov	r5, r2
 800dcba:	f012 0203 	ands.w	r2, r2, #3
 800dcbe:	4606      	mov	r6, r0
 800dcc0:	460f      	mov	r7, r1
 800dcc2:	d007      	beq.n	800dcd4 <__pow5mult+0x20>
 800dcc4:	4c25      	ldr	r4, [pc, #148]	; (800dd5c <__pow5mult+0xa8>)
 800dcc6:	3a01      	subs	r2, #1
 800dcc8:	2300      	movs	r3, #0
 800dcca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dcce:	f7ff fe51 	bl	800d974 <__multadd>
 800dcd2:	4607      	mov	r7, r0
 800dcd4:	10ad      	asrs	r5, r5, #2
 800dcd6:	d03d      	beq.n	800dd54 <__pow5mult+0xa0>
 800dcd8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800dcda:	b97c      	cbnz	r4, 800dcfc <__pow5mult+0x48>
 800dcdc:	2010      	movs	r0, #16
 800dcde:	f7ff fdbf 	bl	800d860 <malloc>
 800dce2:	4602      	mov	r2, r0
 800dce4:	6270      	str	r0, [r6, #36]	; 0x24
 800dce6:	b928      	cbnz	r0, 800dcf4 <__pow5mult+0x40>
 800dce8:	4b1d      	ldr	r3, [pc, #116]	; (800dd60 <__pow5mult+0xac>)
 800dcea:	481e      	ldr	r0, [pc, #120]	; (800dd64 <__pow5mult+0xb0>)
 800dcec:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800dcf0:	f7fe fb98 	bl	800c424 <__assert_func>
 800dcf4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dcf8:	6004      	str	r4, [r0, #0]
 800dcfa:	60c4      	str	r4, [r0, #12]
 800dcfc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800dd00:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800dd04:	b94c      	cbnz	r4, 800dd1a <__pow5mult+0x66>
 800dd06:	f240 2171 	movw	r1, #625	; 0x271
 800dd0a:	4630      	mov	r0, r6
 800dd0c:	f7ff ff12 	bl	800db34 <__i2b>
 800dd10:	2300      	movs	r3, #0
 800dd12:	f8c8 0008 	str.w	r0, [r8, #8]
 800dd16:	4604      	mov	r4, r0
 800dd18:	6003      	str	r3, [r0, #0]
 800dd1a:	f04f 0900 	mov.w	r9, #0
 800dd1e:	07eb      	lsls	r3, r5, #31
 800dd20:	d50a      	bpl.n	800dd38 <__pow5mult+0x84>
 800dd22:	4639      	mov	r1, r7
 800dd24:	4622      	mov	r2, r4
 800dd26:	4630      	mov	r0, r6
 800dd28:	f7ff ff1a 	bl	800db60 <__multiply>
 800dd2c:	4639      	mov	r1, r7
 800dd2e:	4680      	mov	r8, r0
 800dd30:	4630      	mov	r0, r6
 800dd32:	f7ff fdfd 	bl	800d930 <_Bfree>
 800dd36:	4647      	mov	r7, r8
 800dd38:	106d      	asrs	r5, r5, #1
 800dd3a:	d00b      	beq.n	800dd54 <__pow5mult+0xa0>
 800dd3c:	6820      	ldr	r0, [r4, #0]
 800dd3e:	b938      	cbnz	r0, 800dd50 <__pow5mult+0x9c>
 800dd40:	4622      	mov	r2, r4
 800dd42:	4621      	mov	r1, r4
 800dd44:	4630      	mov	r0, r6
 800dd46:	f7ff ff0b 	bl	800db60 <__multiply>
 800dd4a:	6020      	str	r0, [r4, #0]
 800dd4c:	f8c0 9000 	str.w	r9, [r0]
 800dd50:	4604      	mov	r4, r0
 800dd52:	e7e4      	b.n	800dd1e <__pow5mult+0x6a>
 800dd54:	4638      	mov	r0, r7
 800dd56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd5a:	bf00      	nop
 800dd5c:	0800fb18 	.word	0x0800fb18
 800dd60:	0800f728 	.word	0x0800f728
 800dd64:	0800f9cc 	.word	0x0800f9cc

0800dd68 <__lshift>:
 800dd68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd6c:	460c      	mov	r4, r1
 800dd6e:	6849      	ldr	r1, [r1, #4]
 800dd70:	6923      	ldr	r3, [r4, #16]
 800dd72:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800dd76:	68a3      	ldr	r3, [r4, #8]
 800dd78:	4607      	mov	r7, r0
 800dd7a:	4691      	mov	r9, r2
 800dd7c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800dd80:	f108 0601 	add.w	r6, r8, #1
 800dd84:	42b3      	cmp	r3, r6
 800dd86:	db0b      	blt.n	800dda0 <__lshift+0x38>
 800dd88:	4638      	mov	r0, r7
 800dd8a:	f7ff fd91 	bl	800d8b0 <_Balloc>
 800dd8e:	4605      	mov	r5, r0
 800dd90:	b948      	cbnz	r0, 800dda6 <__lshift+0x3e>
 800dd92:	4602      	mov	r2, r0
 800dd94:	4b2a      	ldr	r3, [pc, #168]	; (800de40 <__lshift+0xd8>)
 800dd96:	482b      	ldr	r0, [pc, #172]	; (800de44 <__lshift+0xdc>)
 800dd98:	f240 11d9 	movw	r1, #473	; 0x1d9
 800dd9c:	f7fe fb42 	bl	800c424 <__assert_func>
 800dda0:	3101      	adds	r1, #1
 800dda2:	005b      	lsls	r3, r3, #1
 800dda4:	e7ee      	b.n	800dd84 <__lshift+0x1c>
 800dda6:	2300      	movs	r3, #0
 800dda8:	f100 0114 	add.w	r1, r0, #20
 800ddac:	f100 0210 	add.w	r2, r0, #16
 800ddb0:	4618      	mov	r0, r3
 800ddb2:	4553      	cmp	r3, sl
 800ddb4:	db37      	blt.n	800de26 <__lshift+0xbe>
 800ddb6:	6920      	ldr	r0, [r4, #16]
 800ddb8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ddbc:	f104 0314 	add.w	r3, r4, #20
 800ddc0:	f019 091f 	ands.w	r9, r9, #31
 800ddc4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ddc8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ddcc:	d02f      	beq.n	800de2e <__lshift+0xc6>
 800ddce:	f1c9 0e20 	rsb	lr, r9, #32
 800ddd2:	468a      	mov	sl, r1
 800ddd4:	f04f 0c00 	mov.w	ip, #0
 800ddd8:	681a      	ldr	r2, [r3, #0]
 800ddda:	fa02 f209 	lsl.w	r2, r2, r9
 800ddde:	ea42 020c 	orr.w	r2, r2, ip
 800dde2:	f84a 2b04 	str.w	r2, [sl], #4
 800dde6:	f853 2b04 	ldr.w	r2, [r3], #4
 800ddea:	4298      	cmp	r0, r3
 800ddec:	fa22 fc0e 	lsr.w	ip, r2, lr
 800ddf0:	d8f2      	bhi.n	800ddd8 <__lshift+0x70>
 800ddf2:	1b03      	subs	r3, r0, r4
 800ddf4:	3b15      	subs	r3, #21
 800ddf6:	f023 0303 	bic.w	r3, r3, #3
 800ddfa:	3304      	adds	r3, #4
 800ddfc:	f104 0215 	add.w	r2, r4, #21
 800de00:	4290      	cmp	r0, r2
 800de02:	bf38      	it	cc
 800de04:	2304      	movcc	r3, #4
 800de06:	f841 c003 	str.w	ip, [r1, r3]
 800de0a:	f1bc 0f00 	cmp.w	ip, #0
 800de0e:	d001      	beq.n	800de14 <__lshift+0xac>
 800de10:	f108 0602 	add.w	r6, r8, #2
 800de14:	3e01      	subs	r6, #1
 800de16:	4638      	mov	r0, r7
 800de18:	612e      	str	r6, [r5, #16]
 800de1a:	4621      	mov	r1, r4
 800de1c:	f7ff fd88 	bl	800d930 <_Bfree>
 800de20:	4628      	mov	r0, r5
 800de22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de26:	f842 0f04 	str.w	r0, [r2, #4]!
 800de2a:	3301      	adds	r3, #1
 800de2c:	e7c1      	b.n	800ddb2 <__lshift+0x4a>
 800de2e:	3904      	subs	r1, #4
 800de30:	f853 2b04 	ldr.w	r2, [r3], #4
 800de34:	f841 2f04 	str.w	r2, [r1, #4]!
 800de38:	4298      	cmp	r0, r3
 800de3a:	d8f9      	bhi.n	800de30 <__lshift+0xc8>
 800de3c:	e7ea      	b.n	800de14 <__lshift+0xac>
 800de3e:	bf00      	nop
 800de40:	0800f941 	.word	0x0800f941
 800de44:	0800f9cc 	.word	0x0800f9cc

0800de48 <__mcmp>:
 800de48:	b530      	push	{r4, r5, lr}
 800de4a:	6902      	ldr	r2, [r0, #16]
 800de4c:	690c      	ldr	r4, [r1, #16]
 800de4e:	1b12      	subs	r2, r2, r4
 800de50:	d10e      	bne.n	800de70 <__mcmp+0x28>
 800de52:	f100 0314 	add.w	r3, r0, #20
 800de56:	3114      	adds	r1, #20
 800de58:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800de5c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800de60:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800de64:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800de68:	42a5      	cmp	r5, r4
 800de6a:	d003      	beq.n	800de74 <__mcmp+0x2c>
 800de6c:	d305      	bcc.n	800de7a <__mcmp+0x32>
 800de6e:	2201      	movs	r2, #1
 800de70:	4610      	mov	r0, r2
 800de72:	bd30      	pop	{r4, r5, pc}
 800de74:	4283      	cmp	r3, r0
 800de76:	d3f3      	bcc.n	800de60 <__mcmp+0x18>
 800de78:	e7fa      	b.n	800de70 <__mcmp+0x28>
 800de7a:	f04f 32ff 	mov.w	r2, #4294967295
 800de7e:	e7f7      	b.n	800de70 <__mcmp+0x28>

0800de80 <__mdiff>:
 800de80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de84:	460c      	mov	r4, r1
 800de86:	4606      	mov	r6, r0
 800de88:	4611      	mov	r1, r2
 800de8a:	4620      	mov	r0, r4
 800de8c:	4690      	mov	r8, r2
 800de8e:	f7ff ffdb 	bl	800de48 <__mcmp>
 800de92:	1e05      	subs	r5, r0, #0
 800de94:	d110      	bne.n	800deb8 <__mdiff+0x38>
 800de96:	4629      	mov	r1, r5
 800de98:	4630      	mov	r0, r6
 800de9a:	f7ff fd09 	bl	800d8b0 <_Balloc>
 800de9e:	b930      	cbnz	r0, 800deae <__mdiff+0x2e>
 800dea0:	4b3a      	ldr	r3, [pc, #232]	; (800df8c <__mdiff+0x10c>)
 800dea2:	4602      	mov	r2, r0
 800dea4:	f240 2132 	movw	r1, #562	; 0x232
 800dea8:	4839      	ldr	r0, [pc, #228]	; (800df90 <__mdiff+0x110>)
 800deaa:	f7fe fabb 	bl	800c424 <__assert_func>
 800deae:	2301      	movs	r3, #1
 800deb0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800deb4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800deb8:	bfa4      	itt	ge
 800deba:	4643      	movge	r3, r8
 800debc:	46a0      	movge	r8, r4
 800debe:	4630      	mov	r0, r6
 800dec0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800dec4:	bfa6      	itte	ge
 800dec6:	461c      	movge	r4, r3
 800dec8:	2500      	movge	r5, #0
 800deca:	2501      	movlt	r5, #1
 800decc:	f7ff fcf0 	bl	800d8b0 <_Balloc>
 800ded0:	b920      	cbnz	r0, 800dedc <__mdiff+0x5c>
 800ded2:	4b2e      	ldr	r3, [pc, #184]	; (800df8c <__mdiff+0x10c>)
 800ded4:	4602      	mov	r2, r0
 800ded6:	f44f 7110 	mov.w	r1, #576	; 0x240
 800deda:	e7e5      	b.n	800dea8 <__mdiff+0x28>
 800dedc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800dee0:	6926      	ldr	r6, [r4, #16]
 800dee2:	60c5      	str	r5, [r0, #12]
 800dee4:	f104 0914 	add.w	r9, r4, #20
 800dee8:	f108 0514 	add.w	r5, r8, #20
 800deec:	f100 0e14 	add.w	lr, r0, #20
 800def0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800def4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800def8:	f108 0210 	add.w	r2, r8, #16
 800defc:	46f2      	mov	sl, lr
 800defe:	2100      	movs	r1, #0
 800df00:	f859 3b04 	ldr.w	r3, [r9], #4
 800df04:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800df08:	fa1f f883 	uxth.w	r8, r3
 800df0c:	fa11 f18b 	uxtah	r1, r1, fp
 800df10:	0c1b      	lsrs	r3, r3, #16
 800df12:	eba1 0808 	sub.w	r8, r1, r8
 800df16:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800df1a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800df1e:	fa1f f888 	uxth.w	r8, r8
 800df22:	1419      	asrs	r1, r3, #16
 800df24:	454e      	cmp	r6, r9
 800df26:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800df2a:	f84a 3b04 	str.w	r3, [sl], #4
 800df2e:	d8e7      	bhi.n	800df00 <__mdiff+0x80>
 800df30:	1b33      	subs	r3, r6, r4
 800df32:	3b15      	subs	r3, #21
 800df34:	f023 0303 	bic.w	r3, r3, #3
 800df38:	3304      	adds	r3, #4
 800df3a:	3415      	adds	r4, #21
 800df3c:	42a6      	cmp	r6, r4
 800df3e:	bf38      	it	cc
 800df40:	2304      	movcc	r3, #4
 800df42:	441d      	add	r5, r3
 800df44:	4473      	add	r3, lr
 800df46:	469e      	mov	lr, r3
 800df48:	462e      	mov	r6, r5
 800df4a:	4566      	cmp	r6, ip
 800df4c:	d30e      	bcc.n	800df6c <__mdiff+0xec>
 800df4e:	f10c 0203 	add.w	r2, ip, #3
 800df52:	1b52      	subs	r2, r2, r5
 800df54:	f022 0203 	bic.w	r2, r2, #3
 800df58:	3d03      	subs	r5, #3
 800df5a:	45ac      	cmp	ip, r5
 800df5c:	bf38      	it	cc
 800df5e:	2200      	movcc	r2, #0
 800df60:	441a      	add	r2, r3
 800df62:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800df66:	b17b      	cbz	r3, 800df88 <__mdiff+0x108>
 800df68:	6107      	str	r7, [r0, #16]
 800df6a:	e7a3      	b.n	800deb4 <__mdiff+0x34>
 800df6c:	f856 8b04 	ldr.w	r8, [r6], #4
 800df70:	fa11 f288 	uxtah	r2, r1, r8
 800df74:	1414      	asrs	r4, r2, #16
 800df76:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800df7a:	b292      	uxth	r2, r2
 800df7c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800df80:	f84e 2b04 	str.w	r2, [lr], #4
 800df84:	1421      	asrs	r1, r4, #16
 800df86:	e7e0      	b.n	800df4a <__mdiff+0xca>
 800df88:	3f01      	subs	r7, #1
 800df8a:	e7ea      	b.n	800df62 <__mdiff+0xe2>
 800df8c:	0800f941 	.word	0x0800f941
 800df90:	0800f9cc 	.word	0x0800f9cc

0800df94 <__ulp>:
 800df94:	b082      	sub	sp, #8
 800df96:	ed8d 0b00 	vstr	d0, [sp]
 800df9a:	9b01      	ldr	r3, [sp, #4]
 800df9c:	4912      	ldr	r1, [pc, #72]	; (800dfe8 <__ulp+0x54>)
 800df9e:	4019      	ands	r1, r3
 800dfa0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800dfa4:	2900      	cmp	r1, #0
 800dfa6:	dd05      	ble.n	800dfb4 <__ulp+0x20>
 800dfa8:	2200      	movs	r2, #0
 800dfaa:	460b      	mov	r3, r1
 800dfac:	ec43 2b10 	vmov	d0, r2, r3
 800dfb0:	b002      	add	sp, #8
 800dfb2:	4770      	bx	lr
 800dfb4:	4249      	negs	r1, r1
 800dfb6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800dfba:	ea4f 5021 	mov.w	r0, r1, asr #20
 800dfbe:	f04f 0200 	mov.w	r2, #0
 800dfc2:	f04f 0300 	mov.w	r3, #0
 800dfc6:	da04      	bge.n	800dfd2 <__ulp+0x3e>
 800dfc8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800dfcc:	fa41 f300 	asr.w	r3, r1, r0
 800dfd0:	e7ec      	b.n	800dfac <__ulp+0x18>
 800dfd2:	f1a0 0114 	sub.w	r1, r0, #20
 800dfd6:	291e      	cmp	r1, #30
 800dfd8:	bfda      	itte	le
 800dfda:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800dfde:	fa20 f101 	lsrle.w	r1, r0, r1
 800dfe2:	2101      	movgt	r1, #1
 800dfe4:	460a      	mov	r2, r1
 800dfe6:	e7e1      	b.n	800dfac <__ulp+0x18>
 800dfe8:	7ff00000 	.word	0x7ff00000

0800dfec <__b2d>:
 800dfec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfee:	6905      	ldr	r5, [r0, #16]
 800dff0:	f100 0714 	add.w	r7, r0, #20
 800dff4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800dff8:	1f2e      	subs	r6, r5, #4
 800dffa:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800dffe:	4620      	mov	r0, r4
 800e000:	f7ff fd48 	bl	800da94 <__hi0bits>
 800e004:	f1c0 0320 	rsb	r3, r0, #32
 800e008:	280a      	cmp	r0, #10
 800e00a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800e088 <__b2d+0x9c>
 800e00e:	600b      	str	r3, [r1, #0]
 800e010:	dc14      	bgt.n	800e03c <__b2d+0x50>
 800e012:	f1c0 0e0b 	rsb	lr, r0, #11
 800e016:	fa24 f10e 	lsr.w	r1, r4, lr
 800e01a:	42b7      	cmp	r7, r6
 800e01c:	ea41 030c 	orr.w	r3, r1, ip
 800e020:	bf34      	ite	cc
 800e022:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e026:	2100      	movcs	r1, #0
 800e028:	3015      	adds	r0, #21
 800e02a:	fa04 f000 	lsl.w	r0, r4, r0
 800e02e:	fa21 f10e 	lsr.w	r1, r1, lr
 800e032:	ea40 0201 	orr.w	r2, r0, r1
 800e036:	ec43 2b10 	vmov	d0, r2, r3
 800e03a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e03c:	42b7      	cmp	r7, r6
 800e03e:	bf3a      	itte	cc
 800e040:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e044:	f1a5 0608 	subcc.w	r6, r5, #8
 800e048:	2100      	movcs	r1, #0
 800e04a:	380b      	subs	r0, #11
 800e04c:	d017      	beq.n	800e07e <__b2d+0x92>
 800e04e:	f1c0 0c20 	rsb	ip, r0, #32
 800e052:	fa04 f500 	lsl.w	r5, r4, r0
 800e056:	42be      	cmp	r6, r7
 800e058:	fa21 f40c 	lsr.w	r4, r1, ip
 800e05c:	ea45 0504 	orr.w	r5, r5, r4
 800e060:	bf8c      	ite	hi
 800e062:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800e066:	2400      	movls	r4, #0
 800e068:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800e06c:	fa01 f000 	lsl.w	r0, r1, r0
 800e070:	fa24 f40c 	lsr.w	r4, r4, ip
 800e074:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e078:	ea40 0204 	orr.w	r2, r0, r4
 800e07c:	e7db      	b.n	800e036 <__b2d+0x4a>
 800e07e:	ea44 030c 	orr.w	r3, r4, ip
 800e082:	460a      	mov	r2, r1
 800e084:	e7d7      	b.n	800e036 <__b2d+0x4a>
 800e086:	bf00      	nop
 800e088:	3ff00000 	.word	0x3ff00000

0800e08c <__d2b>:
 800e08c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e090:	4689      	mov	r9, r1
 800e092:	2101      	movs	r1, #1
 800e094:	ec57 6b10 	vmov	r6, r7, d0
 800e098:	4690      	mov	r8, r2
 800e09a:	f7ff fc09 	bl	800d8b0 <_Balloc>
 800e09e:	4604      	mov	r4, r0
 800e0a0:	b930      	cbnz	r0, 800e0b0 <__d2b+0x24>
 800e0a2:	4602      	mov	r2, r0
 800e0a4:	4b25      	ldr	r3, [pc, #148]	; (800e13c <__d2b+0xb0>)
 800e0a6:	4826      	ldr	r0, [pc, #152]	; (800e140 <__d2b+0xb4>)
 800e0a8:	f240 310a 	movw	r1, #778	; 0x30a
 800e0ac:	f7fe f9ba 	bl	800c424 <__assert_func>
 800e0b0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e0b4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e0b8:	bb35      	cbnz	r5, 800e108 <__d2b+0x7c>
 800e0ba:	2e00      	cmp	r6, #0
 800e0bc:	9301      	str	r3, [sp, #4]
 800e0be:	d028      	beq.n	800e112 <__d2b+0x86>
 800e0c0:	4668      	mov	r0, sp
 800e0c2:	9600      	str	r6, [sp, #0]
 800e0c4:	f7ff fd06 	bl	800dad4 <__lo0bits>
 800e0c8:	9900      	ldr	r1, [sp, #0]
 800e0ca:	b300      	cbz	r0, 800e10e <__d2b+0x82>
 800e0cc:	9a01      	ldr	r2, [sp, #4]
 800e0ce:	f1c0 0320 	rsb	r3, r0, #32
 800e0d2:	fa02 f303 	lsl.w	r3, r2, r3
 800e0d6:	430b      	orrs	r3, r1
 800e0d8:	40c2      	lsrs	r2, r0
 800e0da:	6163      	str	r3, [r4, #20]
 800e0dc:	9201      	str	r2, [sp, #4]
 800e0de:	9b01      	ldr	r3, [sp, #4]
 800e0e0:	61a3      	str	r3, [r4, #24]
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	bf14      	ite	ne
 800e0e6:	2202      	movne	r2, #2
 800e0e8:	2201      	moveq	r2, #1
 800e0ea:	6122      	str	r2, [r4, #16]
 800e0ec:	b1d5      	cbz	r5, 800e124 <__d2b+0x98>
 800e0ee:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e0f2:	4405      	add	r5, r0
 800e0f4:	f8c9 5000 	str.w	r5, [r9]
 800e0f8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e0fc:	f8c8 0000 	str.w	r0, [r8]
 800e100:	4620      	mov	r0, r4
 800e102:	b003      	add	sp, #12
 800e104:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e108:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e10c:	e7d5      	b.n	800e0ba <__d2b+0x2e>
 800e10e:	6161      	str	r1, [r4, #20]
 800e110:	e7e5      	b.n	800e0de <__d2b+0x52>
 800e112:	a801      	add	r0, sp, #4
 800e114:	f7ff fcde 	bl	800dad4 <__lo0bits>
 800e118:	9b01      	ldr	r3, [sp, #4]
 800e11a:	6163      	str	r3, [r4, #20]
 800e11c:	2201      	movs	r2, #1
 800e11e:	6122      	str	r2, [r4, #16]
 800e120:	3020      	adds	r0, #32
 800e122:	e7e3      	b.n	800e0ec <__d2b+0x60>
 800e124:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e128:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e12c:	f8c9 0000 	str.w	r0, [r9]
 800e130:	6918      	ldr	r0, [r3, #16]
 800e132:	f7ff fcaf 	bl	800da94 <__hi0bits>
 800e136:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e13a:	e7df      	b.n	800e0fc <__d2b+0x70>
 800e13c:	0800f941 	.word	0x0800f941
 800e140:	0800f9cc 	.word	0x0800f9cc

0800e144 <__ratio>:
 800e144:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e148:	4688      	mov	r8, r1
 800e14a:	4669      	mov	r1, sp
 800e14c:	4681      	mov	r9, r0
 800e14e:	f7ff ff4d 	bl	800dfec <__b2d>
 800e152:	a901      	add	r1, sp, #4
 800e154:	4640      	mov	r0, r8
 800e156:	ec55 4b10 	vmov	r4, r5, d0
 800e15a:	f7ff ff47 	bl	800dfec <__b2d>
 800e15e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e162:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e166:	eba3 0c02 	sub.w	ip, r3, r2
 800e16a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e16e:	1a9b      	subs	r3, r3, r2
 800e170:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800e174:	ec51 0b10 	vmov	r0, r1, d0
 800e178:	2b00      	cmp	r3, #0
 800e17a:	bfd6      	itet	le
 800e17c:	460a      	movle	r2, r1
 800e17e:	462a      	movgt	r2, r5
 800e180:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e184:	468b      	mov	fp, r1
 800e186:	462f      	mov	r7, r5
 800e188:	bfd4      	ite	le
 800e18a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800e18e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e192:	4620      	mov	r0, r4
 800e194:	ee10 2a10 	vmov	r2, s0
 800e198:	465b      	mov	r3, fp
 800e19a:	4639      	mov	r1, r7
 800e19c:	f7f2 fb8e 	bl	80008bc <__aeabi_ddiv>
 800e1a0:	ec41 0b10 	vmov	d0, r0, r1
 800e1a4:	b003      	add	sp, #12
 800e1a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e1aa <__copybits>:
 800e1aa:	3901      	subs	r1, #1
 800e1ac:	b570      	push	{r4, r5, r6, lr}
 800e1ae:	1149      	asrs	r1, r1, #5
 800e1b0:	6914      	ldr	r4, [r2, #16]
 800e1b2:	3101      	adds	r1, #1
 800e1b4:	f102 0314 	add.w	r3, r2, #20
 800e1b8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e1bc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e1c0:	1f05      	subs	r5, r0, #4
 800e1c2:	42a3      	cmp	r3, r4
 800e1c4:	d30c      	bcc.n	800e1e0 <__copybits+0x36>
 800e1c6:	1aa3      	subs	r3, r4, r2
 800e1c8:	3b11      	subs	r3, #17
 800e1ca:	f023 0303 	bic.w	r3, r3, #3
 800e1ce:	3211      	adds	r2, #17
 800e1d0:	42a2      	cmp	r2, r4
 800e1d2:	bf88      	it	hi
 800e1d4:	2300      	movhi	r3, #0
 800e1d6:	4418      	add	r0, r3
 800e1d8:	2300      	movs	r3, #0
 800e1da:	4288      	cmp	r0, r1
 800e1dc:	d305      	bcc.n	800e1ea <__copybits+0x40>
 800e1de:	bd70      	pop	{r4, r5, r6, pc}
 800e1e0:	f853 6b04 	ldr.w	r6, [r3], #4
 800e1e4:	f845 6f04 	str.w	r6, [r5, #4]!
 800e1e8:	e7eb      	b.n	800e1c2 <__copybits+0x18>
 800e1ea:	f840 3b04 	str.w	r3, [r0], #4
 800e1ee:	e7f4      	b.n	800e1da <__copybits+0x30>

0800e1f0 <__any_on>:
 800e1f0:	f100 0214 	add.w	r2, r0, #20
 800e1f4:	6900      	ldr	r0, [r0, #16]
 800e1f6:	114b      	asrs	r3, r1, #5
 800e1f8:	4298      	cmp	r0, r3
 800e1fa:	b510      	push	{r4, lr}
 800e1fc:	db11      	blt.n	800e222 <__any_on+0x32>
 800e1fe:	dd0a      	ble.n	800e216 <__any_on+0x26>
 800e200:	f011 011f 	ands.w	r1, r1, #31
 800e204:	d007      	beq.n	800e216 <__any_on+0x26>
 800e206:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e20a:	fa24 f001 	lsr.w	r0, r4, r1
 800e20e:	fa00 f101 	lsl.w	r1, r0, r1
 800e212:	428c      	cmp	r4, r1
 800e214:	d10b      	bne.n	800e22e <__any_on+0x3e>
 800e216:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e21a:	4293      	cmp	r3, r2
 800e21c:	d803      	bhi.n	800e226 <__any_on+0x36>
 800e21e:	2000      	movs	r0, #0
 800e220:	bd10      	pop	{r4, pc}
 800e222:	4603      	mov	r3, r0
 800e224:	e7f7      	b.n	800e216 <__any_on+0x26>
 800e226:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e22a:	2900      	cmp	r1, #0
 800e22c:	d0f5      	beq.n	800e21a <__any_on+0x2a>
 800e22e:	2001      	movs	r0, #1
 800e230:	e7f6      	b.n	800e220 <__any_on+0x30>

0800e232 <_calloc_r>:
 800e232:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e234:	fba1 2402 	umull	r2, r4, r1, r2
 800e238:	b94c      	cbnz	r4, 800e24e <_calloc_r+0x1c>
 800e23a:	4611      	mov	r1, r2
 800e23c:	9201      	str	r2, [sp, #4]
 800e23e:	f000 f87b 	bl	800e338 <_malloc_r>
 800e242:	9a01      	ldr	r2, [sp, #4]
 800e244:	4605      	mov	r5, r0
 800e246:	b930      	cbnz	r0, 800e256 <_calloc_r+0x24>
 800e248:	4628      	mov	r0, r5
 800e24a:	b003      	add	sp, #12
 800e24c:	bd30      	pop	{r4, r5, pc}
 800e24e:	220c      	movs	r2, #12
 800e250:	6002      	str	r2, [r0, #0]
 800e252:	2500      	movs	r5, #0
 800e254:	e7f8      	b.n	800e248 <_calloc_r+0x16>
 800e256:	4621      	mov	r1, r4
 800e258:	f7fc fae8 	bl	800a82c <memset>
 800e25c:	e7f4      	b.n	800e248 <_calloc_r+0x16>
	...

0800e260 <_free_r>:
 800e260:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e262:	2900      	cmp	r1, #0
 800e264:	d044      	beq.n	800e2f0 <_free_r+0x90>
 800e266:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e26a:	9001      	str	r0, [sp, #4]
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	f1a1 0404 	sub.w	r4, r1, #4
 800e272:	bfb8      	it	lt
 800e274:	18e4      	addlt	r4, r4, r3
 800e276:	f000 fec7 	bl	800f008 <__malloc_lock>
 800e27a:	4a1e      	ldr	r2, [pc, #120]	; (800e2f4 <_free_r+0x94>)
 800e27c:	9801      	ldr	r0, [sp, #4]
 800e27e:	6813      	ldr	r3, [r2, #0]
 800e280:	b933      	cbnz	r3, 800e290 <_free_r+0x30>
 800e282:	6063      	str	r3, [r4, #4]
 800e284:	6014      	str	r4, [r2, #0]
 800e286:	b003      	add	sp, #12
 800e288:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e28c:	f000 bec2 	b.w	800f014 <__malloc_unlock>
 800e290:	42a3      	cmp	r3, r4
 800e292:	d908      	bls.n	800e2a6 <_free_r+0x46>
 800e294:	6825      	ldr	r5, [r4, #0]
 800e296:	1961      	adds	r1, r4, r5
 800e298:	428b      	cmp	r3, r1
 800e29a:	bf01      	itttt	eq
 800e29c:	6819      	ldreq	r1, [r3, #0]
 800e29e:	685b      	ldreq	r3, [r3, #4]
 800e2a0:	1949      	addeq	r1, r1, r5
 800e2a2:	6021      	streq	r1, [r4, #0]
 800e2a4:	e7ed      	b.n	800e282 <_free_r+0x22>
 800e2a6:	461a      	mov	r2, r3
 800e2a8:	685b      	ldr	r3, [r3, #4]
 800e2aa:	b10b      	cbz	r3, 800e2b0 <_free_r+0x50>
 800e2ac:	42a3      	cmp	r3, r4
 800e2ae:	d9fa      	bls.n	800e2a6 <_free_r+0x46>
 800e2b0:	6811      	ldr	r1, [r2, #0]
 800e2b2:	1855      	adds	r5, r2, r1
 800e2b4:	42a5      	cmp	r5, r4
 800e2b6:	d10b      	bne.n	800e2d0 <_free_r+0x70>
 800e2b8:	6824      	ldr	r4, [r4, #0]
 800e2ba:	4421      	add	r1, r4
 800e2bc:	1854      	adds	r4, r2, r1
 800e2be:	42a3      	cmp	r3, r4
 800e2c0:	6011      	str	r1, [r2, #0]
 800e2c2:	d1e0      	bne.n	800e286 <_free_r+0x26>
 800e2c4:	681c      	ldr	r4, [r3, #0]
 800e2c6:	685b      	ldr	r3, [r3, #4]
 800e2c8:	6053      	str	r3, [r2, #4]
 800e2ca:	4421      	add	r1, r4
 800e2cc:	6011      	str	r1, [r2, #0]
 800e2ce:	e7da      	b.n	800e286 <_free_r+0x26>
 800e2d0:	d902      	bls.n	800e2d8 <_free_r+0x78>
 800e2d2:	230c      	movs	r3, #12
 800e2d4:	6003      	str	r3, [r0, #0]
 800e2d6:	e7d6      	b.n	800e286 <_free_r+0x26>
 800e2d8:	6825      	ldr	r5, [r4, #0]
 800e2da:	1961      	adds	r1, r4, r5
 800e2dc:	428b      	cmp	r3, r1
 800e2de:	bf04      	itt	eq
 800e2e0:	6819      	ldreq	r1, [r3, #0]
 800e2e2:	685b      	ldreq	r3, [r3, #4]
 800e2e4:	6063      	str	r3, [r4, #4]
 800e2e6:	bf04      	itt	eq
 800e2e8:	1949      	addeq	r1, r1, r5
 800e2ea:	6021      	streq	r1, [r4, #0]
 800e2ec:	6054      	str	r4, [r2, #4]
 800e2ee:	e7ca      	b.n	800e286 <_free_r+0x26>
 800e2f0:	b003      	add	sp, #12
 800e2f2:	bd30      	pop	{r4, r5, pc}
 800e2f4:	20000614 	.word	0x20000614

0800e2f8 <sbrk_aligned>:
 800e2f8:	b570      	push	{r4, r5, r6, lr}
 800e2fa:	4e0e      	ldr	r6, [pc, #56]	; (800e334 <sbrk_aligned+0x3c>)
 800e2fc:	460c      	mov	r4, r1
 800e2fe:	6831      	ldr	r1, [r6, #0]
 800e300:	4605      	mov	r5, r0
 800e302:	b911      	cbnz	r1, 800e30a <sbrk_aligned+0x12>
 800e304:	f000 fb4c 	bl	800e9a0 <_sbrk_r>
 800e308:	6030      	str	r0, [r6, #0]
 800e30a:	4621      	mov	r1, r4
 800e30c:	4628      	mov	r0, r5
 800e30e:	f000 fb47 	bl	800e9a0 <_sbrk_r>
 800e312:	1c43      	adds	r3, r0, #1
 800e314:	d00a      	beq.n	800e32c <sbrk_aligned+0x34>
 800e316:	1cc4      	adds	r4, r0, #3
 800e318:	f024 0403 	bic.w	r4, r4, #3
 800e31c:	42a0      	cmp	r0, r4
 800e31e:	d007      	beq.n	800e330 <sbrk_aligned+0x38>
 800e320:	1a21      	subs	r1, r4, r0
 800e322:	4628      	mov	r0, r5
 800e324:	f000 fb3c 	bl	800e9a0 <_sbrk_r>
 800e328:	3001      	adds	r0, #1
 800e32a:	d101      	bne.n	800e330 <sbrk_aligned+0x38>
 800e32c:	f04f 34ff 	mov.w	r4, #4294967295
 800e330:	4620      	mov	r0, r4
 800e332:	bd70      	pop	{r4, r5, r6, pc}
 800e334:	20000618 	.word	0x20000618

0800e338 <_malloc_r>:
 800e338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e33c:	1ccd      	adds	r5, r1, #3
 800e33e:	f025 0503 	bic.w	r5, r5, #3
 800e342:	3508      	adds	r5, #8
 800e344:	2d0c      	cmp	r5, #12
 800e346:	bf38      	it	cc
 800e348:	250c      	movcc	r5, #12
 800e34a:	2d00      	cmp	r5, #0
 800e34c:	4607      	mov	r7, r0
 800e34e:	db01      	blt.n	800e354 <_malloc_r+0x1c>
 800e350:	42a9      	cmp	r1, r5
 800e352:	d905      	bls.n	800e360 <_malloc_r+0x28>
 800e354:	230c      	movs	r3, #12
 800e356:	603b      	str	r3, [r7, #0]
 800e358:	2600      	movs	r6, #0
 800e35a:	4630      	mov	r0, r6
 800e35c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e360:	4e2e      	ldr	r6, [pc, #184]	; (800e41c <_malloc_r+0xe4>)
 800e362:	f000 fe51 	bl	800f008 <__malloc_lock>
 800e366:	6833      	ldr	r3, [r6, #0]
 800e368:	461c      	mov	r4, r3
 800e36a:	bb34      	cbnz	r4, 800e3ba <_malloc_r+0x82>
 800e36c:	4629      	mov	r1, r5
 800e36e:	4638      	mov	r0, r7
 800e370:	f7ff ffc2 	bl	800e2f8 <sbrk_aligned>
 800e374:	1c43      	adds	r3, r0, #1
 800e376:	4604      	mov	r4, r0
 800e378:	d14d      	bne.n	800e416 <_malloc_r+0xde>
 800e37a:	6834      	ldr	r4, [r6, #0]
 800e37c:	4626      	mov	r6, r4
 800e37e:	2e00      	cmp	r6, #0
 800e380:	d140      	bne.n	800e404 <_malloc_r+0xcc>
 800e382:	6823      	ldr	r3, [r4, #0]
 800e384:	4631      	mov	r1, r6
 800e386:	4638      	mov	r0, r7
 800e388:	eb04 0803 	add.w	r8, r4, r3
 800e38c:	f000 fb08 	bl	800e9a0 <_sbrk_r>
 800e390:	4580      	cmp	r8, r0
 800e392:	d13a      	bne.n	800e40a <_malloc_r+0xd2>
 800e394:	6821      	ldr	r1, [r4, #0]
 800e396:	3503      	adds	r5, #3
 800e398:	1a6d      	subs	r5, r5, r1
 800e39a:	f025 0503 	bic.w	r5, r5, #3
 800e39e:	3508      	adds	r5, #8
 800e3a0:	2d0c      	cmp	r5, #12
 800e3a2:	bf38      	it	cc
 800e3a4:	250c      	movcc	r5, #12
 800e3a6:	4629      	mov	r1, r5
 800e3a8:	4638      	mov	r0, r7
 800e3aa:	f7ff ffa5 	bl	800e2f8 <sbrk_aligned>
 800e3ae:	3001      	adds	r0, #1
 800e3b0:	d02b      	beq.n	800e40a <_malloc_r+0xd2>
 800e3b2:	6823      	ldr	r3, [r4, #0]
 800e3b4:	442b      	add	r3, r5
 800e3b6:	6023      	str	r3, [r4, #0]
 800e3b8:	e00e      	b.n	800e3d8 <_malloc_r+0xa0>
 800e3ba:	6822      	ldr	r2, [r4, #0]
 800e3bc:	1b52      	subs	r2, r2, r5
 800e3be:	d41e      	bmi.n	800e3fe <_malloc_r+0xc6>
 800e3c0:	2a0b      	cmp	r2, #11
 800e3c2:	d916      	bls.n	800e3f2 <_malloc_r+0xba>
 800e3c4:	1961      	adds	r1, r4, r5
 800e3c6:	42a3      	cmp	r3, r4
 800e3c8:	6025      	str	r5, [r4, #0]
 800e3ca:	bf18      	it	ne
 800e3cc:	6059      	strne	r1, [r3, #4]
 800e3ce:	6863      	ldr	r3, [r4, #4]
 800e3d0:	bf08      	it	eq
 800e3d2:	6031      	streq	r1, [r6, #0]
 800e3d4:	5162      	str	r2, [r4, r5]
 800e3d6:	604b      	str	r3, [r1, #4]
 800e3d8:	4638      	mov	r0, r7
 800e3da:	f104 060b 	add.w	r6, r4, #11
 800e3de:	f000 fe19 	bl	800f014 <__malloc_unlock>
 800e3e2:	f026 0607 	bic.w	r6, r6, #7
 800e3e6:	1d23      	adds	r3, r4, #4
 800e3e8:	1af2      	subs	r2, r6, r3
 800e3ea:	d0b6      	beq.n	800e35a <_malloc_r+0x22>
 800e3ec:	1b9b      	subs	r3, r3, r6
 800e3ee:	50a3      	str	r3, [r4, r2]
 800e3f0:	e7b3      	b.n	800e35a <_malloc_r+0x22>
 800e3f2:	6862      	ldr	r2, [r4, #4]
 800e3f4:	42a3      	cmp	r3, r4
 800e3f6:	bf0c      	ite	eq
 800e3f8:	6032      	streq	r2, [r6, #0]
 800e3fa:	605a      	strne	r2, [r3, #4]
 800e3fc:	e7ec      	b.n	800e3d8 <_malloc_r+0xa0>
 800e3fe:	4623      	mov	r3, r4
 800e400:	6864      	ldr	r4, [r4, #4]
 800e402:	e7b2      	b.n	800e36a <_malloc_r+0x32>
 800e404:	4634      	mov	r4, r6
 800e406:	6876      	ldr	r6, [r6, #4]
 800e408:	e7b9      	b.n	800e37e <_malloc_r+0x46>
 800e40a:	230c      	movs	r3, #12
 800e40c:	603b      	str	r3, [r7, #0]
 800e40e:	4638      	mov	r0, r7
 800e410:	f000 fe00 	bl	800f014 <__malloc_unlock>
 800e414:	e7a1      	b.n	800e35a <_malloc_r+0x22>
 800e416:	6025      	str	r5, [r4, #0]
 800e418:	e7de      	b.n	800e3d8 <_malloc_r+0xa0>
 800e41a:	bf00      	nop
 800e41c:	20000614 	.word	0x20000614

0800e420 <__ssputs_r>:
 800e420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e424:	688e      	ldr	r6, [r1, #8]
 800e426:	429e      	cmp	r6, r3
 800e428:	4682      	mov	sl, r0
 800e42a:	460c      	mov	r4, r1
 800e42c:	4690      	mov	r8, r2
 800e42e:	461f      	mov	r7, r3
 800e430:	d838      	bhi.n	800e4a4 <__ssputs_r+0x84>
 800e432:	898a      	ldrh	r2, [r1, #12]
 800e434:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e438:	d032      	beq.n	800e4a0 <__ssputs_r+0x80>
 800e43a:	6825      	ldr	r5, [r4, #0]
 800e43c:	6909      	ldr	r1, [r1, #16]
 800e43e:	eba5 0901 	sub.w	r9, r5, r1
 800e442:	6965      	ldr	r5, [r4, #20]
 800e444:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e448:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e44c:	3301      	adds	r3, #1
 800e44e:	444b      	add	r3, r9
 800e450:	106d      	asrs	r5, r5, #1
 800e452:	429d      	cmp	r5, r3
 800e454:	bf38      	it	cc
 800e456:	461d      	movcc	r5, r3
 800e458:	0553      	lsls	r3, r2, #21
 800e45a:	d531      	bpl.n	800e4c0 <__ssputs_r+0xa0>
 800e45c:	4629      	mov	r1, r5
 800e45e:	f7ff ff6b 	bl	800e338 <_malloc_r>
 800e462:	4606      	mov	r6, r0
 800e464:	b950      	cbnz	r0, 800e47c <__ssputs_r+0x5c>
 800e466:	230c      	movs	r3, #12
 800e468:	f8ca 3000 	str.w	r3, [sl]
 800e46c:	89a3      	ldrh	r3, [r4, #12]
 800e46e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e472:	81a3      	strh	r3, [r4, #12]
 800e474:	f04f 30ff 	mov.w	r0, #4294967295
 800e478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e47c:	6921      	ldr	r1, [r4, #16]
 800e47e:	464a      	mov	r2, r9
 800e480:	f7ff fa08 	bl	800d894 <memcpy>
 800e484:	89a3      	ldrh	r3, [r4, #12]
 800e486:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e48a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e48e:	81a3      	strh	r3, [r4, #12]
 800e490:	6126      	str	r6, [r4, #16]
 800e492:	6165      	str	r5, [r4, #20]
 800e494:	444e      	add	r6, r9
 800e496:	eba5 0509 	sub.w	r5, r5, r9
 800e49a:	6026      	str	r6, [r4, #0]
 800e49c:	60a5      	str	r5, [r4, #8]
 800e49e:	463e      	mov	r6, r7
 800e4a0:	42be      	cmp	r6, r7
 800e4a2:	d900      	bls.n	800e4a6 <__ssputs_r+0x86>
 800e4a4:	463e      	mov	r6, r7
 800e4a6:	6820      	ldr	r0, [r4, #0]
 800e4a8:	4632      	mov	r2, r6
 800e4aa:	4641      	mov	r1, r8
 800e4ac:	f000 fd92 	bl	800efd4 <memmove>
 800e4b0:	68a3      	ldr	r3, [r4, #8]
 800e4b2:	1b9b      	subs	r3, r3, r6
 800e4b4:	60a3      	str	r3, [r4, #8]
 800e4b6:	6823      	ldr	r3, [r4, #0]
 800e4b8:	4433      	add	r3, r6
 800e4ba:	6023      	str	r3, [r4, #0]
 800e4bc:	2000      	movs	r0, #0
 800e4be:	e7db      	b.n	800e478 <__ssputs_r+0x58>
 800e4c0:	462a      	mov	r2, r5
 800e4c2:	f000 fdad 	bl	800f020 <_realloc_r>
 800e4c6:	4606      	mov	r6, r0
 800e4c8:	2800      	cmp	r0, #0
 800e4ca:	d1e1      	bne.n	800e490 <__ssputs_r+0x70>
 800e4cc:	6921      	ldr	r1, [r4, #16]
 800e4ce:	4650      	mov	r0, sl
 800e4d0:	f7ff fec6 	bl	800e260 <_free_r>
 800e4d4:	e7c7      	b.n	800e466 <__ssputs_r+0x46>
	...

0800e4d8 <_svfiprintf_r>:
 800e4d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4dc:	4698      	mov	r8, r3
 800e4de:	898b      	ldrh	r3, [r1, #12]
 800e4e0:	061b      	lsls	r3, r3, #24
 800e4e2:	b09d      	sub	sp, #116	; 0x74
 800e4e4:	4607      	mov	r7, r0
 800e4e6:	460d      	mov	r5, r1
 800e4e8:	4614      	mov	r4, r2
 800e4ea:	d50e      	bpl.n	800e50a <_svfiprintf_r+0x32>
 800e4ec:	690b      	ldr	r3, [r1, #16]
 800e4ee:	b963      	cbnz	r3, 800e50a <_svfiprintf_r+0x32>
 800e4f0:	2140      	movs	r1, #64	; 0x40
 800e4f2:	f7ff ff21 	bl	800e338 <_malloc_r>
 800e4f6:	6028      	str	r0, [r5, #0]
 800e4f8:	6128      	str	r0, [r5, #16]
 800e4fa:	b920      	cbnz	r0, 800e506 <_svfiprintf_r+0x2e>
 800e4fc:	230c      	movs	r3, #12
 800e4fe:	603b      	str	r3, [r7, #0]
 800e500:	f04f 30ff 	mov.w	r0, #4294967295
 800e504:	e0d1      	b.n	800e6aa <_svfiprintf_r+0x1d2>
 800e506:	2340      	movs	r3, #64	; 0x40
 800e508:	616b      	str	r3, [r5, #20]
 800e50a:	2300      	movs	r3, #0
 800e50c:	9309      	str	r3, [sp, #36]	; 0x24
 800e50e:	2320      	movs	r3, #32
 800e510:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e514:	f8cd 800c 	str.w	r8, [sp, #12]
 800e518:	2330      	movs	r3, #48	; 0x30
 800e51a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e6c4 <_svfiprintf_r+0x1ec>
 800e51e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e522:	f04f 0901 	mov.w	r9, #1
 800e526:	4623      	mov	r3, r4
 800e528:	469a      	mov	sl, r3
 800e52a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e52e:	b10a      	cbz	r2, 800e534 <_svfiprintf_r+0x5c>
 800e530:	2a25      	cmp	r2, #37	; 0x25
 800e532:	d1f9      	bne.n	800e528 <_svfiprintf_r+0x50>
 800e534:	ebba 0b04 	subs.w	fp, sl, r4
 800e538:	d00b      	beq.n	800e552 <_svfiprintf_r+0x7a>
 800e53a:	465b      	mov	r3, fp
 800e53c:	4622      	mov	r2, r4
 800e53e:	4629      	mov	r1, r5
 800e540:	4638      	mov	r0, r7
 800e542:	f7ff ff6d 	bl	800e420 <__ssputs_r>
 800e546:	3001      	adds	r0, #1
 800e548:	f000 80aa 	beq.w	800e6a0 <_svfiprintf_r+0x1c8>
 800e54c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e54e:	445a      	add	r2, fp
 800e550:	9209      	str	r2, [sp, #36]	; 0x24
 800e552:	f89a 3000 	ldrb.w	r3, [sl]
 800e556:	2b00      	cmp	r3, #0
 800e558:	f000 80a2 	beq.w	800e6a0 <_svfiprintf_r+0x1c8>
 800e55c:	2300      	movs	r3, #0
 800e55e:	f04f 32ff 	mov.w	r2, #4294967295
 800e562:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e566:	f10a 0a01 	add.w	sl, sl, #1
 800e56a:	9304      	str	r3, [sp, #16]
 800e56c:	9307      	str	r3, [sp, #28]
 800e56e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e572:	931a      	str	r3, [sp, #104]	; 0x68
 800e574:	4654      	mov	r4, sl
 800e576:	2205      	movs	r2, #5
 800e578:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e57c:	4851      	ldr	r0, [pc, #324]	; (800e6c4 <_svfiprintf_r+0x1ec>)
 800e57e:	f7f1 fe67 	bl	8000250 <memchr>
 800e582:	9a04      	ldr	r2, [sp, #16]
 800e584:	b9d8      	cbnz	r0, 800e5be <_svfiprintf_r+0xe6>
 800e586:	06d0      	lsls	r0, r2, #27
 800e588:	bf44      	itt	mi
 800e58a:	2320      	movmi	r3, #32
 800e58c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e590:	0711      	lsls	r1, r2, #28
 800e592:	bf44      	itt	mi
 800e594:	232b      	movmi	r3, #43	; 0x2b
 800e596:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e59a:	f89a 3000 	ldrb.w	r3, [sl]
 800e59e:	2b2a      	cmp	r3, #42	; 0x2a
 800e5a0:	d015      	beq.n	800e5ce <_svfiprintf_r+0xf6>
 800e5a2:	9a07      	ldr	r2, [sp, #28]
 800e5a4:	4654      	mov	r4, sl
 800e5a6:	2000      	movs	r0, #0
 800e5a8:	f04f 0c0a 	mov.w	ip, #10
 800e5ac:	4621      	mov	r1, r4
 800e5ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e5b2:	3b30      	subs	r3, #48	; 0x30
 800e5b4:	2b09      	cmp	r3, #9
 800e5b6:	d94e      	bls.n	800e656 <_svfiprintf_r+0x17e>
 800e5b8:	b1b0      	cbz	r0, 800e5e8 <_svfiprintf_r+0x110>
 800e5ba:	9207      	str	r2, [sp, #28]
 800e5bc:	e014      	b.n	800e5e8 <_svfiprintf_r+0x110>
 800e5be:	eba0 0308 	sub.w	r3, r0, r8
 800e5c2:	fa09 f303 	lsl.w	r3, r9, r3
 800e5c6:	4313      	orrs	r3, r2
 800e5c8:	9304      	str	r3, [sp, #16]
 800e5ca:	46a2      	mov	sl, r4
 800e5cc:	e7d2      	b.n	800e574 <_svfiprintf_r+0x9c>
 800e5ce:	9b03      	ldr	r3, [sp, #12]
 800e5d0:	1d19      	adds	r1, r3, #4
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	9103      	str	r1, [sp, #12]
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	bfbb      	ittet	lt
 800e5da:	425b      	neglt	r3, r3
 800e5dc:	f042 0202 	orrlt.w	r2, r2, #2
 800e5e0:	9307      	strge	r3, [sp, #28]
 800e5e2:	9307      	strlt	r3, [sp, #28]
 800e5e4:	bfb8      	it	lt
 800e5e6:	9204      	strlt	r2, [sp, #16]
 800e5e8:	7823      	ldrb	r3, [r4, #0]
 800e5ea:	2b2e      	cmp	r3, #46	; 0x2e
 800e5ec:	d10c      	bne.n	800e608 <_svfiprintf_r+0x130>
 800e5ee:	7863      	ldrb	r3, [r4, #1]
 800e5f0:	2b2a      	cmp	r3, #42	; 0x2a
 800e5f2:	d135      	bne.n	800e660 <_svfiprintf_r+0x188>
 800e5f4:	9b03      	ldr	r3, [sp, #12]
 800e5f6:	1d1a      	adds	r2, r3, #4
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	9203      	str	r2, [sp, #12]
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	bfb8      	it	lt
 800e600:	f04f 33ff 	movlt.w	r3, #4294967295
 800e604:	3402      	adds	r4, #2
 800e606:	9305      	str	r3, [sp, #20]
 800e608:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e6d4 <_svfiprintf_r+0x1fc>
 800e60c:	7821      	ldrb	r1, [r4, #0]
 800e60e:	2203      	movs	r2, #3
 800e610:	4650      	mov	r0, sl
 800e612:	f7f1 fe1d 	bl	8000250 <memchr>
 800e616:	b140      	cbz	r0, 800e62a <_svfiprintf_r+0x152>
 800e618:	2340      	movs	r3, #64	; 0x40
 800e61a:	eba0 000a 	sub.w	r0, r0, sl
 800e61e:	fa03 f000 	lsl.w	r0, r3, r0
 800e622:	9b04      	ldr	r3, [sp, #16]
 800e624:	4303      	orrs	r3, r0
 800e626:	3401      	adds	r4, #1
 800e628:	9304      	str	r3, [sp, #16]
 800e62a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e62e:	4826      	ldr	r0, [pc, #152]	; (800e6c8 <_svfiprintf_r+0x1f0>)
 800e630:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e634:	2206      	movs	r2, #6
 800e636:	f7f1 fe0b 	bl	8000250 <memchr>
 800e63a:	2800      	cmp	r0, #0
 800e63c:	d038      	beq.n	800e6b0 <_svfiprintf_r+0x1d8>
 800e63e:	4b23      	ldr	r3, [pc, #140]	; (800e6cc <_svfiprintf_r+0x1f4>)
 800e640:	bb1b      	cbnz	r3, 800e68a <_svfiprintf_r+0x1b2>
 800e642:	9b03      	ldr	r3, [sp, #12]
 800e644:	3307      	adds	r3, #7
 800e646:	f023 0307 	bic.w	r3, r3, #7
 800e64a:	3308      	adds	r3, #8
 800e64c:	9303      	str	r3, [sp, #12]
 800e64e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e650:	4433      	add	r3, r6
 800e652:	9309      	str	r3, [sp, #36]	; 0x24
 800e654:	e767      	b.n	800e526 <_svfiprintf_r+0x4e>
 800e656:	fb0c 3202 	mla	r2, ip, r2, r3
 800e65a:	460c      	mov	r4, r1
 800e65c:	2001      	movs	r0, #1
 800e65e:	e7a5      	b.n	800e5ac <_svfiprintf_r+0xd4>
 800e660:	2300      	movs	r3, #0
 800e662:	3401      	adds	r4, #1
 800e664:	9305      	str	r3, [sp, #20]
 800e666:	4619      	mov	r1, r3
 800e668:	f04f 0c0a 	mov.w	ip, #10
 800e66c:	4620      	mov	r0, r4
 800e66e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e672:	3a30      	subs	r2, #48	; 0x30
 800e674:	2a09      	cmp	r2, #9
 800e676:	d903      	bls.n	800e680 <_svfiprintf_r+0x1a8>
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d0c5      	beq.n	800e608 <_svfiprintf_r+0x130>
 800e67c:	9105      	str	r1, [sp, #20]
 800e67e:	e7c3      	b.n	800e608 <_svfiprintf_r+0x130>
 800e680:	fb0c 2101 	mla	r1, ip, r1, r2
 800e684:	4604      	mov	r4, r0
 800e686:	2301      	movs	r3, #1
 800e688:	e7f0      	b.n	800e66c <_svfiprintf_r+0x194>
 800e68a:	ab03      	add	r3, sp, #12
 800e68c:	9300      	str	r3, [sp, #0]
 800e68e:	462a      	mov	r2, r5
 800e690:	4b0f      	ldr	r3, [pc, #60]	; (800e6d0 <_svfiprintf_r+0x1f8>)
 800e692:	a904      	add	r1, sp, #16
 800e694:	4638      	mov	r0, r7
 800e696:	f7fc f971 	bl	800a97c <_printf_float>
 800e69a:	1c42      	adds	r2, r0, #1
 800e69c:	4606      	mov	r6, r0
 800e69e:	d1d6      	bne.n	800e64e <_svfiprintf_r+0x176>
 800e6a0:	89ab      	ldrh	r3, [r5, #12]
 800e6a2:	065b      	lsls	r3, r3, #25
 800e6a4:	f53f af2c 	bmi.w	800e500 <_svfiprintf_r+0x28>
 800e6a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e6aa:	b01d      	add	sp, #116	; 0x74
 800e6ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6b0:	ab03      	add	r3, sp, #12
 800e6b2:	9300      	str	r3, [sp, #0]
 800e6b4:	462a      	mov	r2, r5
 800e6b6:	4b06      	ldr	r3, [pc, #24]	; (800e6d0 <_svfiprintf_r+0x1f8>)
 800e6b8:	a904      	add	r1, sp, #16
 800e6ba:	4638      	mov	r0, r7
 800e6bc:	f7fc fc02 	bl	800aec4 <_printf_i>
 800e6c0:	e7eb      	b.n	800e69a <_svfiprintf_r+0x1c2>
 800e6c2:	bf00      	nop
 800e6c4:	0800fb24 	.word	0x0800fb24
 800e6c8:	0800fb2e 	.word	0x0800fb2e
 800e6cc:	0800a97d 	.word	0x0800a97d
 800e6d0:	0800e421 	.word	0x0800e421
 800e6d4:	0800fb2a 	.word	0x0800fb2a

0800e6d8 <__sfputc_r>:
 800e6d8:	6893      	ldr	r3, [r2, #8]
 800e6da:	3b01      	subs	r3, #1
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	b410      	push	{r4}
 800e6e0:	6093      	str	r3, [r2, #8]
 800e6e2:	da08      	bge.n	800e6f6 <__sfputc_r+0x1e>
 800e6e4:	6994      	ldr	r4, [r2, #24]
 800e6e6:	42a3      	cmp	r3, r4
 800e6e8:	db01      	blt.n	800e6ee <__sfputc_r+0x16>
 800e6ea:	290a      	cmp	r1, #10
 800e6ec:	d103      	bne.n	800e6f6 <__sfputc_r+0x1e>
 800e6ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e6f2:	f000 b979 	b.w	800e9e8 <__swbuf_r>
 800e6f6:	6813      	ldr	r3, [r2, #0]
 800e6f8:	1c58      	adds	r0, r3, #1
 800e6fa:	6010      	str	r0, [r2, #0]
 800e6fc:	7019      	strb	r1, [r3, #0]
 800e6fe:	4608      	mov	r0, r1
 800e700:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e704:	4770      	bx	lr

0800e706 <__sfputs_r>:
 800e706:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e708:	4606      	mov	r6, r0
 800e70a:	460f      	mov	r7, r1
 800e70c:	4614      	mov	r4, r2
 800e70e:	18d5      	adds	r5, r2, r3
 800e710:	42ac      	cmp	r4, r5
 800e712:	d101      	bne.n	800e718 <__sfputs_r+0x12>
 800e714:	2000      	movs	r0, #0
 800e716:	e007      	b.n	800e728 <__sfputs_r+0x22>
 800e718:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e71c:	463a      	mov	r2, r7
 800e71e:	4630      	mov	r0, r6
 800e720:	f7ff ffda 	bl	800e6d8 <__sfputc_r>
 800e724:	1c43      	adds	r3, r0, #1
 800e726:	d1f3      	bne.n	800e710 <__sfputs_r+0xa>
 800e728:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e72c <_vfiprintf_r>:
 800e72c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e730:	460d      	mov	r5, r1
 800e732:	b09d      	sub	sp, #116	; 0x74
 800e734:	4614      	mov	r4, r2
 800e736:	4698      	mov	r8, r3
 800e738:	4606      	mov	r6, r0
 800e73a:	b118      	cbz	r0, 800e744 <_vfiprintf_r+0x18>
 800e73c:	6983      	ldr	r3, [r0, #24]
 800e73e:	b90b      	cbnz	r3, 800e744 <_vfiprintf_r+0x18>
 800e740:	f000 fb42 	bl	800edc8 <__sinit>
 800e744:	4b89      	ldr	r3, [pc, #548]	; (800e96c <_vfiprintf_r+0x240>)
 800e746:	429d      	cmp	r5, r3
 800e748:	d11b      	bne.n	800e782 <_vfiprintf_r+0x56>
 800e74a:	6875      	ldr	r5, [r6, #4]
 800e74c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e74e:	07d9      	lsls	r1, r3, #31
 800e750:	d405      	bmi.n	800e75e <_vfiprintf_r+0x32>
 800e752:	89ab      	ldrh	r3, [r5, #12]
 800e754:	059a      	lsls	r2, r3, #22
 800e756:	d402      	bmi.n	800e75e <_vfiprintf_r+0x32>
 800e758:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e75a:	f000 fbd3 	bl	800ef04 <__retarget_lock_acquire_recursive>
 800e75e:	89ab      	ldrh	r3, [r5, #12]
 800e760:	071b      	lsls	r3, r3, #28
 800e762:	d501      	bpl.n	800e768 <_vfiprintf_r+0x3c>
 800e764:	692b      	ldr	r3, [r5, #16]
 800e766:	b9eb      	cbnz	r3, 800e7a4 <_vfiprintf_r+0x78>
 800e768:	4629      	mov	r1, r5
 800e76a:	4630      	mov	r0, r6
 800e76c:	f000 f99c 	bl	800eaa8 <__swsetup_r>
 800e770:	b1c0      	cbz	r0, 800e7a4 <_vfiprintf_r+0x78>
 800e772:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e774:	07dc      	lsls	r4, r3, #31
 800e776:	d50e      	bpl.n	800e796 <_vfiprintf_r+0x6a>
 800e778:	f04f 30ff 	mov.w	r0, #4294967295
 800e77c:	b01d      	add	sp, #116	; 0x74
 800e77e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e782:	4b7b      	ldr	r3, [pc, #492]	; (800e970 <_vfiprintf_r+0x244>)
 800e784:	429d      	cmp	r5, r3
 800e786:	d101      	bne.n	800e78c <_vfiprintf_r+0x60>
 800e788:	68b5      	ldr	r5, [r6, #8]
 800e78a:	e7df      	b.n	800e74c <_vfiprintf_r+0x20>
 800e78c:	4b79      	ldr	r3, [pc, #484]	; (800e974 <_vfiprintf_r+0x248>)
 800e78e:	429d      	cmp	r5, r3
 800e790:	bf08      	it	eq
 800e792:	68f5      	ldreq	r5, [r6, #12]
 800e794:	e7da      	b.n	800e74c <_vfiprintf_r+0x20>
 800e796:	89ab      	ldrh	r3, [r5, #12]
 800e798:	0598      	lsls	r0, r3, #22
 800e79a:	d4ed      	bmi.n	800e778 <_vfiprintf_r+0x4c>
 800e79c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e79e:	f000 fbb2 	bl	800ef06 <__retarget_lock_release_recursive>
 800e7a2:	e7e9      	b.n	800e778 <_vfiprintf_r+0x4c>
 800e7a4:	2300      	movs	r3, #0
 800e7a6:	9309      	str	r3, [sp, #36]	; 0x24
 800e7a8:	2320      	movs	r3, #32
 800e7aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e7ae:	f8cd 800c 	str.w	r8, [sp, #12]
 800e7b2:	2330      	movs	r3, #48	; 0x30
 800e7b4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e978 <_vfiprintf_r+0x24c>
 800e7b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e7bc:	f04f 0901 	mov.w	r9, #1
 800e7c0:	4623      	mov	r3, r4
 800e7c2:	469a      	mov	sl, r3
 800e7c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e7c8:	b10a      	cbz	r2, 800e7ce <_vfiprintf_r+0xa2>
 800e7ca:	2a25      	cmp	r2, #37	; 0x25
 800e7cc:	d1f9      	bne.n	800e7c2 <_vfiprintf_r+0x96>
 800e7ce:	ebba 0b04 	subs.w	fp, sl, r4
 800e7d2:	d00b      	beq.n	800e7ec <_vfiprintf_r+0xc0>
 800e7d4:	465b      	mov	r3, fp
 800e7d6:	4622      	mov	r2, r4
 800e7d8:	4629      	mov	r1, r5
 800e7da:	4630      	mov	r0, r6
 800e7dc:	f7ff ff93 	bl	800e706 <__sfputs_r>
 800e7e0:	3001      	adds	r0, #1
 800e7e2:	f000 80aa 	beq.w	800e93a <_vfiprintf_r+0x20e>
 800e7e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e7e8:	445a      	add	r2, fp
 800e7ea:	9209      	str	r2, [sp, #36]	; 0x24
 800e7ec:	f89a 3000 	ldrb.w	r3, [sl]
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	f000 80a2 	beq.w	800e93a <_vfiprintf_r+0x20e>
 800e7f6:	2300      	movs	r3, #0
 800e7f8:	f04f 32ff 	mov.w	r2, #4294967295
 800e7fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e800:	f10a 0a01 	add.w	sl, sl, #1
 800e804:	9304      	str	r3, [sp, #16]
 800e806:	9307      	str	r3, [sp, #28]
 800e808:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e80c:	931a      	str	r3, [sp, #104]	; 0x68
 800e80e:	4654      	mov	r4, sl
 800e810:	2205      	movs	r2, #5
 800e812:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e816:	4858      	ldr	r0, [pc, #352]	; (800e978 <_vfiprintf_r+0x24c>)
 800e818:	f7f1 fd1a 	bl	8000250 <memchr>
 800e81c:	9a04      	ldr	r2, [sp, #16]
 800e81e:	b9d8      	cbnz	r0, 800e858 <_vfiprintf_r+0x12c>
 800e820:	06d1      	lsls	r1, r2, #27
 800e822:	bf44      	itt	mi
 800e824:	2320      	movmi	r3, #32
 800e826:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e82a:	0713      	lsls	r3, r2, #28
 800e82c:	bf44      	itt	mi
 800e82e:	232b      	movmi	r3, #43	; 0x2b
 800e830:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e834:	f89a 3000 	ldrb.w	r3, [sl]
 800e838:	2b2a      	cmp	r3, #42	; 0x2a
 800e83a:	d015      	beq.n	800e868 <_vfiprintf_r+0x13c>
 800e83c:	9a07      	ldr	r2, [sp, #28]
 800e83e:	4654      	mov	r4, sl
 800e840:	2000      	movs	r0, #0
 800e842:	f04f 0c0a 	mov.w	ip, #10
 800e846:	4621      	mov	r1, r4
 800e848:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e84c:	3b30      	subs	r3, #48	; 0x30
 800e84e:	2b09      	cmp	r3, #9
 800e850:	d94e      	bls.n	800e8f0 <_vfiprintf_r+0x1c4>
 800e852:	b1b0      	cbz	r0, 800e882 <_vfiprintf_r+0x156>
 800e854:	9207      	str	r2, [sp, #28]
 800e856:	e014      	b.n	800e882 <_vfiprintf_r+0x156>
 800e858:	eba0 0308 	sub.w	r3, r0, r8
 800e85c:	fa09 f303 	lsl.w	r3, r9, r3
 800e860:	4313      	orrs	r3, r2
 800e862:	9304      	str	r3, [sp, #16]
 800e864:	46a2      	mov	sl, r4
 800e866:	e7d2      	b.n	800e80e <_vfiprintf_r+0xe2>
 800e868:	9b03      	ldr	r3, [sp, #12]
 800e86a:	1d19      	adds	r1, r3, #4
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	9103      	str	r1, [sp, #12]
 800e870:	2b00      	cmp	r3, #0
 800e872:	bfbb      	ittet	lt
 800e874:	425b      	neglt	r3, r3
 800e876:	f042 0202 	orrlt.w	r2, r2, #2
 800e87a:	9307      	strge	r3, [sp, #28]
 800e87c:	9307      	strlt	r3, [sp, #28]
 800e87e:	bfb8      	it	lt
 800e880:	9204      	strlt	r2, [sp, #16]
 800e882:	7823      	ldrb	r3, [r4, #0]
 800e884:	2b2e      	cmp	r3, #46	; 0x2e
 800e886:	d10c      	bne.n	800e8a2 <_vfiprintf_r+0x176>
 800e888:	7863      	ldrb	r3, [r4, #1]
 800e88a:	2b2a      	cmp	r3, #42	; 0x2a
 800e88c:	d135      	bne.n	800e8fa <_vfiprintf_r+0x1ce>
 800e88e:	9b03      	ldr	r3, [sp, #12]
 800e890:	1d1a      	adds	r2, r3, #4
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	9203      	str	r2, [sp, #12]
 800e896:	2b00      	cmp	r3, #0
 800e898:	bfb8      	it	lt
 800e89a:	f04f 33ff 	movlt.w	r3, #4294967295
 800e89e:	3402      	adds	r4, #2
 800e8a0:	9305      	str	r3, [sp, #20]
 800e8a2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e988 <_vfiprintf_r+0x25c>
 800e8a6:	7821      	ldrb	r1, [r4, #0]
 800e8a8:	2203      	movs	r2, #3
 800e8aa:	4650      	mov	r0, sl
 800e8ac:	f7f1 fcd0 	bl	8000250 <memchr>
 800e8b0:	b140      	cbz	r0, 800e8c4 <_vfiprintf_r+0x198>
 800e8b2:	2340      	movs	r3, #64	; 0x40
 800e8b4:	eba0 000a 	sub.w	r0, r0, sl
 800e8b8:	fa03 f000 	lsl.w	r0, r3, r0
 800e8bc:	9b04      	ldr	r3, [sp, #16]
 800e8be:	4303      	orrs	r3, r0
 800e8c0:	3401      	adds	r4, #1
 800e8c2:	9304      	str	r3, [sp, #16]
 800e8c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e8c8:	482c      	ldr	r0, [pc, #176]	; (800e97c <_vfiprintf_r+0x250>)
 800e8ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e8ce:	2206      	movs	r2, #6
 800e8d0:	f7f1 fcbe 	bl	8000250 <memchr>
 800e8d4:	2800      	cmp	r0, #0
 800e8d6:	d03f      	beq.n	800e958 <_vfiprintf_r+0x22c>
 800e8d8:	4b29      	ldr	r3, [pc, #164]	; (800e980 <_vfiprintf_r+0x254>)
 800e8da:	bb1b      	cbnz	r3, 800e924 <_vfiprintf_r+0x1f8>
 800e8dc:	9b03      	ldr	r3, [sp, #12]
 800e8de:	3307      	adds	r3, #7
 800e8e0:	f023 0307 	bic.w	r3, r3, #7
 800e8e4:	3308      	adds	r3, #8
 800e8e6:	9303      	str	r3, [sp, #12]
 800e8e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e8ea:	443b      	add	r3, r7
 800e8ec:	9309      	str	r3, [sp, #36]	; 0x24
 800e8ee:	e767      	b.n	800e7c0 <_vfiprintf_r+0x94>
 800e8f0:	fb0c 3202 	mla	r2, ip, r2, r3
 800e8f4:	460c      	mov	r4, r1
 800e8f6:	2001      	movs	r0, #1
 800e8f8:	e7a5      	b.n	800e846 <_vfiprintf_r+0x11a>
 800e8fa:	2300      	movs	r3, #0
 800e8fc:	3401      	adds	r4, #1
 800e8fe:	9305      	str	r3, [sp, #20]
 800e900:	4619      	mov	r1, r3
 800e902:	f04f 0c0a 	mov.w	ip, #10
 800e906:	4620      	mov	r0, r4
 800e908:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e90c:	3a30      	subs	r2, #48	; 0x30
 800e90e:	2a09      	cmp	r2, #9
 800e910:	d903      	bls.n	800e91a <_vfiprintf_r+0x1ee>
 800e912:	2b00      	cmp	r3, #0
 800e914:	d0c5      	beq.n	800e8a2 <_vfiprintf_r+0x176>
 800e916:	9105      	str	r1, [sp, #20]
 800e918:	e7c3      	b.n	800e8a2 <_vfiprintf_r+0x176>
 800e91a:	fb0c 2101 	mla	r1, ip, r1, r2
 800e91e:	4604      	mov	r4, r0
 800e920:	2301      	movs	r3, #1
 800e922:	e7f0      	b.n	800e906 <_vfiprintf_r+0x1da>
 800e924:	ab03      	add	r3, sp, #12
 800e926:	9300      	str	r3, [sp, #0]
 800e928:	462a      	mov	r2, r5
 800e92a:	4b16      	ldr	r3, [pc, #88]	; (800e984 <_vfiprintf_r+0x258>)
 800e92c:	a904      	add	r1, sp, #16
 800e92e:	4630      	mov	r0, r6
 800e930:	f7fc f824 	bl	800a97c <_printf_float>
 800e934:	4607      	mov	r7, r0
 800e936:	1c78      	adds	r0, r7, #1
 800e938:	d1d6      	bne.n	800e8e8 <_vfiprintf_r+0x1bc>
 800e93a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e93c:	07d9      	lsls	r1, r3, #31
 800e93e:	d405      	bmi.n	800e94c <_vfiprintf_r+0x220>
 800e940:	89ab      	ldrh	r3, [r5, #12]
 800e942:	059a      	lsls	r2, r3, #22
 800e944:	d402      	bmi.n	800e94c <_vfiprintf_r+0x220>
 800e946:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e948:	f000 fadd 	bl	800ef06 <__retarget_lock_release_recursive>
 800e94c:	89ab      	ldrh	r3, [r5, #12]
 800e94e:	065b      	lsls	r3, r3, #25
 800e950:	f53f af12 	bmi.w	800e778 <_vfiprintf_r+0x4c>
 800e954:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e956:	e711      	b.n	800e77c <_vfiprintf_r+0x50>
 800e958:	ab03      	add	r3, sp, #12
 800e95a:	9300      	str	r3, [sp, #0]
 800e95c:	462a      	mov	r2, r5
 800e95e:	4b09      	ldr	r3, [pc, #36]	; (800e984 <_vfiprintf_r+0x258>)
 800e960:	a904      	add	r1, sp, #16
 800e962:	4630      	mov	r0, r6
 800e964:	f7fc faae 	bl	800aec4 <_printf_i>
 800e968:	e7e4      	b.n	800e934 <_vfiprintf_r+0x208>
 800e96a:	bf00      	nop
 800e96c:	0800fb58 	.word	0x0800fb58
 800e970:	0800fb78 	.word	0x0800fb78
 800e974:	0800fb38 	.word	0x0800fb38
 800e978:	0800fb24 	.word	0x0800fb24
 800e97c:	0800fb2e 	.word	0x0800fb2e
 800e980:	0800a97d 	.word	0x0800a97d
 800e984:	0800e707 	.word	0x0800e707
 800e988:	0800fb2a 	.word	0x0800fb2a
 800e98c:	00000000 	.word	0x00000000

0800e990 <nan>:
 800e990:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e998 <nan+0x8>
 800e994:	4770      	bx	lr
 800e996:	bf00      	nop
 800e998:	00000000 	.word	0x00000000
 800e99c:	7ff80000 	.word	0x7ff80000

0800e9a0 <_sbrk_r>:
 800e9a0:	b538      	push	{r3, r4, r5, lr}
 800e9a2:	4d06      	ldr	r5, [pc, #24]	; (800e9bc <_sbrk_r+0x1c>)
 800e9a4:	2300      	movs	r3, #0
 800e9a6:	4604      	mov	r4, r0
 800e9a8:	4608      	mov	r0, r1
 800e9aa:	602b      	str	r3, [r5, #0]
 800e9ac:	f7f3 fd9e 	bl	80024ec <_sbrk>
 800e9b0:	1c43      	adds	r3, r0, #1
 800e9b2:	d102      	bne.n	800e9ba <_sbrk_r+0x1a>
 800e9b4:	682b      	ldr	r3, [r5, #0]
 800e9b6:	b103      	cbz	r3, 800e9ba <_sbrk_r+0x1a>
 800e9b8:	6023      	str	r3, [r4, #0]
 800e9ba:	bd38      	pop	{r3, r4, r5, pc}
 800e9bc:	20000620 	.word	0x20000620

0800e9c0 <strncmp>:
 800e9c0:	b510      	push	{r4, lr}
 800e9c2:	b17a      	cbz	r2, 800e9e4 <strncmp+0x24>
 800e9c4:	4603      	mov	r3, r0
 800e9c6:	3901      	subs	r1, #1
 800e9c8:	1884      	adds	r4, r0, r2
 800e9ca:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e9ce:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e9d2:	4290      	cmp	r0, r2
 800e9d4:	d101      	bne.n	800e9da <strncmp+0x1a>
 800e9d6:	42a3      	cmp	r3, r4
 800e9d8:	d101      	bne.n	800e9de <strncmp+0x1e>
 800e9da:	1a80      	subs	r0, r0, r2
 800e9dc:	bd10      	pop	{r4, pc}
 800e9de:	2800      	cmp	r0, #0
 800e9e0:	d1f3      	bne.n	800e9ca <strncmp+0xa>
 800e9e2:	e7fa      	b.n	800e9da <strncmp+0x1a>
 800e9e4:	4610      	mov	r0, r2
 800e9e6:	e7f9      	b.n	800e9dc <strncmp+0x1c>

0800e9e8 <__swbuf_r>:
 800e9e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9ea:	460e      	mov	r6, r1
 800e9ec:	4614      	mov	r4, r2
 800e9ee:	4605      	mov	r5, r0
 800e9f0:	b118      	cbz	r0, 800e9fa <__swbuf_r+0x12>
 800e9f2:	6983      	ldr	r3, [r0, #24]
 800e9f4:	b90b      	cbnz	r3, 800e9fa <__swbuf_r+0x12>
 800e9f6:	f000 f9e7 	bl	800edc8 <__sinit>
 800e9fa:	4b21      	ldr	r3, [pc, #132]	; (800ea80 <__swbuf_r+0x98>)
 800e9fc:	429c      	cmp	r4, r3
 800e9fe:	d12b      	bne.n	800ea58 <__swbuf_r+0x70>
 800ea00:	686c      	ldr	r4, [r5, #4]
 800ea02:	69a3      	ldr	r3, [r4, #24]
 800ea04:	60a3      	str	r3, [r4, #8]
 800ea06:	89a3      	ldrh	r3, [r4, #12]
 800ea08:	071a      	lsls	r2, r3, #28
 800ea0a:	d52f      	bpl.n	800ea6c <__swbuf_r+0x84>
 800ea0c:	6923      	ldr	r3, [r4, #16]
 800ea0e:	b36b      	cbz	r3, 800ea6c <__swbuf_r+0x84>
 800ea10:	6923      	ldr	r3, [r4, #16]
 800ea12:	6820      	ldr	r0, [r4, #0]
 800ea14:	1ac0      	subs	r0, r0, r3
 800ea16:	6963      	ldr	r3, [r4, #20]
 800ea18:	b2f6      	uxtb	r6, r6
 800ea1a:	4283      	cmp	r3, r0
 800ea1c:	4637      	mov	r7, r6
 800ea1e:	dc04      	bgt.n	800ea2a <__swbuf_r+0x42>
 800ea20:	4621      	mov	r1, r4
 800ea22:	4628      	mov	r0, r5
 800ea24:	f000 f93c 	bl	800eca0 <_fflush_r>
 800ea28:	bb30      	cbnz	r0, 800ea78 <__swbuf_r+0x90>
 800ea2a:	68a3      	ldr	r3, [r4, #8]
 800ea2c:	3b01      	subs	r3, #1
 800ea2e:	60a3      	str	r3, [r4, #8]
 800ea30:	6823      	ldr	r3, [r4, #0]
 800ea32:	1c5a      	adds	r2, r3, #1
 800ea34:	6022      	str	r2, [r4, #0]
 800ea36:	701e      	strb	r6, [r3, #0]
 800ea38:	6963      	ldr	r3, [r4, #20]
 800ea3a:	3001      	adds	r0, #1
 800ea3c:	4283      	cmp	r3, r0
 800ea3e:	d004      	beq.n	800ea4a <__swbuf_r+0x62>
 800ea40:	89a3      	ldrh	r3, [r4, #12]
 800ea42:	07db      	lsls	r3, r3, #31
 800ea44:	d506      	bpl.n	800ea54 <__swbuf_r+0x6c>
 800ea46:	2e0a      	cmp	r6, #10
 800ea48:	d104      	bne.n	800ea54 <__swbuf_r+0x6c>
 800ea4a:	4621      	mov	r1, r4
 800ea4c:	4628      	mov	r0, r5
 800ea4e:	f000 f927 	bl	800eca0 <_fflush_r>
 800ea52:	b988      	cbnz	r0, 800ea78 <__swbuf_r+0x90>
 800ea54:	4638      	mov	r0, r7
 800ea56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ea58:	4b0a      	ldr	r3, [pc, #40]	; (800ea84 <__swbuf_r+0x9c>)
 800ea5a:	429c      	cmp	r4, r3
 800ea5c:	d101      	bne.n	800ea62 <__swbuf_r+0x7a>
 800ea5e:	68ac      	ldr	r4, [r5, #8]
 800ea60:	e7cf      	b.n	800ea02 <__swbuf_r+0x1a>
 800ea62:	4b09      	ldr	r3, [pc, #36]	; (800ea88 <__swbuf_r+0xa0>)
 800ea64:	429c      	cmp	r4, r3
 800ea66:	bf08      	it	eq
 800ea68:	68ec      	ldreq	r4, [r5, #12]
 800ea6a:	e7ca      	b.n	800ea02 <__swbuf_r+0x1a>
 800ea6c:	4621      	mov	r1, r4
 800ea6e:	4628      	mov	r0, r5
 800ea70:	f000 f81a 	bl	800eaa8 <__swsetup_r>
 800ea74:	2800      	cmp	r0, #0
 800ea76:	d0cb      	beq.n	800ea10 <__swbuf_r+0x28>
 800ea78:	f04f 37ff 	mov.w	r7, #4294967295
 800ea7c:	e7ea      	b.n	800ea54 <__swbuf_r+0x6c>
 800ea7e:	bf00      	nop
 800ea80:	0800fb58 	.word	0x0800fb58
 800ea84:	0800fb78 	.word	0x0800fb78
 800ea88:	0800fb38 	.word	0x0800fb38

0800ea8c <__ascii_wctomb>:
 800ea8c:	b149      	cbz	r1, 800eaa2 <__ascii_wctomb+0x16>
 800ea8e:	2aff      	cmp	r2, #255	; 0xff
 800ea90:	bf85      	ittet	hi
 800ea92:	238a      	movhi	r3, #138	; 0x8a
 800ea94:	6003      	strhi	r3, [r0, #0]
 800ea96:	700a      	strbls	r2, [r1, #0]
 800ea98:	f04f 30ff 	movhi.w	r0, #4294967295
 800ea9c:	bf98      	it	ls
 800ea9e:	2001      	movls	r0, #1
 800eaa0:	4770      	bx	lr
 800eaa2:	4608      	mov	r0, r1
 800eaa4:	4770      	bx	lr
	...

0800eaa8 <__swsetup_r>:
 800eaa8:	4b32      	ldr	r3, [pc, #200]	; (800eb74 <__swsetup_r+0xcc>)
 800eaaa:	b570      	push	{r4, r5, r6, lr}
 800eaac:	681d      	ldr	r5, [r3, #0]
 800eaae:	4606      	mov	r6, r0
 800eab0:	460c      	mov	r4, r1
 800eab2:	b125      	cbz	r5, 800eabe <__swsetup_r+0x16>
 800eab4:	69ab      	ldr	r3, [r5, #24]
 800eab6:	b913      	cbnz	r3, 800eabe <__swsetup_r+0x16>
 800eab8:	4628      	mov	r0, r5
 800eaba:	f000 f985 	bl	800edc8 <__sinit>
 800eabe:	4b2e      	ldr	r3, [pc, #184]	; (800eb78 <__swsetup_r+0xd0>)
 800eac0:	429c      	cmp	r4, r3
 800eac2:	d10f      	bne.n	800eae4 <__swsetup_r+0x3c>
 800eac4:	686c      	ldr	r4, [r5, #4]
 800eac6:	89a3      	ldrh	r3, [r4, #12]
 800eac8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800eacc:	0719      	lsls	r1, r3, #28
 800eace:	d42c      	bmi.n	800eb2a <__swsetup_r+0x82>
 800ead0:	06dd      	lsls	r5, r3, #27
 800ead2:	d411      	bmi.n	800eaf8 <__swsetup_r+0x50>
 800ead4:	2309      	movs	r3, #9
 800ead6:	6033      	str	r3, [r6, #0]
 800ead8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800eadc:	81a3      	strh	r3, [r4, #12]
 800eade:	f04f 30ff 	mov.w	r0, #4294967295
 800eae2:	e03e      	b.n	800eb62 <__swsetup_r+0xba>
 800eae4:	4b25      	ldr	r3, [pc, #148]	; (800eb7c <__swsetup_r+0xd4>)
 800eae6:	429c      	cmp	r4, r3
 800eae8:	d101      	bne.n	800eaee <__swsetup_r+0x46>
 800eaea:	68ac      	ldr	r4, [r5, #8]
 800eaec:	e7eb      	b.n	800eac6 <__swsetup_r+0x1e>
 800eaee:	4b24      	ldr	r3, [pc, #144]	; (800eb80 <__swsetup_r+0xd8>)
 800eaf0:	429c      	cmp	r4, r3
 800eaf2:	bf08      	it	eq
 800eaf4:	68ec      	ldreq	r4, [r5, #12]
 800eaf6:	e7e6      	b.n	800eac6 <__swsetup_r+0x1e>
 800eaf8:	0758      	lsls	r0, r3, #29
 800eafa:	d512      	bpl.n	800eb22 <__swsetup_r+0x7a>
 800eafc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eafe:	b141      	cbz	r1, 800eb12 <__swsetup_r+0x6a>
 800eb00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800eb04:	4299      	cmp	r1, r3
 800eb06:	d002      	beq.n	800eb0e <__swsetup_r+0x66>
 800eb08:	4630      	mov	r0, r6
 800eb0a:	f7ff fba9 	bl	800e260 <_free_r>
 800eb0e:	2300      	movs	r3, #0
 800eb10:	6363      	str	r3, [r4, #52]	; 0x34
 800eb12:	89a3      	ldrh	r3, [r4, #12]
 800eb14:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800eb18:	81a3      	strh	r3, [r4, #12]
 800eb1a:	2300      	movs	r3, #0
 800eb1c:	6063      	str	r3, [r4, #4]
 800eb1e:	6923      	ldr	r3, [r4, #16]
 800eb20:	6023      	str	r3, [r4, #0]
 800eb22:	89a3      	ldrh	r3, [r4, #12]
 800eb24:	f043 0308 	orr.w	r3, r3, #8
 800eb28:	81a3      	strh	r3, [r4, #12]
 800eb2a:	6923      	ldr	r3, [r4, #16]
 800eb2c:	b94b      	cbnz	r3, 800eb42 <__swsetup_r+0x9a>
 800eb2e:	89a3      	ldrh	r3, [r4, #12]
 800eb30:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800eb34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800eb38:	d003      	beq.n	800eb42 <__swsetup_r+0x9a>
 800eb3a:	4621      	mov	r1, r4
 800eb3c:	4630      	mov	r0, r6
 800eb3e:	f000 fa09 	bl	800ef54 <__smakebuf_r>
 800eb42:	89a0      	ldrh	r0, [r4, #12]
 800eb44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800eb48:	f010 0301 	ands.w	r3, r0, #1
 800eb4c:	d00a      	beq.n	800eb64 <__swsetup_r+0xbc>
 800eb4e:	2300      	movs	r3, #0
 800eb50:	60a3      	str	r3, [r4, #8]
 800eb52:	6963      	ldr	r3, [r4, #20]
 800eb54:	425b      	negs	r3, r3
 800eb56:	61a3      	str	r3, [r4, #24]
 800eb58:	6923      	ldr	r3, [r4, #16]
 800eb5a:	b943      	cbnz	r3, 800eb6e <__swsetup_r+0xc6>
 800eb5c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800eb60:	d1ba      	bne.n	800ead8 <__swsetup_r+0x30>
 800eb62:	bd70      	pop	{r4, r5, r6, pc}
 800eb64:	0781      	lsls	r1, r0, #30
 800eb66:	bf58      	it	pl
 800eb68:	6963      	ldrpl	r3, [r4, #20]
 800eb6a:	60a3      	str	r3, [r4, #8]
 800eb6c:	e7f4      	b.n	800eb58 <__swsetup_r+0xb0>
 800eb6e:	2000      	movs	r0, #0
 800eb70:	e7f7      	b.n	800eb62 <__swsetup_r+0xba>
 800eb72:	bf00      	nop
 800eb74:	20000038 	.word	0x20000038
 800eb78:	0800fb58 	.word	0x0800fb58
 800eb7c:	0800fb78 	.word	0x0800fb78
 800eb80:	0800fb38 	.word	0x0800fb38

0800eb84 <abort>:
 800eb84:	b508      	push	{r3, lr}
 800eb86:	2006      	movs	r0, #6
 800eb88:	f000 faa2 	bl	800f0d0 <raise>
 800eb8c:	2001      	movs	r0, #1
 800eb8e:	f7f3 fc35 	bl	80023fc <_exit>
	...

0800eb94 <__sflush_r>:
 800eb94:	898a      	ldrh	r2, [r1, #12]
 800eb96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb9a:	4605      	mov	r5, r0
 800eb9c:	0710      	lsls	r0, r2, #28
 800eb9e:	460c      	mov	r4, r1
 800eba0:	d458      	bmi.n	800ec54 <__sflush_r+0xc0>
 800eba2:	684b      	ldr	r3, [r1, #4]
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	dc05      	bgt.n	800ebb4 <__sflush_r+0x20>
 800eba8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	dc02      	bgt.n	800ebb4 <__sflush_r+0x20>
 800ebae:	2000      	movs	r0, #0
 800ebb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ebb4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ebb6:	2e00      	cmp	r6, #0
 800ebb8:	d0f9      	beq.n	800ebae <__sflush_r+0x1a>
 800ebba:	2300      	movs	r3, #0
 800ebbc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ebc0:	682f      	ldr	r7, [r5, #0]
 800ebc2:	602b      	str	r3, [r5, #0]
 800ebc4:	d032      	beq.n	800ec2c <__sflush_r+0x98>
 800ebc6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ebc8:	89a3      	ldrh	r3, [r4, #12]
 800ebca:	075a      	lsls	r2, r3, #29
 800ebcc:	d505      	bpl.n	800ebda <__sflush_r+0x46>
 800ebce:	6863      	ldr	r3, [r4, #4]
 800ebd0:	1ac0      	subs	r0, r0, r3
 800ebd2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ebd4:	b10b      	cbz	r3, 800ebda <__sflush_r+0x46>
 800ebd6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ebd8:	1ac0      	subs	r0, r0, r3
 800ebda:	2300      	movs	r3, #0
 800ebdc:	4602      	mov	r2, r0
 800ebde:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ebe0:	6a21      	ldr	r1, [r4, #32]
 800ebe2:	4628      	mov	r0, r5
 800ebe4:	47b0      	blx	r6
 800ebe6:	1c43      	adds	r3, r0, #1
 800ebe8:	89a3      	ldrh	r3, [r4, #12]
 800ebea:	d106      	bne.n	800ebfa <__sflush_r+0x66>
 800ebec:	6829      	ldr	r1, [r5, #0]
 800ebee:	291d      	cmp	r1, #29
 800ebf0:	d82c      	bhi.n	800ec4c <__sflush_r+0xb8>
 800ebf2:	4a2a      	ldr	r2, [pc, #168]	; (800ec9c <__sflush_r+0x108>)
 800ebf4:	40ca      	lsrs	r2, r1
 800ebf6:	07d6      	lsls	r6, r2, #31
 800ebf8:	d528      	bpl.n	800ec4c <__sflush_r+0xb8>
 800ebfa:	2200      	movs	r2, #0
 800ebfc:	6062      	str	r2, [r4, #4]
 800ebfe:	04d9      	lsls	r1, r3, #19
 800ec00:	6922      	ldr	r2, [r4, #16]
 800ec02:	6022      	str	r2, [r4, #0]
 800ec04:	d504      	bpl.n	800ec10 <__sflush_r+0x7c>
 800ec06:	1c42      	adds	r2, r0, #1
 800ec08:	d101      	bne.n	800ec0e <__sflush_r+0x7a>
 800ec0a:	682b      	ldr	r3, [r5, #0]
 800ec0c:	b903      	cbnz	r3, 800ec10 <__sflush_r+0x7c>
 800ec0e:	6560      	str	r0, [r4, #84]	; 0x54
 800ec10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ec12:	602f      	str	r7, [r5, #0]
 800ec14:	2900      	cmp	r1, #0
 800ec16:	d0ca      	beq.n	800ebae <__sflush_r+0x1a>
 800ec18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ec1c:	4299      	cmp	r1, r3
 800ec1e:	d002      	beq.n	800ec26 <__sflush_r+0x92>
 800ec20:	4628      	mov	r0, r5
 800ec22:	f7ff fb1d 	bl	800e260 <_free_r>
 800ec26:	2000      	movs	r0, #0
 800ec28:	6360      	str	r0, [r4, #52]	; 0x34
 800ec2a:	e7c1      	b.n	800ebb0 <__sflush_r+0x1c>
 800ec2c:	6a21      	ldr	r1, [r4, #32]
 800ec2e:	2301      	movs	r3, #1
 800ec30:	4628      	mov	r0, r5
 800ec32:	47b0      	blx	r6
 800ec34:	1c41      	adds	r1, r0, #1
 800ec36:	d1c7      	bne.n	800ebc8 <__sflush_r+0x34>
 800ec38:	682b      	ldr	r3, [r5, #0]
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d0c4      	beq.n	800ebc8 <__sflush_r+0x34>
 800ec3e:	2b1d      	cmp	r3, #29
 800ec40:	d001      	beq.n	800ec46 <__sflush_r+0xb2>
 800ec42:	2b16      	cmp	r3, #22
 800ec44:	d101      	bne.n	800ec4a <__sflush_r+0xb6>
 800ec46:	602f      	str	r7, [r5, #0]
 800ec48:	e7b1      	b.n	800ebae <__sflush_r+0x1a>
 800ec4a:	89a3      	ldrh	r3, [r4, #12]
 800ec4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec50:	81a3      	strh	r3, [r4, #12]
 800ec52:	e7ad      	b.n	800ebb0 <__sflush_r+0x1c>
 800ec54:	690f      	ldr	r7, [r1, #16]
 800ec56:	2f00      	cmp	r7, #0
 800ec58:	d0a9      	beq.n	800ebae <__sflush_r+0x1a>
 800ec5a:	0793      	lsls	r3, r2, #30
 800ec5c:	680e      	ldr	r6, [r1, #0]
 800ec5e:	bf08      	it	eq
 800ec60:	694b      	ldreq	r3, [r1, #20]
 800ec62:	600f      	str	r7, [r1, #0]
 800ec64:	bf18      	it	ne
 800ec66:	2300      	movne	r3, #0
 800ec68:	eba6 0807 	sub.w	r8, r6, r7
 800ec6c:	608b      	str	r3, [r1, #8]
 800ec6e:	f1b8 0f00 	cmp.w	r8, #0
 800ec72:	dd9c      	ble.n	800ebae <__sflush_r+0x1a>
 800ec74:	6a21      	ldr	r1, [r4, #32]
 800ec76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ec78:	4643      	mov	r3, r8
 800ec7a:	463a      	mov	r2, r7
 800ec7c:	4628      	mov	r0, r5
 800ec7e:	47b0      	blx	r6
 800ec80:	2800      	cmp	r0, #0
 800ec82:	dc06      	bgt.n	800ec92 <__sflush_r+0xfe>
 800ec84:	89a3      	ldrh	r3, [r4, #12]
 800ec86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec8a:	81a3      	strh	r3, [r4, #12]
 800ec8c:	f04f 30ff 	mov.w	r0, #4294967295
 800ec90:	e78e      	b.n	800ebb0 <__sflush_r+0x1c>
 800ec92:	4407      	add	r7, r0
 800ec94:	eba8 0800 	sub.w	r8, r8, r0
 800ec98:	e7e9      	b.n	800ec6e <__sflush_r+0xda>
 800ec9a:	bf00      	nop
 800ec9c:	20400001 	.word	0x20400001

0800eca0 <_fflush_r>:
 800eca0:	b538      	push	{r3, r4, r5, lr}
 800eca2:	690b      	ldr	r3, [r1, #16]
 800eca4:	4605      	mov	r5, r0
 800eca6:	460c      	mov	r4, r1
 800eca8:	b913      	cbnz	r3, 800ecb0 <_fflush_r+0x10>
 800ecaa:	2500      	movs	r5, #0
 800ecac:	4628      	mov	r0, r5
 800ecae:	bd38      	pop	{r3, r4, r5, pc}
 800ecb0:	b118      	cbz	r0, 800ecba <_fflush_r+0x1a>
 800ecb2:	6983      	ldr	r3, [r0, #24]
 800ecb4:	b90b      	cbnz	r3, 800ecba <_fflush_r+0x1a>
 800ecb6:	f000 f887 	bl	800edc8 <__sinit>
 800ecba:	4b14      	ldr	r3, [pc, #80]	; (800ed0c <_fflush_r+0x6c>)
 800ecbc:	429c      	cmp	r4, r3
 800ecbe:	d11b      	bne.n	800ecf8 <_fflush_r+0x58>
 800ecc0:	686c      	ldr	r4, [r5, #4]
 800ecc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d0ef      	beq.n	800ecaa <_fflush_r+0xa>
 800ecca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800eccc:	07d0      	lsls	r0, r2, #31
 800ecce:	d404      	bmi.n	800ecda <_fflush_r+0x3a>
 800ecd0:	0599      	lsls	r1, r3, #22
 800ecd2:	d402      	bmi.n	800ecda <_fflush_r+0x3a>
 800ecd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ecd6:	f000 f915 	bl	800ef04 <__retarget_lock_acquire_recursive>
 800ecda:	4628      	mov	r0, r5
 800ecdc:	4621      	mov	r1, r4
 800ecde:	f7ff ff59 	bl	800eb94 <__sflush_r>
 800ece2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ece4:	07da      	lsls	r2, r3, #31
 800ece6:	4605      	mov	r5, r0
 800ece8:	d4e0      	bmi.n	800ecac <_fflush_r+0xc>
 800ecea:	89a3      	ldrh	r3, [r4, #12]
 800ecec:	059b      	lsls	r3, r3, #22
 800ecee:	d4dd      	bmi.n	800ecac <_fflush_r+0xc>
 800ecf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ecf2:	f000 f908 	bl	800ef06 <__retarget_lock_release_recursive>
 800ecf6:	e7d9      	b.n	800ecac <_fflush_r+0xc>
 800ecf8:	4b05      	ldr	r3, [pc, #20]	; (800ed10 <_fflush_r+0x70>)
 800ecfa:	429c      	cmp	r4, r3
 800ecfc:	d101      	bne.n	800ed02 <_fflush_r+0x62>
 800ecfe:	68ac      	ldr	r4, [r5, #8]
 800ed00:	e7df      	b.n	800ecc2 <_fflush_r+0x22>
 800ed02:	4b04      	ldr	r3, [pc, #16]	; (800ed14 <_fflush_r+0x74>)
 800ed04:	429c      	cmp	r4, r3
 800ed06:	bf08      	it	eq
 800ed08:	68ec      	ldreq	r4, [r5, #12]
 800ed0a:	e7da      	b.n	800ecc2 <_fflush_r+0x22>
 800ed0c:	0800fb58 	.word	0x0800fb58
 800ed10:	0800fb78 	.word	0x0800fb78
 800ed14:	0800fb38 	.word	0x0800fb38

0800ed18 <std>:
 800ed18:	2300      	movs	r3, #0
 800ed1a:	b510      	push	{r4, lr}
 800ed1c:	4604      	mov	r4, r0
 800ed1e:	e9c0 3300 	strd	r3, r3, [r0]
 800ed22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ed26:	6083      	str	r3, [r0, #8]
 800ed28:	8181      	strh	r1, [r0, #12]
 800ed2a:	6643      	str	r3, [r0, #100]	; 0x64
 800ed2c:	81c2      	strh	r2, [r0, #14]
 800ed2e:	6183      	str	r3, [r0, #24]
 800ed30:	4619      	mov	r1, r3
 800ed32:	2208      	movs	r2, #8
 800ed34:	305c      	adds	r0, #92	; 0x5c
 800ed36:	f7fb fd79 	bl	800a82c <memset>
 800ed3a:	4b05      	ldr	r3, [pc, #20]	; (800ed50 <std+0x38>)
 800ed3c:	6263      	str	r3, [r4, #36]	; 0x24
 800ed3e:	4b05      	ldr	r3, [pc, #20]	; (800ed54 <std+0x3c>)
 800ed40:	62a3      	str	r3, [r4, #40]	; 0x28
 800ed42:	4b05      	ldr	r3, [pc, #20]	; (800ed58 <std+0x40>)
 800ed44:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ed46:	4b05      	ldr	r3, [pc, #20]	; (800ed5c <std+0x44>)
 800ed48:	6224      	str	r4, [r4, #32]
 800ed4a:	6323      	str	r3, [r4, #48]	; 0x30
 800ed4c:	bd10      	pop	{r4, pc}
 800ed4e:	bf00      	nop
 800ed50:	0800f109 	.word	0x0800f109
 800ed54:	0800f12b 	.word	0x0800f12b
 800ed58:	0800f163 	.word	0x0800f163
 800ed5c:	0800f187 	.word	0x0800f187

0800ed60 <_cleanup_r>:
 800ed60:	4901      	ldr	r1, [pc, #4]	; (800ed68 <_cleanup_r+0x8>)
 800ed62:	f000 b8af 	b.w	800eec4 <_fwalk_reent>
 800ed66:	bf00      	nop
 800ed68:	0800eca1 	.word	0x0800eca1

0800ed6c <__sfmoreglue>:
 800ed6c:	b570      	push	{r4, r5, r6, lr}
 800ed6e:	2268      	movs	r2, #104	; 0x68
 800ed70:	1e4d      	subs	r5, r1, #1
 800ed72:	4355      	muls	r5, r2
 800ed74:	460e      	mov	r6, r1
 800ed76:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ed7a:	f7ff fadd 	bl	800e338 <_malloc_r>
 800ed7e:	4604      	mov	r4, r0
 800ed80:	b140      	cbz	r0, 800ed94 <__sfmoreglue+0x28>
 800ed82:	2100      	movs	r1, #0
 800ed84:	e9c0 1600 	strd	r1, r6, [r0]
 800ed88:	300c      	adds	r0, #12
 800ed8a:	60a0      	str	r0, [r4, #8]
 800ed8c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ed90:	f7fb fd4c 	bl	800a82c <memset>
 800ed94:	4620      	mov	r0, r4
 800ed96:	bd70      	pop	{r4, r5, r6, pc}

0800ed98 <__sfp_lock_acquire>:
 800ed98:	4801      	ldr	r0, [pc, #4]	; (800eda0 <__sfp_lock_acquire+0x8>)
 800ed9a:	f000 b8b3 	b.w	800ef04 <__retarget_lock_acquire_recursive>
 800ed9e:	bf00      	nop
 800eda0:	2000061d 	.word	0x2000061d

0800eda4 <__sfp_lock_release>:
 800eda4:	4801      	ldr	r0, [pc, #4]	; (800edac <__sfp_lock_release+0x8>)
 800eda6:	f000 b8ae 	b.w	800ef06 <__retarget_lock_release_recursive>
 800edaa:	bf00      	nop
 800edac:	2000061d 	.word	0x2000061d

0800edb0 <__sinit_lock_acquire>:
 800edb0:	4801      	ldr	r0, [pc, #4]	; (800edb8 <__sinit_lock_acquire+0x8>)
 800edb2:	f000 b8a7 	b.w	800ef04 <__retarget_lock_acquire_recursive>
 800edb6:	bf00      	nop
 800edb8:	2000061e 	.word	0x2000061e

0800edbc <__sinit_lock_release>:
 800edbc:	4801      	ldr	r0, [pc, #4]	; (800edc4 <__sinit_lock_release+0x8>)
 800edbe:	f000 b8a2 	b.w	800ef06 <__retarget_lock_release_recursive>
 800edc2:	bf00      	nop
 800edc4:	2000061e 	.word	0x2000061e

0800edc8 <__sinit>:
 800edc8:	b510      	push	{r4, lr}
 800edca:	4604      	mov	r4, r0
 800edcc:	f7ff fff0 	bl	800edb0 <__sinit_lock_acquire>
 800edd0:	69a3      	ldr	r3, [r4, #24]
 800edd2:	b11b      	cbz	r3, 800eddc <__sinit+0x14>
 800edd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800edd8:	f7ff bff0 	b.w	800edbc <__sinit_lock_release>
 800eddc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ede0:	6523      	str	r3, [r4, #80]	; 0x50
 800ede2:	4b13      	ldr	r3, [pc, #76]	; (800ee30 <__sinit+0x68>)
 800ede4:	4a13      	ldr	r2, [pc, #76]	; (800ee34 <__sinit+0x6c>)
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	62a2      	str	r2, [r4, #40]	; 0x28
 800edea:	42a3      	cmp	r3, r4
 800edec:	bf04      	itt	eq
 800edee:	2301      	moveq	r3, #1
 800edf0:	61a3      	streq	r3, [r4, #24]
 800edf2:	4620      	mov	r0, r4
 800edf4:	f000 f820 	bl	800ee38 <__sfp>
 800edf8:	6060      	str	r0, [r4, #4]
 800edfa:	4620      	mov	r0, r4
 800edfc:	f000 f81c 	bl	800ee38 <__sfp>
 800ee00:	60a0      	str	r0, [r4, #8]
 800ee02:	4620      	mov	r0, r4
 800ee04:	f000 f818 	bl	800ee38 <__sfp>
 800ee08:	2200      	movs	r2, #0
 800ee0a:	60e0      	str	r0, [r4, #12]
 800ee0c:	2104      	movs	r1, #4
 800ee0e:	6860      	ldr	r0, [r4, #4]
 800ee10:	f7ff ff82 	bl	800ed18 <std>
 800ee14:	68a0      	ldr	r0, [r4, #8]
 800ee16:	2201      	movs	r2, #1
 800ee18:	2109      	movs	r1, #9
 800ee1a:	f7ff ff7d 	bl	800ed18 <std>
 800ee1e:	68e0      	ldr	r0, [r4, #12]
 800ee20:	2202      	movs	r2, #2
 800ee22:	2112      	movs	r1, #18
 800ee24:	f7ff ff78 	bl	800ed18 <std>
 800ee28:	2301      	movs	r3, #1
 800ee2a:	61a3      	str	r3, [r4, #24]
 800ee2c:	e7d2      	b.n	800edd4 <__sinit+0xc>
 800ee2e:	bf00      	nop
 800ee30:	0800f698 	.word	0x0800f698
 800ee34:	0800ed61 	.word	0x0800ed61

0800ee38 <__sfp>:
 800ee38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee3a:	4607      	mov	r7, r0
 800ee3c:	f7ff ffac 	bl	800ed98 <__sfp_lock_acquire>
 800ee40:	4b1e      	ldr	r3, [pc, #120]	; (800eebc <__sfp+0x84>)
 800ee42:	681e      	ldr	r6, [r3, #0]
 800ee44:	69b3      	ldr	r3, [r6, #24]
 800ee46:	b913      	cbnz	r3, 800ee4e <__sfp+0x16>
 800ee48:	4630      	mov	r0, r6
 800ee4a:	f7ff ffbd 	bl	800edc8 <__sinit>
 800ee4e:	3648      	adds	r6, #72	; 0x48
 800ee50:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ee54:	3b01      	subs	r3, #1
 800ee56:	d503      	bpl.n	800ee60 <__sfp+0x28>
 800ee58:	6833      	ldr	r3, [r6, #0]
 800ee5a:	b30b      	cbz	r3, 800eea0 <__sfp+0x68>
 800ee5c:	6836      	ldr	r6, [r6, #0]
 800ee5e:	e7f7      	b.n	800ee50 <__sfp+0x18>
 800ee60:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ee64:	b9d5      	cbnz	r5, 800ee9c <__sfp+0x64>
 800ee66:	4b16      	ldr	r3, [pc, #88]	; (800eec0 <__sfp+0x88>)
 800ee68:	60e3      	str	r3, [r4, #12]
 800ee6a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ee6e:	6665      	str	r5, [r4, #100]	; 0x64
 800ee70:	f000 f847 	bl	800ef02 <__retarget_lock_init_recursive>
 800ee74:	f7ff ff96 	bl	800eda4 <__sfp_lock_release>
 800ee78:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ee7c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ee80:	6025      	str	r5, [r4, #0]
 800ee82:	61a5      	str	r5, [r4, #24]
 800ee84:	2208      	movs	r2, #8
 800ee86:	4629      	mov	r1, r5
 800ee88:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ee8c:	f7fb fcce 	bl	800a82c <memset>
 800ee90:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ee94:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ee98:	4620      	mov	r0, r4
 800ee9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ee9c:	3468      	adds	r4, #104	; 0x68
 800ee9e:	e7d9      	b.n	800ee54 <__sfp+0x1c>
 800eea0:	2104      	movs	r1, #4
 800eea2:	4638      	mov	r0, r7
 800eea4:	f7ff ff62 	bl	800ed6c <__sfmoreglue>
 800eea8:	4604      	mov	r4, r0
 800eeaa:	6030      	str	r0, [r6, #0]
 800eeac:	2800      	cmp	r0, #0
 800eeae:	d1d5      	bne.n	800ee5c <__sfp+0x24>
 800eeb0:	f7ff ff78 	bl	800eda4 <__sfp_lock_release>
 800eeb4:	230c      	movs	r3, #12
 800eeb6:	603b      	str	r3, [r7, #0]
 800eeb8:	e7ee      	b.n	800ee98 <__sfp+0x60>
 800eeba:	bf00      	nop
 800eebc:	0800f698 	.word	0x0800f698
 800eec0:	ffff0001 	.word	0xffff0001

0800eec4 <_fwalk_reent>:
 800eec4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eec8:	4606      	mov	r6, r0
 800eeca:	4688      	mov	r8, r1
 800eecc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800eed0:	2700      	movs	r7, #0
 800eed2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800eed6:	f1b9 0901 	subs.w	r9, r9, #1
 800eeda:	d505      	bpl.n	800eee8 <_fwalk_reent+0x24>
 800eedc:	6824      	ldr	r4, [r4, #0]
 800eede:	2c00      	cmp	r4, #0
 800eee0:	d1f7      	bne.n	800eed2 <_fwalk_reent+0xe>
 800eee2:	4638      	mov	r0, r7
 800eee4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eee8:	89ab      	ldrh	r3, [r5, #12]
 800eeea:	2b01      	cmp	r3, #1
 800eeec:	d907      	bls.n	800eefe <_fwalk_reent+0x3a>
 800eeee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800eef2:	3301      	adds	r3, #1
 800eef4:	d003      	beq.n	800eefe <_fwalk_reent+0x3a>
 800eef6:	4629      	mov	r1, r5
 800eef8:	4630      	mov	r0, r6
 800eefa:	47c0      	blx	r8
 800eefc:	4307      	orrs	r7, r0
 800eefe:	3568      	adds	r5, #104	; 0x68
 800ef00:	e7e9      	b.n	800eed6 <_fwalk_reent+0x12>

0800ef02 <__retarget_lock_init_recursive>:
 800ef02:	4770      	bx	lr

0800ef04 <__retarget_lock_acquire_recursive>:
 800ef04:	4770      	bx	lr

0800ef06 <__retarget_lock_release_recursive>:
 800ef06:	4770      	bx	lr

0800ef08 <__swhatbuf_r>:
 800ef08:	b570      	push	{r4, r5, r6, lr}
 800ef0a:	460e      	mov	r6, r1
 800ef0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef10:	2900      	cmp	r1, #0
 800ef12:	b096      	sub	sp, #88	; 0x58
 800ef14:	4614      	mov	r4, r2
 800ef16:	461d      	mov	r5, r3
 800ef18:	da08      	bge.n	800ef2c <__swhatbuf_r+0x24>
 800ef1a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ef1e:	2200      	movs	r2, #0
 800ef20:	602a      	str	r2, [r5, #0]
 800ef22:	061a      	lsls	r2, r3, #24
 800ef24:	d410      	bmi.n	800ef48 <__swhatbuf_r+0x40>
 800ef26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ef2a:	e00e      	b.n	800ef4a <__swhatbuf_r+0x42>
 800ef2c:	466a      	mov	r2, sp
 800ef2e:	f000 f951 	bl	800f1d4 <_fstat_r>
 800ef32:	2800      	cmp	r0, #0
 800ef34:	dbf1      	blt.n	800ef1a <__swhatbuf_r+0x12>
 800ef36:	9a01      	ldr	r2, [sp, #4]
 800ef38:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ef3c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ef40:	425a      	negs	r2, r3
 800ef42:	415a      	adcs	r2, r3
 800ef44:	602a      	str	r2, [r5, #0]
 800ef46:	e7ee      	b.n	800ef26 <__swhatbuf_r+0x1e>
 800ef48:	2340      	movs	r3, #64	; 0x40
 800ef4a:	2000      	movs	r0, #0
 800ef4c:	6023      	str	r3, [r4, #0]
 800ef4e:	b016      	add	sp, #88	; 0x58
 800ef50:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ef54 <__smakebuf_r>:
 800ef54:	898b      	ldrh	r3, [r1, #12]
 800ef56:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ef58:	079d      	lsls	r5, r3, #30
 800ef5a:	4606      	mov	r6, r0
 800ef5c:	460c      	mov	r4, r1
 800ef5e:	d507      	bpl.n	800ef70 <__smakebuf_r+0x1c>
 800ef60:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ef64:	6023      	str	r3, [r4, #0]
 800ef66:	6123      	str	r3, [r4, #16]
 800ef68:	2301      	movs	r3, #1
 800ef6a:	6163      	str	r3, [r4, #20]
 800ef6c:	b002      	add	sp, #8
 800ef6e:	bd70      	pop	{r4, r5, r6, pc}
 800ef70:	ab01      	add	r3, sp, #4
 800ef72:	466a      	mov	r2, sp
 800ef74:	f7ff ffc8 	bl	800ef08 <__swhatbuf_r>
 800ef78:	9900      	ldr	r1, [sp, #0]
 800ef7a:	4605      	mov	r5, r0
 800ef7c:	4630      	mov	r0, r6
 800ef7e:	f7ff f9db 	bl	800e338 <_malloc_r>
 800ef82:	b948      	cbnz	r0, 800ef98 <__smakebuf_r+0x44>
 800ef84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef88:	059a      	lsls	r2, r3, #22
 800ef8a:	d4ef      	bmi.n	800ef6c <__smakebuf_r+0x18>
 800ef8c:	f023 0303 	bic.w	r3, r3, #3
 800ef90:	f043 0302 	orr.w	r3, r3, #2
 800ef94:	81a3      	strh	r3, [r4, #12]
 800ef96:	e7e3      	b.n	800ef60 <__smakebuf_r+0xc>
 800ef98:	4b0d      	ldr	r3, [pc, #52]	; (800efd0 <__smakebuf_r+0x7c>)
 800ef9a:	62b3      	str	r3, [r6, #40]	; 0x28
 800ef9c:	89a3      	ldrh	r3, [r4, #12]
 800ef9e:	6020      	str	r0, [r4, #0]
 800efa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800efa4:	81a3      	strh	r3, [r4, #12]
 800efa6:	9b00      	ldr	r3, [sp, #0]
 800efa8:	6163      	str	r3, [r4, #20]
 800efaa:	9b01      	ldr	r3, [sp, #4]
 800efac:	6120      	str	r0, [r4, #16]
 800efae:	b15b      	cbz	r3, 800efc8 <__smakebuf_r+0x74>
 800efb0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800efb4:	4630      	mov	r0, r6
 800efb6:	f000 f91f 	bl	800f1f8 <_isatty_r>
 800efba:	b128      	cbz	r0, 800efc8 <__smakebuf_r+0x74>
 800efbc:	89a3      	ldrh	r3, [r4, #12]
 800efbe:	f023 0303 	bic.w	r3, r3, #3
 800efc2:	f043 0301 	orr.w	r3, r3, #1
 800efc6:	81a3      	strh	r3, [r4, #12]
 800efc8:	89a0      	ldrh	r0, [r4, #12]
 800efca:	4305      	orrs	r5, r0
 800efcc:	81a5      	strh	r5, [r4, #12]
 800efce:	e7cd      	b.n	800ef6c <__smakebuf_r+0x18>
 800efd0:	0800ed61 	.word	0x0800ed61

0800efd4 <memmove>:
 800efd4:	4288      	cmp	r0, r1
 800efd6:	b510      	push	{r4, lr}
 800efd8:	eb01 0402 	add.w	r4, r1, r2
 800efdc:	d902      	bls.n	800efe4 <memmove+0x10>
 800efde:	4284      	cmp	r4, r0
 800efe0:	4623      	mov	r3, r4
 800efe2:	d807      	bhi.n	800eff4 <memmove+0x20>
 800efe4:	1e43      	subs	r3, r0, #1
 800efe6:	42a1      	cmp	r1, r4
 800efe8:	d008      	beq.n	800effc <memmove+0x28>
 800efea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800efee:	f803 2f01 	strb.w	r2, [r3, #1]!
 800eff2:	e7f8      	b.n	800efe6 <memmove+0x12>
 800eff4:	4402      	add	r2, r0
 800eff6:	4601      	mov	r1, r0
 800eff8:	428a      	cmp	r2, r1
 800effa:	d100      	bne.n	800effe <memmove+0x2a>
 800effc:	bd10      	pop	{r4, pc}
 800effe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f002:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f006:	e7f7      	b.n	800eff8 <memmove+0x24>

0800f008 <__malloc_lock>:
 800f008:	4801      	ldr	r0, [pc, #4]	; (800f010 <__malloc_lock+0x8>)
 800f00a:	f7ff bf7b 	b.w	800ef04 <__retarget_lock_acquire_recursive>
 800f00e:	bf00      	nop
 800f010:	2000061c 	.word	0x2000061c

0800f014 <__malloc_unlock>:
 800f014:	4801      	ldr	r0, [pc, #4]	; (800f01c <__malloc_unlock+0x8>)
 800f016:	f7ff bf76 	b.w	800ef06 <__retarget_lock_release_recursive>
 800f01a:	bf00      	nop
 800f01c:	2000061c 	.word	0x2000061c

0800f020 <_realloc_r>:
 800f020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f024:	4680      	mov	r8, r0
 800f026:	4614      	mov	r4, r2
 800f028:	460e      	mov	r6, r1
 800f02a:	b921      	cbnz	r1, 800f036 <_realloc_r+0x16>
 800f02c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f030:	4611      	mov	r1, r2
 800f032:	f7ff b981 	b.w	800e338 <_malloc_r>
 800f036:	b92a      	cbnz	r2, 800f044 <_realloc_r+0x24>
 800f038:	f7ff f912 	bl	800e260 <_free_r>
 800f03c:	4625      	mov	r5, r4
 800f03e:	4628      	mov	r0, r5
 800f040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f044:	f000 f8fa 	bl	800f23c <_malloc_usable_size_r>
 800f048:	4284      	cmp	r4, r0
 800f04a:	4607      	mov	r7, r0
 800f04c:	d802      	bhi.n	800f054 <_realloc_r+0x34>
 800f04e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f052:	d812      	bhi.n	800f07a <_realloc_r+0x5a>
 800f054:	4621      	mov	r1, r4
 800f056:	4640      	mov	r0, r8
 800f058:	f7ff f96e 	bl	800e338 <_malloc_r>
 800f05c:	4605      	mov	r5, r0
 800f05e:	2800      	cmp	r0, #0
 800f060:	d0ed      	beq.n	800f03e <_realloc_r+0x1e>
 800f062:	42bc      	cmp	r4, r7
 800f064:	4622      	mov	r2, r4
 800f066:	4631      	mov	r1, r6
 800f068:	bf28      	it	cs
 800f06a:	463a      	movcs	r2, r7
 800f06c:	f7fe fc12 	bl	800d894 <memcpy>
 800f070:	4631      	mov	r1, r6
 800f072:	4640      	mov	r0, r8
 800f074:	f7ff f8f4 	bl	800e260 <_free_r>
 800f078:	e7e1      	b.n	800f03e <_realloc_r+0x1e>
 800f07a:	4635      	mov	r5, r6
 800f07c:	e7df      	b.n	800f03e <_realloc_r+0x1e>

0800f07e <_raise_r>:
 800f07e:	291f      	cmp	r1, #31
 800f080:	b538      	push	{r3, r4, r5, lr}
 800f082:	4604      	mov	r4, r0
 800f084:	460d      	mov	r5, r1
 800f086:	d904      	bls.n	800f092 <_raise_r+0x14>
 800f088:	2316      	movs	r3, #22
 800f08a:	6003      	str	r3, [r0, #0]
 800f08c:	f04f 30ff 	mov.w	r0, #4294967295
 800f090:	bd38      	pop	{r3, r4, r5, pc}
 800f092:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f094:	b112      	cbz	r2, 800f09c <_raise_r+0x1e>
 800f096:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f09a:	b94b      	cbnz	r3, 800f0b0 <_raise_r+0x32>
 800f09c:	4620      	mov	r0, r4
 800f09e:	f000 f831 	bl	800f104 <_getpid_r>
 800f0a2:	462a      	mov	r2, r5
 800f0a4:	4601      	mov	r1, r0
 800f0a6:	4620      	mov	r0, r4
 800f0a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f0ac:	f000 b818 	b.w	800f0e0 <_kill_r>
 800f0b0:	2b01      	cmp	r3, #1
 800f0b2:	d00a      	beq.n	800f0ca <_raise_r+0x4c>
 800f0b4:	1c59      	adds	r1, r3, #1
 800f0b6:	d103      	bne.n	800f0c0 <_raise_r+0x42>
 800f0b8:	2316      	movs	r3, #22
 800f0ba:	6003      	str	r3, [r0, #0]
 800f0bc:	2001      	movs	r0, #1
 800f0be:	e7e7      	b.n	800f090 <_raise_r+0x12>
 800f0c0:	2400      	movs	r4, #0
 800f0c2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f0c6:	4628      	mov	r0, r5
 800f0c8:	4798      	blx	r3
 800f0ca:	2000      	movs	r0, #0
 800f0cc:	e7e0      	b.n	800f090 <_raise_r+0x12>
	...

0800f0d0 <raise>:
 800f0d0:	4b02      	ldr	r3, [pc, #8]	; (800f0dc <raise+0xc>)
 800f0d2:	4601      	mov	r1, r0
 800f0d4:	6818      	ldr	r0, [r3, #0]
 800f0d6:	f7ff bfd2 	b.w	800f07e <_raise_r>
 800f0da:	bf00      	nop
 800f0dc:	20000038 	.word	0x20000038

0800f0e0 <_kill_r>:
 800f0e0:	b538      	push	{r3, r4, r5, lr}
 800f0e2:	4d07      	ldr	r5, [pc, #28]	; (800f100 <_kill_r+0x20>)
 800f0e4:	2300      	movs	r3, #0
 800f0e6:	4604      	mov	r4, r0
 800f0e8:	4608      	mov	r0, r1
 800f0ea:	4611      	mov	r1, r2
 800f0ec:	602b      	str	r3, [r5, #0]
 800f0ee:	f7f3 f975 	bl	80023dc <_kill>
 800f0f2:	1c43      	adds	r3, r0, #1
 800f0f4:	d102      	bne.n	800f0fc <_kill_r+0x1c>
 800f0f6:	682b      	ldr	r3, [r5, #0]
 800f0f8:	b103      	cbz	r3, 800f0fc <_kill_r+0x1c>
 800f0fa:	6023      	str	r3, [r4, #0]
 800f0fc:	bd38      	pop	{r3, r4, r5, pc}
 800f0fe:	bf00      	nop
 800f100:	20000620 	.word	0x20000620

0800f104 <_getpid_r>:
 800f104:	f7f3 b962 	b.w	80023cc <_getpid>

0800f108 <__sread>:
 800f108:	b510      	push	{r4, lr}
 800f10a:	460c      	mov	r4, r1
 800f10c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f110:	f000 f89c 	bl	800f24c <_read_r>
 800f114:	2800      	cmp	r0, #0
 800f116:	bfab      	itete	ge
 800f118:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f11a:	89a3      	ldrhlt	r3, [r4, #12]
 800f11c:	181b      	addge	r3, r3, r0
 800f11e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f122:	bfac      	ite	ge
 800f124:	6563      	strge	r3, [r4, #84]	; 0x54
 800f126:	81a3      	strhlt	r3, [r4, #12]
 800f128:	bd10      	pop	{r4, pc}

0800f12a <__swrite>:
 800f12a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f12e:	461f      	mov	r7, r3
 800f130:	898b      	ldrh	r3, [r1, #12]
 800f132:	05db      	lsls	r3, r3, #23
 800f134:	4605      	mov	r5, r0
 800f136:	460c      	mov	r4, r1
 800f138:	4616      	mov	r6, r2
 800f13a:	d505      	bpl.n	800f148 <__swrite+0x1e>
 800f13c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f140:	2302      	movs	r3, #2
 800f142:	2200      	movs	r2, #0
 800f144:	f000 f868 	bl	800f218 <_lseek_r>
 800f148:	89a3      	ldrh	r3, [r4, #12]
 800f14a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f14e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f152:	81a3      	strh	r3, [r4, #12]
 800f154:	4632      	mov	r2, r6
 800f156:	463b      	mov	r3, r7
 800f158:	4628      	mov	r0, r5
 800f15a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f15e:	f000 b817 	b.w	800f190 <_write_r>

0800f162 <__sseek>:
 800f162:	b510      	push	{r4, lr}
 800f164:	460c      	mov	r4, r1
 800f166:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f16a:	f000 f855 	bl	800f218 <_lseek_r>
 800f16e:	1c43      	adds	r3, r0, #1
 800f170:	89a3      	ldrh	r3, [r4, #12]
 800f172:	bf15      	itete	ne
 800f174:	6560      	strne	r0, [r4, #84]	; 0x54
 800f176:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f17a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f17e:	81a3      	strheq	r3, [r4, #12]
 800f180:	bf18      	it	ne
 800f182:	81a3      	strhne	r3, [r4, #12]
 800f184:	bd10      	pop	{r4, pc}

0800f186 <__sclose>:
 800f186:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f18a:	f000 b813 	b.w	800f1b4 <_close_r>
	...

0800f190 <_write_r>:
 800f190:	b538      	push	{r3, r4, r5, lr}
 800f192:	4d07      	ldr	r5, [pc, #28]	; (800f1b0 <_write_r+0x20>)
 800f194:	4604      	mov	r4, r0
 800f196:	4608      	mov	r0, r1
 800f198:	4611      	mov	r1, r2
 800f19a:	2200      	movs	r2, #0
 800f19c:	602a      	str	r2, [r5, #0]
 800f19e:	461a      	mov	r2, r3
 800f1a0:	f7f3 f953 	bl	800244a <_write>
 800f1a4:	1c43      	adds	r3, r0, #1
 800f1a6:	d102      	bne.n	800f1ae <_write_r+0x1e>
 800f1a8:	682b      	ldr	r3, [r5, #0]
 800f1aa:	b103      	cbz	r3, 800f1ae <_write_r+0x1e>
 800f1ac:	6023      	str	r3, [r4, #0]
 800f1ae:	bd38      	pop	{r3, r4, r5, pc}
 800f1b0:	20000620 	.word	0x20000620

0800f1b4 <_close_r>:
 800f1b4:	b538      	push	{r3, r4, r5, lr}
 800f1b6:	4d06      	ldr	r5, [pc, #24]	; (800f1d0 <_close_r+0x1c>)
 800f1b8:	2300      	movs	r3, #0
 800f1ba:	4604      	mov	r4, r0
 800f1bc:	4608      	mov	r0, r1
 800f1be:	602b      	str	r3, [r5, #0]
 800f1c0:	f7f3 f95f 	bl	8002482 <_close>
 800f1c4:	1c43      	adds	r3, r0, #1
 800f1c6:	d102      	bne.n	800f1ce <_close_r+0x1a>
 800f1c8:	682b      	ldr	r3, [r5, #0]
 800f1ca:	b103      	cbz	r3, 800f1ce <_close_r+0x1a>
 800f1cc:	6023      	str	r3, [r4, #0]
 800f1ce:	bd38      	pop	{r3, r4, r5, pc}
 800f1d0:	20000620 	.word	0x20000620

0800f1d4 <_fstat_r>:
 800f1d4:	b538      	push	{r3, r4, r5, lr}
 800f1d6:	4d07      	ldr	r5, [pc, #28]	; (800f1f4 <_fstat_r+0x20>)
 800f1d8:	2300      	movs	r3, #0
 800f1da:	4604      	mov	r4, r0
 800f1dc:	4608      	mov	r0, r1
 800f1de:	4611      	mov	r1, r2
 800f1e0:	602b      	str	r3, [r5, #0]
 800f1e2:	f7f3 f95a 	bl	800249a <_fstat>
 800f1e6:	1c43      	adds	r3, r0, #1
 800f1e8:	d102      	bne.n	800f1f0 <_fstat_r+0x1c>
 800f1ea:	682b      	ldr	r3, [r5, #0]
 800f1ec:	b103      	cbz	r3, 800f1f0 <_fstat_r+0x1c>
 800f1ee:	6023      	str	r3, [r4, #0]
 800f1f0:	bd38      	pop	{r3, r4, r5, pc}
 800f1f2:	bf00      	nop
 800f1f4:	20000620 	.word	0x20000620

0800f1f8 <_isatty_r>:
 800f1f8:	b538      	push	{r3, r4, r5, lr}
 800f1fa:	4d06      	ldr	r5, [pc, #24]	; (800f214 <_isatty_r+0x1c>)
 800f1fc:	2300      	movs	r3, #0
 800f1fe:	4604      	mov	r4, r0
 800f200:	4608      	mov	r0, r1
 800f202:	602b      	str	r3, [r5, #0]
 800f204:	f7f3 f959 	bl	80024ba <_isatty>
 800f208:	1c43      	adds	r3, r0, #1
 800f20a:	d102      	bne.n	800f212 <_isatty_r+0x1a>
 800f20c:	682b      	ldr	r3, [r5, #0]
 800f20e:	b103      	cbz	r3, 800f212 <_isatty_r+0x1a>
 800f210:	6023      	str	r3, [r4, #0]
 800f212:	bd38      	pop	{r3, r4, r5, pc}
 800f214:	20000620 	.word	0x20000620

0800f218 <_lseek_r>:
 800f218:	b538      	push	{r3, r4, r5, lr}
 800f21a:	4d07      	ldr	r5, [pc, #28]	; (800f238 <_lseek_r+0x20>)
 800f21c:	4604      	mov	r4, r0
 800f21e:	4608      	mov	r0, r1
 800f220:	4611      	mov	r1, r2
 800f222:	2200      	movs	r2, #0
 800f224:	602a      	str	r2, [r5, #0]
 800f226:	461a      	mov	r2, r3
 800f228:	f7f3 f952 	bl	80024d0 <_lseek>
 800f22c:	1c43      	adds	r3, r0, #1
 800f22e:	d102      	bne.n	800f236 <_lseek_r+0x1e>
 800f230:	682b      	ldr	r3, [r5, #0]
 800f232:	b103      	cbz	r3, 800f236 <_lseek_r+0x1e>
 800f234:	6023      	str	r3, [r4, #0]
 800f236:	bd38      	pop	{r3, r4, r5, pc}
 800f238:	20000620 	.word	0x20000620

0800f23c <_malloc_usable_size_r>:
 800f23c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f240:	1f18      	subs	r0, r3, #4
 800f242:	2b00      	cmp	r3, #0
 800f244:	bfbc      	itt	lt
 800f246:	580b      	ldrlt	r3, [r1, r0]
 800f248:	18c0      	addlt	r0, r0, r3
 800f24a:	4770      	bx	lr

0800f24c <_read_r>:
 800f24c:	b538      	push	{r3, r4, r5, lr}
 800f24e:	4d07      	ldr	r5, [pc, #28]	; (800f26c <_read_r+0x20>)
 800f250:	4604      	mov	r4, r0
 800f252:	4608      	mov	r0, r1
 800f254:	4611      	mov	r1, r2
 800f256:	2200      	movs	r2, #0
 800f258:	602a      	str	r2, [r5, #0]
 800f25a:	461a      	mov	r2, r3
 800f25c:	f7f3 f8d8 	bl	8002410 <_read>
 800f260:	1c43      	adds	r3, r0, #1
 800f262:	d102      	bne.n	800f26a <_read_r+0x1e>
 800f264:	682b      	ldr	r3, [r5, #0]
 800f266:	b103      	cbz	r3, 800f26a <_read_r+0x1e>
 800f268:	6023      	str	r3, [r4, #0]
 800f26a:	bd38      	pop	{r3, r4, r5, pc}
 800f26c:	20000620 	.word	0x20000620

0800f270 <_init>:
 800f270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f272:	bf00      	nop
 800f274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f276:	bc08      	pop	{r3}
 800f278:	469e      	mov	lr, r3
 800f27a:	4770      	bx	lr

0800f27c <_fini>:
 800f27c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f27e:	bf00      	nop
 800f280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f282:	bc08      	pop	{r3}
 800f284:	469e      	mov	lr, r3
 800f286:	4770      	bx	lr
