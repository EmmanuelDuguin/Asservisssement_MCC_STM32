
NUCLEO-G474RE-AEI_Base_TP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b4c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f0  08007d2c  08007d2c  00017d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800831c  0800831c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800831c  0800831c  0001831c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008324  08008324  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008324  08008324  00018324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008328  08008328  00018328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800832c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000218  20000070  0800839c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000288  0800839c  00020288  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001701b  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f8e  00000000  00000000  000370bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011e0  00000000  00000000  0003a050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001098  00000000  00000000  0003b230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002823b  00000000  00000000  0003c2c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000162cc  00000000  00000000  00064503  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd5d8  00000000  00000000  0007a7cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00177da7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055f0  00000000  00000000  00177df8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	08007d14 	.word	0x08007d14

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	08007d14 	.word	0x08007d14

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b088      	sub	sp, #32
 80005e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ea:	f107 030c 	add.w	r3, r7, #12
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
 80005f6:	60da      	str	r2, [r3, #12]
 80005f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005fa:	4b34      	ldr	r3, [pc, #208]	; (80006cc <MX_GPIO_Init+0xe8>)
 80005fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005fe:	4a33      	ldr	r2, [pc, #204]	; (80006cc <MX_GPIO_Init+0xe8>)
 8000600:	f043 0304 	orr.w	r3, r3, #4
 8000604:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000606:	4b31      	ldr	r3, [pc, #196]	; (80006cc <MX_GPIO_Init+0xe8>)
 8000608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800060a:	f003 0304 	and.w	r3, r3, #4
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000612:	4b2e      	ldr	r3, [pc, #184]	; (80006cc <MX_GPIO_Init+0xe8>)
 8000614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000616:	4a2d      	ldr	r2, [pc, #180]	; (80006cc <MX_GPIO_Init+0xe8>)
 8000618:	f043 0320 	orr.w	r3, r3, #32
 800061c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800061e:	4b2b      	ldr	r3, [pc, #172]	; (80006cc <MX_GPIO_Init+0xe8>)
 8000620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000622:	f003 0320 	and.w	r3, r3, #32
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800062a:	4b28      	ldr	r3, [pc, #160]	; (80006cc <MX_GPIO_Init+0xe8>)
 800062c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800062e:	4a27      	ldr	r2, [pc, #156]	; (80006cc <MX_GPIO_Init+0xe8>)
 8000630:	f043 0301 	orr.w	r3, r3, #1
 8000634:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000636:	4b25      	ldr	r3, [pc, #148]	; (80006cc <MX_GPIO_Init+0xe8>)
 8000638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800063a:	f003 0301 	and.w	r3, r3, #1
 800063e:	603b      	str	r3, [r7, #0]
 8000640:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ISO_RESET_Pin|Motor_Reset_Pin, GPIO_PIN_RESET);
 8000642:	2200      	movs	r2, #0
 8000644:	f44f 7102 	mov.w	r1, #520	; 0x208
 8000648:	4821      	ldr	r0, [pc, #132]	; (80006d0 <MX_GPIO_Init+0xec>)
 800064a:	f001 fa13 	bl	8001a74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800064e:	2200      	movs	r2, #0
 8000650:	2120      	movs	r1, #32
 8000652:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000656:	f001 fa0d 	bl	8001a74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800065a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800065e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000660:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000664:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000666:	2300      	movs	r3, #0
 8000668:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 800066a:	f107 030c 	add.w	r3, r7, #12
 800066e:	4619      	mov	r1, r3
 8000670:	4817      	ldr	r0, [pc, #92]	; (80006d0 <MX_GPIO_Init+0xec>)
 8000672:	f001 f87d 	bl	8001770 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ISO_RESET_Pin|Motor_Reset_Pin;
 8000676:	f44f 7302 	mov.w	r3, #520	; 0x208
 800067a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800067c:	2301      	movs	r3, #1
 800067e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000680:	2300      	movs	r3, #0
 8000682:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000684:	2300      	movs	r3, #0
 8000686:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000688:	f107 030c 	add.w	r3, r7, #12
 800068c:	4619      	mov	r1, r3
 800068e:	4810      	ldr	r0, [pc, #64]	; (80006d0 <MX_GPIO_Init+0xec>)
 8000690:	f001 f86e 	bl	8001770 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000694:	2320      	movs	r3, #32
 8000696:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000698:	2301      	movs	r3, #1
 800069a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069c:	2300      	movs	r3, #0
 800069e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a0:	2300      	movs	r3, #0
 80006a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80006a4:	f107 030c 	add.w	r3, r7, #12
 80006a8:	4619      	mov	r1, r3
 80006aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ae:	f001 f85f 	bl	8001770 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80006b2:	2200      	movs	r2, #0
 80006b4:	2100      	movs	r1, #0
 80006b6:	2028      	movs	r0, #40	; 0x28
 80006b8:	f000 ff72 	bl	80015a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006bc:	2028      	movs	r0, #40	; 0x28
 80006be:	f000 ff89 	bl	80015d4 <HAL_NVIC_EnableIRQ>

}
 80006c2:	bf00      	nop
 80006c4:	3720      	adds	r7, #32
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40021000 	.word	0x40021000
 80006d0:	48000800 	.word	0x48000800

080006d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006d8:	f000 fe51 	bl	800137e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006dc:	f000 f832 	bl	8000744 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006e0:	f7ff ff80 	bl	80005e4 <MX_GPIO_Init>
  MX_TIM1_Init();
 80006e4:	f000 fc48 	bl	8000f78 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80006e8:	f000 fd74 	bl	80011d4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 80006ec:	2201      	movs	r2, #1
 80006ee:	4911      	ldr	r1, [pc, #68]	; (8000734 <main+0x60>)
 80006f0:	4811      	ldr	r0, [pc, #68]	; (8000738 <main+0x64>)
 80006f2:	f004 f877 	bl	80047e4 <HAL_UART_Receive_IT>
	HAL_Delay(1);
 80006f6:	2001      	movs	r0, #1
 80006f8:	f000 fe78 	bl	80013ec <HAL_Delay>
	shellInit();
 80006fc:	f000 f8d8 	bl	80008b0 <shellInit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		// SuperLoop inside the while(1), only flag changed from interrupt could launch functions
		if(uartRxReceived){
 8000700:	4b0e      	ldr	r3, [pc, #56]	; (800073c <main+0x68>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d00b      	beq.n	8000720 <main+0x4c>
			if(shellGetChar()){
 8000708:	f000 f90a 	bl	8000920 <shellGetChar>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d003      	beq.n	800071a <main+0x46>
				shellExec();
 8000712:	f000 f979 	bl	8000a08 <shellExec>
				shellPrompt();
 8000716:	f000 f8e3 	bl	80008e0 <shellPrompt>
			}
			uartRxReceived = 0;
 800071a:	4b08      	ldr	r3, [pc, #32]	; (800073c <main+0x68>)
 800071c:	2200      	movs	r2, #0
 800071e:	701a      	strb	r2, [r3, #0]
		}
		if (flag){
 8000720:	4b07      	ldr	r3, [pc, #28]	; (8000740 <main+0x6c>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d0eb      	beq.n	8000700 <main+0x2c>
			motorPowerOn();
 8000728:	f000 f87e 	bl	8000828 <motorPowerOn>
			flag=0;
 800072c:	4b04      	ldr	r3, [pc, #16]	; (8000740 <main+0x6c>)
 800072e:	2200      	movs	r2, #0
 8000730:	701a      	strb	r2, [r3, #0]
		if(uartRxReceived){
 8000732:	e7e5      	b.n	8000700 <main+0x2c>
 8000734:	2000019c 	.word	0x2000019c
 8000738:	200001e4 	.word	0x200001e4
 800073c:	20000198 	.word	0x20000198
 8000740:	2000008c 	.word	0x2000008c

08000744 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b094      	sub	sp, #80	; 0x50
 8000748:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800074a:	f107 0318 	add.w	r3, r7, #24
 800074e:	2238      	movs	r2, #56	; 0x38
 8000750:	2100      	movs	r1, #0
 8000752:	4618      	mov	r0, r3
 8000754:	f006 f804 	bl	8006760 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000758:	1d3b      	adds	r3, r7, #4
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	605a      	str	r2, [r3, #4]
 8000760:	609a      	str	r2, [r3, #8]
 8000762:	60da      	str	r2, [r3, #12]
 8000764:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000766:	2000      	movs	r0, #0
 8000768:	f001 f9ce 	bl	8001b08 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800076c:	2301      	movs	r3, #1
 800076e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000770:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000774:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000776:	2302      	movs	r3, #2
 8000778:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800077a:	2303      	movs	r3, #3
 800077c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 800077e:	2306      	movs	r3, #6
 8000780:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000782:	2355      	movs	r3, #85	; 0x55
 8000784:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000786:	2302      	movs	r3, #2
 8000788:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800078a:	2302      	movs	r3, #2
 800078c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800078e:	2302      	movs	r3, #2
 8000790:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000792:	f107 0318 	add.w	r3, r7, #24
 8000796:	4618      	mov	r0, r3
 8000798:	f001 fa6a 	bl	8001c70 <HAL_RCC_OscConfig>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80007a2:	f000 f83b 	bl	800081c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a6:	230f      	movs	r3, #15
 80007a8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007aa:	2303      	movs	r3, #3
 80007ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ae:	2300      	movs	r3, #0
 80007b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007b2:	2300      	movs	r3, #0
 80007b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007b6:	2300      	movs	r3, #0
 80007b8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007ba:	1d3b      	adds	r3, r7, #4
 80007bc:	2104      	movs	r1, #4
 80007be:	4618      	mov	r0, r3
 80007c0:	f001 fd6e 	bl	80022a0 <HAL_RCC_ClockConfig>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80007ca:	f000 f827 	bl	800081c <Error_Handler>
  }
}
 80007ce:	bf00      	nop
 80007d0:	3750      	adds	r7, #80	; 0x50
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
	...

080007d8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	80fb      	strh	r3, [r7, #6]
	flag=1;
 80007e2:	4b04      	ldr	r3, [pc, #16]	; (80007f4 <HAL_GPIO_EXTI_Callback+0x1c>)
 80007e4:	2201      	movs	r2, #1
 80007e6:	701a      	strb	r2, [r3, #0]
}
 80007e8:	bf00      	nop
 80007ea:	370c      	adds	r7, #12
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr
 80007f4:	2000008c 	.word	0x2000008c

080007f8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a04      	ldr	r2, [pc, #16]	; (8000818 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000806:	4293      	cmp	r3, r2
 8000808:	d101      	bne.n	800080e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800080a:	f000 fdd1 	bl	80013b0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */


  /* USER CODE END Callback 1 */
}
 800080e:	bf00      	nop
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	40001000 	.word	0x40001000

0800081c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000820:	b672      	cpsid	i
}
 8000822:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000824:	e7fe      	b.n	8000824 <Error_Handler+0x8>
	...

08000828 <motorPowerOn>:

/**
 * @brief  Switch on the motor driver
 * @retval None
 */
void motorPowerOn(void){
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin,GPIO_PIN_SET); // just for test, you can delete it
 800082e:	2201      	movs	r2, #1
 8000830:	2108      	movs	r1, #8
 8000832:	4812      	ldr	r0, [pc, #72]	; (800087c <motorPowerOn+0x54>)
 8000834:	f001 f91e 	bl	8001a74 <HAL_GPIO_WritePin>
	for(int i=0;i<30;i++){}
 8000838:	2300      	movs	r3, #0
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	e002      	b.n	8000844 <motorPowerOn+0x1c>
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	3301      	adds	r3, #1
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	2b1d      	cmp	r3, #29
 8000848:	ddf9      	ble.n	800083e <motorPowerOn+0x16>
	HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin,GPIO_PIN_RESET);
 800084a:	2200      	movs	r2, #0
 800084c:	2108      	movs	r1, #8
 800084e:	480b      	ldr	r0, [pc, #44]	; (800087c <motorPowerOn+0x54>)
 8000850:	f001 f910 	bl	8001a74 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8000854:	2100      	movs	r1, #0
 8000856:	480a      	ldr	r0, [pc, #40]	; (8000880 <motorPowerOn+0x58>)
 8000858:	f002 faf0 	bl	8002e3c <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_1);
 800085c:	2100      	movs	r1, #0
 800085e:	4808      	ldr	r0, [pc, #32]	; (8000880 <motorPowerOn+0x58>)
 8000860:	f003 fc64 	bl	800412c <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 8000864:	2104      	movs	r1, #4
 8000866:	4806      	ldr	r0, [pc, #24]	; (8000880 <motorPowerOn+0x58>)
 8000868:	f002 fae8 	bl	8002e3c <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_2);
 800086c:	2104      	movs	r1, #4
 800086e:	4804      	ldr	r0, [pc, #16]	; (8000880 <motorPowerOn+0x58>)
 8000870:	f003 fc5c 	bl	800412c <HAL_TIMEx_PWMN_Start>
}
 8000874:	bf00      	nop
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	48000800 	.word	0x48000800
 8000880:	2000014c 	.word	0x2000014c

08000884 <motorPowerOff>:

/**
 * @brief  Switch off the motor driver
 * @retval None
 */
void motorPowerOff(void){
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); // just for test, you can delete it
 8000888:	2120      	movs	r1, #32
 800088a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800088e:	f001 f909 	bl	8001aa4 <HAL_GPIO_TogglePin>
}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}

08000896 <motorSetSpeed>:
/**
 * @brief  Set the motor speed
 * @param  speed : target speed of the motor
 * @retval None
 */
void motorSetSpeed(int speed){
 8000896:	b580      	push	{r7, lr}
 8000898:	b082      	sub	sp, #8
 800089a:	af00      	add	r7, sp, #0
 800089c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); // just for test, you can delete it
 800089e:	2120      	movs	r1, #32
 80008a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008a4:	f001 f8fe 	bl	8001aa4 <HAL_GPIO_TogglePin>
}
 80008a8:	bf00      	nop
 80008aa:	3708      	adds	r7, #8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}

080008b0 <shellInit>:

/**
  * @brief  Send a stating message
  * @retval None
  */
void shellInit(void){
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, started, sizeof(started), HAL_MAX_DELAY);
 80008b4:	f04f 33ff 	mov.w	r3, #4294967295
 80008b8:	226c      	movs	r2, #108	; 0x6c
 80008ba:	4906      	ldr	r1, [pc, #24]	; (80008d4 <shellInit+0x24>)
 80008bc:	4806      	ldr	r0, [pc, #24]	; (80008d8 <shellInit+0x28>)
 80008be:	f003 fefa 	bl	80046b6 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 80008c2:	f04f 33ff 	mov.w	r3, #4294967295
 80008c6:	221a      	movs	r2, #26
 80008c8:	4904      	ldr	r1, [pc, #16]	; (80008dc <shellInit+0x2c>)
 80008ca:	4803      	ldr	r0, [pc, #12]	; (80008d8 <shellInit+0x28>)
 80008cc:	f003 fef3 	bl	80046b6 <HAL_UART_Transmit>
}
 80008d0:	bf00      	nop
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	08007da0 	.word	0x08007da0
 80008d8:	200001e4 	.word	0x200001e4
 80008dc:	08007d84 	.word	0x08007d84

080008e0 <shellPrompt>:

/**
  * @brief  Send the prompt
  * @retval None
  */
void shellPrompt(void){
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 80008e4:	f04f 33ff 	mov.w	r3, #4294967295
 80008e8:	221a      	movs	r2, #26
 80008ea:	4903      	ldr	r1, [pc, #12]	; (80008f8 <shellPrompt+0x18>)
 80008ec:	4803      	ldr	r0, [pc, #12]	; (80008fc <shellPrompt+0x1c>)
 80008ee:	f003 fee2 	bl	80046b6 <HAL_UART_Transmit>
}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	08007d84 	.word	0x08007d84
 80008fc:	200001e4 	.word	0x200001e4

08000900 <shellCmdNotFound>:

/**
  * @brief  Send the default message if the command is not found
  * @retval None
  */
void shellCmdNotFound(void){
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8000904:	f04f 33ff 	mov.w	r3, #4294967295
 8000908:	2214      	movs	r2, #20
 800090a:	4903      	ldr	r1, [pc, #12]	; (8000918 <shellCmdNotFound+0x18>)
 800090c:	4803      	ldr	r0, [pc, #12]	; (800091c <shellCmdNotFound+0x1c>)
 800090e:	f003 fed2 	bl	80046b6 <HAL_UART_Transmit>
}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	08008080 	.word	0x08008080
 800091c:	200001e4 	.word	0x200001e4

08000920 <shellGetChar>:

/**
  * @brief  Function called for saving the new character and call and setup argc and argv variable if ENTER is pressed
  * @retval 1 if a new command is available, 0 if not.
  */
uint8_t shellGetChar(void){
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
	uint8_t newCmdReady = 0;
 8000926:	2300      	movs	r3, #0
 8000928:	71fb      	strb	r3, [r7, #7]
	char* token;

	switch(uartRxBuffer[0]){
 800092a:	4b2f      	ldr	r3, [pc, #188]	; (80009e8 <shellGetChar+0xc8>)
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	2b08      	cmp	r3, #8
 8000930:	d030      	beq.n	8000994 <shellGetChar+0x74>
 8000932:	2b0d      	cmp	r3, #13
 8000934:	d140      	bne.n	80009b8 <shellGetChar+0x98>
		// If Enter, update argc and argv
	case ASCII_CR:
		HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 8000936:	f04f 33ff 	mov.w	r3, #4294967295
 800093a:	2203      	movs	r2, #3
 800093c:	492b      	ldr	r1, [pc, #172]	; (80009ec <shellGetChar+0xcc>)
 800093e:	482c      	ldr	r0, [pc, #176]	; (80009f0 <shellGetChar+0xd0>)
 8000940:	f003 feb9 	bl	80046b6 <HAL_UART_Transmit>
		cmdBuffer[idxCmd] = '\0';
 8000944:	4b2b      	ldr	r3, [pc, #172]	; (80009f4 <shellGetChar+0xd4>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	461a      	mov	r2, r3
 800094a:	4b2b      	ldr	r3, [pc, #172]	; (80009f8 <shellGetChar+0xd8>)
 800094c:	2100      	movs	r1, #0
 800094e:	5499      	strb	r1, [r3, r2]
		argc = 0;
 8000950:	4b2a      	ldr	r3, [pc, #168]	; (80009fc <shellGetChar+0xdc>)
 8000952:	2200      	movs	r2, #0
 8000954:	701a      	strb	r2, [r3, #0]
		token = (char*)strtok(cmdBuffer, " ");
 8000956:	492a      	ldr	r1, [pc, #168]	; (8000a00 <shellGetChar+0xe0>)
 8000958:	4827      	ldr	r0, [pc, #156]	; (80009f8 <shellGetChar+0xd8>)
 800095a:	f005 ff3d 	bl	80067d8 <strtok>
 800095e:	6038      	str	r0, [r7, #0]
		while(token!=NULL){
 8000960:	e00f      	b.n	8000982 <shellGetChar+0x62>
			argv[argc++] = token;
 8000962:	4b26      	ldr	r3, [pc, #152]	; (80009fc <shellGetChar+0xdc>)
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	1c5a      	adds	r2, r3, #1
 8000968:	b2d1      	uxtb	r1, r2
 800096a:	4a24      	ldr	r2, [pc, #144]	; (80009fc <shellGetChar+0xdc>)
 800096c:	7011      	strb	r1, [r2, #0]
 800096e:	4619      	mov	r1, r3
 8000970:	4a24      	ldr	r2, [pc, #144]	; (8000a04 <shellGetChar+0xe4>)
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			token = (char*)strtok(NULL, " ");
 8000978:	4921      	ldr	r1, [pc, #132]	; (8000a00 <shellGetChar+0xe0>)
 800097a:	2000      	movs	r0, #0
 800097c:	f005 ff2c 	bl	80067d8 <strtok>
 8000980:	6038      	str	r0, [r7, #0]
		while(token!=NULL){
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d1ec      	bne.n	8000962 <shellGetChar+0x42>
		}

		idxCmd = 0;
 8000988:	4b1a      	ldr	r3, [pc, #104]	; (80009f4 <shellGetChar+0xd4>)
 800098a:	2200      	movs	r2, #0
 800098c:	701a      	strb	r2, [r3, #0]
		newCmdReady = 1;
 800098e:	2301      	movs	r3, #1
 8000990:	71fb      	strb	r3, [r7, #7]
		break;
 8000992:	e023      	b.n	80009dc <shellGetChar+0xbc>
		// Delete last character if "return" is pressed
	case ASCII_BS:
		cmdBuffer[idxCmd--] = '\0';
 8000994:	4b17      	ldr	r3, [pc, #92]	; (80009f4 <shellGetChar+0xd4>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	1e5a      	subs	r2, r3, #1
 800099a:	b2d1      	uxtb	r1, r2
 800099c:	4a15      	ldr	r2, [pc, #84]	; (80009f4 <shellGetChar+0xd4>)
 800099e:	7011      	strb	r1, [r2, #0]
 80009a0:	461a      	mov	r2, r3
 80009a2:	4b15      	ldr	r3, [pc, #84]	; (80009f8 <shellGetChar+0xd8>)
 80009a4:	2100      	movs	r1, #0
 80009a6:	5499      	strb	r1, [r3, r2]
		HAL_UART_Transmit(&huart2, uartRxBuffer, 1, HAL_MAX_DELAY);
 80009a8:	f04f 33ff 	mov.w	r3, #4294967295
 80009ac:	2201      	movs	r2, #1
 80009ae:	490e      	ldr	r1, [pc, #56]	; (80009e8 <shellGetChar+0xc8>)
 80009b0:	480f      	ldr	r0, [pc, #60]	; (80009f0 <shellGetChar+0xd0>)
 80009b2:	f003 fe80 	bl	80046b6 <HAL_UART_Transmit>
		break;
 80009b6:	e011      	b.n	80009dc <shellGetChar+0xbc>
		// Default state : add new character to the command buffer
	default:
		cmdBuffer[idxCmd++] = uartRxBuffer[0];
 80009b8:	4b0e      	ldr	r3, [pc, #56]	; (80009f4 <shellGetChar+0xd4>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	1c5a      	adds	r2, r3, #1
 80009be:	b2d1      	uxtb	r1, r2
 80009c0:	4a0c      	ldr	r2, [pc, #48]	; (80009f4 <shellGetChar+0xd4>)
 80009c2:	7011      	strb	r1, [r2, #0]
 80009c4:	461a      	mov	r2, r3
 80009c6:	4b08      	ldr	r3, [pc, #32]	; (80009e8 <shellGetChar+0xc8>)
 80009c8:	7819      	ldrb	r1, [r3, #0]
 80009ca:	4b0b      	ldr	r3, [pc, #44]	; (80009f8 <shellGetChar+0xd8>)
 80009cc:	5499      	strb	r1, [r3, r2]
		HAL_UART_Transmit(&huart2, uartRxBuffer, 1, HAL_MAX_DELAY);
 80009ce:	f04f 33ff 	mov.w	r3, #4294967295
 80009d2:	2201      	movs	r2, #1
 80009d4:	4904      	ldr	r1, [pc, #16]	; (80009e8 <shellGetChar+0xc8>)
 80009d6:	4806      	ldr	r0, [pc, #24]	; (80009f0 <shellGetChar+0xd0>)
 80009d8:	f003 fe6d 	bl	80046b6 <HAL_UART_Transmit>
	}

	return newCmdReady;
 80009dc:	79fb      	ldrb	r3, [r7, #7]
}
 80009de:	4618      	mov	r0, r3
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	2000019c 	.word	0x2000019c
 80009ec:	08007e0c 	.word	0x08007e0c
 80009f0:	200001e4 	.word	0x200001e4
 80009f4:	200000d0 	.word	0x200000d0
 80009f8:	20000090 	.word	0x20000090
 80009fc:	200000f8 	.word	0x200000f8
 8000a00:	08007d2c 	.word	0x08007d2c
 8000a04:	200000d4 	.word	0x200000d4

08000a08 <shellExec>:

/**
  * @brief  Call function depends of the value of argc and argv
  * @retval None
  */
void shellExec(void){
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
	if(strcmp(argv[0],"set")==0){
 8000a0c:	4b6c      	ldr	r3, [pc, #432]	; (8000bc0 <shellExec+0x1b8>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	496c      	ldr	r1, [pc, #432]	; (8000bc4 <shellExec+0x1bc>)
 8000a12:	4618      	mov	r0, r3
 8000a14:	f7ff fc04 	bl	8000220 <strcmp>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d16f      	bne.n	8000afe <shellExec+0xf6>
		if(strcmp(argv[1],"PA5")==0 && ((strcmp(argv[2],"0")==0)||(strcmp(argv[2],"1")==0)) ){
 8000a1e:	4b68      	ldr	r3, [pc, #416]	; (8000bc0 <shellExec+0x1b8>)
 8000a20:	685b      	ldr	r3, [r3, #4]
 8000a22:	4969      	ldr	r1, [pc, #420]	; (8000bc8 <shellExec+0x1c0>)
 8000a24:	4618      	mov	r0, r3
 8000a26:	f7ff fbfb 	bl	8000220 <strcmp>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d137      	bne.n	8000aa0 <shellExec+0x98>
 8000a30:	4b63      	ldr	r3, [pc, #396]	; (8000bc0 <shellExec+0x1b8>)
 8000a32:	689b      	ldr	r3, [r3, #8]
 8000a34:	4965      	ldr	r1, [pc, #404]	; (8000bcc <shellExec+0x1c4>)
 8000a36:	4618      	mov	r0, r3
 8000a38:	f7ff fbf2 	bl	8000220 <strcmp>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d008      	beq.n	8000a54 <shellExec+0x4c>
 8000a42:	4b5f      	ldr	r3, [pc, #380]	; (8000bc0 <shellExec+0x1b8>)
 8000a44:	689b      	ldr	r3, [r3, #8]
 8000a46:	4962      	ldr	r1, [pc, #392]	; (8000bd0 <shellExec+0x1c8>)
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f7ff fbe9 	bl	8000220 <strcmp>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d125      	bne.n	8000aa0 <shellExec+0x98>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, atoi(argv[2]));
 8000a54:	4b5a      	ldr	r3, [pc, #360]	; (8000bc0 <shellExec+0x1b8>)
 8000a56:	689b      	ldr	r3, [r3, #8]
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f005 fe53 	bl	8006704 <atoi>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	461a      	mov	r2, r3
 8000a64:	2120      	movs	r1, #32
 8000a66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a6a:	f001 f803 	bl	8001a74 <HAL_GPIO_WritePin>
			stringSize = snprintf((char*)uartTxBuffer,UART_TX_BUFFER_SIZE,"Switch on/off led : %d\r\n",atoi(argv[2]));
 8000a6e:	4b54      	ldr	r3, [pc, #336]	; (8000bc0 <shellExec+0x1b8>)
 8000a70:	689b      	ldr	r3, [r3, #8]
 8000a72:	4618      	mov	r0, r3
 8000a74:	f005 fe46 	bl	8006704 <atoi>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	4a56      	ldr	r2, [pc, #344]	; (8000bd4 <shellExec+0x1cc>)
 8000a7c:	2140      	movs	r1, #64	; 0x40
 8000a7e:	4856      	ldr	r0, [pc, #344]	; (8000bd8 <shellExec+0x1d0>)
 8000a80:	f005 fe76 	bl	8006770 <sniprintf>
 8000a84:	4603      	mov	r3, r0
 8000a86:	b2da      	uxtb	r2, r3
 8000a88:	4b54      	ldr	r3, [pc, #336]	; (8000bdc <shellExec+0x1d4>)
 8000a8a:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, uartTxBuffer, stringSize, HAL_MAX_DELAY);
 8000a8c:	4b53      	ldr	r3, [pc, #332]	; (8000bdc <shellExec+0x1d4>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	b29a      	uxth	r2, r3
 8000a92:	f04f 33ff 	mov.w	r3, #4294967295
 8000a96:	4950      	ldr	r1, [pc, #320]	; (8000bd8 <shellExec+0x1d0>)
 8000a98:	4851      	ldr	r0, [pc, #324]	; (8000be0 <shellExec+0x1d8>)
 8000a9a:	f003 fe0c 	bl	80046b6 <HAL_UART_Transmit>
 8000a9e:	e08d      	b.n	8000bbc <shellExec+0x1b4>
		}
		else if(strcmp(argv[1],"speed")==0){
 8000aa0:	4b47      	ldr	r3, [pc, #284]	; (8000bc0 <shellExec+0x1b8>)
 8000aa2:	685b      	ldr	r3, [r3, #4]
 8000aa4:	494f      	ldr	r1, [pc, #316]	; (8000be4 <shellExec+0x1dc>)
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f7ff fbba 	bl	8000220 <strcmp>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d122      	bne.n	8000af8 <shellExec+0xf0>
			if(atoi(argv[2])==0 && strcmp(argv[2],"0")!=0){
 8000ab2:	4b43      	ldr	r3, [pc, #268]	; (8000bc0 <shellExec+0x1b8>)
 8000ab4:	689b      	ldr	r3, [r3, #8]
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f005 fe24 	bl	8006704 <atoi>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d110      	bne.n	8000ae4 <shellExec+0xdc>
 8000ac2:	4b3f      	ldr	r3, [pc, #252]	; (8000bc0 <shellExec+0x1b8>)
 8000ac4:	689b      	ldr	r3, [r3, #8]
 8000ac6:	4941      	ldr	r1, [pc, #260]	; (8000bcc <shellExec+0x1c4>)
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f7ff fba9 	bl	8000220 <strcmp>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d007      	beq.n	8000ae4 <shellExec+0xdc>
				HAL_UART_Transmit(&huart2, motorSpeedInst, sizeof(motorSpeedInst), HAL_MAX_DELAY);
 8000ad4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ad8:	2230      	movs	r2, #48	; 0x30
 8000ada:	4943      	ldr	r1, [pc, #268]	; (8000be8 <shellExec+0x1e0>)
 8000adc:	4840      	ldr	r0, [pc, #256]	; (8000be0 <shellExec+0x1d8>)
 8000ade:	f003 fdea 	bl	80046b6 <HAL_UART_Transmit>
 8000ae2:	e06b      	b.n	8000bbc <shellExec+0x1b4>
			}
			else{
				motorSetSpeed(atoi(argv[2]));
 8000ae4:	4b36      	ldr	r3, [pc, #216]	; (8000bc0 <shellExec+0x1b8>)
 8000ae6:	689b      	ldr	r3, [r3, #8]
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f005 fe0b 	bl	8006704 <atoi>
 8000aee:	4603      	mov	r3, r0
 8000af0:	4618      	mov	r0, r3
 8000af2:	f7ff fed0 	bl	8000896 <motorSetSpeed>
		motorPowerOff();
	}
	else{
		shellCmdNotFound();
	}
}
 8000af6:	e061      	b.n	8000bbc <shellExec+0x1b4>
			shellCmdNotFound();
 8000af8:	f7ff ff02 	bl	8000900 <shellCmdNotFound>
}
 8000afc:	e05e      	b.n	8000bbc <shellExec+0x1b4>
	else if(strcmp(argv[0],"help")==0)
 8000afe:	4b30      	ldr	r3, [pc, #192]	; (8000bc0 <shellExec+0x1b8>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	493a      	ldr	r1, [pc, #232]	; (8000bec <shellExec+0x1e4>)
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff fb8b 	bl	8000220 <strcmp>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d108      	bne.n	8000b22 <shellExec+0x11a>
		HAL_UART_Transmit(&huart2, help, sizeof(help), HAL_MAX_DELAY);
 8000b10:	f04f 33ff 	mov.w	r3, #4294967295
 8000b14:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b18:	4935      	ldr	r1, [pc, #212]	; (8000bf0 <shellExec+0x1e8>)
 8000b1a:	4831      	ldr	r0, [pc, #196]	; (8000be0 <shellExec+0x1d8>)
 8000b1c:	f003 fdcb 	bl	80046b6 <HAL_UART_Transmit>
}
 8000b20:	e04c      	b.n	8000bbc <shellExec+0x1b4>
	else if(strcmp(argv[0],"pinout")==0)
 8000b22:	4b27      	ldr	r3, [pc, #156]	; (8000bc0 <shellExec+0x1b8>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4933      	ldr	r1, [pc, #204]	; (8000bf4 <shellExec+0x1ec>)
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f7ff fb79 	bl	8000220 <strcmp>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d108      	bne.n	8000b46 <shellExec+0x13e>
		HAL_UART_Transmit(&huart2, pinout, sizeof(pinout), HAL_MAX_DELAY);
 8000b34:	f04f 33ff 	mov.w	r3, #4294967295
 8000b38:	f44f 7281 	mov.w	r2, #258	; 0x102
 8000b3c:	492e      	ldr	r1, [pc, #184]	; (8000bf8 <shellExec+0x1f0>)
 8000b3e:	4828      	ldr	r0, [pc, #160]	; (8000be0 <shellExec+0x1d8>)
 8000b40:	f003 fdb9 	bl	80046b6 <HAL_UART_Transmit>
}
 8000b44:	e03a      	b.n	8000bbc <shellExec+0x1b4>
	else if((strcmp(argv[0],"power")==0)&&(strcmp(argv[1],"on")==0))
 8000b46:	4b1e      	ldr	r3, [pc, #120]	; (8000bc0 <shellExec+0x1b8>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	492c      	ldr	r1, [pc, #176]	; (8000bfc <shellExec+0x1f4>)
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f7ff fb67 	bl	8000220 <strcmp>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d112      	bne.n	8000b7e <shellExec+0x176>
 8000b58:	4b19      	ldr	r3, [pc, #100]	; (8000bc0 <shellExec+0x1b8>)
 8000b5a:	685b      	ldr	r3, [r3, #4]
 8000b5c:	4928      	ldr	r1, [pc, #160]	; (8000c00 <shellExec+0x1f8>)
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f7ff fb5e 	bl	8000220 <strcmp>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d109      	bne.n	8000b7e <shellExec+0x176>
		HAL_UART_Transmit(&huart2, powerOn, sizeof(powerOn), HAL_MAX_DELAY);
 8000b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b6e:	221a      	movs	r2, #26
 8000b70:	4924      	ldr	r1, [pc, #144]	; (8000c04 <shellExec+0x1fc>)
 8000b72:	481b      	ldr	r0, [pc, #108]	; (8000be0 <shellExec+0x1d8>)
 8000b74:	f003 fd9f 	bl	80046b6 <HAL_UART_Transmit>
		motorPowerOn();
 8000b78:	f7ff fe56 	bl	8000828 <motorPowerOn>
 8000b7c:	e01e      	b.n	8000bbc <shellExec+0x1b4>
	else if((strcmp(argv[0],"power")==0)&&(strcmp(argv[1],"off")==0))
 8000b7e:	4b10      	ldr	r3, [pc, #64]	; (8000bc0 <shellExec+0x1b8>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	491e      	ldr	r1, [pc, #120]	; (8000bfc <shellExec+0x1f4>)
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff fb4b 	bl	8000220 <strcmp>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d112      	bne.n	8000bb6 <shellExec+0x1ae>
 8000b90:	4b0b      	ldr	r3, [pc, #44]	; (8000bc0 <shellExec+0x1b8>)
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	491c      	ldr	r1, [pc, #112]	; (8000c08 <shellExec+0x200>)
 8000b96:	4618      	mov	r0, r3
 8000b98:	f7ff fb42 	bl	8000220 <strcmp>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d109      	bne.n	8000bb6 <shellExec+0x1ae>
		HAL_UART_Transmit(&huart2, powerOff, sizeof(powerOff), HAL_MAX_DELAY);
 8000ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba6:	221b      	movs	r2, #27
 8000ba8:	4918      	ldr	r1, [pc, #96]	; (8000c0c <shellExec+0x204>)
 8000baa:	480d      	ldr	r0, [pc, #52]	; (8000be0 <shellExec+0x1d8>)
 8000bac:	f003 fd83 	bl	80046b6 <HAL_UART_Transmit>
		motorPowerOff();
 8000bb0:	f7ff fe68 	bl	8000884 <motorPowerOff>
 8000bb4:	e002      	b.n	8000bbc <shellExec+0x1b4>
		shellCmdNotFound();
 8000bb6:	f7ff fea3 	bl	8000900 <shellCmdNotFound>
}
 8000bba:	e7ff      	b.n	8000bbc <shellExec+0x1b4>
 8000bbc:	bf00      	nop
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	200000d4 	.word	0x200000d4
 8000bc4:	08007d30 	.word	0x08007d30
 8000bc8:	08007d34 	.word	0x08007d34
 8000bcc:	08007d38 	.word	0x08007d38
 8000bd0:	08007d3c 	.word	0x08007d3c
 8000bd4:	08007d40 	.word	0x08007d40
 8000bd8:	200001a0 	.word	0x200001a0
 8000bdc:	200001e0 	.word	0x200001e0
 8000be0:	200001e4 	.word	0x200001e4
 8000be4:	08007d5c 	.word	0x08007d5c
 8000be8:	08008050 	.word	0x08008050
 8000bec:	08007d64 	.word	0x08007d64
 8000bf0:	08007e10 	.word	0x08007e10
 8000bf4:	08007d6c 	.word	0x08007d6c
 8000bf8:	08007f14 	.word	0x08007f14
 8000bfc:	08007d74 	.word	0x08007d74
 8000c00:	08007d7c 	.word	0x08007d7c
 8000c04:	08008018 	.word	0x08008018
 8000c08:	08007d80 	.word	0x08007d80
 8000c0c:	08008034 	.word	0x08008034

08000c10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c16:	4b0f      	ldr	r3, [pc, #60]	; (8000c54 <HAL_MspInit+0x44>)
 8000c18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c1a:	4a0e      	ldr	r2, [pc, #56]	; (8000c54 <HAL_MspInit+0x44>)
 8000c1c:	f043 0301 	orr.w	r3, r3, #1
 8000c20:	6613      	str	r3, [r2, #96]	; 0x60
 8000c22:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <HAL_MspInit+0x44>)
 8000c24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c26:	f003 0301 	and.w	r3, r3, #1
 8000c2a:	607b      	str	r3, [r7, #4]
 8000c2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c2e:	4b09      	ldr	r3, [pc, #36]	; (8000c54 <HAL_MspInit+0x44>)
 8000c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c32:	4a08      	ldr	r2, [pc, #32]	; (8000c54 <HAL_MspInit+0x44>)
 8000c34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c38:	6593      	str	r3, [r2, #88]	; 0x58
 8000c3a:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <HAL_MspInit+0x44>)
 8000c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c42:	603b      	str	r3, [r7, #0]
 8000c44:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000c46:	f001 f803 	bl	8001c50 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40021000 	.word	0x40021000

08000c58 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b08c      	sub	sp, #48	; 0x30
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c60:	2300      	movs	r3, #0
 8000c62:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8000c64:	2300      	movs	r3, #0
 8000c66:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c6e:	4b2d      	ldr	r3, [pc, #180]	; (8000d24 <HAL_InitTick+0xcc>)
 8000c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c72:	4a2c      	ldr	r2, [pc, #176]	; (8000d24 <HAL_InitTick+0xcc>)
 8000c74:	f043 0310 	orr.w	r3, r3, #16
 8000c78:	6593      	str	r3, [r2, #88]	; 0x58
 8000c7a:	4b2a      	ldr	r3, [pc, #168]	; (8000d24 <HAL_InitTick+0xcc>)
 8000c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c7e:	f003 0310 	and.w	r3, r3, #16
 8000c82:	60bb      	str	r3, [r7, #8]
 8000c84:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c86:	f107 020c 	add.w	r2, r7, #12
 8000c8a:	f107 0310 	add.w	r3, r7, #16
 8000c8e:	4611      	mov	r1, r2
 8000c90:	4618      	mov	r0, r3
 8000c92:	f001 fcdb 	bl	800264c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c96:	f001 fcad 	bl	80025f4 <HAL_RCC_GetPCLK1Freq>
 8000c9a:	62b8      	str	r0, [r7, #40]	; 0x28
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c9e:	4a22      	ldr	r2, [pc, #136]	; (8000d28 <HAL_InitTick+0xd0>)
 8000ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ca4:	0c9b      	lsrs	r3, r3, #18
 8000ca6:	3b01      	subs	r3, #1
 8000ca8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000caa:	4b20      	ldr	r3, [pc, #128]	; (8000d2c <HAL_InitTick+0xd4>)
 8000cac:	4a20      	ldr	r2, [pc, #128]	; (8000d30 <HAL_InitTick+0xd8>)
 8000cae:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000cb0:	4b1e      	ldr	r3, [pc, #120]	; (8000d2c <HAL_InitTick+0xd4>)
 8000cb2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cb6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000cb8:	4a1c      	ldr	r2, [pc, #112]	; (8000d2c <HAL_InitTick+0xd4>)
 8000cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cbc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000cbe:	4b1b      	ldr	r3, [pc, #108]	; (8000d2c <HAL_InitTick+0xd4>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cc4:	4b19      	ldr	r3, [pc, #100]	; (8000d2c <HAL_InitTick+0xd4>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000cca:	4818      	ldr	r0, [pc, #96]	; (8000d2c <HAL_InitTick+0xd4>)
 8000ccc:	f001 ff84 	bl	8002bd8 <HAL_TIM_Base_Init>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000cd6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d11b      	bne.n	8000d16 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000cde:	4813      	ldr	r0, [pc, #76]	; (8000d2c <HAL_InitTick+0xd4>)
 8000ce0:	f001 ffd2 	bl	8002c88 <HAL_TIM_Base_Start_IT>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000cea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d111      	bne.n	8000d16 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cf2:	2036      	movs	r0, #54	; 0x36
 8000cf4:	f000 fc6e 	bl	80015d4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2b0f      	cmp	r3, #15
 8000cfc:	d808      	bhi.n	8000d10 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	6879      	ldr	r1, [r7, #4]
 8000d02:	2036      	movs	r0, #54	; 0x36
 8000d04:	f000 fc4c 	bl	80015a0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d08:	4a0a      	ldr	r2, [pc, #40]	; (8000d34 <HAL_InitTick+0xdc>)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6013      	str	r3, [r2, #0]
 8000d0e:	e002      	b.n	8000d16 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8000d10:	2301      	movs	r3, #1
 8000d12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000d16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3730      	adds	r7, #48	; 0x30
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40021000 	.word	0x40021000
 8000d28:	431bde83 	.word	0x431bde83
 8000d2c:	200000fc 	.word	0x200000fc
 8000d30:	40001000 	.word	0x40001000
 8000d34:	20000004 	.word	0x20000004

08000d38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d3c:	e7fe      	b.n	8000d3c <NMI_Handler+0x4>

08000d3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d42:	e7fe      	b.n	8000d42 <HardFault_Handler+0x4>

08000d44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d48:	e7fe      	b.n	8000d48 <MemManage_Handler+0x4>

08000d4a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d4e:	e7fe      	b.n	8000d4e <BusFault_Handler+0x4>

08000d50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d54:	e7fe      	b.n	8000d54 <UsageFault_Handler+0x4>

08000d56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d56:	b480      	push	{r7}
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr

08000d72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d76:	bf00      	nop
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr

08000d80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
	...

08000d90 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d94:	4802      	ldr	r0, [pc, #8]	; (8000da0 <USART2_IRQHandler+0x10>)
 8000d96:	f003 fd7b 	bl	8004890 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	200001e4 	.word	0x200001e4

08000da4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8000da8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000dac:	f000 fe94 	bl	8001ad8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000db0:	bf00      	nop
 8000db2:	bd80      	pop	{r7, pc}

08000db4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000db8:	4802      	ldr	r0, [pc, #8]	; (8000dc4 <TIM6_DAC_IRQHandler+0x10>)
 8000dba:	f002 f951 	bl	8003060 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	200000fc 	.word	0x200000fc

08000dc8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
	return 1;
 8000dcc:	2301      	movs	r3, #1
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr

08000dd8 <_kill>:

int _kill(int pid, int sig)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000de2:	f005 fc93 	bl	800670c <__errno>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2216      	movs	r2, #22
 8000dea:	601a      	str	r2, [r3, #0]
	return -1;
 8000dec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	3708      	adds	r7, #8
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <_exit>:

void _exit (int status)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000e00:	f04f 31ff 	mov.w	r1, #4294967295
 8000e04:	6878      	ldr	r0, [r7, #4]
 8000e06:	f7ff ffe7 	bl	8000dd8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000e0a:	e7fe      	b.n	8000e0a <_exit+0x12>

08000e0c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b086      	sub	sp, #24
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	60f8      	str	r0, [r7, #12]
 8000e14:	60b9      	str	r1, [r7, #8]
 8000e16:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e18:	2300      	movs	r3, #0
 8000e1a:	617b      	str	r3, [r7, #20]
 8000e1c:	e00a      	b.n	8000e34 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e1e:	f3af 8000 	nop.w
 8000e22:	4601      	mov	r1, r0
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	1c5a      	adds	r2, r3, #1
 8000e28:	60ba      	str	r2, [r7, #8]
 8000e2a:	b2ca      	uxtb	r2, r1
 8000e2c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	3301      	adds	r3, #1
 8000e32:	617b      	str	r3, [r7, #20]
 8000e34:	697a      	ldr	r2, [r7, #20]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	dbf0      	blt.n	8000e1e <_read+0x12>
	}

return len;
 8000e3c:	687b      	ldr	r3, [r7, #4]
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3718      	adds	r7, #24
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e46:	b580      	push	{r7, lr}
 8000e48:	b086      	sub	sp, #24
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	60f8      	str	r0, [r7, #12]
 8000e4e:	60b9      	str	r1, [r7, #8]
 8000e50:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e52:	2300      	movs	r3, #0
 8000e54:	617b      	str	r3, [r7, #20]
 8000e56:	e009      	b.n	8000e6c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	1c5a      	adds	r2, r3, #1
 8000e5c:	60ba      	str	r2, [r7, #8]
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	4618      	mov	r0, r3
 8000e62:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	617b      	str	r3, [r7, #20]
 8000e6c:	697a      	ldr	r2, [r7, #20]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	dbf1      	blt.n	8000e58 <_write+0x12>
	}
	return len;
 8000e74:	687b      	ldr	r3, [r7, #4]
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3718      	adds	r7, #24
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}

08000e7e <_close>:

int _close(int file)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	b083      	sub	sp, #12
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	6078      	str	r0, [r7, #4]
	return -1;
 8000e86:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	370c      	adds	r7, #12
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr

08000e96 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e96:	b480      	push	{r7}
 8000e98:	b083      	sub	sp, #12
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
 8000e9e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ea6:	605a      	str	r2, [r3, #4]
	return 0;
 8000ea8:	2300      	movs	r3, #0
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	370c      	adds	r7, #12
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr

08000eb6 <_isatty>:

int _isatty(int file)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	b083      	sub	sp, #12
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6078      	str	r0, [r7, #4]
	return 1;
 8000ebe:	2301      	movs	r3, #1
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b085      	sub	sp, #20
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	60f8      	str	r0, [r7, #12]
 8000ed4:	60b9      	str	r1, [r7, #8]
 8000ed6:	607a      	str	r2, [r7, #4]
	return 0;
 8000ed8:	2300      	movs	r3, #0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3714      	adds	r7, #20
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
	...

08000ee8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b086      	sub	sp, #24
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ef0:	4a14      	ldr	r2, [pc, #80]	; (8000f44 <_sbrk+0x5c>)
 8000ef2:	4b15      	ldr	r3, [pc, #84]	; (8000f48 <_sbrk+0x60>)
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000efc:	4b13      	ldr	r3, [pc, #76]	; (8000f4c <_sbrk+0x64>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d102      	bne.n	8000f0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f04:	4b11      	ldr	r3, [pc, #68]	; (8000f4c <_sbrk+0x64>)
 8000f06:	4a12      	ldr	r2, [pc, #72]	; (8000f50 <_sbrk+0x68>)
 8000f08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f0a:	4b10      	ldr	r3, [pc, #64]	; (8000f4c <_sbrk+0x64>)
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4413      	add	r3, r2
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	429a      	cmp	r2, r3
 8000f16:	d207      	bcs.n	8000f28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f18:	f005 fbf8 	bl	800670c <__errno>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	220c      	movs	r2, #12
 8000f20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f22:	f04f 33ff 	mov.w	r3, #4294967295
 8000f26:	e009      	b.n	8000f3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f28:	4b08      	ldr	r3, [pc, #32]	; (8000f4c <_sbrk+0x64>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f2e:	4b07      	ldr	r3, [pc, #28]	; (8000f4c <_sbrk+0x64>)
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4413      	add	r3, r2
 8000f36:	4a05      	ldr	r2, [pc, #20]	; (8000f4c <_sbrk+0x64>)
 8000f38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f3a:	68fb      	ldr	r3, [r7, #12]
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3718      	adds	r7, #24
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	20020000 	.word	0x20020000
 8000f48:	00000400 	.word	0x00000400
 8000f4c:	20000148 	.word	0x20000148
 8000f50:	20000288 	.word	0x20000288

08000f54 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f58:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <SystemInit+0x20>)
 8000f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f5e:	4a05      	ldr	r2, [pc, #20]	; (8000f74 <SystemInit+0x20>)
 8000f60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f68:	bf00      	nop
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	e000ed00 	.word	0xe000ed00

08000f78 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b09c      	sub	sp, #112	; 0x70
 8000f7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f7e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	605a      	str	r2, [r3, #4]
 8000f88:	609a      	str	r2, [r3, #8]
 8000f8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f8c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f98:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
 8000fa6:	611a      	str	r2, [r3, #16]
 8000fa8:	615a      	str	r2, [r3, #20]
 8000faa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000fac:	1d3b      	adds	r3, r7, #4
 8000fae:	2234      	movs	r2, #52	; 0x34
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f005 fbd4 	bl	8006760 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000fb8:	4b4d      	ldr	r3, [pc, #308]	; (80010f0 <MX_TIM1_Init+0x178>)
 8000fba:	4a4e      	ldr	r2, [pc, #312]	; (80010f4 <MX_TIM1_Init+0x17c>)
 8000fbc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000fbe:	4b4c      	ldr	r3, [pc, #304]	; (80010f0 <MX_TIM1_Init+0x178>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000fc4:	4b4a      	ldr	r3, [pc, #296]	; (80010f0 <MX_TIM1_Init+0x178>)
 8000fc6:	2220      	movs	r2, #32
 8000fc8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5311;
 8000fca:	4b49      	ldr	r3, [pc, #292]	; (80010f0 <MX_TIM1_Init+0x178>)
 8000fcc:	f241 42bf 	movw	r2, #5311	; 0x14bf
 8000fd0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fd2:	4b47      	ldr	r3, [pc, #284]	; (80010f0 <MX_TIM1_Init+0x178>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fd8:	4b45      	ldr	r3, [pc, #276]	; (80010f0 <MX_TIM1_Init+0x178>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000fde:	4b44      	ldr	r3, [pc, #272]	; (80010f0 <MX_TIM1_Init+0x178>)
 8000fe0:	2280      	movs	r2, #128	; 0x80
 8000fe2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000fe4:	4842      	ldr	r0, [pc, #264]	; (80010f0 <MX_TIM1_Init+0x178>)
 8000fe6:	f001 fdf7 	bl	8002bd8 <HAL_TIM_Base_Init>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000ff0:	f7ff fc14 	bl	800081c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ff4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ff8:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ffa:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000ffe:	4619      	mov	r1, r3
 8001000:	483b      	ldr	r0, [pc, #236]	; (80010f0 <MX_TIM1_Init+0x178>)
 8001002:	f002 fac1 	bl	8003588 <HAL_TIM_ConfigClockSource>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800100c:	f7ff fc06 	bl	800081c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001010:	4837      	ldr	r0, [pc, #220]	; (80010f0 <MX_TIM1_Init+0x178>)
 8001012:	f001 feb1 	bl	8002d78 <HAL_TIM_PWM_Init>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800101c:	f7ff fbfe 	bl	800081c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001020:	2300      	movs	r3, #0
 8001022:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001024:	2300      	movs	r3, #0
 8001026:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001028:	2300      	movs	r3, #0
 800102a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800102c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001030:	4619      	mov	r1, r3
 8001032:	482f      	ldr	r0, [pc, #188]	; (80010f0 <MX_TIM1_Init+0x178>)
 8001034:	f003 f93c 	bl	80042b0 <HAL_TIMEx_MasterConfigSynchronization>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800103e:	f7ff fbed 	bl	800081c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001042:	2360      	movs	r3, #96	; 0x60
 8001044:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 2656;
 8001046:	f44f 6326 	mov.w	r3, #2656	; 0xa60
 800104a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800104c:	2300      	movs	r3, #0
 800104e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001050:	2300      	movs	r3, #0
 8001052:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001054:	2300      	movs	r3, #0
 8001056:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001058:	2300      	movs	r3, #0
 800105a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800105c:	2300      	movs	r3, #0
 800105e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001060:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001064:	2200      	movs	r2, #0
 8001066:	4619      	mov	r1, r3
 8001068:	4821      	ldr	r0, [pc, #132]	; (80010f0 <MX_TIM1_Init+0x178>)
 800106a:	f002 f979 	bl	8003360 <HAL_TIM_PWM_ConfigChannel>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001074:	f7ff fbd2 	bl	800081c <Error_Handler>
  }
  sConfigOC.Pulse = 2655;
 8001078:	f640 235f 	movw	r3, #2655	; 0xa5f
 800107c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800107e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001082:	2204      	movs	r2, #4
 8001084:	4619      	mov	r1, r3
 8001086:	481a      	ldr	r0, [pc, #104]	; (80010f0 <MX_TIM1_Init+0x178>)
 8001088:	f002 f96a 	bl	8003360 <HAL_TIM_PWM_ConfigChannel>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_TIM1_Init+0x11e>
  {
    Error_Handler();
 8001092:	f7ff fbc3 	bl	800081c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001096:	2300      	movs	r3, #0
 8001098:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800109a:	2300      	movs	r3, #0
 800109c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800109e:	2300      	movs	r3, #0
 80010a0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 203;
 80010a2:	23cb      	movs	r3, #203	; 0xcb
 80010a4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010a6:	2300      	movs	r3, #0
 80010a8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010ae:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80010b0:	2300      	movs	r3, #0
 80010b2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80010b4:	2300      	movs	r3, #0
 80010b6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80010b8:	2300      	movs	r3, #0
 80010ba:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80010bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80010c0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80010c2:	2300      	movs	r3, #0
 80010c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80010c6:	2300      	movs	r3, #0
 80010c8:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010ca:	2300      	movs	r3, #0
 80010cc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80010ce:	1d3b      	adds	r3, r7, #4
 80010d0:	4619      	mov	r1, r3
 80010d2:	4807      	ldr	r0, [pc, #28]	; (80010f0 <MX_TIM1_Init+0x178>)
 80010d4:	f003 f982 	bl	80043dc <HAL_TIMEx_ConfigBreakDeadTime>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_TIM1_Init+0x16a>
  {
    Error_Handler();
 80010de:	f7ff fb9d 	bl	800081c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80010e2:	4803      	ldr	r0, [pc, #12]	; (80010f0 <MX_TIM1_Init+0x178>)
 80010e4:	f000 f828 	bl	8001138 <HAL_TIM_MspPostInit>

}
 80010e8:	bf00      	nop
 80010ea:	3770      	adds	r7, #112	; 0x70
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	2000014c 	.word	0x2000014c
 80010f4:	40012c00 	.word	0x40012c00

080010f8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b085      	sub	sp, #20
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a0a      	ldr	r2, [pc, #40]	; (8001130 <HAL_TIM_Base_MspInit+0x38>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d10b      	bne.n	8001122 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800110a:	4b0a      	ldr	r3, [pc, #40]	; (8001134 <HAL_TIM_Base_MspInit+0x3c>)
 800110c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800110e:	4a09      	ldr	r2, [pc, #36]	; (8001134 <HAL_TIM_Base_MspInit+0x3c>)
 8001110:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001114:	6613      	str	r3, [r2, #96]	; 0x60
 8001116:	4b07      	ldr	r3, [pc, #28]	; (8001134 <HAL_TIM_Base_MspInit+0x3c>)
 8001118:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800111a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001122:	bf00      	nop
 8001124:	3714      	adds	r7, #20
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	40012c00 	.word	0x40012c00
 8001134:	40021000 	.word	0x40021000

08001138 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b088      	sub	sp, #32
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001140:	f107 030c 	add.w	r3, r7, #12
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	60da      	str	r2, [r3, #12]
 800114e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a12      	ldr	r2, [pc, #72]	; (80011a0 <HAL_TIM_MspPostInit+0x68>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d11d      	bne.n	8001196 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800115a:	4b12      	ldr	r3, [pc, #72]	; (80011a4 <HAL_TIM_MspPostInit+0x6c>)
 800115c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800115e:	4a11      	ldr	r2, [pc, #68]	; (80011a4 <HAL_TIM_MspPostInit+0x6c>)
 8001160:	f043 0301 	orr.w	r3, r3, #1
 8001164:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001166:	4b0f      	ldr	r3, [pc, #60]	; (80011a4 <HAL_TIM_MspPostInit+0x6c>)
 8001168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	60bb      	str	r3, [r7, #8]
 8001170:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH1N
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12;
 8001172:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 8001176:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001178:	2302      	movs	r3, #2
 800117a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001180:	2300      	movs	r3, #0
 8001182:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001184:	2306      	movs	r3, #6
 8001186:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001188:	f107 030c 	add.w	r3, r7, #12
 800118c:	4619      	mov	r1, r3
 800118e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001192:	f000 faed 	bl	8001770 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001196:	bf00      	nop
 8001198:	3720      	adds	r7, #32
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40012c00 	.word	0x40012c00
 80011a4:	40021000 	.word	0x40021000

080011a8 <HAL_UART_RxCpltCallback>:

/**
  * @brief  Function called at each new character received
  * @retval None
  */
void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart){
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 80011b0:	4b05      	ldr	r3, [pc, #20]	; (80011c8 <HAL_UART_RxCpltCallback+0x20>)
 80011b2:	2201      	movs	r2, #1
 80011b4:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 80011b6:	2201      	movs	r2, #1
 80011b8:	4904      	ldr	r1, [pc, #16]	; (80011cc <HAL_UART_RxCpltCallback+0x24>)
 80011ba:	4805      	ldr	r0, [pc, #20]	; (80011d0 <HAL_UART_RxCpltCallback+0x28>)
 80011bc:	f003 fb12 	bl	80047e4 <HAL_UART_Receive_IT>
}
 80011c0:	bf00      	nop
 80011c2:	3708      	adds	r7, #8
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	20000198 	.word	0x20000198
 80011cc:	2000019c 	.word	0x2000019c
 80011d0:	200001e4 	.word	0x200001e4

080011d4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011d8:	4b22      	ldr	r3, [pc, #136]	; (8001264 <MX_USART2_UART_Init+0x90>)
 80011da:	4a23      	ldr	r2, [pc, #140]	; (8001268 <MX_USART2_UART_Init+0x94>)
 80011dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011de:	4b21      	ldr	r3, [pc, #132]	; (8001264 <MX_USART2_UART_Init+0x90>)
 80011e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011e6:	4b1f      	ldr	r3, [pc, #124]	; (8001264 <MX_USART2_UART_Init+0x90>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011ec:	4b1d      	ldr	r3, [pc, #116]	; (8001264 <MX_USART2_UART_Init+0x90>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011f2:	4b1c      	ldr	r3, [pc, #112]	; (8001264 <MX_USART2_UART_Init+0x90>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011f8:	4b1a      	ldr	r3, [pc, #104]	; (8001264 <MX_USART2_UART_Init+0x90>)
 80011fa:	220c      	movs	r2, #12
 80011fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011fe:	4b19      	ldr	r3, [pc, #100]	; (8001264 <MX_USART2_UART_Init+0x90>)
 8001200:	2200      	movs	r2, #0
 8001202:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001204:	4b17      	ldr	r3, [pc, #92]	; (8001264 <MX_USART2_UART_Init+0x90>)
 8001206:	2200      	movs	r2, #0
 8001208:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800120a:	4b16      	ldr	r3, [pc, #88]	; (8001264 <MX_USART2_UART_Init+0x90>)
 800120c:	2200      	movs	r2, #0
 800120e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001210:	4b14      	ldr	r3, [pc, #80]	; (8001264 <MX_USART2_UART_Init+0x90>)
 8001212:	2200      	movs	r2, #0
 8001214:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001216:	4b13      	ldr	r3, [pc, #76]	; (8001264 <MX_USART2_UART_Init+0x90>)
 8001218:	2200      	movs	r2, #0
 800121a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800121c:	4811      	ldr	r0, [pc, #68]	; (8001264 <MX_USART2_UART_Init+0x90>)
 800121e:	f003 f9fa 	bl	8004616 <HAL_UART_Init>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001228:	f7ff faf8 	bl	800081c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800122c:	2100      	movs	r1, #0
 800122e:	480d      	ldr	r0, [pc, #52]	; (8001264 <MX_USART2_UART_Init+0x90>)
 8001230:	f005 f99d 	bl	800656e <HAL_UARTEx_SetTxFifoThreshold>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800123a:	f7ff faef 	bl	800081c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800123e:	2100      	movs	r1, #0
 8001240:	4808      	ldr	r0, [pc, #32]	; (8001264 <MX_USART2_UART_Init+0x90>)
 8001242:	f005 f9d2 	bl	80065ea <HAL_UARTEx_SetRxFifoThreshold>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800124c:	f7ff fae6 	bl	800081c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001250:	4804      	ldr	r0, [pc, #16]	; (8001264 <MX_USART2_UART_Init+0x90>)
 8001252:	f005 f953 	bl	80064fc <HAL_UARTEx_DisableFifoMode>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800125c:	f7ff fade 	bl	800081c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001260:	bf00      	nop
 8001262:	bd80      	pop	{r7, pc}
 8001264:	200001e4 	.word	0x200001e4
 8001268:	40004400 	.word	0x40004400

0800126c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b09e      	sub	sp, #120	; 0x78
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001274:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	60da      	str	r2, [r3, #12]
 8001282:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001284:	f107 0310 	add.w	r3, r7, #16
 8001288:	2254      	movs	r2, #84	; 0x54
 800128a:	2100      	movs	r1, #0
 800128c:	4618      	mov	r0, r3
 800128e:	f005 fa67 	bl	8006760 <memset>
  if(uartHandle->Instance==USART2)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a23      	ldr	r2, [pc, #140]	; (8001324 <HAL_UART_MspInit+0xb8>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d13e      	bne.n	800131a <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800129c:	2302      	movs	r3, #2
 800129e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80012a0:	2300      	movs	r3, #0
 80012a2:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012a4:	f107 0310 	add.w	r3, r7, #16
 80012a8:	4618      	mov	r0, r3
 80012aa:	f001 fa47 	bl	800273c <HAL_RCCEx_PeriphCLKConfig>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80012b4:	f7ff fab2 	bl	800081c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012b8:	4b1b      	ldr	r3, [pc, #108]	; (8001328 <HAL_UART_MspInit+0xbc>)
 80012ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012bc:	4a1a      	ldr	r2, [pc, #104]	; (8001328 <HAL_UART_MspInit+0xbc>)
 80012be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012c2:	6593      	str	r3, [r2, #88]	; 0x58
 80012c4:	4b18      	ldr	r3, [pc, #96]	; (8001328 <HAL_UART_MspInit+0xbc>)
 80012c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d0:	4b15      	ldr	r3, [pc, #84]	; (8001328 <HAL_UART_MspInit+0xbc>)
 80012d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d4:	4a14      	ldr	r2, [pc, #80]	; (8001328 <HAL_UART_MspInit+0xbc>)
 80012d6:	f043 0301 	orr.w	r3, r3, #1
 80012da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012dc:	4b12      	ldr	r3, [pc, #72]	; (8001328 <HAL_UART_MspInit+0xbc>)
 80012de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e0:	f003 0301 	and.w	r3, r3, #1
 80012e4:	60bb      	str	r3, [r7, #8]
 80012e6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80012e8:	230c      	movs	r3, #12
 80012ea:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ec:	2302      	movs	r3, #2
 80012ee:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f0:	2300      	movs	r3, #0
 80012f2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f4:	2300      	movs	r3, #0
 80012f6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012f8:	2307      	movs	r3, #7
 80012fa:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012fc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001300:	4619      	mov	r1, r3
 8001302:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001306:	f000 fa33 	bl	8001770 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800130a:	2200      	movs	r2, #0
 800130c:	2100      	movs	r1, #0
 800130e:	2026      	movs	r0, #38	; 0x26
 8001310:	f000 f946 	bl	80015a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001314:	2026      	movs	r0, #38	; 0x26
 8001316:	f000 f95d 	bl	80015d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800131a:	bf00      	nop
 800131c:	3778      	adds	r7, #120	; 0x78
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40004400 	.word	0x40004400
 8001328:	40021000 	.word	0x40021000

0800132c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800132c:	480d      	ldr	r0, [pc, #52]	; (8001364 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800132e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001330:	480d      	ldr	r0, [pc, #52]	; (8001368 <LoopForever+0x6>)
  ldr r1, =_edata
 8001332:	490e      	ldr	r1, [pc, #56]	; (800136c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001334:	4a0e      	ldr	r2, [pc, #56]	; (8001370 <LoopForever+0xe>)
  movs r3, #0
 8001336:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001338:	e002      	b.n	8001340 <LoopCopyDataInit>

0800133a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800133a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800133c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800133e:	3304      	adds	r3, #4

08001340 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001340:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001342:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001344:	d3f9      	bcc.n	800133a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001346:	4a0b      	ldr	r2, [pc, #44]	; (8001374 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001348:	4c0b      	ldr	r4, [pc, #44]	; (8001378 <LoopForever+0x16>)
  movs r3, #0
 800134a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800134c:	e001      	b.n	8001352 <LoopFillZerobss>

0800134e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800134e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001350:	3204      	adds	r2, #4

08001352 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001352:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001354:	d3fb      	bcc.n	800134e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001356:	f7ff fdfd 	bl	8000f54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800135a:	f005 f9dd 	bl	8006718 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800135e:	f7ff f9b9 	bl	80006d4 <main>

08001362 <LoopForever>:

LoopForever:
    b LoopForever
 8001362:	e7fe      	b.n	8001362 <LoopForever>
  ldr   r0, =_estack
 8001364:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001368:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800136c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001370:	0800832c 	.word	0x0800832c
  ldr r2, =_sbss
 8001374:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001378:	20000288 	.word	0x20000288

0800137c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800137c:	e7fe      	b.n	800137c <ADC1_2_IRQHandler>

0800137e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800137e:	b580      	push	{r7, lr}
 8001380:	b082      	sub	sp, #8
 8001382:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001384:	2300      	movs	r3, #0
 8001386:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001388:	2003      	movs	r0, #3
 800138a:	f000 f8fe 	bl	800158a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800138e:	200f      	movs	r0, #15
 8001390:	f7ff fc62 	bl	8000c58 <HAL_InitTick>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d002      	beq.n	80013a0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	71fb      	strb	r3, [r7, #7]
 800139e:	e001      	b.n	80013a4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013a0:	f7ff fc36 	bl	8000c10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013a4:	79fb      	ldrb	r3, [r7, #7]

}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
	...

080013b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013b4:	4b05      	ldr	r3, [pc, #20]	; (80013cc <HAL_IncTick+0x1c>)
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	4b05      	ldr	r3, [pc, #20]	; (80013d0 <HAL_IncTick+0x20>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4413      	add	r3, r2
 80013be:	4a03      	ldr	r2, [pc, #12]	; (80013cc <HAL_IncTick+0x1c>)
 80013c0:	6013      	str	r3, [r2, #0]
}
 80013c2:	bf00      	nop
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr
 80013cc:	20000274 	.word	0x20000274
 80013d0:	20000008 	.word	0x20000008

080013d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  return uwTick;
 80013d8:	4b03      	ldr	r3, [pc, #12]	; (80013e8 <HAL_GetTick+0x14>)
 80013da:	681b      	ldr	r3, [r3, #0]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	20000274 	.word	0x20000274

080013ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013f4:	f7ff ffee 	bl	80013d4 <HAL_GetTick>
 80013f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001404:	d004      	beq.n	8001410 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001406:	4b09      	ldr	r3, [pc, #36]	; (800142c <HAL_Delay+0x40>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	68fa      	ldr	r2, [r7, #12]
 800140c:	4413      	add	r3, r2
 800140e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001410:	bf00      	nop
 8001412:	f7ff ffdf 	bl	80013d4 <HAL_GetTick>
 8001416:	4602      	mov	r2, r0
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	68fa      	ldr	r2, [r7, #12]
 800141e:	429a      	cmp	r2, r3
 8001420:	d8f7      	bhi.n	8001412 <HAL_Delay+0x26>
  {
  }
}
 8001422:	bf00      	nop
 8001424:	bf00      	nop
 8001426:	3710      	adds	r7, #16
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	20000008 	.word	0x20000008

08001430 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001430:	b480      	push	{r7}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f003 0307 	and.w	r3, r3, #7
 800143e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001440:	4b0c      	ldr	r3, [pc, #48]	; (8001474 <__NVIC_SetPriorityGrouping+0x44>)
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001446:	68ba      	ldr	r2, [r7, #8]
 8001448:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800144c:	4013      	ands	r3, r2
 800144e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001458:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800145c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001460:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001462:	4a04      	ldr	r2, [pc, #16]	; (8001474 <__NVIC_SetPriorityGrouping+0x44>)
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	60d3      	str	r3, [r2, #12]
}
 8001468:	bf00      	nop
 800146a:	3714      	adds	r7, #20
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	e000ed00 	.word	0xe000ed00

08001478 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800147c:	4b04      	ldr	r3, [pc, #16]	; (8001490 <__NVIC_GetPriorityGrouping+0x18>)
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	0a1b      	lsrs	r3, r3, #8
 8001482:	f003 0307 	and.w	r3, r3, #7
}
 8001486:	4618      	mov	r0, r3
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr
 8001490:	e000ed00 	.word	0xe000ed00

08001494 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	4603      	mov	r3, r0
 800149c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800149e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	db0b      	blt.n	80014be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014a6:	79fb      	ldrb	r3, [r7, #7]
 80014a8:	f003 021f 	and.w	r2, r3, #31
 80014ac:	4907      	ldr	r1, [pc, #28]	; (80014cc <__NVIC_EnableIRQ+0x38>)
 80014ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b2:	095b      	lsrs	r3, r3, #5
 80014b4:	2001      	movs	r0, #1
 80014b6:	fa00 f202 	lsl.w	r2, r0, r2
 80014ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014be:	bf00      	nop
 80014c0:	370c      	adds	r7, #12
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	e000e100 	.word	0xe000e100

080014d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	6039      	str	r1, [r7, #0]
 80014da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	db0a      	blt.n	80014fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	b2da      	uxtb	r2, r3
 80014e8:	490c      	ldr	r1, [pc, #48]	; (800151c <__NVIC_SetPriority+0x4c>)
 80014ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ee:	0112      	lsls	r2, r2, #4
 80014f0:	b2d2      	uxtb	r2, r2
 80014f2:	440b      	add	r3, r1
 80014f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014f8:	e00a      	b.n	8001510 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	b2da      	uxtb	r2, r3
 80014fe:	4908      	ldr	r1, [pc, #32]	; (8001520 <__NVIC_SetPriority+0x50>)
 8001500:	79fb      	ldrb	r3, [r7, #7]
 8001502:	f003 030f 	and.w	r3, r3, #15
 8001506:	3b04      	subs	r3, #4
 8001508:	0112      	lsls	r2, r2, #4
 800150a:	b2d2      	uxtb	r2, r2
 800150c:	440b      	add	r3, r1
 800150e:	761a      	strb	r2, [r3, #24]
}
 8001510:	bf00      	nop
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr
 800151c:	e000e100 	.word	0xe000e100
 8001520:	e000ed00 	.word	0xe000ed00

08001524 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001524:	b480      	push	{r7}
 8001526:	b089      	sub	sp, #36	; 0x24
 8001528:	af00      	add	r7, sp, #0
 800152a:	60f8      	str	r0, [r7, #12]
 800152c:	60b9      	str	r1, [r7, #8]
 800152e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	f003 0307 	and.w	r3, r3, #7
 8001536:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	f1c3 0307 	rsb	r3, r3, #7
 800153e:	2b04      	cmp	r3, #4
 8001540:	bf28      	it	cs
 8001542:	2304      	movcs	r3, #4
 8001544:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	3304      	adds	r3, #4
 800154a:	2b06      	cmp	r3, #6
 800154c:	d902      	bls.n	8001554 <NVIC_EncodePriority+0x30>
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	3b03      	subs	r3, #3
 8001552:	e000      	b.n	8001556 <NVIC_EncodePriority+0x32>
 8001554:	2300      	movs	r3, #0
 8001556:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001558:	f04f 32ff 	mov.w	r2, #4294967295
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	fa02 f303 	lsl.w	r3, r2, r3
 8001562:	43da      	mvns	r2, r3
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	401a      	ands	r2, r3
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800156c:	f04f 31ff 	mov.w	r1, #4294967295
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	fa01 f303 	lsl.w	r3, r1, r3
 8001576:	43d9      	mvns	r1, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800157c:	4313      	orrs	r3, r2
         );
}
 800157e:	4618      	mov	r0, r3
 8001580:	3724      	adds	r7, #36	; 0x24
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr

0800158a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b082      	sub	sp, #8
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f7ff ff4c 	bl	8001430 <__NVIC_SetPriorityGrouping>
}
 8001598:	bf00      	nop
 800159a:	3708      	adds	r7, #8
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b086      	sub	sp, #24
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	60b9      	str	r1, [r7, #8]
 80015aa:	607a      	str	r2, [r7, #4]
 80015ac:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015ae:	f7ff ff63 	bl	8001478 <__NVIC_GetPriorityGrouping>
 80015b2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	68b9      	ldr	r1, [r7, #8]
 80015b8:	6978      	ldr	r0, [r7, #20]
 80015ba:	f7ff ffb3 	bl	8001524 <NVIC_EncodePriority>
 80015be:	4602      	mov	r2, r0
 80015c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015c4:	4611      	mov	r1, r2
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7ff ff82 	bl	80014d0 <__NVIC_SetPriority>
}
 80015cc:	bf00      	nop
 80015ce:	3718      	adds	r7, #24
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	4603      	mov	r3, r0
 80015dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7ff ff56 	bl	8001494 <__NVIC_EnableIRQ>
}
 80015e8:	bf00      	nop
 80015ea:	3708      	adds	r7, #8
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b085      	sub	sp, #20
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015f8:	2300      	movs	r3, #0
 80015fa:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001602:	b2db      	uxtb	r3, r3
 8001604:	2b02      	cmp	r3, #2
 8001606:	d005      	beq.n	8001614 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2204      	movs	r2, #4
 800160c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	73fb      	strb	r3, [r7, #15]
 8001612:	e037      	b.n	8001684 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f022 020e 	bic.w	r2, r2, #14
 8001622:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800162e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001632:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f022 0201 	bic.w	r2, r2, #1
 8001642:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001648:	f003 021f 	and.w	r2, r3, #31
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001650:	2101      	movs	r1, #1
 8001652:	fa01 f202 	lsl.w	r2, r1, r2
 8001656:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001660:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001666:	2b00      	cmp	r3, #0
 8001668:	d00c      	beq.n	8001684 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001674:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001678:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800167e:	687a      	ldr	r2, [r7, #4]
 8001680:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001682:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2201      	movs	r2, #1
 8001688:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2200      	movs	r2, #0
 8001690:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8001694:	7bfb      	ldrb	r3, [r7, #15]
}
 8001696:	4618      	mov	r0, r3
 8001698:	3714      	adds	r7, #20
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr

080016a2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b084      	sub	sp, #16
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016aa:	2300      	movs	r3, #0
 80016ac:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d00d      	beq.n	80016d6 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2204      	movs	r2, #4
 80016be:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2201      	movs	r2, #1
 80016c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2200      	movs	r2, #0
 80016cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	73fb      	strb	r3, [r7, #15]
 80016d4:	e047      	b.n	8001766 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f022 020e 	bic.w	r2, r2, #14
 80016e4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f022 0201 	bic.w	r2, r2, #1
 80016f4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001700:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001704:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170a:	f003 021f 	and.w	r2, r3, #31
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001712:	2101      	movs	r1, #1
 8001714:	fa01 f202 	lsl.w	r2, r1, r2
 8001718:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001722:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001728:	2b00      	cmp	r3, #0
 800172a:	d00c      	beq.n	8001746 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001736:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800173a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001744:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2201      	movs	r2, #1
 800174a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2200      	movs	r2, #0
 8001752:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800175a:	2b00      	cmp	r3, #0
 800175c:	d003      	beq.n	8001766 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	4798      	blx	r3
    }
  }
  return status;
 8001766:	7bfb      	ldrb	r3, [r7, #15]
}
 8001768:	4618      	mov	r0, r3
 800176a:	3710      	adds	r7, #16
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}

08001770 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001770:	b480      	push	{r7}
 8001772:	b087      	sub	sp, #28
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800177a:	2300      	movs	r3, #0
 800177c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800177e:	e15a      	b.n	8001a36 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	2101      	movs	r1, #1
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	fa01 f303 	lsl.w	r3, r1, r3
 800178c:	4013      	ands	r3, r2
 800178e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	2b00      	cmp	r3, #0
 8001794:	f000 814c 	beq.w	8001a30 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f003 0303 	and.w	r3, r3, #3
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d005      	beq.n	80017b0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	d130      	bne.n	8001812 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	2203      	movs	r2, #3
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	43db      	mvns	r3, r3
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	4013      	ands	r3, r2
 80017c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	68da      	ldr	r2, [r3, #12]
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	005b      	lsls	r3, r3, #1
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	693a      	ldr	r2, [r7, #16]
 80017d6:	4313      	orrs	r3, r2
 80017d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	693a      	ldr	r2, [r7, #16]
 80017de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017e6:	2201      	movs	r2, #1
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	fa02 f303 	lsl.w	r3, r2, r3
 80017ee:	43db      	mvns	r3, r3
 80017f0:	693a      	ldr	r2, [r7, #16]
 80017f2:	4013      	ands	r3, r2
 80017f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	091b      	lsrs	r3, r3, #4
 80017fc:	f003 0201 	and.w	r2, r3, #1
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	fa02 f303 	lsl.w	r3, r2, r3
 8001806:	693a      	ldr	r2, [r7, #16]
 8001808:	4313      	orrs	r3, r2
 800180a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f003 0303 	and.w	r3, r3, #3
 800181a:	2b03      	cmp	r3, #3
 800181c:	d017      	beq.n	800184e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	68db      	ldr	r3, [r3, #12]
 8001822:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	2203      	movs	r2, #3
 800182a:	fa02 f303 	lsl.w	r3, r2, r3
 800182e:	43db      	mvns	r3, r3
 8001830:	693a      	ldr	r2, [r7, #16]
 8001832:	4013      	ands	r3, r2
 8001834:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	689a      	ldr	r2, [r3, #8]
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	4313      	orrs	r3, r2
 8001846:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f003 0303 	and.w	r3, r3, #3
 8001856:	2b02      	cmp	r3, #2
 8001858:	d123      	bne.n	80018a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	08da      	lsrs	r2, r3, #3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	3208      	adds	r2, #8
 8001862:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001866:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	f003 0307 	and.w	r3, r3, #7
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	220f      	movs	r2, #15
 8001872:	fa02 f303 	lsl.w	r3, r2, r3
 8001876:	43db      	mvns	r3, r3
 8001878:	693a      	ldr	r2, [r7, #16]
 800187a:	4013      	ands	r3, r2
 800187c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	691a      	ldr	r2, [r3, #16]
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	f003 0307 	and.w	r3, r3, #7
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	4313      	orrs	r3, r2
 8001892:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	08da      	lsrs	r2, r3, #3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	3208      	adds	r2, #8
 800189c:	6939      	ldr	r1, [r7, #16]
 800189e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	2203      	movs	r2, #3
 80018ae:	fa02 f303 	lsl.w	r3, r2, r3
 80018b2:	43db      	mvns	r3, r3
 80018b4:	693a      	ldr	r2, [r7, #16]
 80018b6:	4013      	ands	r3, r2
 80018b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f003 0203 	and.w	r2, r3, #3
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	f000 80a6 	beq.w	8001a30 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018e4:	4b5b      	ldr	r3, [pc, #364]	; (8001a54 <HAL_GPIO_Init+0x2e4>)
 80018e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018e8:	4a5a      	ldr	r2, [pc, #360]	; (8001a54 <HAL_GPIO_Init+0x2e4>)
 80018ea:	f043 0301 	orr.w	r3, r3, #1
 80018ee:	6613      	str	r3, [r2, #96]	; 0x60
 80018f0:	4b58      	ldr	r3, [pc, #352]	; (8001a54 <HAL_GPIO_Init+0x2e4>)
 80018f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018f4:	f003 0301 	and.w	r3, r3, #1
 80018f8:	60bb      	str	r3, [r7, #8]
 80018fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018fc:	4a56      	ldr	r2, [pc, #344]	; (8001a58 <HAL_GPIO_Init+0x2e8>)
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	089b      	lsrs	r3, r3, #2
 8001902:	3302      	adds	r3, #2
 8001904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001908:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	f003 0303 	and.w	r3, r3, #3
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	220f      	movs	r2, #15
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	43db      	mvns	r3, r3
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	4013      	ands	r3, r2
 800191e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001926:	d01f      	beq.n	8001968 <HAL_GPIO_Init+0x1f8>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	4a4c      	ldr	r2, [pc, #304]	; (8001a5c <HAL_GPIO_Init+0x2ec>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d019      	beq.n	8001964 <HAL_GPIO_Init+0x1f4>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	4a4b      	ldr	r2, [pc, #300]	; (8001a60 <HAL_GPIO_Init+0x2f0>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d013      	beq.n	8001960 <HAL_GPIO_Init+0x1f0>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	4a4a      	ldr	r2, [pc, #296]	; (8001a64 <HAL_GPIO_Init+0x2f4>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d00d      	beq.n	800195c <HAL_GPIO_Init+0x1ec>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	4a49      	ldr	r2, [pc, #292]	; (8001a68 <HAL_GPIO_Init+0x2f8>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d007      	beq.n	8001958 <HAL_GPIO_Init+0x1e8>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	4a48      	ldr	r2, [pc, #288]	; (8001a6c <HAL_GPIO_Init+0x2fc>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d101      	bne.n	8001954 <HAL_GPIO_Init+0x1e4>
 8001950:	2305      	movs	r3, #5
 8001952:	e00a      	b.n	800196a <HAL_GPIO_Init+0x1fa>
 8001954:	2306      	movs	r3, #6
 8001956:	e008      	b.n	800196a <HAL_GPIO_Init+0x1fa>
 8001958:	2304      	movs	r3, #4
 800195a:	e006      	b.n	800196a <HAL_GPIO_Init+0x1fa>
 800195c:	2303      	movs	r3, #3
 800195e:	e004      	b.n	800196a <HAL_GPIO_Init+0x1fa>
 8001960:	2302      	movs	r3, #2
 8001962:	e002      	b.n	800196a <HAL_GPIO_Init+0x1fa>
 8001964:	2301      	movs	r3, #1
 8001966:	e000      	b.n	800196a <HAL_GPIO_Init+0x1fa>
 8001968:	2300      	movs	r3, #0
 800196a:	697a      	ldr	r2, [r7, #20]
 800196c:	f002 0203 	and.w	r2, r2, #3
 8001970:	0092      	lsls	r2, r2, #2
 8001972:	4093      	lsls	r3, r2
 8001974:	693a      	ldr	r2, [r7, #16]
 8001976:	4313      	orrs	r3, r2
 8001978:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800197a:	4937      	ldr	r1, [pc, #220]	; (8001a58 <HAL_GPIO_Init+0x2e8>)
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	089b      	lsrs	r3, r3, #2
 8001980:	3302      	adds	r3, #2
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001988:	4b39      	ldr	r3, [pc, #228]	; (8001a70 <HAL_GPIO_Init+0x300>)
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	43db      	mvns	r3, r3
 8001992:	693a      	ldr	r2, [r7, #16]
 8001994:	4013      	ands	r3, r2
 8001996:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d003      	beq.n	80019ac <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80019a4:	693a      	ldr	r2, [r7, #16]
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80019ac:	4a30      	ldr	r2, [pc, #192]	; (8001a70 <HAL_GPIO_Init+0x300>)
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80019b2:	4b2f      	ldr	r3, [pc, #188]	; (8001a70 <HAL_GPIO_Init+0x300>)
 80019b4:	68db      	ldr	r3, [r3, #12]
 80019b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	43db      	mvns	r3, r3
 80019bc:	693a      	ldr	r2, [r7, #16]
 80019be:	4013      	ands	r3, r2
 80019c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d003      	beq.n	80019d6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80019d6:	4a26      	ldr	r2, [pc, #152]	; (8001a70 <HAL_GPIO_Init+0x300>)
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80019dc:	4b24      	ldr	r3, [pc, #144]	; (8001a70 <HAL_GPIO_Init+0x300>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	43db      	mvns	r3, r3
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	4013      	ands	r3, r2
 80019ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d003      	beq.n	8001a00 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80019f8:	693a      	ldr	r2, [r7, #16]
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a00:	4a1b      	ldr	r2, [pc, #108]	; (8001a70 <HAL_GPIO_Init+0x300>)
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001a06:	4b1a      	ldr	r3, [pc, #104]	; (8001a70 <HAL_GPIO_Init+0x300>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	43db      	mvns	r3, r3
 8001a10:	693a      	ldr	r2, [r7, #16]
 8001a12:	4013      	ands	r3, r2
 8001a14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d003      	beq.n	8001a2a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001a22:	693a      	ldr	r2, [r7, #16]
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a2a:	4a11      	ldr	r2, [pc, #68]	; (8001a70 <HAL_GPIO_Init+0x300>)
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	3301      	adds	r3, #1
 8001a34:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	fa22 f303 	lsr.w	r3, r2, r3
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	f47f ae9d 	bne.w	8001780 <HAL_GPIO_Init+0x10>
  }
}
 8001a46:	bf00      	nop
 8001a48:	bf00      	nop
 8001a4a:	371c      	adds	r7, #28
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr
 8001a54:	40021000 	.word	0x40021000
 8001a58:	40010000 	.word	0x40010000
 8001a5c:	48000400 	.word	0x48000400
 8001a60:	48000800 	.word	0x48000800
 8001a64:	48000c00 	.word	0x48000c00
 8001a68:	48001000 	.word	0x48001000
 8001a6c:	48001400 	.word	0x48001400
 8001a70:	40010400 	.word	0x40010400

08001a74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	807b      	strh	r3, [r7, #2]
 8001a80:	4613      	mov	r3, r2
 8001a82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a84:	787b      	ldrb	r3, [r7, #1]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d003      	beq.n	8001a92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a8a:	887a      	ldrh	r2, [r7, #2]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a90:	e002      	b.n	8001a98 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a92:	887a      	ldrh	r2, [r7, #2]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a98:	bf00      	nop
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b085      	sub	sp, #20
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	460b      	mov	r3, r1
 8001aae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	695b      	ldr	r3, [r3, #20]
 8001ab4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ab6:	887a      	ldrh	r2, [r7, #2]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	4013      	ands	r3, r2
 8001abc:	041a      	lsls	r2, r3, #16
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	43d9      	mvns	r1, r3
 8001ac2:	887b      	ldrh	r3, [r7, #2]
 8001ac4:	400b      	ands	r3, r1
 8001ac6:	431a      	orrs	r2, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	619a      	str	r2, [r3, #24]
}
 8001acc:	bf00      	nop
 8001ace:	3714      	adds	r7, #20
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	4603      	mov	r3, r0
 8001ae0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001ae2:	4b08      	ldr	r3, [pc, #32]	; (8001b04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ae4:	695a      	ldr	r2, [r3, #20]
 8001ae6:	88fb      	ldrh	r3, [r7, #6]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d006      	beq.n	8001afc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001aee:	4a05      	ldr	r2, [pc, #20]	; (8001b04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001af0:	88fb      	ldrh	r3, [r7, #6]
 8001af2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001af4:	88fb      	ldrh	r3, [r7, #6]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7fe fe6e 	bl	80007d8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001afc:	bf00      	nop
 8001afe:	3708      	adds	r7, #8
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	40010400 	.word	0x40010400

08001b08 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b085      	sub	sp, #20
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d141      	bne.n	8001b9a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b16:	4b4b      	ldr	r3, [pc, #300]	; (8001c44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b22:	d131      	bne.n	8001b88 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b24:	4b47      	ldr	r3, [pc, #284]	; (8001c44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b2a:	4a46      	ldr	r2, [pc, #280]	; (8001c44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b30:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b34:	4b43      	ldr	r3, [pc, #268]	; (8001c44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b3c:	4a41      	ldr	r2, [pc, #260]	; (8001c44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b42:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b44:	4b40      	ldr	r3, [pc, #256]	; (8001c48 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2232      	movs	r2, #50	; 0x32
 8001b4a:	fb02 f303 	mul.w	r3, r2, r3
 8001b4e:	4a3f      	ldr	r2, [pc, #252]	; (8001c4c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001b50:	fba2 2303 	umull	r2, r3, r2, r3
 8001b54:	0c9b      	lsrs	r3, r3, #18
 8001b56:	3301      	adds	r3, #1
 8001b58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b5a:	e002      	b.n	8001b62 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	3b01      	subs	r3, #1
 8001b60:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b62:	4b38      	ldr	r3, [pc, #224]	; (8001c44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b64:	695b      	ldr	r3, [r3, #20]
 8001b66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b6e:	d102      	bne.n	8001b76 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d1f2      	bne.n	8001b5c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b76:	4b33      	ldr	r3, [pc, #204]	; (8001c44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b78:	695b      	ldr	r3, [r3, #20]
 8001b7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b82:	d158      	bne.n	8001c36 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001b84:	2303      	movs	r3, #3
 8001b86:	e057      	b.n	8001c38 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b88:	4b2e      	ldr	r3, [pc, #184]	; (8001c44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b8e:	4a2d      	ldr	r2, [pc, #180]	; (8001c44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b94:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001b98:	e04d      	b.n	8001c36 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ba0:	d141      	bne.n	8001c26 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ba2:	4b28      	ldr	r3, [pc, #160]	; (8001c44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001baa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bae:	d131      	bne.n	8001c14 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001bb0:	4b24      	ldr	r3, [pc, #144]	; (8001c44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001bb6:	4a23      	ldr	r2, [pc, #140]	; (8001c44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bbc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bc0:	4b20      	ldr	r3, [pc, #128]	; (8001c44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001bc8:	4a1e      	ldr	r2, [pc, #120]	; (8001c44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001bd0:	4b1d      	ldr	r3, [pc, #116]	; (8001c48 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2232      	movs	r2, #50	; 0x32
 8001bd6:	fb02 f303 	mul.w	r3, r2, r3
 8001bda:	4a1c      	ldr	r2, [pc, #112]	; (8001c4c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8001be0:	0c9b      	lsrs	r3, r3, #18
 8001be2:	3301      	adds	r3, #1
 8001be4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001be6:	e002      	b.n	8001bee <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	3b01      	subs	r3, #1
 8001bec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bee:	4b15      	ldr	r3, [pc, #84]	; (8001c44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bf0:	695b      	ldr	r3, [r3, #20]
 8001bf2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bfa:	d102      	bne.n	8001c02 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d1f2      	bne.n	8001be8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c02:	4b10      	ldr	r3, [pc, #64]	; (8001c44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c04:	695b      	ldr	r3, [r3, #20]
 8001c06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c0e:	d112      	bne.n	8001c36 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001c10:	2303      	movs	r3, #3
 8001c12:	e011      	b.n	8001c38 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c14:	4b0b      	ldr	r3, [pc, #44]	; (8001c44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c1a:	4a0a      	ldr	r2, [pc, #40]	; (8001c44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c20:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001c24:	e007      	b.n	8001c36 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c26:	4b07      	ldr	r3, [pc, #28]	; (8001c44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c2e:	4a05      	ldr	r2, [pc, #20]	; (8001c44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c30:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c34:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001c36:	2300      	movs	r3, #0
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3714      	adds	r7, #20
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr
 8001c44:	40007000 	.word	0x40007000
 8001c48:	20000000 	.word	0x20000000
 8001c4c:	431bde83 	.word	0x431bde83

08001c50 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001c54:	4b05      	ldr	r3, [pc, #20]	; (8001c6c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	4a04      	ldr	r2, [pc, #16]	; (8001c6c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001c5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c5e:	6093      	str	r3, [r2, #8]
}
 8001c60:	bf00      	nop
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	40007000 	.word	0x40007000

08001c70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b088      	sub	sp, #32
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d101      	bne.n	8001c82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e306      	b.n	8002290 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d075      	beq.n	8001d7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c8e:	4b97      	ldr	r3, [pc, #604]	; (8001eec <HAL_RCC_OscConfig+0x27c>)
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	f003 030c 	and.w	r3, r3, #12
 8001c96:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c98:	4b94      	ldr	r3, [pc, #592]	; (8001eec <HAL_RCC_OscConfig+0x27c>)
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	f003 0303 	and.w	r3, r3, #3
 8001ca0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001ca2:	69bb      	ldr	r3, [r7, #24]
 8001ca4:	2b0c      	cmp	r3, #12
 8001ca6:	d102      	bne.n	8001cae <HAL_RCC_OscConfig+0x3e>
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	2b03      	cmp	r3, #3
 8001cac:	d002      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x44>
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	2b08      	cmp	r3, #8
 8001cb2:	d10b      	bne.n	8001ccc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cb4:	4b8d      	ldr	r3, [pc, #564]	; (8001eec <HAL_RCC_OscConfig+0x27c>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d05b      	beq.n	8001d78 <HAL_RCC_OscConfig+0x108>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d157      	bne.n	8001d78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e2e1      	b.n	8002290 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cd4:	d106      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x74>
 8001cd6:	4b85      	ldr	r3, [pc, #532]	; (8001eec <HAL_RCC_OscConfig+0x27c>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a84      	ldr	r2, [pc, #528]	; (8001eec <HAL_RCC_OscConfig+0x27c>)
 8001cdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ce0:	6013      	str	r3, [r2, #0]
 8001ce2:	e01d      	b.n	8001d20 <HAL_RCC_OscConfig+0xb0>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cec:	d10c      	bne.n	8001d08 <HAL_RCC_OscConfig+0x98>
 8001cee:	4b7f      	ldr	r3, [pc, #508]	; (8001eec <HAL_RCC_OscConfig+0x27c>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a7e      	ldr	r2, [pc, #504]	; (8001eec <HAL_RCC_OscConfig+0x27c>)
 8001cf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cf8:	6013      	str	r3, [r2, #0]
 8001cfa:	4b7c      	ldr	r3, [pc, #496]	; (8001eec <HAL_RCC_OscConfig+0x27c>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a7b      	ldr	r2, [pc, #492]	; (8001eec <HAL_RCC_OscConfig+0x27c>)
 8001d00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d04:	6013      	str	r3, [r2, #0]
 8001d06:	e00b      	b.n	8001d20 <HAL_RCC_OscConfig+0xb0>
 8001d08:	4b78      	ldr	r3, [pc, #480]	; (8001eec <HAL_RCC_OscConfig+0x27c>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a77      	ldr	r2, [pc, #476]	; (8001eec <HAL_RCC_OscConfig+0x27c>)
 8001d0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d12:	6013      	str	r3, [r2, #0]
 8001d14:	4b75      	ldr	r3, [pc, #468]	; (8001eec <HAL_RCC_OscConfig+0x27c>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a74      	ldr	r2, [pc, #464]	; (8001eec <HAL_RCC_OscConfig+0x27c>)
 8001d1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d013      	beq.n	8001d50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d28:	f7ff fb54 	bl	80013d4 <HAL_GetTick>
 8001d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d2e:	e008      	b.n	8001d42 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d30:	f7ff fb50 	bl	80013d4 <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b64      	cmp	r3, #100	; 0x64
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e2a6      	b.n	8002290 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d42:	4b6a      	ldr	r3, [pc, #424]	; (8001eec <HAL_RCC_OscConfig+0x27c>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d0f0      	beq.n	8001d30 <HAL_RCC_OscConfig+0xc0>
 8001d4e:	e014      	b.n	8001d7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d50:	f7ff fb40 	bl	80013d4 <HAL_GetTick>
 8001d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d56:	e008      	b.n	8001d6a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d58:	f7ff fb3c 	bl	80013d4 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b64      	cmp	r3, #100	; 0x64
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e292      	b.n	8002290 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d6a:	4b60      	ldr	r3, [pc, #384]	; (8001eec <HAL_RCC_OscConfig+0x27c>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d1f0      	bne.n	8001d58 <HAL_RCC_OscConfig+0xe8>
 8001d76:	e000      	b.n	8001d7a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d075      	beq.n	8001e72 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d86:	4b59      	ldr	r3, [pc, #356]	; (8001eec <HAL_RCC_OscConfig+0x27c>)
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f003 030c 	and.w	r3, r3, #12
 8001d8e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d90:	4b56      	ldr	r3, [pc, #344]	; (8001eec <HAL_RCC_OscConfig+0x27c>)
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	f003 0303 	and.w	r3, r3, #3
 8001d98:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	2b0c      	cmp	r3, #12
 8001d9e:	d102      	bne.n	8001da6 <HAL_RCC_OscConfig+0x136>
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d002      	beq.n	8001dac <HAL_RCC_OscConfig+0x13c>
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	2b04      	cmp	r3, #4
 8001daa:	d11f      	bne.n	8001dec <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dac:	4b4f      	ldr	r3, [pc, #316]	; (8001eec <HAL_RCC_OscConfig+0x27c>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d005      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x154>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d101      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e265      	b.n	8002290 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dc4:	4b49      	ldr	r3, [pc, #292]	; (8001eec <HAL_RCC_OscConfig+0x27c>)
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	691b      	ldr	r3, [r3, #16]
 8001dd0:	061b      	lsls	r3, r3, #24
 8001dd2:	4946      	ldr	r1, [pc, #280]	; (8001eec <HAL_RCC_OscConfig+0x27c>)
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001dd8:	4b45      	ldr	r3, [pc, #276]	; (8001ef0 <HAL_RCC_OscConfig+0x280>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7fe ff3b 	bl	8000c58 <HAL_InitTick>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d043      	beq.n	8001e70 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e251      	b.n	8002290 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d023      	beq.n	8001e3c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001df4:	4b3d      	ldr	r3, [pc, #244]	; (8001eec <HAL_RCC_OscConfig+0x27c>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a3c      	ldr	r2, [pc, #240]	; (8001eec <HAL_RCC_OscConfig+0x27c>)
 8001dfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e00:	f7ff fae8 	bl	80013d4 <HAL_GetTick>
 8001e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e06:	e008      	b.n	8001e1a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e08:	f7ff fae4 	bl	80013d4 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e23a      	b.n	8002290 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e1a:	4b34      	ldr	r3, [pc, #208]	; (8001eec <HAL_RCC_OscConfig+0x27c>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d0f0      	beq.n	8001e08 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e26:	4b31      	ldr	r3, [pc, #196]	; (8001eec <HAL_RCC_OscConfig+0x27c>)
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	691b      	ldr	r3, [r3, #16]
 8001e32:	061b      	lsls	r3, r3, #24
 8001e34:	492d      	ldr	r1, [pc, #180]	; (8001eec <HAL_RCC_OscConfig+0x27c>)
 8001e36:	4313      	orrs	r3, r2
 8001e38:	604b      	str	r3, [r1, #4]
 8001e3a:	e01a      	b.n	8001e72 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e3c:	4b2b      	ldr	r3, [pc, #172]	; (8001eec <HAL_RCC_OscConfig+0x27c>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a2a      	ldr	r2, [pc, #168]	; (8001eec <HAL_RCC_OscConfig+0x27c>)
 8001e42:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e48:	f7ff fac4 	bl	80013d4 <HAL_GetTick>
 8001e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e4e:	e008      	b.n	8001e62 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e50:	f7ff fac0 	bl	80013d4 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e216      	b.n	8002290 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e62:	4b22      	ldr	r3, [pc, #136]	; (8001eec <HAL_RCC_OscConfig+0x27c>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d1f0      	bne.n	8001e50 <HAL_RCC_OscConfig+0x1e0>
 8001e6e:	e000      	b.n	8001e72 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e70:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0308 	and.w	r3, r3, #8
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d041      	beq.n	8001f02 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	695b      	ldr	r3, [r3, #20]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d01c      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e86:	4b19      	ldr	r3, [pc, #100]	; (8001eec <HAL_RCC_OscConfig+0x27c>)
 8001e88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e8c:	4a17      	ldr	r2, [pc, #92]	; (8001eec <HAL_RCC_OscConfig+0x27c>)
 8001e8e:	f043 0301 	orr.w	r3, r3, #1
 8001e92:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e96:	f7ff fa9d 	bl	80013d4 <HAL_GetTick>
 8001e9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e9c:	e008      	b.n	8001eb0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e9e:	f7ff fa99 	bl	80013d4 <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d901      	bls.n	8001eb0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001eac:	2303      	movs	r3, #3
 8001eae:	e1ef      	b.n	8002290 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001eb0:	4b0e      	ldr	r3, [pc, #56]	; (8001eec <HAL_RCC_OscConfig+0x27c>)
 8001eb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d0ef      	beq.n	8001e9e <HAL_RCC_OscConfig+0x22e>
 8001ebe:	e020      	b.n	8001f02 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ec0:	4b0a      	ldr	r3, [pc, #40]	; (8001eec <HAL_RCC_OscConfig+0x27c>)
 8001ec2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ec6:	4a09      	ldr	r2, [pc, #36]	; (8001eec <HAL_RCC_OscConfig+0x27c>)
 8001ec8:	f023 0301 	bic.w	r3, r3, #1
 8001ecc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ed0:	f7ff fa80 	bl	80013d4 <HAL_GetTick>
 8001ed4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ed6:	e00d      	b.n	8001ef4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ed8:	f7ff fa7c 	bl	80013d4 <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d906      	bls.n	8001ef4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e1d2      	b.n	8002290 <HAL_RCC_OscConfig+0x620>
 8001eea:	bf00      	nop
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ef4:	4b8c      	ldr	r3, [pc, #560]	; (8002128 <HAL_RCC_OscConfig+0x4b8>)
 8001ef6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001efa:	f003 0302 	and.w	r3, r3, #2
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d1ea      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0304 	and.w	r3, r3, #4
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	f000 80a6 	beq.w	800205c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f10:	2300      	movs	r3, #0
 8001f12:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f14:	4b84      	ldr	r3, [pc, #528]	; (8002128 <HAL_RCC_OscConfig+0x4b8>)
 8001f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d101      	bne.n	8001f24 <HAL_RCC_OscConfig+0x2b4>
 8001f20:	2301      	movs	r3, #1
 8001f22:	e000      	b.n	8001f26 <HAL_RCC_OscConfig+0x2b6>
 8001f24:	2300      	movs	r3, #0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d00d      	beq.n	8001f46 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f2a:	4b7f      	ldr	r3, [pc, #508]	; (8002128 <HAL_RCC_OscConfig+0x4b8>)
 8001f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f2e:	4a7e      	ldr	r2, [pc, #504]	; (8002128 <HAL_RCC_OscConfig+0x4b8>)
 8001f30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f34:	6593      	str	r3, [r2, #88]	; 0x58
 8001f36:	4b7c      	ldr	r3, [pc, #496]	; (8002128 <HAL_RCC_OscConfig+0x4b8>)
 8001f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f3e:	60fb      	str	r3, [r7, #12]
 8001f40:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001f42:	2301      	movs	r3, #1
 8001f44:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f46:	4b79      	ldr	r3, [pc, #484]	; (800212c <HAL_RCC_OscConfig+0x4bc>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d118      	bne.n	8001f84 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f52:	4b76      	ldr	r3, [pc, #472]	; (800212c <HAL_RCC_OscConfig+0x4bc>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a75      	ldr	r2, [pc, #468]	; (800212c <HAL_RCC_OscConfig+0x4bc>)
 8001f58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f5e:	f7ff fa39 	bl	80013d4 <HAL_GetTick>
 8001f62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f64:	e008      	b.n	8001f78 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f66:	f7ff fa35 	bl	80013d4 <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d901      	bls.n	8001f78 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e18b      	b.n	8002290 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f78:	4b6c      	ldr	r3, [pc, #432]	; (800212c <HAL_RCC_OscConfig+0x4bc>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d0f0      	beq.n	8001f66 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d108      	bne.n	8001f9e <HAL_RCC_OscConfig+0x32e>
 8001f8c:	4b66      	ldr	r3, [pc, #408]	; (8002128 <HAL_RCC_OscConfig+0x4b8>)
 8001f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f92:	4a65      	ldr	r2, [pc, #404]	; (8002128 <HAL_RCC_OscConfig+0x4b8>)
 8001f94:	f043 0301 	orr.w	r3, r3, #1
 8001f98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f9c:	e024      	b.n	8001fe8 <HAL_RCC_OscConfig+0x378>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	2b05      	cmp	r3, #5
 8001fa4:	d110      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x358>
 8001fa6:	4b60      	ldr	r3, [pc, #384]	; (8002128 <HAL_RCC_OscConfig+0x4b8>)
 8001fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fac:	4a5e      	ldr	r2, [pc, #376]	; (8002128 <HAL_RCC_OscConfig+0x4b8>)
 8001fae:	f043 0304 	orr.w	r3, r3, #4
 8001fb2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fb6:	4b5c      	ldr	r3, [pc, #368]	; (8002128 <HAL_RCC_OscConfig+0x4b8>)
 8001fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fbc:	4a5a      	ldr	r2, [pc, #360]	; (8002128 <HAL_RCC_OscConfig+0x4b8>)
 8001fbe:	f043 0301 	orr.w	r3, r3, #1
 8001fc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fc6:	e00f      	b.n	8001fe8 <HAL_RCC_OscConfig+0x378>
 8001fc8:	4b57      	ldr	r3, [pc, #348]	; (8002128 <HAL_RCC_OscConfig+0x4b8>)
 8001fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fce:	4a56      	ldr	r2, [pc, #344]	; (8002128 <HAL_RCC_OscConfig+0x4b8>)
 8001fd0:	f023 0301 	bic.w	r3, r3, #1
 8001fd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fd8:	4b53      	ldr	r3, [pc, #332]	; (8002128 <HAL_RCC_OscConfig+0x4b8>)
 8001fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fde:	4a52      	ldr	r2, [pc, #328]	; (8002128 <HAL_RCC_OscConfig+0x4b8>)
 8001fe0:	f023 0304 	bic.w	r3, r3, #4
 8001fe4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d016      	beq.n	800201e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ff0:	f7ff f9f0 	bl	80013d4 <HAL_GetTick>
 8001ff4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ff6:	e00a      	b.n	800200e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ff8:	f7ff f9ec 	bl	80013d4 <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	f241 3288 	movw	r2, #5000	; 0x1388
 8002006:	4293      	cmp	r3, r2
 8002008:	d901      	bls.n	800200e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e140      	b.n	8002290 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800200e:	4b46      	ldr	r3, [pc, #280]	; (8002128 <HAL_RCC_OscConfig+0x4b8>)
 8002010:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002014:	f003 0302 	and.w	r3, r3, #2
 8002018:	2b00      	cmp	r3, #0
 800201a:	d0ed      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x388>
 800201c:	e015      	b.n	800204a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800201e:	f7ff f9d9 	bl	80013d4 <HAL_GetTick>
 8002022:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002024:	e00a      	b.n	800203c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002026:	f7ff f9d5 	bl	80013d4 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	f241 3288 	movw	r2, #5000	; 0x1388
 8002034:	4293      	cmp	r3, r2
 8002036:	d901      	bls.n	800203c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002038:	2303      	movs	r3, #3
 800203a:	e129      	b.n	8002290 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800203c:	4b3a      	ldr	r3, [pc, #232]	; (8002128 <HAL_RCC_OscConfig+0x4b8>)
 800203e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	2b00      	cmp	r3, #0
 8002048:	d1ed      	bne.n	8002026 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800204a:	7ffb      	ldrb	r3, [r7, #31]
 800204c:	2b01      	cmp	r3, #1
 800204e:	d105      	bne.n	800205c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002050:	4b35      	ldr	r3, [pc, #212]	; (8002128 <HAL_RCC_OscConfig+0x4b8>)
 8002052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002054:	4a34      	ldr	r2, [pc, #208]	; (8002128 <HAL_RCC_OscConfig+0x4b8>)
 8002056:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800205a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0320 	and.w	r3, r3, #32
 8002064:	2b00      	cmp	r3, #0
 8002066:	d03c      	beq.n	80020e2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	699b      	ldr	r3, [r3, #24]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d01c      	beq.n	80020aa <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002070:	4b2d      	ldr	r3, [pc, #180]	; (8002128 <HAL_RCC_OscConfig+0x4b8>)
 8002072:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002076:	4a2c      	ldr	r2, [pc, #176]	; (8002128 <HAL_RCC_OscConfig+0x4b8>)
 8002078:	f043 0301 	orr.w	r3, r3, #1
 800207c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002080:	f7ff f9a8 	bl	80013d4 <HAL_GetTick>
 8002084:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002086:	e008      	b.n	800209a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002088:	f7ff f9a4 	bl	80013d4 <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	2b02      	cmp	r3, #2
 8002094:	d901      	bls.n	800209a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e0fa      	b.n	8002290 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800209a:	4b23      	ldr	r3, [pc, #140]	; (8002128 <HAL_RCC_OscConfig+0x4b8>)
 800209c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020a0:	f003 0302 	and.w	r3, r3, #2
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d0ef      	beq.n	8002088 <HAL_RCC_OscConfig+0x418>
 80020a8:	e01b      	b.n	80020e2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80020aa:	4b1f      	ldr	r3, [pc, #124]	; (8002128 <HAL_RCC_OscConfig+0x4b8>)
 80020ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020b0:	4a1d      	ldr	r2, [pc, #116]	; (8002128 <HAL_RCC_OscConfig+0x4b8>)
 80020b2:	f023 0301 	bic.w	r3, r3, #1
 80020b6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020ba:	f7ff f98b 	bl	80013d4 <HAL_GetTick>
 80020be:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80020c0:	e008      	b.n	80020d4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020c2:	f7ff f987 	bl	80013d4 <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d901      	bls.n	80020d4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	e0dd      	b.n	8002290 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80020d4:	4b14      	ldr	r3, [pc, #80]	; (8002128 <HAL_RCC_OscConfig+0x4b8>)
 80020d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d1ef      	bne.n	80020c2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	69db      	ldr	r3, [r3, #28]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	f000 80d1 	beq.w	800228e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020ec:	4b0e      	ldr	r3, [pc, #56]	; (8002128 <HAL_RCC_OscConfig+0x4b8>)
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	f003 030c 	and.w	r3, r3, #12
 80020f4:	2b0c      	cmp	r3, #12
 80020f6:	f000 808b 	beq.w	8002210 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	69db      	ldr	r3, [r3, #28]
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d15e      	bne.n	80021c0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002102:	4b09      	ldr	r3, [pc, #36]	; (8002128 <HAL_RCC_OscConfig+0x4b8>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a08      	ldr	r2, [pc, #32]	; (8002128 <HAL_RCC_OscConfig+0x4b8>)
 8002108:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800210c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800210e:	f7ff f961 	bl	80013d4 <HAL_GetTick>
 8002112:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002114:	e00c      	b.n	8002130 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002116:	f7ff f95d 	bl	80013d4 <HAL_GetTick>
 800211a:	4602      	mov	r2, r0
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	2b02      	cmp	r3, #2
 8002122:	d905      	bls.n	8002130 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e0b3      	b.n	8002290 <HAL_RCC_OscConfig+0x620>
 8002128:	40021000 	.word	0x40021000
 800212c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002130:	4b59      	ldr	r3, [pc, #356]	; (8002298 <HAL_RCC_OscConfig+0x628>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d1ec      	bne.n	8002116 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800213c:	4b56      	ldr	r3, [pc, #344]	; (8002298 <HAL_RCC_OscConfig+0x628>)
 800213e:	68da      	ldr	r2, [r3, #12]
 8002140:	4b56      	ldr	r3, [pc, #344]	; (800229c <HAL_RCC_OscConfig+0x62c>)
 8002142:	4013      	ands	r3, r2
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	6a11      	ldr	r1, [r2, #32]
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800214c:	3a01      	subs	r2, #1
 800214e:	0112      	lsls	r2, r2, #4
 8002150:	4311      	orrs	r1, r2
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002156:	0212      	lsls	r2, r2, #8
 8002158:	4311      	orrs	r1, r2
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800215e:	0852      	lsrs	r2, r2, #1
 8002160:	3a01      	subs	r2, #1
 8002162:	0552      	lsls	r2, r2, #21
 8002164:	4311      	orrs	r1, r2
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800216a:	0852      	lsrs	r2, r2, #1
 800216c:	3a01      	subs	r2, #1
 800216e:	0652      	lsls	r2, r2, #25
 8002170:	4311      	orrs	r1, r2
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002176:	06d2      	lsls	r2, r2, #27
 8002178:	430a      	orrs	r2, r1
 800217a:	4947      	ldr	r1, [pc, #284]	; (8002298 <HAL_RCC_OscConfig+0x628>)
 800217c:	4313      	orrs	r3, r2
 800217e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002180:	4b45      	ldr	r3, [pc, #276]	; (8002298 <HAL_RCC_OscConfig+0x628>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a44      	ldr	r2, [pc, #272]	; (8002298 <HAL_RCC_OscConfig+0x628>)
 8002186:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800218a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800218c:	4b42      	ldr	r3, [pc, #264]	; (8002298 <HAL_RCC_OscConfig+0x628>)
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	4a41      	ldr	r2, [pc, #260]	; (8002298 <HAL_RCC_OscConfig+0x628>)
 8002192:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002196:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002198:	f7ff f91c 	bl	80013d4 <HAL_GetTick>
 800219c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800219e:	e008      	b.n	80021b2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021a0:	f7ff f918 	bl	80013d4 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e06e      	b.n	8002290 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021b2:	4b39      	ldr	r3, [pc, #228]	; (8002298 <HAL_RCC_OscConfig+0x628>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d0f0      	beq.n	80021a0 <HAL_RCC_OscConfig+0x530>
 80021be:	e066      	b.n	800228e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021c0:	4b35      	ldr	r3, [pc, #212]	; (8002298 <HAL_RCC_OscConfig+0x628>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a34      	ldr	r2, [pc, #208]	; (8002298 <HAL_RCC_OscConfig+0x628>)
 80021c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021ca:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80021cc:	4b32      	ldr	r3, [pc, #200]	; (8002298 <HAL_RCC_OscConfig+0x628>)
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	4a31      	ldr	r2, [pc, #196]	; (8002298 <HAL_RCC_OscConfig+0x628>)
 80021d2:	f023 0303 	bic.w	r3, r3, #3
 80021d6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80021d8:	4b2f      	ldr	r3, [pc, #188]	; (8002298 <HAL_RCC_OscConfig+0x628>)
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	4a2e      	ldr	r2, [pc, #184]	; (8002298 <HAL_RCC_OscConfig+0x628>)
 80021de:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80021e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021e6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e8:	f7ff f8f4 	bl	80013d4 <HAL_GetTick>
 80021ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021ee:	e008      	b.n	8002202 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021f0:	f7ff f8f0 	bl	80013d4 <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e046      	b.n	8002290 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002202:	4b25      	ldr	r3, [pc, #148]	; (8002298 <HAL_RCC_OscConfig+0x628>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d1f0      	bne.n	80021f0 <HAL_RCC_OscConfig+0x580>
 800220e:	e03e      	b.n	800228e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	69db      	ldr	r3, [r3, #28]
 8002214:	2b01      	cmp	r3, #1
 8002216:	d101      	bne.n	800221c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e039      	b.n	8002290 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800221c:	4b1e      	ldr	r3, [pc, #120]	; (8002298 <HAL_RCC_OscConfig+0x628>)
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	f003 0203 	and.w	r2, r3, #3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6a1b      	ldr	r3, [r3, #32]
 800222c:	429a      	cmp	r2, r3
 800222e:	d12c      	bne.n	800228a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223a:	3b01      	subs	r3, #1
 800223c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800223e:	429a      	cmp	r2, r3
 8002240:	d123      	bne.n	800228a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800224c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800224e:	429a      	cmp	r2, r3
 8002250:	d11b      	bne.n	800228a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800225c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800225e:	429a      	cmp	r2, r3
 8002260:	d113      	bne.n	800228a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226c:	085b      	lsrs	r3, r3, #1
 800226e:	3b01      	subs	r3, #1
 8002270:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002272:	429a      	cmp	r2, r3
 8002274:	d109      	bne.n	800228a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002280:	085b      	lsrs	r3, r3, #1
 8002282:	3b01      	subs	r3, #1
 8002284:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002286:	429a      	cmp	r2, r3
 8002288:	d001      	beq.n	800228e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e000      	b.n	8002290 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800228e:	2300      	movs	r3, #0
}
 8002290:	4618      	mov	r0, r3
 8002292:	3720      	adds	r7, #32
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	40021000 	.word	0x40021000
 800229c:	019f800c 	.word	0x019f800c

080022a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b086      	sub	sp, #24
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80022aa:	2300      	movs	r3, #0
 80022ac:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d101      	bne.n	80022b8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e11e      	b.n	80024f6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022b8:	4b91      	ldr	r3, [pc, #580]	; (8002500 <HAL_RCC_ClockConfig+0x260>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 030f 	and.w	r3, r3, #15
 80022c0:	683a      	ldr	r2, [r7, #0]
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d910      	bls.n	80022e8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022c6:	4b8e      	ldr	r3, [pc, #568]	; (8002500 <HAL_RCC_ClockConfig+0x260>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f023 020f 	bic.w	r2, r3, #15
 80022ce:	498c      	ldr	r1, [pc, #560]	; (8002500 <HAL_RCC_ClockConfig+0x260>)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022d6:	4b8a      	ldr	r3, [pc, #552]	; (8002500 <HAL_RCC_ClockConfig+0x260>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 030f 	and.w	r3, r3, #15
 80022de:	683a      	ldr	r2, [r7, #0]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d001      	beq.n	80022e8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e106      	b.n	80024f6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0301 	and.w	r3, r3, #1
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d073      	beq.n	80023dc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	2b03      	cmp	r3, #3
 80022fa:	d129      	bne.n	8002350 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022fc:	4b81      	ldr	r3, [pc, #516]	; (8002504 <HAL_RCC_ClockConfig+0x264>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d101      	bne.n	800230c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e0f4      	b.n	80024f6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800230c:	f000 f9d0 	bl	80026b0 <RCC_GetSysClockFreqFromPLLSource>
 8002310:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	4a7c      	ldr	r2, [pc, #496]	; (8002508 <HAL_RCC_ClockConfig+0x268>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d93f      	bls.n	800239a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800231a:	4b7a      	ldr	r3, [pc, #488]	; (8002504 <HAL_RCC_ClockConfig+0x264>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d009      	beq.n	800233a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800232e:	2b00      	cmp	r3, #0
 8002330:	d033      	beq.n	800239a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002336:	2b00      	cmp	r3, #0
 8002338:	d12f      	bne.n	800239a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800233a:	4b72      	ldr	r3, [pc, #456]	; (8002504 <HAL_RCC_ClockConfig+0x264>)
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002342:	4a70      	ldr	r2, [pc, #448]	; (8002504 <HAL_RCC_ClockConfig+0x264>)
 8002344:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002348:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800234a:	2380      	movs	r3, #128	; 0x80
 800234c:	617b      	str	r3, [r7, #20]
 800234e:	e024      	b.n	800239a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	2b02      	cmp	r3, #2
 8002356:	d107      	bne.n	8002368 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002358:	4b6a      	ldr	r3, [pc, #424]	; (8002504 <HAL_RCC_ClockConfig+0x264>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d109      	bne.n	8002378 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e0c6      	b.n	80024f6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002368:	4b66      	ldr	r3, [pc, #408]	; (8002504 <HAL_RCC_ClockConfig+0x264>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002370:	2b00      	cmp	r3, #0
 8002372:	d101      	bne.n	8002378 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e0be      	b.n	80024f6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002378:	f000 f8ce 	bl	8002518 <HAL_RCC_GetSysClockFreq>
 800237c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	4a61      	ldr	r2, [pc, #388]	; (8002508 <HAL_RCC_ClockConfig+0x268>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d909      	bls.n	800239a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002386:	4b5f      	ldr	r3, [pc, #380]	; (8002504 <HAL_RCC_ClockConfig+0x264>)
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800238e:	4a5d      	ldr	r2, [pc, #372]	; (8002504 <HAL_RCC_ClockConfig+0x264>)
 8002390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002394:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002396:	2380      	movs	r3, #128	; 0x80
 8002398:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800239a:	4b5a      	ldr	r3, [pc, #360]	; (8002504 <HAL_RCC_ClockConfig+0x264>)
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f023 0203 	bic.w	r2, r3, #3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	4957      	ldr	r1, [pc, #348]	; (8002504 <HAL_RCC_ClockConfig+0x264>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023ac:	f7ff f812 	bl	80013d4 <HAL_GetTick>
 80023b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023b2:	e00a      	b.n	80023ca <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023b4:	f7ff f80e 	bl	80013d4 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	f241 3288 	movw	r2, #5000	; 0x1388
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e095      	b.n	80024f6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ca:	4b4e      	ldr	r3, [pc, #312]	; (8002504 <HAL_RCC_ClockConfig+0x264>)
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	f003 020c 	and.w	r2, r3, #12
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	429a      	cmp	r2, r3
 80023da:	d1eb      	bne.n	80023b4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0302 	and.w	r3, r3, #2
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d023      	beq.n	8002430 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0304 	and.w	r3, r3, #4
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d005      	beq.n	8002400 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023f4:	4b43      	ldr	r3, [pc, #268]	; (8002504 <HAL_RCC_ClockConfig+0x264>)
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	4a42      	ldr	r2, [pc, #264]	; (8002504 <HAL_RCC_ClockConfig+0x264>)
 80023fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80023fe:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0308 	and.w	r3, r3, #8
 8002408:	2b00      	cmp	r3, #0
 800240a:	d007      	beq.n	800241c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800240c:	4b3d      	ldr	r3, [pc, #244]	; (8002504 <HAL_RCC_ClockConfig+0x264>)
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002414:	4a3b      	ldr	r2, [pc, #236]	; (8002504 <HAL_RCC_ClockConfig+0x264>)
 8002416:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800241a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800241c:	4b39      	ldr	r3, [pc, #228]	; (8002504 <HAL_RCC_ClockConfig+0x264>)
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	4936      	ldr	r1, [pc, #216]	; (8002504 <HAL_RCC_ClockConfig+0x264>)
 800242a:	4313      	orrs	r3, r2
 800242c:	608b      	str	r3, [r1, #8]
 800242e:	e008      	b.n	8002442 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	2b80      	cmp	r3, #128	; 0x80
 8002434:	d105      	bne.n	8002442 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002436:	4b33      	ldr	r3, [pc, #204]	; (8002504 <HAL_RCC_ClockConfig+0x264>)
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	4a32      	ldr	r2, [pc, #200]	; (8002504 <HAL_RCC_ClockConfig+0x264>)
 800243c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002440:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002442:	4b2f      	ldr	r3, [pc, #188]	; (8002500 <HAL_RCC_ClockConfig+0x260>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 030f 	and.w	r3, r3, #15
 800244a:	683a      	ldr	r2, [r7, #0]
 800244c:	429a      	cmp	r2, r3
 800244e:	d21d      	bcs.n	800248c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002450:	4b2b      	ldr	r3, [pc, #172]	; (8002500 <HAL_RCC_ClockConfig+0x260>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f023 020f 	bic.w	r2, r3, #15
 8002458:	4929      	ldr	r1, [pc, #164]	; (8002500 <HAL_RCC_ClockConfig+0x260>)
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	4313      	orrs	r3, r2
 800245e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002460:	f7fe ffb8 	bl	80013d4 <HAL_GetTick>
 8002464:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002466:	e00a      	b.n	800247e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002468:	f7fe ffb4 	bl	80013d4 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	f241 3288 	movw	r2, #5000	; 0x1388
 8002476:	4293      	cmp	r3, r2
 8002478:	d901      	bls.n	800247e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e03b      	b.n	80024f6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800247e:	4b20      	ldr	r3, [pc, #128]	; (8002500 <HAL_RCC_ClockConfig+0x260>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 030f 	and.w	r3, r3, #15
 8002486:	683a      	ldr	r2, [r7, #0]
 8002488:	429a      	cmp	r2, r3
 800248a:	d1ed      	bne.n	8002468 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0304 	and.w	r3, r3, #4
 8002494:	2b00      	cmp	r3, #0
 8002496:	d008      	beq.n	80024aa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002498:	4b1a      	ldr	r3, [pc, #104]	; (8002504 <HAL_RCC_ClockConfig+0x264>)
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	4917      	ldr	r1, [pc, #92]	; (8002504 <HAL_RCC_ClockConfig+0x264>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0308 	and.w	r3, r3, #8
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d009      	beq.n	80024ca <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024b6:	4b13      	ldr	r3, [pc, #76]	; (8002504 <HAL_RCC_ClockConfig+0x264>)
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	00db      	lsls	r3, r3, #3
 80024c4:	490f      	ldr	r1, [pc, #60]	; (8002504 <HAL_RCC_ClockConfig+0x264>)
 80024c6:	4313      	orrs	r3, r2
 80024c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80024ca:	f000 f825 	bl	8002518 <HAL_RCC_GetSysClockFreq>
 80024ce:	4602      	mov	r2, r0
 80024d0:	4b0c      	ldr	r3, [pc, #48]	; (8002504 <HAL_RCC_ClockConfig+0x264>)
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	091b      	lsrs	r3, r3, #4
 80024d6:	f003 030f 	and.w	r3, r3, #15
 80024da:	490c      	ldr	r1, [pc, #48]	; (800250c <HAL_RCC_ClockConfig+0x26c>)
 80024dc:	5ccb      	ldrb	r3, [r1, r3]
 80024de:	f003 031f 	and.w	r3, r3, #31
 80024e2:	fa22 f303 	lsr.w	r3, r2, r3
 80024e6:	4a0a      	ldr	r2, [pc, #40]	; (8002510 <HAL_RCC_ClockConfig+0x270>)
 80024e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80024ea:	4b0a      	ldr	r3, [pc, #40]	; (8002514 <HAL_RCC_ClockConfig+0x274>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7fe fbb2 	bl	8000c58 <HAL_InitTick>
 80024f4:	4603      	mov	r3, r0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3718      	adds	r7, #24
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	40022000 	.word	0x40022000
 8002504:	40021000 	.word	0x40021000
 8002508:	04c4b400 	.word	0x04c4b400
 800250c:	08008094 	.word	0x08008094
 8002510:	20000000 	.word	0x20000000
 8002514:	20000004 	.word	0x20000004

08002518 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002518:	b480      	push	{r7}
 800251a:	b087      	sub	sp, #28
 800251c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800251e:	4b2c      	ldr	r3, [pc, #176]	; (80025d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f003 030c 	and.w	r3, r3, #12
 8002526:	2b04      	cmp	r3, #4
 8002528:	d102      	bne.n	8002530 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800252a:	4b2a      	ldr	r3, [pc, #168]	; (80025d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800252c:	613b      	str	r3, [r7, #16]
 800252e:	e047      	b.n	80025c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002530:	4b27      	ldr	r3, [pc, #156]	; (80025d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	f003 030c 	and.w	r3, r3, #12
 8002538:	2b08      	cmp	r3, #8
 800253a:	d102      	bne.n	8002542 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800253c:	4b26      	ldr	r3, [pc, #152]	; (80025d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800253e:	613b      	str	r3, [r7, #16]
 8002540:	e03e      	b.n	80025c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002542:	4b23      	ldr	r3, [pc, #140]	; (80025d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	f003 030c 	and.w	r3, r3, #12
 800254a:	2b0c      	cmp	r3, #12
 800254c:	d136      	bne.n	80025bc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800254e:	4b20      	ldr	r3, [pc, #128]	; (80025d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	f003 0303 	and.w	r3, r3, #3
 8002556:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002558:	4b1d      	ldr	r3, [pc, #116]	; (80025d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	091b      	lsrs	r3, r3, #4
 800255e:	f003 030f 	and.w	r3, r3, #15
 8002562:	3301      	adds	r3, #1
 8002564:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2b03      	cmp	r3, #3
 800256a:	d10c      	bne.n	8002586 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800256c:	4a1a      	ldr	r2, [pc, #104]	; (80025d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	fbb2 f3f3 	udiv	r3, r2, r3
 8002574:	4a16      	ldr	r2, [pc, #88]	; (80025d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002576:	68d2      	ldr	r2, [r2, #12]
 8002578:	0a12      	lsrs	r2, r2, #8
 800257a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800257e:	fb02 f303 	mul.w	r3, r2, r3
 8002582:	617b      	str	r3, [r7, #20]
      break;
 8002584:	e00c      	b.n	80025a0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002586:	4a13      	ldr	r2, [pc, #76]	; (80025d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	fbb2 f3f3 	udiv	r3, r2, r3
 800258e:	4a10      	ldr	r2, [pc, #64]	; (80025d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002590:	68d2      	ldr	r2, [r2, #12]
 8002592:	0a12      	lsrs	r2, r2, #8
 8002594:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002598:	fb02 f303 	mul.w	r3, r2, r3
 800259c:	617b      	str	r3, [r7, #20]
      break;
 800259e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80025a0:	4b0b      	ldr	r3, [pc, #44]	; (80025d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	0e5b      	lsrs	r3, r3, #25
 80025a6:	f003 0303 	and.w	r3, r3, #3
 80025aa:	3301      	adds	r3, #1
 80025ac:	005b      	lsls	r3, r3, #1
 80025ae:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80025b0:	697a      	ldr	r2, [r7, #20]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025b8:	613b      	str	r3, [r7, #16]
 80025ba:	e001      	b.n	80025c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80025bc:	2300      	movs	r3, #0
 80025be:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80025c0:	693b      	ldr	r3, [r7, #16]
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	371c      	adds	r7, #28
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	40021000 	.word	0x40021000
 80025d4:	00f42400 	.word	0x00f42400
 80025d8:	016e3600 	.word	0x016e3600

080025dc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025e0:	4b03      	ldr	r3, [pc, #12]	; (80025f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80025e2:	681b      	ldr	r3, [r3, #0]
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	20000000 	.word	0x20000000

080025f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80025f8:	f7ff fff0 	bl	80025dc <HAL_RCC_GetHCLKFreq>
 80025fc:	4602      	mov	r2, r0
 80025fe:	4b06      	ldr	r3, [pc, #24]	; (8002618 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	0a1b      	lsrs	r3, r3, #8
 8002604:	f003 0307 	and.w	r3, r3, #7
 8002608:	4904      	ldr	r1, [pc, #16]	; (800261c <HAL_RCC_GetPCLK1Freq+0x28>)
 800260a:	5ccb      	ldrb	r3, [r1, r3]
 800260c:	f003 031f 	and.w	r3, r3, #31
 8002610:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002614:	4618      	mov	r0, r3
 8002616:	bd80      	pop	{r7, pc}
 8002618:	40021000 	.word	0x40021000
 800261c:	080080a4 	.word	0x080080a4

08002620 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002624:	f7ff ffda 	bl	80025dc <HAL_RCC_GetHCLKFreq>
 8002628:	4602      	mov	r2, r0
 800262a:	4b06      	ldr	r3, [pc, #24]	; (8002644 <HAL_RCC_GetPCLK2Freq+0x24>)
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	0adb      	lsrs	r3, r3, #11
 8002630:	f003 0307 	and.w	r3, r3, #7
 8002634:	4904      	ldr	r1, [pc, #16]	; (8002648 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002636:	5ccb      	ldrb	r3, [r1, r3]
 8002638:	f003 031f 	and.w	r3, r3, #31
 800263c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002640:	4618      	mov	r0, r3
 8002642:	bd80      	pop	{r7, pc}
 8002644:	40021000 	.word	0x40021000
 8002648:	080080a4 	.word	0x080080a4

0800264c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	220f      	movs	r2, #15
 800265a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800265c:	4b12      	ldr	r3, [pc, #72]	; (80026a8 <HAL_RCC_GetClockConfig+0x5c>)
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	f003 0203 	and.w	r2, r3, #3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002668:	4b0f      	ldr	r3, [pc, #60]	; (80026a8 <HAL_RCC_GetClockConfig+0x5c>)
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002674:	4b0c      	ldr	r3, [pc, #48]	; (80026a8 <HAL_RCC_GetClockConfig+0x5c>)
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002680:	4b09      	ldr	r3, [pc, #36]	; (80026a8 <HAL_RCC_GetClockConfig+0x5c>)
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	08db      	lsrs	r3, r3, #3
 8002686:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800268e:	4b07      	ldr	r3, [pc, #28]	; (80026ac <HAL_RCC_GetClockConfig+0x60>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 020f 	and.w	r2, r3, #15
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	601a      	str	r2, [r3, #0]
}
 800269a:	bf00      	nop
 800269c:	370c      	adds	r7, #12
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	40021000 	.word	0x40021000
 80026ac:	40022000 	.word	0x40022000

080026b0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b087      	sub	sp, #28
 80026b4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80026b6:	4b1e      	ldr	r3, [pc, #120]	; (8002730 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	f003 0303 	and.w	r3, r3, #3
 80026be:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80026c0:	4b1b      	ldr	r3, [pc, #108]	; (8002730 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	091b      	lsrs	r3, r3, #4
 80026c6:	f003 030f 	and.w	r3, r3, #15
 80026ca:	3301      	adds	r3, #1
 80026cc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	2b03      	cmp	r3, #3
 80026d2:	d10c      	bne.n	80026ee <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80026d4:	4a17      	ldr	r2, [pc, #92]	; (8002734 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026dc:	4a14      	ldr	r2, [pc, #80]	; (8002730 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026de:	68d2      	ldr	r2, [r2, #12]
 80026e0:	0a12      	lsrs	r2, r2, #8
 80026e2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80026e6:	fb02 f303 	mul.w	r3, r2, r3
 80026ea:	617b      	str	r3, [r7, #20]
    break;
 80026ec:	e00c      	b.n	8002708 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80026ee:	4a12      	ldr	r2, [pc, #72]	; (8002738 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026f6:	4a0e      	ldr	r2, [pc, #56]	; (8002730 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026f8:	68d2      	ldr	r2, [r2, #12]
 80026fa:	0a12      	lsrs	r2, r2, #8
 80026fc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002700:	fb02 f303 	mul.w	r3, r2, r3
 8002704:	617b      	str	r3, [r7, #20]
    break;
 8002706:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002708:	4b09      	ldr	r3, [pc, #36]	; (8002730 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	0e5b      	lsrs	r3, r3, #25
 800270e:	f003 0303 	and.w	r3, r3, #3
 8002712:	3301      	adds	r3, #1
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002718:	697a      	ldr	r2, [r7, #20]
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002720:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002722:	687b      	ldr	r3, [r7, #4]
}
 8002724:	4618      	mov	r0, r3
 8002726:	371c      	adds	r7, #28
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr
 8002730:	40021000 	.word	0x40021000
 8002734:	016e3600 	.word	0x016e3600
 8002738:	00f42400 	.word	0x00f42400

0800273c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b086      	sub	sp, #24
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002744:	2300      	movs	r3, #0
 8002746:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002748:	2300      	movs	r3, #0
 800274a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002754:	2b00      	cmp	r3, #0
 8002756:	f000 8098 	beq.w	800288a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800275a:	2300      	movs	r3, #0
 800275c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800275e:	4b43      	ldr	r3, [pc, #268]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d10d      	bne.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800276a:	4b40      	ldr	r3, [pc, #256]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800276c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800276e:	4a3f      	ldr	r2, [pc, #252]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002770:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002774:	6593      	str	r3, [r2, #88]	; 0x58
 8002776:	4b3d      	ldr	r3, [pc, #244]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800277a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800277e:	60bb      	str	r3, [r7, #8]
 8002780:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002782:	2301      	movs	r3, #1
 8002784:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002786:	4b3a      	ldr	r3, [pc, #232]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a39      	ldr	r2, [pc, #228]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800278c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002790:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002792:	f7fe fe1f 	bl	80013d4 <HAL_GetTick>
 8002796:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002798:	e009      	b.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800279a:	f7fe fe1b 	bl	80013d4 <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d902      	bls.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80027a8:	2303      	movs	r3, #3
 80027aa:	74fb      	strb	r3, [r7, #19]
        break;
 80027ac:	e005      	b.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027ae:	4b30      	ldr	r3, [pc, #192]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d0ef      	beq.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80027ba:	7cfb      	ldrb	r3, [r7, #19]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d159      	bne.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80027c0:	4b2a      	ldr	r3, [pc, #168]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027ca:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d01e      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027d6:	697a      	ldr	r2, [r7, #20]
 80027d8:	429a      	cmp	r2, r3
 80027da:	d019      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80027dc:	4b23      	ldr	r3, [pc, #140]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027e6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80027e8:	4b20      	ldr	r3, [pc, #128]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ee:	4a1f      	ldr	r2, [pc, #124]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80027f8:	4b1c      	ldr	r3, [pc, #112]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027fe:	4a1b      	ldr	r2, [pc, #108]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002800:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002804:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002808:	4a18      	ldr	r2, [pc, #96]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	f003 0301 	and.w	r3, r3, #1
 8002816:	2b00      	cmp	r3, #0
 8002818:	d016      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800281a:	f7fe fddb 	bl	80013d4 <HAL_GetTick>
 800281e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002820:	e00b      	b.n	800283a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002822:	f7fe fdd7 	bl	80013d4 <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002830:	4293      	cmp	r3, r2
 8002832:	d902      	bls.n	800283a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	74fb      	strb	r3, [r7, #19]
            break;
 8002838:	e006      	b.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800283a:	4b0c      	ldr	r3, [pc, #48]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800283c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002840:	f003 0302 	and.w	r3, r3, #2
 8002844:	2b00      	cmp	r3, #0
 8002846:	d0ec      	beq.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002848:	7cfb      	ldrb	r3, [r7, #19]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d10b      	bne.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800284e:	4b07      	ldr	r3, [pc, #28]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002850:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002854:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800285c:	4903      	ldr	r1, [pc, #12]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800285e:	4313      	orrs	r3, r2
 8002860:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002864:	e008      	b.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002866:	7cfb      	ldrb	r3, [r7, #19]
 8002868:	74bb      	strb	r3, [r7, #18]
 800286a:	e005      	b.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800286c:	40021000 	.word	0x40021000
 8002870:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002874:	7cfb      	ldrb	r3, [r7, #19]
 8002876:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002878:	7c7b      	ldrb	r3, [r7, #17]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d105      	bne.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800287e:	4ba7      	ldr	r3, [pc, #668]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002882:	4aa6      	ldr	r2, [pc, #664]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002884:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002888:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	2b00      	cmp	r3, #0
 8002894:	d00a      	beq.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002896:	4ba1      	ldr	r3, [pc, #644]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002898:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800289c:	f023 0203 	bic.w	r2, r3, #3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	499d      	ldr	r1, [pc, #628]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0302 	and.w	r3, r3, #2
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d00a      	beq.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028b8:	4b98      	ldr	r3, [pc, #608]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028be:	f023 020c 	bic.w	r2, r3, #12
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	4995      	ldr	r1, [pc, #596]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0304 	and.w	r3, r3, #4
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d00a      	beq.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80028da:	4b90      	ldr	r3, [pc, #576]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028e0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	498c      	ldr	r1, [pc, #560]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0308 	and.w	r3, r3, #8
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d00a      	beq.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80028fc:	4b87      	ldr	r3, [pc, #540]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002902:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	691b      	ldr	r3, [r3, #16]
 800290a:	4984      	ldr	r1, [pc, #528]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800290c:	4313      	orrs	r3, r2
 800290e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0310 	and.w	r3, r3, #16
 800291a:	2b00      	cmp	r3, #0
 800291c:	d00a      	beq.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800291e:	4b7f      	ldr	r3, [pc, #508]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002920:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002924:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	695b      	ldr	r3, [r3, #20]
 800292c:	497b      	ldr	r1, [pc, #492]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800292e:	4313      	orrs	r3, r2
 8002930:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0320 	and.w	r3, r3, #32
 800293c:	2b00      	cmp	r3, #0
 800293e:	d00a      	beq.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002940:	4b76      	ldr	r3, [pc, #472]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002946:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	4973      	ldr	r1, [pc, #460]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002950:	4313      	orrs	r3, r2
 8002952:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800295e:	2b00      	cmp	r3, #0
 8002960:	d00a      	beq.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002962:	4b6e      	ldr	r3, [pc, #440]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002964:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002968:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	69db      	ldr	r3, [r3, #28]
 8002970:	496a      	ldr	r1, [pc, #424]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002972:	4313      	orrs	r3, r2
 8002974:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002980:	2b00      	cmp	r3, #0
 8002982:	d00a      	beq.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002984:	4b65      	ldr	r3, [pc, #404]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800298a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a1b      	ldr	r3, [r3, #32]
 8002992:	4962      	ldr	r1, [pc, #392]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002994:	4313      	orrs	r3, r2
 8002996:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d00a      	beq.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80029a6:	4b5d      	ldr	r3, [pc, #372]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b4:	4959      	ldr	r1, [pc, #356]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d00a      	beq.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80029c8:	4b54      	ldr	r3, [pc, #336]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80029ce:	f023 0203 	bic.w	r2, r3, #3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d6:	4951      	ldr	r1, [pc, #324]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029d8:	4313      	orrs	r3, r2
 80029da:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d00a      	beq.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80029ea:	4b4c      	ldr	r3, [pc, #304]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029f0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f8:	4948      	ldr	r1, [pc, #288]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d015      	beq.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a0c:	4b43      	ldr	r3, [pc, #268]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a12:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1a:	4940      	ldr	r1, [pc, #256]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a2a:	d105      	bne.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a2c:	4b3b      	ldr	r3, [pc, #236]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	4a3a      	ldr	r2, [pc, #232]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a36:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d015      	beq.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002a44:	4b35      	ldr	r3, [pc, #212]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a4a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a52:	4932      	ldr	r1, [pc, #200]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a54:	4313      	orrs	r3, r2
 8002a56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a62:	d105      	bne.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a64:	4b2d      	ldr	r3, [pc, #180]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	4a2c      	ldr	r2, [pc, #176]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a6e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d015      	beq.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002a7c:	4b27      	ldr	r3, [pc, #156]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a82:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a8a:	4924      	ldr	r1, [pc, #144]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a96:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a9a:	d105      	bne.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a9c:	4b1f      	ldr	r3, [pc, #124]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	4a1e      	ldr	r2, [pc, #120]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aa2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002aa6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d015      	beq.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ab4:	4b19      	ldr	r3, [pc, #100]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ac2:	4916      	ldr	r1, [pc, #88]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ace:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ad2:	d105      	bne.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ad4:	4b11      	ldr	r3, [pc, #68]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	4a10      	ldr	r2, [pc, #64]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ada:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ade:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d019      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002aec:	4b0b      	ldr	r3, [pc, #44]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002af2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afa:	4908      	ldr	r1, [pc, #32]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002afc:	4313      	orrs	r3, r2
 8002afe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b0a:	d109      	bne.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b0c:	4b03      	ldr	r3, [pc, #12]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	4a02      	ldr	r2, [pc, #8]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b16:	60d3      	str	r3, [r2, #12]
 8002b18:	e002      	b.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002b1a:	bf00      	nop
 8002b1c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d015      	beq.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002b2c:	4b29      	ldr	r3, [pc, #164]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b32:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b3a:	4926      	ldr	r1, [pc, #152]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b4a:	d105      	bne.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002b4c:	4b21      	ldr	r3, [pc, #132]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	4a20      	ldr	r2, [pc, #128]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b56:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d015      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002b64:	4b1b      	ldr	r3, [pc, #108]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b6a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b72:	4918      	ldr	r1, [pc, #96]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b82:	d105      	bne.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002b84:	4b13      	ldr	r3, [pc, #76]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	4a12      	ldr	r2, [pc, #72]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b8e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d015      	beq.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002b9c:	4b0d      	ldr	r3, [pc, #52]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002ba2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002baa:	490a      	ldr	r1, [pc, #40]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002bac:	4313      	orrs	r3, r2
 8002bae:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bb6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002bba:	d105      	bne.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bbc:	4b05      	ldr	r3, [pc, #20]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	4a04      	ldr	r2, [pc, #16]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002bc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bc6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002bc8:	7cbb      	ldrb	r3, [r7, #18]
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3718      	adds	r7, #24
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	40021000 	.word	0x40021000

08002bd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d101      	bne.n	8002bea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e049      	b.n	8002c7e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d106      	bne.n	8002c04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f7fe fa7a 	bl	80010f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2202      	movs	r2, #2
 8002c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	3304      	adds	r3, #4
 8002c14:	4619      	mov	r1, r3
 8002c16:	4610      	mov	r0, r2
 8002c18:	f000 fdf4 	bl	8003804 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3708      	adds	r7, #8
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
	...

08002c88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b085      	sub	sp, #20
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d001      	beq.n	8002ca0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e054      	b.n	8002d4a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2202      	movs	r2, #2
 8002ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	68da      	ldr	r2, [r3, #12]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f042 0201 	orr.w	r2, r2, #1
 8002cb6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a26      	ldr	r2, [pc, #152]	; (8002d58 <HAL_TIM_Base_Start_IT+0xd0>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d022      	beq.n	8002d08 <HAL_TIM_Base_Start_IT+0x80>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cca:	d01d      	beq.n	8002d08 <HAL_TIM_Base_Start_IT+0x80>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a22      	ldr	r2, [pc, #136]	; (8002d5c <HAL_TIM_Base_Start_IT+0xd4>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d018      	beq.n	8002d08 <HAL_TIM_Base_Start_IT+0x80>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a21      	ldr	r2, [pc, #132]	; (8002d60 <HAL_TIM_Base_Start_IT+0xd8>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d013      	beq.n	8002d08 <HAL_TIM_Base_Start_IT+0x80>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a1f      	ldr	r2, [pc, #124]	; (8002d64 <HAL_TIM_Base_Start_IT+0xdc>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d00e      	beq.n	8002d08 <HAL_TIM_Base_Start_IT+0x80>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a1e      	ldr	r2, [pc, #120]	; (8002d68 <HAL_TIM_Base_Start_IT+0xe0>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d009      	beq.n	8002d08 <HAL_TIM_Base_Start_IT+0x80>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a1c      	ldr	r2, [pc, #112]	; (8002d6c <HAL_TIM_Base_Start_IT+0xe4>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d004      	beq.n	8002d08 <HAL_TIM_Base_Start_IT+0x80>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a1b      	ldr	r2, [pc, #108]	; (8002d70 <HAL_TIM_Base_Start_IT+0xe8>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d115      	bne.n	8002d34 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	689a      	ldr	r2, [r3, #8]
 8002d0e:	4b19      	ldr	r3, [pc, #100]	; (8002d74 <HAL_TIM_Base_Start_IT+0xec>)
 8002d10:	4013      	ands	r3, r2
 8002d12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2b06      	cmp	r3, #6
 8002d18:	d015      	beq.n	8002d46 <HAL_TIM_Base_Start_IT+0xbe>
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d20:	d011      	beq.n	8002d46 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f042 0201 	orr.w	r2, r2, #1
 8002d30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d32:	e008      	b.n	8002d46 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f042 0201 	orr.w	r2, r2, #1
 8002d42:	601a      	str	r2, [r3, #0]
 8002d44:	e000      	b.n	8002d48 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d46:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3714      	adds	r7, #20
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	40012c00 	.word	0x40012c00
 8002d5c:	40000400 	.word	0x40000400
 8002d60:	40000800 	.word	0x40000800
 8002d64:	40000c00 	.word	0x40000c00
 8002d68:	40013400 	.word	0x40013400
 8002d6c:	40014000 	.word	0x40014000
 8002d70:	40015000 	.word	0x40015000
 8002d74:	00010007 	.word	0x00010007

08002d78 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d101      	bne.n	8002d8a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e049      	b.n	8002e1e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d106      	bne.n	8002da4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f000 f841 	bl	8002e26 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2202      	movs	r2, #2
 8002da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	3304      	adds	r3, #4
 8002db4:	4619      	mov	r1, r3
 8002db6:	4610      	mov	r0, r2
 8002db8:	f000 fd24 	bl	8003804 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3708      	adds	r7, #8
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002e26:	b480      	push	{r7}
 8002e28:	b083      	sub	sp, #12
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002e2e:	bf00      	nop
 8002e30:	370c      	adds	r7, #12
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
	...

08002e3c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d109      	bne.n	8002e60 <HAL_TIM_PWM_Start+0x24>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	bf14      	ite	ne
 8002e58:	2301      	movne	r3, #1
 8002e5a:	2300      	moveq	r3, #0
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	e03c      	b.n	8002eda <HAL_TIM_PWM_Start+0x9e>
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	2b04      	cmp	r3, #4
 8002e64:	d109      	bne.n	8002e7a <HAL_TIM_PWM_Start+0x3e>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	bf14      	ite	ne
 8002e72:	2301      	movne	r3, #1
 8002e74:	2300      	moveq	r3, #0
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	e02f      	b.n	8002eda <HAL_TIM_PWM_Start+0x9e>
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	2b08      	cmp	r3, #8
 8002e7e:	d109      	bne.n	8002e94 <HAL_TIM_PWM_Start+0x58>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	bf14      	ite	ne
 8002e8c:	2301      	movne	r3, #1
 8002e8e:	2300      	moveq	r3, #0
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	e022      	b.n	8002eda <HAL_TIM_PWM_Start+0x9e>
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	2b0c      	cmp	r3, #12
 8002e98:	d109      	bne.n	8002eae <HAL_TIM_PWM_Start+0x72>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	bf14      	ite	ne
 8002ea6:	2301      	movne	r3, #1
 8002ea8:	2300      	moveq	r3, #0
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	e015      	b.n	8002eda <HAL_TIM_PWM_Start+0x9e>
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	2b10      	cmp	r3, #16
 8002eb2:	d109      	bne.n	8002ec8 <HAL_TIM_PWM_Start+0x8c>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	bf14      	ite	ne
 8002ec0:	2301      	movne	r3, #1
 8002ec2:	2300      	moveq	r3, #0
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	e008      	b.n	8002eda <HAL_TIM_PWM_Start+0x9e>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	bf14      	ite	ne
 8002ed4:	2301      	movne	r3, #1
 8002ed6:	2300      	moveq	r3, #0
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d001      	beq.n	8002ee2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e0a6      	b.n	8003030 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d104      	bne.n	8002ef2 <HAL_TIM_PWM_Start+0xb6>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2202      	movs	r2, #2
 8002eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ef0:	e023      	b.n	8002f3a <HAL_TIM_PWM_Start+0xfe>
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	2b04      	cmp	r3, #4
 8002ef6:	d104      	bne.n	8002f02 <HAL_TIM_PWM_Start+0xc6>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2202      	movs	r2, #2
 8002efc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f00:	e01b      	b.n	8002f3a <HAL_TIM_PWM_Start+0xfe>
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	2b08      	cmp	r3, #8
 8002f06:	d104      	bne.n	8002f12 <HAL_TIM_PWM_Start+0xd6>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2202      	movs	r2, #2
 8002f0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f10:	e013      	b.n	8002f3a <HAL_TIM_PWM_Start+0xfe>
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	2b0c      	cmp	r3, #12
 8002f16:	d104      	bne.n	8002f22 <HAL_TIM_PWM_Start+0xe6>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2202      	movs	r2, #2
 8002f1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002f20:	e00b      	b.n	8002f3a <HAL_TIM_PWM_Start+0xfe>
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	2b10      	cmp	r3, #16
 8002f26:	d104      	bne.n	8002f32 <HAL_TIM_PWM_Start+0xf6>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2202      	movs	r2, #2
 8002f2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f30:	e003      	b.n	8002f3a <HAL_TIM_PWM_Start+0xfe>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2202      	movs	r2, #2
 8002f36:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	6839      	ldr	r1, [r7, #0]
 8002f42:	4618      	mov	r0, r3
 8002f44:	f001 f8cc 	bl	80040e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a3a      	ldr	r2, [pc, #232]	; (8003038 <HAL_TIM_PWM_Start+0x1fc>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d018      	beq.n	8002f84 <HAL_TIM_PWM_Start+0x148>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a39      	ldr	r2, [pc, #228]	; (800303c <HAL_TIM_PWM_Start+0x200>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d013      	beq.n	8002f84 <HAL_TIM_PWM_Start+0x148>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a37      	ldr	r2, [pc, #220]	; (8003040 <HAL_TIM_PWM_Start+0x204>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d00e      	beq.n	8002f84 <HAL_TIM_PWM_Start+0x148>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a36      	ldr	r2, [pc, #216]	; (8003044 <HAL_TIM_PWM_Start+0x208>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d009      	beq.n	8002f84 <HAL_TIM_PWM_Start+0x148>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a34      	ldr	r2, [pc, #208]	; (8003048 <HAL_TIM_PWM_Start+0x20c>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d004      	beq.n	8002f84 <HAL_TIM_PWM_Start+0x148>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a33      	ldr	r2, [pc, #204]	; (800304c <HAL_TIM_PWM_Start+0x210>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d101      	bne.n	8002f88 <HAL_TIM_PWM_Start+0x14c>
 8002f84:	2301      	movs	r3, #1
 8002f86:	e000      	b.n	8002f8a <HAL_TIM_PWM_Start+0x14e>
 8002f88:	2300      	movs	r3, #0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d007      	beq.n	8002f9e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f9c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a25      	ldr	r2, [pc, #148]	; (8003038 <HAL_TIM_PWM_Start+0x1fc>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d022      	beq.n	8002fee <HAL_TIM_PWM_Start+0x1b2>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fb0:	d01d      	beq.n	8002fee <HAL_TIM_PWM_Start+0x1b2>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a26      	ldr	r2, [pc, #152]	; (8003050 <HAL_TIM_PWM_Start+0x214>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d018      	beq.n	8002fee <HAL_TIM_PWM_Start+0x1b2>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a24      	ldr	r2, [pc, #144]	; (8003054 <HAL_TIM_PWM_Start+0x218>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d013      	beq.n	8002fee <HAL_TIM_PWM_Start+0x1b2>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a23      	ldr	r2, [pc, #140]	; (8003058 <HAL_TIM_PWM_Start+0x21c>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d00e      	beq.n	8002fee <HAL_TIM_PWM_Start+0x1b2>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a19      	ldr	r2, [pc, #100]	; (800303c <HAL_TIM_PWM_Start+0x200>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d009      	beq.n	8002fee <HAL_TIM_PWM_Start+0x1b2>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a18      	ldr	r2, [pc, #96]	; (8003040 <HAL_TIM_PWM_Start+0x204>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d004      	beq.n	8002fee <HAL_TIM_PWM_Start+0x1b2>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a18      	ldr	r2, [pc, #96]	; (800304c <HAL_TIM_PWM_Start+0x210>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d115      	bne.n	800301a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	689a      	ldr	r2, [r3, #8]
 8002ff4:	4b19      	ldr	r3, [pc, #100]	; (800305c <HAL_TIM_PWM_Start+0x220>)
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2b06      	cmp	r3, #6
 8002ffe:	d015      	beq.n	800302c <HAL_TIM_PWM_Start+0x1f0>
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003006:	d011      	beq.n	800302c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f042 0201 	orr.w	r2, r2, #1
 8003016:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003018:	e008      	b.n	800302c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f042 0201 	orr.w	r2, r2, #1
 8003028:	601a      	str	r2, [r3, #0]
 800302a:	e000      	b.n	800302e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800302c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800302e:	2300      	movs	r3, #0
}
 8003030:	4618      	mov	r0, r3
 8003032:	3710      	adds	r7, #16
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	40012c00 	.word	0x40012c00
 800303c:	40013400 	.word	0x40013400
 8003040:	40014000 	.word	0x40014000
 8003044:	40014400 	.word	0x40014400
 8003048:	40014800 	.word	0x40014800
 800304c:	40015000 	.word	0x40015000
 8003050:	40000400 	.word	0x40000400
 8003054:	40000800 	.word	0x40000800
 8003058:	40000c00 	.word	0x40000c00
 800305c:	00010007 	.word	0x00010007

08003060 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	691b      	ldr	r3, [r3, #16]
 800306e:	f003 0302 	and.w	r3, r3, #2
 8003072:	2b02      	cmp	r3, #2
 8003074:	d122      	bne.n	80030bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	f003 0302 	and.w	r3, r3, #2
 8003080:	2b02      	cmp	r3, #2
 8003082:	d11b      	bne.n	80030bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f06f 0202 	mvn.w	r2, #2
 800308c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2201      	movs	r2, #1
 8003092:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	f003 0303 	and.w	r3, r3, #3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d003      	beq.n	80030aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f000 fb90 	bl	80037c8 <HAL_TIM_IC_CaptureCallback>
 80030a8:	e005      	b.n	80030b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 fb82 	bl	80037b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f000 fb93 	bl	80037dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	f003 0304 	and.w	r3, r3, #4
 80030c6:	2b04      	cmp	r3, #4
 80030c8:	d122      	bne.n	8003110 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	f003 0304 	and.w	r3, r3, #4
 80030d4:	2b04      	cmp	r3, #4
 80030d6:	d11b      	bne.n	8003110 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f06f 0204 	mvn.w	r2, #4
 80030e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2202      	movs	r2, #2
 80030e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	699b      	ldr	r3, [r3, #24]
 80030ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d003      	beq.n	80030fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f000 fb66 	bl	80037c8 <HAL_TIM_IC_CaptureCallback>
 80030fc:	e005      	b.n	800310a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 fb58 	bl	80037b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f000 fb69 	bl	80037dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	f003 0308 	and.w	r3, r3, #8
 800311a:	2b08      	cmp	r3, #8
 800311c:	d122      	bne.n	8003164 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	f003 0308 	and.w	r3, r3, #8
 8003128:	2b08      	cmp	r3, #8
 800312a:	d11b      	bne.n	8003164 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f06f 0208 	mvn.w	r2, #8
 8003134:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2204      	movs	r2, #4
 800313a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	69db      	ldr	r3, [r3, #28]
 8003142:	f003 0303 	and.w	r3, r3, #3
 8003146:	2b00      	cmp	r3, #0
 8003148:	d003      	beq.n	8003152 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f000 fb3c 	bl	80037c8 <HAL_TIM_IC_CaptureCallback>
 8003150:	e005      	b.n	800315e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f000 fb2e 	bl	80037b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f000 fb3f 	bl	80037dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	f003 0310 	and.w	r3, r3, #16
 800316e:	2b10      	cmp	r3, #16
 8003170:	d122      	bne.n	80031b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	f003 0310 	and.w	r3, r3, #16
 800317c:	2b10      	cmp	r3, #16
 800317e:	d11b      	bne.n	80031b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f06f 0210 	mvn.w	r2, #16
 8003188:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2208      	movs	r2, #8
 800318e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	69db      	ldr	r3, [r3, #28]
 8003196:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800319a:	2b00      	cmp	r3, #0
 800319c:	d003      	beq.n	80031a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f000 fb12 	bl	80037c8 <HAL_TIM_IC_CaptureCallback>
 80031a4:	e005      	b.n	80031b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f000 fb04 	bl	80037b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f000 fb15 	bl	80037dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	691b      	ldr	r3, [r3, #16]
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d10e      	bne.n	80031e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	f003 0301 	and.w	r3, r3, #1
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d107      	bne.n	80031e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f06f 0201 	mvn.w	r2, #1
 80031dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f7fd fb0a 	bl	80007f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ee:	2b80      	cmp	r3, #128	; 0x80
 80031f0:	d10e      	bne.n	8003210 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031fc:	2b80      	cmp	r3, #128	; 0x80
 80031fe:	d107      	bne.n	8003210 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003208:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f001 f9a2 	bl	8004554 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	691b      	ldr	r3, [r3, #16]
 8003216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800321a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800321e:	d10e      	bne.n	800323e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800322a:	2b80      	cmp	r3, #128	; 0x80
 800322c:	d107      	bne.n	800323e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003236:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f001 f995 	bl	8004568 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	691b      	ldr	r3, [r3, #16]
 8003244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003248:	2b40      	cmp	r3, #64	; 0x40
 800324a:	d10e      	bne.n	800326a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003256:	2b40      	cmp	r3, #64	; 0x40
 8003258:	d107      	bne.n	800326a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003262:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f000 fac3 	bl	80037f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	691b      	ldr	r3, [r3, #16]
 8003270:	f003 0320 	and.w	r3, r3, #32
 8003274:	2b20      	cmp	r3, #32
 8003276:	d10e      	bne.n	8003296 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	f003 0320 	and.w	r3, r3, #32
 8003282:	2b20      	cmp	r3, #32
 8003284:	d107      	bne.n	8003296 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f06f 0220 	mvn.w	r2, #32
 800328e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f001 f955 	bl	8004540 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	691b      	ldr	r3, [r3, #16]
 800329c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032a4:	d10f      	bne.n	80032c6 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032b4:	d107      	bne.n	80032c6 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80032be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f001 f95b 	bl	800457c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	691b      	ldr	r3, [r3, #16]
 80032cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80032d4:	d10f      	bne.n	80032f6 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80032e4:	d107      	bne.n	80032f6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80032ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f001 f94d 	bl	8004590 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	691b      	ldr	r3, [r3, #16]
 80032fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003300:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003304:	d10f      	bne.n	8003326 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003310:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003314:	d107      	bne.n	8003326 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800331e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f001 f93f 	bl	80045a4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	691b      	ldr	r3, [r3, #16]
 800332c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003330:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003334:	d10f      	bne.n	8003356 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003340:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003344:	d107      	bne.n	8003356 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800334e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f001 f931 	bl	80045b8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003356:	bf00      	nop
 8003358:	3708      	adds	r7, #8
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
	...

08003360 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b086      	sub	sp, #24
 8003364:	af00      	add	r7, sp, #0
 8003366:	60f8      	str	r0, [r7, #12]
 8003368:	60b9      	str	r1, [r7, #8]
 800336a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800336c:	2300      	movs	r3, #0
 800336e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003376:	2b01      	cmp	r3, #1
 8003378:	d101      	bne.n	800337e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800337a:	2302      	movs	r3, #2
 800337c:	e0ff      	b.n	800357e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2201      	movs	r2, #1
 8003382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2b14      	cmp	r3, #20
 800338a:	f200 80f0 	bhi.w	800356e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800338e:	a201      	add	r2, pc, #4	; (adr r2, 8003394 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003394:	080033e9 	.word	0x080033e9
 8003398:	0800356f 	.word	0x0800356f
 800339c:	0800356f 	.word	0x0800356f
 80033a0:	0800356f 	.word	0x0800356f
 80033a4:	08003429 	.word	0x08003429
 80033a8:	0800356f 	.word	0x0800356f
 80033ac:	0800356f 	.word	0x0800356f
 80033b0:	0800356f 	.word	0x0800356f
 80033b4:	0800346b 	.word	0x0800346b
 80033b8:	0800356f 	.word	0x0800356f
 80033bc:	0800356f 	.word	0x0800356f
 80033c0:	0800356f 	.word	0x0800356f
 80033c4:	080034ab 	.word	0x080034ab
 80033c8:	0800356f 	.word	0x0800356f
 80033cc:	0800356f 	.word	0x0800356f
 80033d0:	0800356f 	.word	0x0800356f
 80033d4:	080034ed 	.word	0x080034ed
 80033d8:	0800356f 	.word	0x0800356f
 80033dc:	0800356f 	.word	0x0800356f
 80033e0:	0800356f 	.word	0x0800356f
 80033e4:	0800352d 	.word	0x0800352d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	68b9      	ldr	r1, [r7, #8]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f000 fab0 	bl	8003954 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	699a      	ldr	r2, [r3, #24]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f042 0208 	orr.w	r2, r2, #8
 8003402:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	699a      	ldr	r2, [r3, #24]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f022 0204 	bic.w	r2, r2, #4
 8003412:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	6999      	ldr	r1, [r3, #24]
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	691a      	ldr	r2, [r3, #16]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	430a      	orrs	r2, r1
 8003424:	619a      	str	r2, [r3, #24]
      break;
 8003426:	e0a5      	b.n	8003574 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	68b9      	ldr	r1, [r7, #8]
 800342e:	4618      	mov	r0, r3
 8003430:	f000 fb2a 	bl	8003a88 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	699a      	ldr	r2, [r3, #24]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003442:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	699a      	ldr	r2, [r3, #24]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003452:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	6999      	ldr	r1, [r3, #24]
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	691b      	ldr	r3, [r3, #16]
 800345e:	021a      	lsls	r2, r3, #8
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	430a      	orrs	r2, r1
 8003466:	619a      	str	r2, [r3, #24]
      break;
 8003468:	e084      	b.n	8003574 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	68b9      	ldr	r1, [r7, #8]
 8003470:	4618      	mov	r0, r3
 8003472:	f000 fb9d 	bl	8003bb0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	69da      	ldr	r2, [r3, #28]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f042 0208 	orr.w	r2, r2, #8
 8003484:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	69da      	ldr	r2, [r3, #28]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f022 0204 	bic.w	r2, r2, #4
 8003494:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	69d9      	ldr	r1, [r3, #28]
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	691a      	ldr	r2, [r3, #16]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	430a      	orrs	r2, r1
 80034a6:	61da      	str	r2, [r3, #28]
      break;
 80034a8:	e064      	b.n	8003574 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	68b9      	ldr	r1, [r7, #8]
 80034b0:	4618      	mov	r0, r3
 80034b2:	f000 fc0f 	bl	8003cd4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	69da      	ldr	r2, [r3, #28]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	69da      	ldr	r2, [r3, #28]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	69d9      	ldr	r1, [r3, #28]
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	691b      	ldr	r3, [r3, #16]
 80034e0:	021a      	lsls	r2, r3, #8
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	430a      	orrs	r2, r1
 80034e8:	61da      	str	r2, [r3, #28]
      break;
 80034ea:	e043      	b.n	8003574 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	68b9      	ldr	r1, [r7, #8]
 80034f2:	4618      	mov	r0, r3
 80034f4:	f000 fc82 	bl	8003dfc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f042 0208 	orr.w	r2, r2, #8
 8003506:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f022 0204 	bic.w	r2, r2, #4
 8003516:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	691a      	ldr	r2, [r3, #16]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	430a      	orrs	r2, r1
 8003528:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800352a:	e023      	b.n	8003574 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	68b9      	ldr	r1, [r7, #8]
 8003532:	4618      	mov	r0, r3
 8003534:	f000 fccc 	bl	8003ed0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003546:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003556:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	021a      	lsls	r2, r3, #8
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	430a      	orrs	r2, r1
 800356a:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800356c:	e002      	b.n	8003574 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	75fb      	strb	r3, [r7, #23]
      break;
 8003572:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2200      	movs	r2, #0
 8003578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800357c:	7dfb      	ldrb	r3, [r7, #23]
}
 800357e:	4618      	mov	r0, r3
 8003580:	3718      	adds	r7, #24
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop

08003588 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003592:	2300      	movs	r3, #0
 8003594:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800359c:	2b01      	cmp	r3, #1
 800359e:	d101      	bne.n	80035a4 <HAL_TIM_ConfigClockSource+0x1c>
 80035a0:	2302      	movs	r3, #2
 80035a2:	e0f6      	b.n	8003792 <HAL_TIM_ConfigClockSource+0x20a>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2202      	movs	r2, #2
 80035b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80035c2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80035c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	68ba      	ldr	r2, [r7, #8]
 80035d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a6f      	ldr	r2, [pc, #444]	; (800379c <HAL_TIM_ConfigClockSource+0x214>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	f000 80c1 	beq.w	8003766 <HAL_TIM_ConfigClockSource+0x1de>
 80035e4:	4a6d      	ldr	r2, [pc, #436]	; (800379c <HAL_TIM_ConfigClockSource+0x214>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	f200 80c6 	bhi.w	8003778 <HAL_TIM_ConfigClockSource+0x1f0>
 80035ec:	4a6c      	ldr	r2, [pc, #432]	; (80037a0 <HAL_TIM_ConfigClockSource+0x218>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	f000 80b9 	beq.w	8003766 <HAL_TIM_ConfigClockSource+0x1de>
 80035f4:	4a6a      	ldr	r2, [pc, #424]	; (80037a0 <HAL_TIM_ConfigClockSource+0x218>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	f200 80be 	bhi.w	8003778 <HAL_TIM_ConfigClockSource+0x1f0>
 80035fc:	4a69      	ldr	r2, [pc, #420]	; (80037a4 <HAL_TIM_ConfigClockSource+0x21c>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	f000 80b1 	beq.w	8003766 <HAL_TIM_ConfigClockSource+0x1de>
 8003604:	4a67      	ldr	r2, [pc, #412]	; (80037a4 <HAL_TIM_ConfigClockSource+0x21c>)
 8003606:	4293      	cmp	r3, r2
 8003608:	f200 80b6 	bhi.w	8003778 <HAL_TIM_ConfigClockSource+0x1f0>
 800360c:	4a66      	ldr	r2, [pc, #408]	; (80037a8 <HAL_TIM_ConfigClockSource+0x220>)
 800360e:	4293      	cmp	r3, r2
 8003610:	f000 80a9 	beq.w	8003766 <HAL_TIM_ConfigClockSource+0x1de>
 8003614:	4a64      	ldr	r2, [pc, #400]	; (80037a8 <HAL_TIM_ConfigClockSource+0x220>)
 8003616:	4293      	cmp	r3, r2
 8003618:	f200 80ae 	bhi.w	8003778 <HAL_TIM_ConfigClockSource+0x1f0>
 800361c:	4a63      	ldr	r2, [pc, #396]	; (80037ac <HAL_TIM_ConfigClockSource+0x224>)
 800361e:	4293      	cmp	r3, r2
 8003620:	f000 80a1 	beq.w	8003766 <HAL_TIM_ConfigClockSource+0x1de>
 8003624:	4a61      	ldr	r2, [pc, #388]	; (80037ac <HAL_TIM_ConfigClockSource+0x224>)
 8003626:	4293      	cmp	r3, r2
 8003628:	f200 80a6 	bhi.w	8003778 <HAL_TIM_ConfigClockSource+0x1f0>
 800362c:	4a60      	ldr	r2, [pc, #384]	; (80037b0 <HAL_TIM_ConfigClockSource+0x228>)
 800362e:	4293      	cmp	r3, r2
 8003630:	f000 8099 	beq.w	8003766 <HAL_TIM_ConfigClockSource+0x1de>
 8003634:	4a5e      	ldr	r2, [pc, #376]	; (80037b0 <HAL_TIM_ConfigClockSource+0x228>)
 8003636:	4293      	cmp	r3, r2
 8003638:	f200 809e 	bhi.w	8003778 <HAL_TIM_ConfigClockSource+0x1f0>
 800363c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003640:	f000 8091 	beq.w	8003766 <HAL_TIM_ConfigClockSource+0x1de>
 8003644:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003648:	f200 8096 	bhi.w	8003778 <HAL_TIM_ConfigClockSource+0x1f0>
 800364c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003650:	f000 8089 	beq.w	8003766 <HAL_TIM_ConfigClockSource+0x1de>
 8003654:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003658:	f200 808e 	bhi.w	8003778 <HAL_TIM_ConfigClockSource+0x1f0>
 800365c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003660:	d03e      	beq.n	80036e0 <HAL_TIM_ConfigClockSource+0x158>
 8003662:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003666:	f200 8087 	bhi.w	8003778 <HAL_TIM_ConfigClockSource+0x1f0>
 800366a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800366e:	f000 8086 	beq.w	800377e <HAL_TIM_ConfigClockSource+0x1f6>
 8003672:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003676:	d87f      	bhi.n	8003778 <HAL_TIM_ConfigClockSource+0x1f0>
 8003678:	2b70      	cmp	r3, #112	; 0x70
 800367a:	d01a      	beq.n	80036b2 <HAL_TIM_ConfigClockSource+0x12a>
 800367c:	2b70      	cmp	r3, #112	; 0x70
 800367e:	d87b      	bhi.n	8003778 <HAL_TIM_ConfigClockSource+0x1f0>
 8003680:	2b60      	cmp	r3, #96	; 0x60
 8003682:	d050      	beq.n	8003726 <HAL_TIM_ConfigClockSource+0x19e>
 8003684:	2b60      	cmp	r3, #96	; 0x60
 8003686:	d877      	bhi.n	8003778 <HAL_TIM_ConfigClockSource+0x1f0>
 8003688:	2b50      	cmp	r3, #80	; 0x50
 800368a:	d03c      	beq.n	8003706 <HAL_TIM_ConfigClockSource+0x17e>
 800368c:	2b50      	cmp	r3, #80	; 0x50
 800368e:	d873      	bhi.n	8003778 <HAL_TIM_ConfigClockSource+0x1f0>
 8003690:	2b40      	cmp	r3, #64	; 0x40
 8003692:	d058      	beq.n	8003746 <HAL_TIM_ConfigClockSource+0x1be>
 8003694:	2b40      	cmp	r3, #64	; 0x40
 8003696:	d86f      	bhi.n	8003778 <HAL_TIM_ConfigClockSource+0x1f0>
 8003698:	2b30      	cmp	r3, #48	; 0x30
 800369a:	d064      	beq.n	8003766 <HAL_TIM_ConfigClockSource+0x1de>
 800369c:	2b30      	cmp	r3, #48	; 0x30
 800369e:	d86b      	bhi.n	8003778 <HAL_TIM_ConfigClockSource+0x1f0>
 80036a0:	2b20      	cmp	r3, #32
 80036a2:	d060      	beq.n	8003766 <HAL_TIM_ConfigClockSource+0x1de>
 80036a4:	2b20      	cmp	r3, #32
 80036a6:	d867      	bhi.n	8003778 <HAL_TIM_ConfigClockSource+0x1f0>
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d05c      	beq.n	8003766 <HAL_TIM_ConfigClockSource+0x1de>
 80036ac:	2b10      	cmp	r3, #16
 80036ae:	d05a      	beq.n	8003766 <HAL_TIM_ConfigClockSource+0x1de>
 80036b0:	e062      	b.n	8003778 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6818      	ldr	r0, [r3, #0]
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	6899      	ldr	r1, [r3, #8]
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	685a      	ldr	r2, [r3, #4]
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	f000 fced 	bl	80040a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80036d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	68ba      	ldr	r2, [r7, #8]
 80036dc:	609a      	str	r2, [r3, #8]
      break;
 80036de:	e04f      	b.n	8003780 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6818      	ldr	r0, [r3, #0]
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	6899      	ldr	r1, [r3, #8]
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	685a      	ldr	r2, [r3, #4]
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	f000 fcd6 	bl	80040a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	689a      	ldr	r2, [r3, #8]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003702:	609a      	str	r2, [r3, #8]
      break;
 8003704:	e03c      	b.n	8003780 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6818      	ldr	r0, [r3, #0]
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	6859      	ldr	r1, [r3, #4]
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	461a      	mov	r2, r3
 8003714:	f000 fc48 	bl	8003fa8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2150      	movs	r1, #80	; 0x50
 800371e:	4618      	mov	r0, r3
 8003720:	f000 fca1 	bl	8004066 <TIM_ITRx_SetConfig>
      break;
 8003724:	e02c      	b.n	8003780 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6818      	ldr	r0, [r3, #0]
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	6859      	ldr	r1, [r3, #4]
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	461a      	mov	r2, r3
 8003734:	f000 fc67 	bl	8004006 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2160      	movs	r1, #96	; 0x60
 800373e:	4618      	mov	r0, r3
 8003740:	f000 fc91 	bl	8004066 <TIM_ITRx_SetConfig>
      break;
 8003744:	e01c      	b.n	8003780 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6818      	ldr	r0, [r3, #0]
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	6859      	ldr	r1, [r3, #4]
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	461a      	mov	r2, r3
 8003754:	f000 fc28 	bl	8003fa8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	2140      	movs	r1, #64	; 0x40
 800375e:	4618      	mov	r0, r3
 8003760:	f000 fc81 	bl	8004066 <TIM_ITRx_SetConfig>
      break;
 8003764:	e00c      	b.n	8003780 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4619      	mov	r1, r3
 8003770:	4610      	mov	r0, r2
 8003772:	f000 fc78 	bl	8004066 <TIM_ITRx_SetConfig>
      break;
 8003776:	e003      	b.n	8003780 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	73fb      	strb	r3, [r7, #15]
      break;
 800377c:	e000      	b.n	8003780 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800377e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003790:	7bfb      	ldrb	r3, [r7, #15]
}
 8003792:	4618      	mov	r0, r3
 8003794:	3710      	adds	r7, #16
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	00100070 	.word	0x00100070
 80037a0:	00100060 	.word	0x00100060
 80037a4:	00100050 	.word	0x00100050
 80037a8:	00100040 	.word	0x00100040
 80037ac:	00100030 	.word	0x00100030
 80037b0:	00100020 	.word	0x00100020

080037b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80037bc:	bf00      	nop
 80037be:	370c      	adds	r7, #12
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr

080037c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80037d0:	bf00      	nop
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80037e4:	bf00      	nop
 80037e6:	370c      	adds	r7, #12
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037f8:	bf00      	nop
 80037fa:	370c      	adds	r7, #12
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr

08003804 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003804:	b480      	push	{r7}
 8003806:	b085      	sub	sp, #20
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4a46      	ldr	r2, [pc, #280]	; (8003930 <TIM_Base_SetConfig+0x12c>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d017      	beq.n	800384c <TIM_Base_SetConfig+0x48>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003822:	d013      	beq.n	800384c <TIM_Base_SetConfig+0x48>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	4a43      	ldr	r2, [pc, #268]	; (8003934 <TIM_Base_SetConfig+0x130>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d00f      	beq.n	800384c <TIM_Base_SetConfig+0x48>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	4a42      	ldr	r2, [pc, #264]	; (8003938 <TIM_Base_SetConfig+0x134>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d00b      	beq.n	800384c <TIM_Base_SetConfig+0x48>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	4a41      	ldr	r2, [pc, #260]	; (800393c <TIM_Base_SetConfig+0x138>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d007      	beq.n	800384c <TIM_Base_SetConfig+0x48>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	4a40      	ldr	r2, [pc, #256]	; (8003940 <TIM_Base_SetConfig+0x13c>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d003      	beq.n	800384c <TIM_Base_SetConfig+0x48>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	4a3f      	ldr	r2, [pc, #252]	; (8003944 <TIM_Base_SetConfig+0x140>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d108      	bne.n	800385e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003852:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	68fa      	ldr	r2, [r7, #12]
 800385a:	4313      	orrs	r3, r2
 800385c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a33      	ldr	r2, [pc, #204]	; (8003930 <TIM_Base_SetConfig+0x12c>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d023      	beq.n	80038ae <TIM_Base_SetConfig+0xaa>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800386c:	d01f      	beq.n	80038ae <TIM_Base_SetConfig+0xaa>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a30      	ldr	r2, [pc, #192]	; (8003934 <TIM_Base_SetConfig+0x130>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d01b      	beq.n	80038ae <TIM_Base_SetConfig+0xaa>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a2f      	ldr	r2, [pc, #188]	; (8003938 <TIM_Base_SetConfig+0x134>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d017      	beq.n	80038ae <TIM_Base_SetConfig+0xaa>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a2e      	ldr	r2, [pc, #184]	; (800393c <TIM_Base_SetConfig+0x138>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d013      	beq.n	80038ae <TIM_Base_SetConfig+0xaa>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a2d      	ldr	r2, [pc, #180]	; (8003940 <TIM_Base_SetConfig+0x13c>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d00f      	beq.n	80038ae <TIM_Base_SetConfig+0xaa>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a2d      	ldr	r2, [pc, #180]	; (8003948 <TIM_Base_SetConfig+0x144>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d00b      	beq.n	80038ae <TIM_Base_SetConfig+0xaa>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a2c      	ldr	r2, [pc, #176]	; (800394c <TIM_Base_SetConfig+0x148>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d007      	beq.n	80038ae <TIM_Base_SetConfig+0xaa>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a2b      	ldr	r2, [pc, #172]	; (8003950 <TIM_Base_SetConfig+0x14c>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d003      	beq.n	80038ae <TIM_Base_SetConfig+0xaa>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a26      	ldr	r2, [pc, #152]	; (8003944 <TIM_Base_SetConfig+0x140>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d108      	bne.n	80038c0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	68fa      	ldr	r2, [r7, #12]
 80038bc:	4313      	orrs	r3, r2
 80038be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	695b      	ldr	r3, [r3, #20]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	68fa      	ldr	r2, [r7, #12]
 80038d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	689a      	ldr	r2, [r3, #8]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	4a12      	ldr	r2, [pc, #72]	; (8003930 <TIM_Base_SetConfig+0x12c>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d013      	beq.n	8003914 <TIM_Base_SetConfig+0x110>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4a14      	ldr	r2, [pc, #80]	; (8003940 <TIM_Base_SetConfig+0x13c>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d00f      	beq.n	8003914 <TIM_Base_SetConfig+0x110>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	4a14      	ldr	r2, [pc, #80]	; (8003948 <TIM_Base_SetConfig+0x144>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d00b      	beq.n	8003914 <TIM_Base_SetConfig+0x110>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	4a13      	ldr	r2, [pc, #76]	; (800394c <TIM_Base_SetConfig+0x148>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d007      	beq.n	8003914 <TIM_Base_SetConfig+0x110>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	4a12      	ldr	r2, [pc, #72]	; (8003950 <TIM_Base_SetConfig+0x14c>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d003      	beq.n	8003914 <TIM_Base_SetConfig+0x110>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	4a0d      	ldr	r2, [pc, #52]	; (8003944 <TIM_Base_SetConfig+0x140>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d103      	bne.n	800391c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	691a      	ldr	r2, [r3, #16]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	615a      	str	r2, [r3, #20]
}
 8003922:	bf00      	nop
 8003924:	3714      	adds	r7, #20
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop
 8003930:	40012c00 	.word	0x40012c00
 8003934:	40000400 	.word	0x40000400
 8003938:	40000800 	.word	0x40000800
 800393c:	40000c00 	.word	0x40000c00
 8003940:	40013400 	.word	0x40013400
 8003944:	40015000 	.word	0x40015000
 8003948:	40014000 	.word	0x40014000
 800394c:	40014400 	.word	0x40014400
 8003950:	40014800 	.word	0x40014800

08003954 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003954:	b480      	push	{r7}
 8003956:	b087      	sub	sp, #28
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a1b      	ldr	r3, [r3, #32]
 8003962:	f023 0201 	bic.w	r2, r3, #1
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a1b      	ldr	r3, [r3, #32]
 800396e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	699b      	ldr	r3, [r3, #24]
 800397a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003982:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003986:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f023 0303 	bic.w	r3, r3, #3
 800398e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68fa      	ldr	r2, [r7, #12]
 8003996:	4313      	orrs	r3, r2
 8003998:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	f023 0302 	bic.w	r3, r3, #2
 80039a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	697a      	ldr	r2, [r7, #20]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4a30      	ldr	r2, [pc, #192]	; (8003a70 <TIM_OC1_SetConfig+0x11c>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d013      	beq.n	80039dc <TIM_OC1_SetConfig+0x88>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	4a2f      	ldr	r2, [pc, #188]	; (8003a74 <TIM_OC1_SetConfig+0x120>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d00f      	beq.n	80039dc <TIM_OC1_SetConfig+0x88>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	4a2e      	ldr	r2, [pc, #184]	; (8003a78 <TIM_OC1_SetConfig+0x124>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d00b      	beq.n	80039dc <TIM_OC1_SetConfig+0x88>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a2d      	ldr	r2, [pc, #180]	; (8003a7c <TIM_OC1_SetConfig+0x128>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d007      	beq.n	80039dc <TIM_OC1_SetConfig+0x88>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	4a2c      	ldr	r2, [pc, #176]	; (8003a80 <TIM_OC1_SetConfig+0x12c>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d003      	beq.n	80039dc <TIM_OC1_SetConfig+0x88>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	4a2b      	ldr	r2, [pc, #172]	; (8003a84 <TIM_OC1_SetConfig+0x130>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d10c      	bne.n	80039f6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	f023 0308 	bic.w	r3, r3, #8
 80039e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	697a      	ldr	r2, [r7, #20]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	f023 0304 	bic.w	r3, r3, #4
 80039f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a1d      	ldr	r2, [pc, #116]	; (8003a70 <TIM_OC1_SetConfig+0x11c>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d013      	beq.n	8003a26 <TIM_OC1_SetConfig+0xd2>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a1c      	ldr	r2, [pc, #112]	; (8003a74 <TIM_OC1_SetConfig+0x120>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d00f      	beq.n	8003a26 <TIM_OC1_SetConfig+0xd2>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a1b      	ldr	r2, [pc, #108]	; (8003a78 <TIM_OC1_SetConfig+0x124>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d00b      	beq.n	8003a26 <TIM_OC1_SetConfig+0xd2>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a1a      	ldr	r2, [pc, #104]	; (8003a7c <TIM_OC1_SetConfig+0x128>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d007      	beq.n	8003a26 <TIM_OC1_SetConfig+0xd2>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a19      	ldr	r2, [pc, #100]	; (8003a80 <TIM_OC1_SetConfig+0x12c>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d003      	beq.n	8003a26 <TIM_OC1_SetConfig+0xd2>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a18      	ldr	r2, [pc, #96]	; (8003a84 <TIM_OC1_SetConfig+0x130>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d111      	bne.n	8003a4a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	695b      	ldr	r3, [r3, #20]
 8003a3a:	693a      	ldr	r2, [r7, #16]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	699b      	ldr	r3, [r3, #24]
 8003a44:	693a      	ldr	r2, [r7, #16]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	693a      	ldr	r2, [r7, #16]
 8003a4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	68fa      	ldr	r2, [r7, #12]
 8003a54:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	685a      	ldr	r2, [r3, #4]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	697a      	ldr	r2, [r7, #20]
 8003a62:	621a      	str	r2, [r3, #32]
}
 8003a64:	bf00      	nop
 8003a66:	371c      	adds	r7, #28
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr
 8003a70:	40012c00 	.word	0x40012c00
 8003a74:	40013400 	.word	0x40013400
 8003a78:	40014000 	.word	0x40014000
 8003a7c:	40014400 	.word	0x40014400
 8003a80:	40014800 	.word	0x40014800
 8003a84:	40015000 	.word	0x40015000

08003a88 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b087      	sub	sp, #28
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a1b      	ldr	r3, [r3, #32]
 8003a96:	f023 0210 	bic.w	r2, r3, #16
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a1b      	ldr	r3, [r3, #32]
 8003aa2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	699b      	ldr	r3, [r3, #24]
 8003aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ab6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003aba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ac2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	021b      	lsls	r3, r3, #8
 8003aca:	68fa      	ldr	r2, [r7, #12]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	f023 0320 	bic.w	r3, r3, #32
 8003ad6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	011b      	lsls	r3, r3, #4
 8003ade:	697a      	ldr	r2, [r7, #20]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	4a2c      	ldr	r2, [pc, #176]	; (8003b98 <TIM_OC2_SetConfig+0x110>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d007      	beq.n	8003afc <TIM_OC2_SetConfig+0x74>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	4a2b      	ldr	r2, [pc, #172]	; (8003b9c <TIM_OC2_SetConfig+0x114>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d003      	beq.n	8003afc <TIM_OC2_SetConfig+0x74>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	4a2a      	ldr	r2, [pc, #168]	; (8003ba0 <TIM_OC2_SetConfig+0x118>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d10d      	bne.n	8003b18 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	011b      	lsls	r3, r3, #4
 8003b0a:	697a      	ldr	r2, [r7, #20]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b16:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	4a1f      	ldr	r2, [pc, #124]	; (8003b98 <TIM_OC2_SetConfig+0x110>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d013      	beq.n	8003b48 <TIM_OC2_SetConfig+0xc0>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	4a1e      	ldr	r2, [pc, #120]	; (8003b9c <TIM_OC2_SetConfig+0x114>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d00f      	beq.n	8003b48 <TIM_OC2_SetConfig+0xc0>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	4a1e      	ldr	r2, [pc, #120]	; (8003ba4 <TIM_OC2_SetConfig+0x11c>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d00b      	beq.n	8003b48 <TIM_OC2_SetConfig+0xc0>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	4a1d      	ldr	r2, [pc, #116]	; (8003ba8 <TIM_OC2_SetConfig+0x120>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d007      	beq.n	8003b48 <TIM_OC2_SetConfig+0xc0>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4a1c      	ldr	r2, [pc, #112]	; (8003bac <TIM_OC2_SetConfig+0x124>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d003      	beq.n	8003b48 <TIM_OC2_SetConfig+0xc0>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4a17      	ldr	r2, [pc, #92]	; (8003ba0 <TIM_OC2_SetConfig+0x118>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d113      	bne.n	8003b70 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b4e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b56:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	695b      	ldr	r3, [r3, #20]
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	693a      	ldr	r2, [r7, #16]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	699b      	ldr	r3, [r3, #24]
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	693a      	ldr	r2, [r7, #16]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	693a      	ldr	r2, [r7, #16]
 8003b74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	68fa      	ldr	r2, [r7, #12]
 8003b7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	685a      	ldr	r2, [r3, #4]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	697a      	ldr	r2, [r7, #20]
 8003b88:	621a      	str	r2, [r3, #32]
}
 8003b8a:	bf00      	nop
 8003b8c:	371c      	adds	r7, #28
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	40012c00 	.word	0x40012c00
 8003b9c:	40013400 	.word	0x40013400
 8003ba0:	40015000 	.word	0x40015000
 8003ba4:	40014000 	.word	0x40014000
 8003ba8:	40014400 	.word	0x40014400
 8003bac:	40014800 	.word	0x40014800

08003bb0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b087      	sub	sp, #28
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a1b      	ldr	r3, [r3, #32]
 8003bbe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a1b      	ldr	r3, [r3, #32]
 8003bca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	69db      	ldr	r3, [r3, #28]
 8003bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003be2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f023 0303 	bic.w	r3, r3, #3
 8003bea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	68fa      	ldr	r2, [r7, #12]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003bfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	021b      	lsls	r3, r3, #8
 8003c04:	697a      	ldr	r2, [r7, #20]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a2b      	ldr	r2, [pc, #172]	; (8003cbc <TIM_OC3_SetConfig+0x10c>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d007      	beq.n	8003c22 <TIM_OC3_SetConfig+0x72>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a2a      	ldr	r2, [pc, #168]	; (8003cc0 <TIM_OC3_SetConfig+0x110>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d003      	beq.n	8003c22 <TIM_OC3_SetConfig+0x72>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a29      	ldr	r2, [pc, #164]	; (8003cc4 <TIM_OC3_SetConfig+0x114>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d10d      	bne.n	8003c3e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	021b      	lsls	r3, r3, #8
 8003c30:	697a      	ldr	r2, [r7, #20]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a1e      	ldr	r2, [pc, #120]	; (8003cbc <TIM_OC3_SetConfig+0x10c>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d013      	beq.n	8003c6e <TIM_OC3_SetConfig+0xbe>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a1d      	ldr	r2, [pc, #116]	; (8003cc0 <TIM_OC3_SetConfig+0x110>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d00f      	beq.n	8003c6e <TIM_OC3_SetConfig+0xbe>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a1d      	ldr	r2, [pc, #116]	; (8003cc8 <TIM_OC3_SetConfig+0x118>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d00b      	beq.n	8003c6e <TIM_OC3_SetConfig+0xbe>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a1c      	ldr	r2, [pc, #112]	; (8003ccc <TIM_OC3_SetConfig+0x11c>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d007      	beq.n	8003c6e <TIM_OC3_SetConfig+0xbe>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a1b      	ldr	r2, [pc, #108]	; (8003cd0 <TIM_OC3_SetConfig+0x120>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d003      	beq.n	8003c6e <TIM_OC3_SetConfig+0xbe>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a16      	ldr	r2, [pc, #88]	; (8003cc4 <TIM_OC3_SetConfig+0x114>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d113      	bne.n	8003c96 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	695b      	ldr	r3, [r3, #20]
 8003c82:	011b      	lsls	r3, r3, #4
 8003c84:	693a      	ldr	r2, [r7, #16]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	699b      	ldr	r3, [r3, #24]
 8003c8e:	011b      	lsls	r3, r3, #4
 8003c90:	693a      	ldr	r2, [r7, #16]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	693a      	ldr	r2, [r7, #16]
 8003c9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	68fa      	ldr	r2, [r7, #12]
 8003ca0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	685a      	ldr	r2, [r3, #4]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	697a      	ldr	r2, [r7, #20]
 8003cae:	621a      	str	r2, [r3, #32]
}
 8003cb0:	bf00      	nop
 8003cb2:	371c      	adds	r7, #28
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr
 8003cbc:	40012c00 	.word	0x40012c00
 8003cc0:	40013400 	.word	0x40013400
 8003cc4:	40015000 	.word	0x40015000
 8003cc8:	40014000 	.word	0x40014000
 8003ccc:	40014400 	.word	0x40014400
 8003cd0:	40014800 	.word	0x40014800

08003cd4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b087      	sub	sp, #28
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6a1b      	ldr	r3, [r3, #32]
 8003ce2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a1b      	ldr	r3, [r3, #32]
 8003cee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	69db      	ldr	r3, [r3, #28]
 8003cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	021b      	lsls	r3, r3, #8
 8003d16:	68fa      	ldr	r2, [r7, #12]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	031b      	lsls	r3, r3, #12
 8003d2a:	697a      	ldr	r2, [r7, #20]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4a2c      	ldr	r2, [pc, #176]	; (8003de4 <TIM_OC4_SetConfig+0x110>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d007      	beq.n	8003d48 <TIM_OC4_SetConfig+0x74>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4a2b      	ldr	r2, [pc, #172]	; (8003de8 <TIM_OC4_SetConfig+0x114>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d003      	beq.n	8003d48 <TIM_OC4_SetConfig+0x74>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4a2a      	ldr	r2, [pc, #168]	; (8003dec <TIM_OC4_SetConfig+0x118>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d10d      	bne.n	8003d64 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003d4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	031b      	lsls	r3, r3, #12
 8003d56:	697a      	ldr	r2, [r7, #20]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d62:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	4a1f      	ldr	r2, [pc, #124]	; (8003de4 <TIM_OC4_SetConfig+0x110>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d013      	beq.n	8003d94 <TIM_OC4_SetConfig+0xc0>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4a1e      	ldr	r2, [pc, #120]	; (8003de8 <TIM_OC4_SetConfig+0x114>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d00f      	beq.n	8003d94 <TIM_OC4_SetConfig+0xc0>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4a1e      	ldr	r2, [pc, #120]	; (8003df0 <TIM_OC4_SetConfig+0x11c>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d00b      	beq.n	8003d94 <TIM_OC4_SetConfig+0xc0>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4a1d      	ldr	r2, [pc, #116]	; (8003df4 <TIM_OC4_SetConfig+0x120>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d007      	beq.n	8003d94 <TIM_OC4_SetConfig+0xc0>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4a1c      	ldr	r2, [pc, #112]	; (8003df8 <TIM_OC4_SetConfig+0x124>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d003      	beq.n	8003d94 <TIM_OC4_SetConfig+0xc0>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	4a17      	ldr	r2, [pc, #92]	; (8003dec <TIM_OC4_SetConfig+0x118>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d113      	bne.n	8003dbc <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d9a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003da2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	695b      	ldr	r3, [r3, #20]
 8003da8:	019b      	lsls	r3, r3, #6
 8003daa:	693a      	ldr	r2, [r7, #16]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	699b      	ldr	r3, [r3, #24]
 8003db4:	019b      	lsls	r3, r3, #6
 8003db6:	693a      	ldr	r2, [r7, #16]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	693a      	ldr	r2, [r7, #16]
 8003dc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	68fa      	ldr	r2, [r7, #12]
 8003dc6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	685a      	ldr	r2, [r3, #4]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	697a      	ldr	r2, [r7, #20]
 8003dd4:	621a      	str	r2, [r3, #32]
}
 8003dd6:	bf00      	nop
 8003dd8:	371c      	adds	r7, #28
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr
 8003de2:	bf00      	nop
 8003de4:	40012c00 	.word	0x40012c00
 8003de8:	40013400 	.word	0x40013400
 8003dec:	40015000 	.word	0x40015000
 8003df0:	40014000 	.word	0x40014000
 8003df4:	40014400 	.word	0x40014400
 8003df8:	40014800 	.word	0x40014800

08003dfc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b087      	sub	sp, #28
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a1b      	ldr	r3, [r3, #32]
 8003e0a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a1b      	ldr	r3, [r3, #32]
 8003e16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	68fa      	ldr	r2, [r7, #12]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003e40:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	041b      	lsls	r3, r3, #16
 8003e48:	693a      	ldr	r2, [r7, #16]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a19      	ldr	r2, [pc, #100]	; (8003eb8 <TIM_OC5_SetConfig+0xbc>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d013      	beq.n	8003e7e <TIM_OC5_SetConfig+0x82>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a18      	ldr	r2, [pc, #96]	; (8003ebc <TIM_OC5_SetConfig+0xc0>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d00f      	beq.n	8003e7e <TIM_OC5_SetConfig+0x82>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a17      	ldr	r2, [pc, #92]	; (8003ec0 <TIM_OC5_SetConfig+0xc4>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d00b      	beq.n	8003e7e <TIM_OC5_SetConfig+0x82>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a16      	ldr	r2, [pc, #88]	; (8003ec4 <TIM_OC5_SetConfig+0xc8>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d007      	beq.n	8003e7e <TIM_OC5_SetConfig+0x82>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a15      	ldr	r2, [pc, #84]	; (8003ec8 <TIM_OC5_SetConfig+0xcc>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d003      	beq.n	8003e7e <TIM_OC5_SetConfig+0x82>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a14      	ldr	r2, [pc, #80]	; (8003ecc <TIM_OC5_SetConfig+0xd0>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d109      	bne.n	8003e92 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e84:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	695b      	ldr	r3, [r3, #20]
 8003e8a:	021b      	lsls	r3, r3, #8
 8003e8c:	697a      	ldr	r2, [r7, #20]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	697a      	ldr	r2, [r7, #20]
 8003e96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	68fa      	ldr	r2, [r7, #12]
 8003e9c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	685a      	ldr	r2, [r3, #4]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	693a      	ldr	r2, [r7, #16]
 8003eaa:	621a      	str	r2, [r3, #32]
}
 8003eac:	bf00      	nop
 8003eae:	371c      	adds	r7, #28
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr
 8003eb8:	40012c00 	.word	0x40012c00
 8003ebc:	40013400 	.word	0x40013400
 8003ec0:	40014000 	.word	0x40014000
 8003ec4:	40014400 	.word	0x40014400
 8003ec8:	40014800 	.word	0x40014800
 8003ecc:	40015000 	.word	0x40015000

08003ed0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b087      	sub	sp, #28
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a1b      	ldr	r3, [r3, #32]
 8003ede:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a1b      	ldr	r3, [r3, #32]
 8003eea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003efe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	021b      	lsls	r3, r3, #8
 8003f0a:	68fa      	ldr	r2, [r7, #12]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003f16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	051b      	lsls	r3, r3, #20
 8003f1e:	693a      	ldr	r2, [r7, #16]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	4a1a      	ldr	r2, [pc, #104]	; (8003f90 <TIM_OC6_SetConfig+0xc0>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d013      	beq.n	8003f54 <TIM_OC6_SetConfig+0x84>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	4a19      	ldr	r2, [pc, #100]	; (8003f94 <TIM_OC6_SetConfig+0xc4>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d00f      	beq.n	8003f54 <TIM_OC6_SetConfig+0x84>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	4a18      	ldr	r2, [pc, #96]	; (8003f98 <TIM_OC6_SetConfig+0xc8>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d00b      	beq.n	8003f54 <TIM_OC6_SetConfig+0x84>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	4a17      	ldr	r2, [pc, #92]	; (8003f9c <TIM_OC6_SetConfig+0xcc>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d007      	beq.n	8003f54 <TIM_OC6_SetConfig+0x84>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	4a16      	ldr	r2, [pc, #88]	; (8003fa0 <TIM_OC6_SetConfig+0xd0>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d003      	beq.n	8003f54 <TIM_OC6_SetConfig+0x84>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	4a15      	ldr	r2, [pc, #84]	; (8003fa4 <TIM_OC6_SetConfig+0xd4>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d109      	bne.n	8003f68 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f5a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	695b      	ldr	r3, [r3, #20]
 8003f60:	029b      	lsls	r3, r3, #10
 8003f62:	697a      	ldr	r2, [r7, #20]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	697a      	ldr	r2, [r7, #20]
 8003f6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	68fa      	ldr	r2, [r7, #12]
 8003f72:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	685a      	ldr	r2, [r3, #4]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	693a      	ldr	r2, [r7, #16]
 8003f80:	621a      	str	r2, [r3, #32]
}
 8003f82:	bf00      	nop
 8003f84:	371c      	adds	r7, #28
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr
 8003f8e:	bf00      	nop
 8003f90:	40012c00 	.word	0x40012c00
 8003f94:	40013400 	.word	0x40013400
 8003f98:	40014000 	.word	0x40014000
 8003f9c:	40014400 	.word	0x40014400
 8003fa0:	40014800 	.word	0x40014800
 8003fa4:	40015000 	.word	0x40015000

08003fa8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b087      	sub	sp, #28
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	60b9      	str	r1, [r7, #8]
 8003fb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6a1b      	ldr	r3, [r3, #32]
 8003fb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6a1b      	ldr	r3, [r3, #32]
 8003fbe:	f023 0201 	bic.w	r2, r3, #1
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	699b      	ldr	r3, [r3, #24]
 8003fca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	011b      	lsls	r3, r3, #4
 8003fd8:	693a      	ldr	r2, [r7, #16]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	f023 030a 	bic.w	r3, r3, #10
 8003fe4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003fe6:	697a      	ldr	r2, [r7, #20]
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	693a      	ldr	r2, [r7, #16]
 8003ff2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	697a      	ldr	r2, [r7, #20]
 8003ff8:	621a      	str	r2, [r3, #32]
}
 8003ffa:	bf00      	nop
 8003ffc:	371c      	adds	r7, #28
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr

08004006 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004006:	b480      	push	{r7}
 8004008:	b087      	sub	sp, #28
 800400a:	af00      	add	r7, sp, #0
 800400c:	60f8      	str	r0, [r7, #12]
 800400e:	60b9      	str	r1, [r7, #8]
 8004010:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	6a1b      	ldr	r3, [r3, #32]
 8004016:	f023 0210 	bic.w	r2, r3, #16
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	699b      	ldr	r3, [r3, #24]
 8004022:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6a1b      	ldr	r3, [r3, #32]
 8004028:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004030:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	031b      	lsls	r3, r3, #12
 8004036:	697a      	ldr	r2, [r7, #20]
 8004038:	4313      	orrs	r3, r2
 800403a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004042:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	011b      	lsls	r3, r3, #4
 8004048:	693a      	ldr	r2, [r7, #16]
 800404a:	4313      	orrs	r3, r2
 800404c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	697a      	ldr	r2, [r7, #20]
 8004052:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	693a      	ldr	r2, [r7, #16]
 8004058:	621a      	str	r2, [r3, #32]
}
 800405a:	bf00      	nop
 800405c:	371c      	adds	r7, #28
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr

08004066 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004066:	b480      	push	{r7}
 8004068:	b085      	sub	sp, #20
 800406a:	af00      	add	r7, sp, #0
 800406c:	6078      	str	r0, [r7, #4]
 800406e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800407c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004080:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004082:	683a      	ldr	r2, [r7, #0]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	4313      	orrs	r3, r2
 8004088:	f043 0307 	orr.w	r3, r3, #7
 800408c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	68fa      	ldr	r2, [r7, #12]
 8004092:	609a      	str	r2, [r3, #8]
}
 8004094:	bf00      	nop
 8004096:	3714      	adds	r7, #20
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b087      	sub	sp, #28
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	60b9      	str	r1, [r7, #8]
 80040aa:	607a      	str	r2, [r7, #4]
 80040ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	021a      	lsls	r2, r3, #8
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	431a      	orrs	r2, r3
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	697a      	ldr	r2, [r7, #20]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	697a      	ldr	r2, [r7, #20]
 80040d2:	609a      	str	r2, [r3, #8]
}
 80040d4:	bf00      	nop
 80040d6:	371c      	adds	r7, #28
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b087      	sub	sp, #28
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	60f8      	str	r0, [r7, #12]
 80040e8:	60b9      	str	r1, [r7, #8]
 80040ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	f003 031f 	and.w	r3, r3, #31
 80040f2:	2201      	movs	r2, #1
 80040f4:	fa02 f303 	lsl.w	r3, r2, r3
 80040f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6a1a      	ldr	r2, [r3, #32]
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	43db      	mvns	r3, r3
 8004102:	401a      	ands	r2, r3
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6a1a      	ldr	r2, [r3, #32]
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	f003 031f 	and.w	r3, r3, #31
 8004112:	6879      	ldr	r1, [r7, #4]
 8004114:	fa01 f303 	lsl.w	r3, r1, r3
 8004118:	431a      	orrs	r2, r3
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	621a      	str	r2, [r3, #32]
}
 800411e:	bf00      	nop
 8004120:	371c      	adds	r7, #28
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr
	...

0800412c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b084      	sub	sp, #16
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d109      	bne.n	8004150 <HAL_TIMEx_PWMN_Start+0x24>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004142:	b2db      	uxtb	r3, r3
 8004144:	2b01      	cmp	r3, #1
 8004146:	bf14      	ite	ne
 8004148:	2301      	movne	r3, #1
 800414a:	2300      	moveq	r3, #0
 800414c:	b2db      	uxtb	r3, r3
 800414e:	e022      	b.n	8004196 <HAL_TIMEx_PWMN_Start+0x6a>
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	2b04      	cmp	r3, #4
 8004154:	d109      	bne.n	800416a <HAL_TIMEx_PWMN_Start+0x3e>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800415c:	b2db      	uxtb	r3, r3
 800415e:	2b01      	cmp	r3, #1
 8004160:	bf14      	ite	ne
 8004162:	2301      	movne	r3, #1
 8004164:	2300      	moveq	r3, #0
 8004166:	b2db      	uxtb	r3, r3
 8004168:	e015      	b.n	8004196 <HAL_TIMEx_PWMN_Start+0x6a>
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	2b08      	cmp	r3, #8
 800416e:	d109      	bne.n	8004184 <HAL_TIMEx_PWMN_Start+0x58>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004176:	b2db      	uxtb	r3, r3
 8004178:	2b01      	cmp	r3, #1
 800417a:	bf14      	ite	ne
 800417c:	2301      	movne	r3, #1
 800417e:	2300      	moveq	r3, #0
 8004180:	b2db      	uxtb	r3, r3
 8004182:	e008      	b.n	8004196 <HAL_TIMEx_PWMN_Start+0x6a>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800418a:	b2db      	uxtb	r3, r3
 800418c:	2b01      	cmp	r3, #1
 800418e:	bf14      	ite	ne
 8004190:	2301      	movne	r3, #1
 8004192:	2300      	moveq	r3, #0
 8004194:	b2db      	uxtb	r3, r3
 8004196:	2b00      	cmp	r3, #0
 8004198:	d001      	beq.n	800419e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e073      	b.n	8004286 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d104      	bne.n	80041ae <HAL_TIMEx_PWMN_Start+0x82>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2202      	movs	r2, #2
 80041a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041ac:	e013      	b.n	80041d6 <HAL_TIMEx_PWMN_Start+0xaa>
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	2b04      	cmp	r3, #4
 80041b2:	d104      	bne.n	80041be <HAL_TIMEx_PWMN_Start+0x92>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2202      	movs	r2, #2
 80041b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041bc:	e00b      	b.n	80041d6 <HAL_TIMEx_PWMN_Start+0xaa>
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	2b08      	cmp	r3, #8
 80041c2:	d104      	bne.n	80041ce <HAL_TIMEx_PWMN_Start+0xa2>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2202      	movs	r2, #2
 80041c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80041cc:	e003      	b.n	80041d6 <HAL_TIMEx_PWMN_Start+0xaa>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2202      	movs	r2, #2
 80041d2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	2204      	movs	r2, #4
 80041dc:	6839      	ldr	r1, [r7, #0]
 80041de:	4618      	mov	r0, r3
 80041e0:	f000 f9f4 	bl	80045cc <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041f2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a25      	ldr	r2, [pc, #148]	; (8004290 <HAL_TIMEx_PWMN_Start+0x164>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d022      	beq.n	8004244 <HAL_TIMEx_PWMN_Start+0x118>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004206:	d01d      	beq.n	8004244 <HAL_TIMEx_PWMN_Start+0x118>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a21      	ldr	r2, [pc, #132]	; (8004294 <HAL_TIMEx_PWMN_Start+0x168>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d018      	beq.n	8004244 <HAL_TIMEx_PWMN_Start+0x118>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a20      	ldr	r2, [pc, #128]	; (8004298 <HAL_TIMEx_PWMN_Start+0x16c>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d013      	beq.n	8004244 <HAL_TIMEx_PWMN_Start+0x118>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a1e      	ldr	r2, [pc, #120]	; (800429c <HAL_TIMEx_PWMN_Start+0x170>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d00e      	beq.n	8004244 <HAL_TIMEx_PWMN_Start+0x118>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a1d      	ldr	r2, [pc, #116]	; (80042a0 <HAL_TIMEx_PWMN_Start+0x174>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d009      	beq.n	8004244 <HAL_TIMEx_PWMN_Start+0x118>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a1b      	ldr	r2, [pc, #108]	; (80042a4 <HAL_TIMEx_PWMN_Start+0x178>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d004      	beq.n	8004244 <HAL_TIMEx_PWMN_Start+0x118>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a1a      	ldr	r2, [pc, #104]	; (80042a8 <HAL_TIMEx_PWMN_Start+0x17c>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d115      	bne.n	8004270 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	689a      	ldr	r2, [r3, #8]
 800424a:	4b18      	ldr	r3, [pc, #96]	; (80042ac <HAL_TIMEx_PWMN_Start+0x180>)
 800424c:	4013      	ands	r3, r2
 800424e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2b06      	cmp	r3, #6
 8004254:	d015      	beq.n	8004282 <HAL_TIMEx_PWMN_Start+0x156>
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800425c:	d011      	beq.n	8004282 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f042 0201 	orr.w	r2, r2, #1
 800426c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800426e:	e008      	b.n	8004282 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f042 0201 	orr.w	r2, r2, #1
 800427e:	601a      	str	r2, [r3, #0]
 8004280:	e000      	b.n	8004284 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004282:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004284:	2300      	movs	r3, #0
}
 8004286:	4618      	mov	r0, r3
 8004288:	3710      	adds	r7, #16
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	40012c00 	.word	0x40012c00
 8004294:	40000400 	.word	0x40000400
 8004298:	40000800 	.word	0x40000800
 800429c:	40000c00 	.word	0x40000c00
 80042a0:	40013400 	.word	0x40013400
 80042a4:	40014000 	.word	0x40014000
 80042a8:	40015000 	.word	0x40015000
 80042ac:	00010007 	.word	0x00010007

080042b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b085      	sub	sp, #20
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d101      	bne.n	80042c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042c4:	2302      	movs	r3, #2
 80042c6:	e074      	b.n	80043b2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2202      	movs	r2, #2
 80042d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a34      	ldr	r2, [pc, #208]	; (80043c0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d009      	beq.n	8004306 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a33      	ldr	r2, [pc, #204]	; (80043c4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d004      	beq.n	8004306 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a31      	ldr	r2, [pc, #196]	; (80043c8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d108      	bne.n	8004318 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800430c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	68fa      	ldr	r2, [r7, #12]
 8004314:	4313      	orrs	r3, r2
 8004316:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800431e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004322:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	68fa      	ldr	r2, [r7, #12]
 800432a:	4313      	orrs	r3, r2
 800432c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68fa      	ldr	r2, [r7, #12]
 8004334:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a21      	ldr	r2, [pc, #132]	; (80043c0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d022      	beq.n	8004386 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004348:	d01d      	beq.n	8004386 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a1f      	ldr	r2, [pc, #124]	; (80043cc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d018      	beq.n	8004386 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a1d      	ldr	r2, [pc, #116]	; (80043d0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d013      	beq.n	8004386 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a1c      	ldr	r2, [pc, #112]	; (80043d4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d00e      	beq.n	8004386 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a15      	ldr	r2, [pc, #84]	; (80043c4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d009      	beq.n	8004386 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a18      	ldr	r2, [pc, #96]	; (80043d8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d004      	beq.n	8004386 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a11      	ldr	r2, [pc, #68]	; (80043c8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d10c      	bne.n	80043a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800438c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	68ba      	ldr	r2, [r7, #8]
 8004394:	4313      	orrs	r3, r2
 8004396:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	68ba      	ldr	r2, [r7, #8]
 800439e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3714      	adds	r7, #20
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr
 80043be:	bf00      	nop
 80043c0:	40012c00 	.word	0x40012c00
 80043c4:	40013400 	.word	0x40013400
 80043c8:	40015000 	.word	0x40015000
 80043cc:	40000400 	.word	0x40000400
 80043d0:	40000800 	.word	0x40000800
 80043d4:	40000c00 	.word	0x40000c00
 80043d8:	40014000 	.word	0x40014000

080043dc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80043dc:	b480      	push	{r7}
 80043de:	b085      	sub	sp, #20
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80043e6:	2300      	movs	r3, #0
 80043e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d101      	bne.n	80043f8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80043f4:	2302      	movs	r3, #2
 80043f6:	e096      	b.n	8004526 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	4313      	orrs	r3, r2
 800440c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	4313      	orrs	r3, r2
 800441a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	4313      	orrs	r3, r2
 8004428:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4313      	orrs	r3, r2
 8004436:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	4313      	orrs	r3, r2
 8004444:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	695b      	ldr	r3, [r3, #20]
 8004450:	4313      	orrs	r3, r2
 8004452:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800445e:	4313      	orrs	r3, r2
 8004460:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	699b      	ldr	r3, [r3, #24]
 800446c:	041b      	lsls	r3, r3, #16
 800446e:	4313      	orrs	r3, r2
 8004470:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a2f      	ldr	r2, [pc, #188]	; (8004534 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d009      	beq.n	8004490 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a2d      	ldr	r2, [pc, #180]	; (8004538 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d004      	beq.n	8004490 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a2c      	ldr	r2, [pc, #176]	; (800453c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d106      	bne.n	800449e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	69db      	ldr	r3, [r3, #28]
 800449a:	4313      	orrs	r3, r2
 800449c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a24      	ldr	r2, [pc, #144]	; (8004534 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d009      	beq.n	80044bc <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a22      	ldr	r2, [pc, #136]	; (8004538 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d004      	beq.n	80044bc <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a21      	ldr	r2, [pc, #132]	; (800453c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d12b      	bne.n	8004514 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c6:	051b      	lsls	r3, r3, #20
 80044c8:	4313      	orrs	r3, r2
 80044ca:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	6a1b      	ldr	r3, [r3, #32]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e4:	4313      	orrs	r3, r2
 80044e6:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a11      	ldr	r2, [pc, #68]	; (8004534 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d009      	beq.n	8004506 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a10      	ldr	r2, [pc, #64]	; (8004538 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d004      	beq.n	8004506 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a0e      	ldr	r2, [pc, #56]	; (800453c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d106      	bne.n	8004514 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004510:	4313      	orrs	r3, r2
 8004512:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	68fa      	ldr	r2, [r7, #12]
 800451a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2200      	movs	r2, #0
 8004520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004524:	2300      	movs	r3, #0
}
 8004526:	4618      	mov	r0, r3
 8004528:	3714      	adds	r7, #20
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr
 8004532:	bf00      	nop
 8004534:	40012c00 	.word	0x40012c00
 8004538:	40013400 	.word	0x40013400
 800453c:	40015000 	.word	0x40015000

08004540 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004540:	b480      	push	{r7}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004548:	bf00      	nop
 800454a:	370c      	adds	r7, #12
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr

08004554 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800455c:	bf00      	nop
 800455e:	370c      	adds	r7, #12
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr

08004568 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004570:	bf00      	nop
 8004572:	370c      	adds	r7, #12
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr

0800457c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004584:	bf00      	nop
 8004586:	370c      	adds	r7, #12
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr

08004590 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004598:	bf00      	nop
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr

080045a4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80045ac:	bf00      	nop
 80045ae:	370c      	adds	r7, #12
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr

080045b8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80045c0:	bf00      	nop
 80045c2:	370c      	adds	r7, #12
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr

080045cc <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b087      	sub	sp, #28
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	60f8      	str	r0, [r7, #12]
 80045d4:	60b9      	str	r1, [r7, #8]
 80045d6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	f003 031f 	and.w	r3, r3, #31
 80045de:	2204      	movs	r2, #4
 80045e0:	fa02 f303 	lsl.w	r3, r2, r3
 80045e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6a1a      	ldr	r2, [r3, #32]
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	43db      	mvns	r3, r3
 80045ee:	401a      	ands	r2, r3
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6a1a      	ldr	r2, [r3, #32]
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	f003 031f 	and.w	r3, r3, #31
 80045fe:	6879      	ldr	r1, [r7, #4]
 8004600:	fa01 f303 	lsl.w	r3, r1, r3
 8004604:	431a      	orrs	r2, r3
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	621a      	str	r2, [r3, #32]
}
 800460a:	bf00      	nop
 800460c:	371c      	adds	r7, #28
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr

08004616 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004616:	b580      	push	{r7, lr}
 8004618:	b082      	sub	sp, #8
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d101      	bne.n	8004628 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	e042      	b.n	80046ae <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800462e:	2b00      	cmp	r3, #0
 8004630:	d106      	bne.n	8004640 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f7fc fe16 	bl	800126c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2224      	movs	r2, #36	; 0x24
 8004644:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f022 0201 	bic.w	r2, r2, #1
 8004656:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f000 fc51 	bl	8004f00 <UART_SetConfig>
 800465e:	4603      	mov	r3, r0
 8004660:	2b01      	cmp	r3, #1
 8004662:	d101      	bne.n	8004668 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e022      	b.n	80046ae <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800466c:	2b00      	cmp	r3, #0
 800466e:	d002      	beq.n	8004676 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f000 ff41 	bl	80054f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	685a      	ldr	r2, [r3, #4]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004684:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	689a      	ldr	r2, [r3, #8]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004694:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f042 0201 	orr.w	r2, r2, #1
 80046a4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f000 ffc8 	bl	800563c <UART_CheckIdleState>
 80046ac:	4603      	mov	r3, r0
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3708      	adds	r7, #8
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}

080046b6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046b6:	b580      	push	{r7, lr}
 80046b8:	b08a      	sub	sp, #40	; 0x28
 80046ba:	af02      	add	r7, sp, #8
 80046bc:	60f8      	str	r0, [r7, #12]
 80046be:	60b9      	str	r1, [r7, #8]
 80046c0:	603b      	str	r3, [r7, #0]
 80046c2:	4613      	mov	r3, r2
 80046c4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046cc:	2b20      	cmp	r3, #32
 80046ce:	f040 8083 	bne.w	80047d8 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d002      	beq.n	80046de <HAL_UART_Transmit+0x28>
 80046d8:	88fb      	ldrh	r3, [r7, #6]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d101      	bne.n	80046e2 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e07b      	b.n	80047da <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d101      	bne.n	80046f0 <HAL_UART_Transmit+0x3a>
 80046ec:	2302      	movs	r3, #2
 80046ee:	e074      	b.n	80047da <HAL_UART_Transmit+0x124>
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2221      	movs	r2, #33	; 0x21
 8004704:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004708:	f7fc fe64 	bl	80013d4 <HAL_GetTick>
 800470c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	88fa      	ldrh	r2, [r7, #6]
 8004712:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	88fa      	ldrh	r2, [r7, #6]
 800471a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004726:	d108      	bne.n	800473a <HAL_UART_Transmit+0x84>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	691b      	ldr	r3, [r3, #16]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d104      	bne.n	800473a <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004730:	2300      	movs	r3, #0
 8004732:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	61bb      	str	r3, [r7, #24]
 8004738:	e003      	b.n	8004742 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800473e:	2300      	movs	r3, #0
 8004740:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2200      	movs	r2, #0
 8004746:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800474a:	e02c      	b.n	80047a6 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	9300      	str	r3, [sp, #0]
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	2200      	movs	r2, #0
 8004754:	2180      	movs	r1, #128	; 0x80
 8004756:	68f8      	ldr	r0, [r7, #12]
 8004758:	f000 ffbb 	bl	80056d2 <UART_WaitOnFlagUntilTimeout>
 800475c:	4603      	mov	r3, r0
 800475e:	2b00      	cmp	r3, #0
 8004760:	d001      	beq.n	8004766 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e039      	b.n	80047da <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d10b      	bne.n	8004784 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	881b      	ldrh	r3, [r3, #0]
 8004770:	461a      	mov	r2, r3
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800477a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800477c:	69bb      	ldr	r3, [r7, #24]
 800477e:	3302      	adds	r3, #2
 8004780:	61bb      	str	r3, [r7, #24]
 8004782:	e007      	b.n	8004794 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	781a      	ldrb	r2, [r3, #0]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	3301      	adds	r3, #1
 8004792:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800479a:	b29b      	uxth	r3, r3
 800479c:	3b01      	subs	r3, #1
 800479e:	b29a      	uxth	r2, r3
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d1cc      	bne.n	800474c <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	9300      	str	r3, [sp, #0]
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	2200      	movs	r2, #0
 80047ba:	2140      	movs	r1, #64	; 0x40
 80047bc:	68f8      	ldr	r0, [r7, #12]
 80047be:	f000 ff88 	bl	80056d2 <UART_WaitOnFlagUntilTimeout>
 80047c2:	4603      	mov	r3, r0
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d001      	beq.n	80047cc <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80047c8:	2303      	movs	r3, #3
 80047ca:	e006      	b.n	80047da <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2220      	movs	r2, #32
 80047d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80047d4:	2300      	movs	r3, #0
 80047d6:	e000      	b.n	80047da <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80047d8:	2302      	movs	r3, #2
  }
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3720      	adds	r7, #32
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
	...

080047e4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b08a      	sub	sp, #40	; 0x28
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	60f8      	str	r0, [r7, #12]
 80047ec:	60b9      	str	r1, [r7, #8]
 80047ee:	4613      	mov	r3, r2
 80047f0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047f8:	2b20      	cmp	r3, #32
 80047fa:	d142      	bne.n	8004882 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d002      	beq.n	8004808 <HAL_UART_Receive_IT+0x24>
 8004802:	88fb      	ldrh	r3, [r7, #6]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d101      	bne.n	800480c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e03b      	b.n	8004884 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004812:	2b01      	cmp	r3, #1
 8004814:	d101      	bne.n	800481a <HAL_UART_Receive_IT+0x36>
 8004816:	2302      	movs	r3, #2
 8004818:	e034      	b.n	8004884 <HAL_UART_Receive_IT+0xa0>
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2201      	movs	r2, #1
 800481e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2200      	movs	r2, #0
 8004826:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a17      	ldr	r2, [pc, #92]	; (800488c <HAL_UART_Receive_IT+0xa8>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d01f      	beq.n	8004872 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d018      	beq.n	8004872 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	e853 3f00 	ldrex	r3, [r3]
 800484c:	613b      	str	r3, [r7, #16]
   return(result);
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004854:	627b      	str	r3, [r7, #36]	; 0x24
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	461a      	mov	r2, r3
 800485c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485e:	623b      	str	r3, [r7, #32]
 8004860:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004862:	69f9      	ldr	r1, [r7, #28]
 8004864:	6a3a      	ldr	r2, [r7, #32]
 8004866:	e841 2300 	strex	r3, r2, [r1]
 800486a:	61bb      	str	r3, [r7, #24]
   return(result);
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d1e6      	bne.n	8004840 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004872:	88fb      	ldrh	r3, [r7, #6]
 8004874:	461a      	mov	r2, r3
 8004876:	68b9      	ldr	r1, [r7, #8]
 8004878:	68f8      	ldr	r0, [r7, #12]
 800487a:	f000 fff3 	bl	8005864 <UART_Start_Receive_IT>
 800487e:	4603      	mov	r3, r0
 8004880:	e000      	b.n	8004884 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004882:	2302      	movs	r3, #2
  }
}
 8004884:	4618      	mov	r0, r3
 8004886:	3728      	adds	r7, #40	; 0x28
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}
 800488c:	40008000 	.word	0x40008000

08004890 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b0ba      	sub	sp, #232	; 0xe8
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	69db      	ldr	r3, [r3, #28]
 800489e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80048b6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80048ba:	f640 030f 	movw	r3, #2063	; 0x80f
 80048be:	4013      	ands	r3, r2
 80048c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80048c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d11b      	bne.n	8004904 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80048cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048d0:	f003 0320 	and.w	r3, r3, #32
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d015      	beq.n	8004904 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80048d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048dc:	f003 0320 	and.w	r3, r3, #32
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d105      	bne.n	80048f0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80048e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d009      	beq.n	8004904 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	f000 82d6 	beq.w	8004ea6 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	4798      	blx	r3
      }
      return;
 8004902:	e2d0      	b.n	8004ea6 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004904:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004908:	2b00      	cmp	r3, #0
 800490a:	f000 811f 	beq.w	8004b4c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800490e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004912:	4b8b      	ldr	r3, [pc, #556]	; (8004b40 <HAL_UART_IRQHandler+0x2b0>)
 8004914:	4013      	ands	r3, r2
 8004916:	2b00      	cmp	r3, #0
 8004918:	d106      	bne.n	8004928 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800491a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800491e:	4b89      	ldr	r3, [pc, #548]	; (8004b44 <HAL_UART_IRQHandler+0x2b4>)
 8004920:	4013      	ands	r3, r2
 8004922:	2b00      	cmp	r3, #0
 8004924:	f000 8112 	beq.w	8004b4c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004928:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800492c:	f003 0301 	and.w	r3, r3, #1
 8004930:	2b00      	cmp	r3, #0
 8004932:	d011      	beq.n	8004958 <HAL_UART_IRQHandler+0xc8>
 8004934:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800493c:	2b00      	cmp	r3, #0
 800493e:	d00b      	beq.n	8004958 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2201      	movs	r2, #1
 8004946:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800494e:	f043 0201 	orr.w	r2, r3, #1
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004958:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800495c:	f003 0302 	and.w	r3, r3, #2
 8004960:	2b00      	cmp	r3, #0
 8004962:	d011      	beq.n	8004988 <HAL_UART_IRQHandler+0xf8>
 8004964:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004968:	f003 0301 	and.w	r3, r3, #1
 800496c:	2b00      	cmp	r3, #0
 800496e:	d00b      	beq.n	8004988 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	2202      	movs	r2, #2
 8004976:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800497e:	f043 0204 	orr.w	r2, r3, #4
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004988:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800498c:	f003 0304 	and.w	r3, r3, #4
 8004990:	2b00      	cmp	r3, #0
 8004992:	d011      	beq.n	80049b8 <HAL_UART_IRQHandler+0x128>
 8004994:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004998:	f003 0301 	and.w	r3, r3, #1
 800499c:	2b00      	cmp	r3, #0
 800499e:	d00b      	beq.n	80049b8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	2204      	movs	r2, #4
 80049a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049ae:	f043 0202 	orr.w	r2, r3, #2
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80049b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049bc:	f003 0308 	and.w	r3, r3, #8
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d017      	beq.n	80049f4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80049c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049c8:	f003 0320 	and.w	r3, r3, #32
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d105      	bne.n	80049dc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80049d0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80049d4:	4b5a      	ldr	r3, [pc, #360]	; (8004b40 <HAL_UART_IRQHandler+0x2b0>)
 80049d6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d00b      	beq.n	80049f4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2208      	movs	r2, #8
 80049e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049ea:	f043 0208 	orr.w	r2, r3, #8
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80049f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d012      	beq.n	8004a26 <HAL_UART_IRQHandler+0x196>
 8004a00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a04:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d00c      	beq.n	8004a26 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a14:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a1c:	f043 0220 	orr.w	r2, r3, #32
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	f000 823c 	beq.w	8004eaa <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004a32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a36:	f003 0320 	and.w	r3, r3, #32
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d013      	beq.n	8004a66 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004a3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a42:	f003 0320 	and.w	r3, r3, #32
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d105      	bne.n	8004a56 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004a4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d007      	beq.n	8004a66 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d003      	beq.n	8004a66 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a6c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a7a:	2b40      	cmp	r3, #64	; 0x40
 8004a7c:	d005      	beq.n	8004a8a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004a7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a82:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d04f      	beq.n	8004b2a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f001 f814 	bl	8005ab8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a9a:	2b40      	cmp	r3, #64	; 0x40
 8004a9c:	d141      	bne.n	8004b22 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	3308      	adds	r3, #8
 8004aa4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004aac:	e853 3f00 	ldrex	r3, [r3]
 8004ab0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004ab4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004ab8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004abc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	3308      	adds	r3, #8
 8004ac6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004aca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004ace:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004ad6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004ada:	e841 2300 	strex	r3, r2, [r1]
 8004ade:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004ae2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d1d9      	bne.n	8004a9e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d013      	beq.n	8004b1a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004af6:	4a14      	ldr	r2, [pc, #80]	; (8004b48 <HAL_UART_IRQHandler+0x2b8>)
 8004af8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004afe:	4618      	mov	r0, r3
 8004b00:	f7fc fdcf 	bl	80016a2 <HAL_DMA_Abort_IT>
 8004b04:	4603      	mov	r3, r0
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d017      	beq.n	8004b3a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8004b14:	4610      	mov	r0, r2
 8004b16:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b18:	e00f      	b.n	8004b3a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f000 f9da 	bl	8004ed4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b20:	e00b      	b.n	8004b3a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f000 f9d6 	bl	8004ed4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b28:	e007      	b.n	8004b3a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f000 f9d2 	bl	8004ed4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8004b38:	e1b7      	b.n	8004eaa <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b3a:	bf00      	nop
    return;
 8004b3c:	e1b5      	b.n	8004eaa <HAL_UART_IRQHandler+0x61a>
 8004b3e:	bf00      	nop
 8004b40:	10000001 	.word	0x10000001
 8004b44:	04000120 	.word	0x04000120
 8004b48:	08005b85 	.word	0x08005b85

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	f040 814a 	bne.w	8004dea <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004b56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b5a:	f003 0310 	and.w	r3, r3, #16
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	f000 8143 	beq.w	8004dea <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004b64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b68:	f003 0310 	and.w	r3, r3, #16
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	f000 813c 	beq.w	8004dea <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	2210      	movs	r2, #16
 8004b78:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b84:	2b40      	cmp	r3, #64	; 0x40
 8004b86:	f040 80b5 	bne.w	8004cf4 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004b96:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	f000 8187 	beq.w	8004eae <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004ba6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004baa:	429a      	cmp	r2, r3
 8004bac:	f080 817f 	bcs.w	8004eae <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004bb6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 0320 	and.w	r3, r3, #32
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	f040 8086 	bne.w	8004cd8 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004bd8:	e853 3f00 	ldrex	r3, [r3]
 8004bdc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004be0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004be4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004be8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004bf6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004bfa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bfe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004c02:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004c06:	e841 2300 	strex	r3, r2, [r1]
 8004c0a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004c0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d1da      	bne.n	8004bcc <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	3308      	adds	r3, #8
 8004c1c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c20:	e853 3f00 	ldrex	r3, [r3]
 8004c24:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004c26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c28:	f023 0301 	bic.w	r3, r3, #1
 8004c2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	3308      	adds	r3, #8
 8004c36:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004c3a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004c3e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c40:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004c42:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004c46:	e841 2300 	strex	r3, r2, [r1]
 8004c4a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004c4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d1e1      	bne.n	8004c16 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	3308      	adds	r3, #8
 8004c58:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c5c:	e853 3f00 	ldrex	r3, [r3]
 8004c60:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004c62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	3308      	adds	r3, #8
 8004c72:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004c76:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004c78:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c7a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004c7c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004c7e:	e841 2300 	strex	r3, r2, [r1]
 8004c82:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004c84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d1e3      	bne.n	8004c52 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2220      	movs	r2, #32
 8004c8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ca0:	e853 3f00 	ldrex	r3, [r3]
 8004ca4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004ca6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ca8:	f023 0310 	bic.w	r3, r3, #16
 8004cac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004cba:	65bb      	str	r3, [r7, #88]	; 0x58
 8004cbc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cbe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004cc0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004cc2:	e841 2300 	strex	r3, r2, [r1]
 8004cc6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004cc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d1e4      	bne.n	8004c98 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f7fc fc8c 	bl	80015f0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	4619      	mov	r1, r3
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f000 f8fb 	bl	8004ee8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004cf2:	e0dc      	b.n	8004eae <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	1ad3      	subs	r3, r2, r3
 8004d04:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	f000 80ce 	beq.w	8004eb2 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8004d16:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	f000 80c9 	beq.w	8004eb2 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d28:	e853 3f00 	ldrex	r3, [r3]
 8004d2c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d34:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004d42:	647b      	str	r3, [r7, #68]	; 0x44
 8004d44:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d46:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004d48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d4a:	e841 2300 	strex	r3, r2, [r1]
 8004d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004d50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d1e4      	bne.n	8004d20 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	3308      	adds	r3, #8
 8004d5c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d60:	e853 3f00 	ldrex	r3, [r3]
 8004d64:	623b      	str	r3, [r7, #32]
   return(result);
 8004d66:	6a3b      	ldr	r3, [r7, #32]
 8004d68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d6c:	f023 0301 	bic.w	r3, r3, #1
 8004d70:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	3308      	adds	r3, #8
 8004d7a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004d7e:	633a      	str	r2, [r7, #48]	; 0x30
 8004d80:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d86:	e841 2300 	strex	r3, r2, [r1]
 8004d8a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d1e1      	bne.n	8004d56 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2220      	movs	r2, #32
 8004d96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	e853 3f00 	ldrex	r3, [r3]
 8004db2:	60fb      	str	r3, [r7, #12]
   return(result);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f023 0310 	bic.w	r3, r3, #16
 8004dba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004dc8:	61fb      	str	r3, [r7, #28]
 8004dca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dcc:	69b9      	ldr	r1, [r7, #24]
 8004dce:	69fa      	ldr	r2, [r7, #28]
 8004dd0:	e841 2300 	strex	r3, r2, [r1]
 8004dd4:	617b      	str	r3, [r7, #20]
   return(result);
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d1e4      	bne.n	8004da6 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004ddc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004de0:	4619      	mov	r1, r3
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f000 f880 	bl	8004ee8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004de8:	e063      	b.n	8004eb2 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004dea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d00e      	beq.n	8004e14 <HAL_UART_IRQHandler+0x584>
 8004df6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004dfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d008      	beq.n	8004e14 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004e0a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f001 fb57 	bl	80064c0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004e12:	e051      	b.n	8004eb8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004e14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d014      	beq.n	8004e4a <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004e20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d105      	bne.n	8004e38 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004e2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e30:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d008      	beq.n	8004e4a <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d03a      	beq.n	8004eb6 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	4798      	blx	r3
    }
    return;
 8004e48:	e035      	b.n	8004eb6 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004e4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d009      	beq.n	8004e6a <HAL_UART_IRQHandler+0x5da>
 8004e56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d003      	beq.n	8004e6a <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f000 fea4 	bl	8005bb0 <UART_EndTransmit_IT>
    return;
 8004e68:	e026      	b.n	8004eb8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004e6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d009      	beq.n	8004e8a <HAL_UART_IRQHandler+0x5fa>
 8004e76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e7a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d003      	beq.n	8004e8a <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f001 fb30 	bl	80064e8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004e88:	e016      	b.n	8004eb8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004e8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d010      	beq.n	8004eb8 <HAL_UART_IRQHandler+0x628>
 8004e96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	da0c      	bge.n	8004eb8 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f001 fb18 	bl	80064d4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004ea4:	e008      	b.n	8004eb8 <HAL_UART_IRQHandler+0x628>
      return;
 8004ea6:	bf00      	nop
 8004ea8:	e006      	b.n	8004eb8 <HAL_UART_IRQHandler+0x628>
    return;
 8004eaa:	bf00      	nop
 8004eac:	e004      	b.n	8004eb8 <HAL_UART_IRQHandler+0x628>
      return;
 8004eae:	bf00      	nop
 8004eb0:	e002      	b.n	8004eb8 <HAL_UART_IRQHandler+0x628>
      return;
 8004eb2:	bf00      	nop
 8004eb4:	e000      	b.n	8004eb8 <HAL_UART_IRQHandler+0x628>
    return;
 8004eb6:	bf00      	nop
  }
}
 8004eb8:	37e8      	adds	r7, #232	; 0xe8
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop

08004ec0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b083      	sub	sp, #12
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004ec8:	bf00      	nop
 8004eca:	370c      	adds	r7, #12
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr

08004ed4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b083      	sub	sp, #12
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004edc:	bf00      	nop
 8004ede:	370c      	adds	r7, #12
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr

08004ee8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b083      	sub	sp, #12
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	460b      	mov	r3, r1
 8004ef2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004ef4:	bf00      	nop
 8004ef6:	370c      	adds	r7, #12
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr

08004f00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f04:	b08c      	sub	sp, #48	; 0x30
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	689a      	ldr	r2, [r3, #8]
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	691b      	ldr	r3, [r3, #16]
 8004f18:	431a      	orrs	r2, r3
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	695b      	ldr	r3, [r3, #20]
 8004f1e:	431a      	orrs	r2, r3
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	69db      	ldr	r3, [r3, #28]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	4baa      	ldr	r3, [pc, #680]	; (80051d8 <UART_SetConfig+0x2d8>)
 8004f30:	4013      	ands	r3, r2
 8004f32:	697a      	ldr	r2, [r7, #20]
 8004f34:	6812      	ldr	r2, [r2, #0]
 8004f36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f38:	430b      	orrs	r3, r1
 8004f3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	68da      	ldr	r2, [r3, #12]
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	430a      	orrs	r2, r1
 8004f50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	699b      	ldr	r3, [r3, #24]
 8004f56:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a9f      	ldr	r2, [pc, #636]	; (80051dc <UART_SetConfig+0x2dc>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d004      	beq.n	8004f6c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	6a1b      	ldr	r3, [r3, #32]
 8004f66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004f76:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004f7a:	697a      	ldr	r2, [r7, #20]
 8004f7c:	6812      	ldr	r2, [r2, #0]
 8004f7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f80:	430b      	orrs	r3, r1
 8004f82:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f8a:	f023 010f 	bic.w	r1, r3, #15
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	430a      	orrs	r2, r1
 8004f98:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a90      	ldr	r2, [pc, #576]	; (80051e0 <UART_SetConfig+0x2e0>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d125      	bne.n	8004ff0 <UART_SetConfig+0xf0>
 8004fa4:	4b8f      	ldr	r3, [pc, #572]	; (80051e4 <UART_SetConfig+0x2e4>)
 8004fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004faa:	f003 0303 	and.w	r3, r3, #3
 8004fae:	2b03      	cmp	r3, #3
 8004fb0:	d81a      	bhi.n	8004fe8 <UART_SetConfig+0xe8>
 8004fb2:	a201      	add	r2, pc, #4	; (adr r2, 8004fb8 <UART_SetConfig+0xb8>)
 8004fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fb8:	08004fc9 	.word	0x08004fc9
 8004fbc:	08004fd9 	.word	0x08004fd9
 8004fc0:	08004fd1 	.word	0x08004fd1
 8004fc4:	08004fe1 	.word	0x08004fe1
 8004fc8:	2301      	movs	r3, #1
 8004fca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fce:	e116      	b.n	80051fe <UART_SetConfig+0x2fe>
 8004fd0:	2302      	movs	r3, #2
 8004fd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fd6:	e112      	b.n	80051fe <UART_SetConfig+0x2fe>
 8004fd8:	2304      	movs	r3, #4
 8004fda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fde:	e10e      	b.n	80051fe <UART_SetConfig+0x2fe>
 8004fe0:	2308      	movs	r3, #8
 8004fe2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fe6:	e10a      	b.n	80051fe <UART_SetConfig+0x2fe>
 8004fe8:	2310      	movs	r3, #16
 8004fea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fee:	e106      	b.n	80051fe <UART_SetConfig+0x2fe>
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a7c      	ldr	r2, [pc, #496]	; (80051e8 <UART_SetConfig+0x2e8>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d138      	bne.n	800506c <UART_SetConfig+0x16c>
 8004ffa:	4b7a      	ldr	r3, [pc, #488]	; (80051e4 <UART_SetConfig+0x2e4>)
 8004ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005000:	f003 030c 	and.w	r3, r3, #12
 8005004:	2b0c      	cmp	r3, #12
 8005006:	d82d      	bhi.n	8005064 <UART_SetConfig+0x164>
 8005008:	a201      	add	r2, pc, #4	; (adr r2, 8005010 <UART_SetConfig+0x110>)
 800500a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800500e:	bf00      	nop
 8005010:	08005045 	.word	0x08005045
 8005014:	08005065 	.word	0x08005065
 8005018:	08005065 	.word	0x08005065
 800501c:	08005065 	.word	0x08005065
 8005020:	08005055 	.word	0x08005055
 8005024:	08005065 	.word	0x08005065
 8005028:	08005065 	.word	0x08005065
 800502c:	08005065 	.word	0x08005065
 8005030:	0800504d 	.word	0x0800504d
 8005034:	08005065 	.word	0x08005065
 8005038:	08005065 	.word	0x08005065
 800503c:	08005065 	.word	0x08005065
 8005040:	0800505d 	.word	0x0800505d
 8005044:	2300      	movs	r3, #0
 8005046:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800504a:	e0d8      	b.n	80051fe <UART_SetConfig+0x2fe>
 800504c:	2302      	movs	r3, #2
 800504e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005052:	e0d4      	b.n	80051fe <UART_SetConfig+0x2fe>
 8005054:	2304      	movs	r3, #4
 8005056:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800505a:	e0d0      	b.n	80051fe <UART_SetConfig+0x2fe>
 800505c:	2308      	movs	r3, #8
 800505e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005062:	e0cc      	b.n	80051fe <UART_SetConfig+0x2fe>
 8005064:	2310      	movs	r3, #16
 8005066:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800506a:	e0c8      	b.n	80051fe <UART_SetConfig+0x2fe>
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a5e      	ldr	r2, [pc, #376]	; (80051ec <UART_SetConfig+0x2ec>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d125      	bne.n	80050c2 <UART_SetConfig+0x1c2>
 8005076:	4b5b      	ldr	r3, [pc, #364]	; (80051e4 <UART_SetConfig+0x2e4>)
 8005078:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800507c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005080:	2b30      	cmp	r3, #48	; 0x30
 8005082:	d016      	beq.n	80050b2 <UART_SetConfig+0x1b2>
 8005084:	2b30      	cmp	r3, #48	; 0x30
 8005086:	d818      	bhi.n	80050ba <UART_SetConfig+0x1ba>
 8005088:	2b20      	cmp	r3, #32
 800508a:	d00a      	beq.n	80050a2 <UART_SetConfig+0x1a2>
 800508c:	2b20      	cmp	r3, #32
 800508e:	d814      	bhi.n	80050ba <UART_SetConfig+0x1ba>
 8005090:	2b00      	cmp	r3, #0
 8005092:	d002      	beq.n	800509a <UART_SetConfig+0x19a>
 8005094:	2b10      	cmp	r3, #16
 8005096:	d008      	beq.n	80050aa <UART_SetConfig+0x1aa>
 8005098:	e00f      	b.n	80050ba <UART_SetConfig+0x1ba>
 800509a:	2300      	movs	r3, #0
 800509c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050a0:	e0ad      	b.n	80051fe <UART_SetConfig+0x2fe>
 80050a2:	2302      	movs	r3, #2
 80050a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050a8:	e0a9      	b.n	80051fe <UART_SetConfig+0x2fe>
 80050aa:	2304      	movs	r3, #4
 80050ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050b0:	e0a5      	b.n	80051fe <UART_SetConfig+0x2fe>
 80050b2:	2308      	movs	r3, #8
 80050b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050b8:	e0a1      	b.n	80051fe <UART_SetConfig+0x2fe>
 80050ba:	2310      	movs	r3, #16
 80050bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050c0:	e09d      	b.n	80051fe <UART_SetConfig+0x2fe>
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a4a      	ldr	r2, [pc, #296]	; (80051f0 <UART_SetConfig+0x2f0>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d125      	bne.n	8005118 <UART_SetConfig+0x218>
 80050cc:	4b45      	ldr	r3, [pc, #276]	; (80051e4 <UART_SetConfig+0x2e4>)
 80050ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050d2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80050d6:	2bc0      	cmp	r3, #192	; 0xc0
 80050d8:	d016      	beq.n	8005108 <UART_SetConfig+0x208>
 80050da:	2bc0      	cmp	r3, #192	; 0xc0
 80050dc:	d818      	bhi.n	8005110 <UART_SetConfig+0x210>
 80050de:	2b80      	cmp	r3, #128	; 0x80
 80050e0:	d00a      	beq.n	80050f8 <UART_SetConfig+0x1f8>
 80050e2:	2b80      	cmp	r3, #128	; 0x80
 80050e4:	d814      	bhi.n	8005110 <UART_SetConfig+0x210>
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d002      	beq.n	80050f0 <UART_SetConfig+0x1f0>
 80050ea:	2b40      	cmp	r3, #64	; 0x40
 80050ec:	d008      	beq.n	8005100 <UART_SetConfig+0x200>
 80050ee:	e00f      	b.n	8005110 <UART_SetConfig+0x210>
 80050f0:	2300      	movs	r3, #0
 80050f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050f6:	e082      	b.n	80051fe <UART_SetConfig+0x2fe>
 80050f8:	2302      	movs	r3, #2
 80050fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050fe:	e07e      	b.n	80051fe <UART_SetConfig+0x2fe>
 8005100:	2304      	movs	r3, #4
 8005102:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005106:	e07a      	b.n	80051fe <UART_SetConfig+0x2fe>
 8005108:	2308      	movs	r3, #8
 800510a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800510e:	e076      	b.n	80051fe <UART_SetConfig+0x2fe>
 8005110:	2310      	movs	r3, #16
 8005112:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005116:	e072      	b.n	80051fe <UART_SetConfig+0x2fe>
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a35      	ldr	r2, [pc, #212]	; (80051f4 <UART_SetConfig+0x2f4>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d12a      	bne.n	8005178 <UART_SetConfig+0x278>
 8005122:	4b30      	ldr	r3, [pc, #192]	; (80051e4 <UART_SetConfig+0x2e4>)
 8005124:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005128:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800512c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005130:	d01a      	beq.n	8005168 <UART_SetConfig+0x268>
 8005132:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005136:	d81b      	bhi.n	8005170 <UART_SetConfig+0x270>
 8005138:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800513c:	d00c      	beq.n	8005158 <UART_SetConfig+0x258>
 800513e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005142:	d815      	bhi.n	8005170 <UART_SetConfig+0x270>
 8005144:	2b00      	cmp	r3, #0
 8005146:	d003      	beq.n	8005150 <UART_SetConfig+0x250>
 8005148:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800514c:	d008      	beq.n	8005160 <UART_SetConfig+0x260>
 800514e:	e00f      	b.n	8005170 <UART_SetConfig+0x270>
 8005150:	2300      	movs	r3, #0
 8005152:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005156:	e052      	b.n	80051fe <UART_SetConfig+0x2fe>
 8005158:	2302      	movs	r3, #2
 800515a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800515e:	e04e      	b.n	80051fe <UART_SetConfig+0x2fe>
 8005160:	2304      	movs	r3, #4
 8005162:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005166:	e04a      	b.n	80051fe <UART_SetConfig+0x2fe>
 8005168:	2308      	movs	r3, #8
 800516a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800516e:	e046      	b.n	80051fe <UART_SetConfig+0x2fe>
 8005170:	2310      	movs	r3, #16
 8005172:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005176:	e042      	b.n	80051fe <UART_SetConfig+0x2fe>
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a17      	ldr	r2, [pc, #92]	; (80051dc <UART_SetConfig+0x2dc>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d13a      	bne.n	80051f8 <UART_SetConfig+0x2f8>
 8005182:	4b18      	ldr	r3, [pc, #96]	; (80051e4 <UART_SetConfig+0x2e4>)
 8005184:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005188:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800518c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005190:	d01a      	beq.n	80051c8 <UART_SetConfig+0x2c8>
 8005192:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005196:	d81b      	bhi.n	80051d0 <UART_SetConfig+0x2d0>
 8005198:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800519c:	d00c      	beq.n	80051b8 <UART_SetConfig+0x2b8>
 800519e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051a2:	d815      	bhi.n	80051d0 <UART_SetConfig+0x2d0>
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d003      	beq.n	80051b0 <UART_SetConfig+0x2b0>
 80051a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051ac:	d008      	beq.n	80051c0 <UART_SetConfig+0x2c0>
 80051ae:	e00f      	b.n	80051d0 <UART_SetConfig+0x2d0>
 80051b0:	2300      	movs	r3, #0
 80051b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051b6:	e022      	b.n	80051fe <UART_SetConfig+0x2fe>
 80051b8:	2302      	movs	r3, #2
 80051ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051be:	e01e      	b.n	80051fe <UART_SetConfig+0x2fe>
 80051c0:	2304      	movs	r3, #4
 80051c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051c6:	e01a      	b.n	80051fe <UART_SetConfig+0x2fe>
 80051c8:	2308      	movs	r3, #8
 80051ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051ce:	e016      	b.n	80051fe <UART_SetConfig+0x2fe>
 80051d0:	2310      	movs	r3, #16
 80051d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051d6:	e012      	b.n	80051fe <UART_SetConfig+0x2fe>
 80051d8:	cfff69f3 	.word	0xcfff69f3
 80051dc:	40008000 	.word	0x40008000
 80051e0:	40013800 	.word	0x40013800
 80051e4:	40021000 	.word	0x40021000
 80051e8:	40004400 	.word	0x40004400
 80051ec:	40004800 	.word	0x40004800
 80051f0:	40004c00 	.word	0x40004c00
 80051f4:	40005000 	.word	0x40005000
 80051f8:	2310      	movs	r3, #16
 80051fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4aae      	ldr	r2, [pc, #696]	; (80054bc <UART_SetConfig+0x5bc>)
 8005204:	4293      	cmp	r3, r2
 8005206:	f040 8097 	bne.w	8005338 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800520a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800520e:	2b08      	cmp	r3, #8
 8005210:	d823      	bhi.n	800525a <UART_SetConfig+0x35a>
 8005212:	a201      	add	r2, pc, #4	; (adr r2, 8005218 <UART_SetConfig+0x318>)
 8005214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005218:	0800523d 	.word	0x0800523d
 800521c:	0800525b 	.word	0x0800525b
 8005220:	08005245 	.word	0x08005245
 8005224:	0800525b 	.word	0x0800525b
 8005228:	0800524b 	.word	0x0800524b
 800522c:	0800525b 	.word	0x0800525b
 8005230:	0800525b 	.word	0x0800525b
 8005234:	0800525b 	.word	0x0800525b
 8005238:	08005253 	.word	0x08005253
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800523c:	f7fd f9da 	bl	80025f4 <HAL_RCC_GetPCLK1Freq>
 8005240:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005242:	e010      	b.n	8005266 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005244:	4b9e      	ldr	r3, [pc, #632]	; (80054c0 <UART_SetConfig+0x5c0>)
 8005246:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005248:	e00d      	b.n	8005266 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800524a:	f7fd f965 	bl	8002518 <HAL_RCC_GetSysClockFreq>
 800524e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005250:	e009      	b.n	8005266 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005252:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005256:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005258:	e005      	b.n	8005266 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800525a:	2300      	movs	r3, #0
 800525c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005264:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005268:	2b00      	cmp	r3, #0
 800526a:	f000 8130 	beq.w	80054ce <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005272:	4a94      	ldr	r2, [pc, #592]	; (80054c4 <UART_SetConfig+0x5c4>)
 8005274:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005278:	461a      	mov	r2, r3
 800527a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005280:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	685a      	ldr	r2, [r3, #4]
 8005286:	4613      	mov	r3, r2
 8005288:	005b      	lsls	r3, r3, #1
 800528a:	4413      	add	r3, r2
 800528c:	69ba      	ldr	r2, [r7, #24]
 800528e:	429a      	cmp	r2, r3
 8005290:	d305      	bcc.n	800529e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005298:	69ba      	ldr	r2, [r7, #24]
 800529a:	429a      	cmp	r2, r3
 800529c:	d903      	bls.n	80052a6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80052a4:	e113      	b.n	80054ce <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80052a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a8:	2200      	movs	r2, #0
 80052aa:	60bb      	str	r3, [r7, #8]
 80052ac:	60fa      	str	r2, [r7, #12]
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b2:	4a84      	ldr	r2, [pc, #528]	; (80054c4 <UART_SetConfig+0x5c4>)
 80052b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	2200      	movs	r2, #0
 80052bc:	603b      	str	r3, [r7, #0]
 80052be:	607a      	str	r2, [r7, #4]
 80052c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052c4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80052c8:	f7fb f80a 	bl	80002e0 <__aeabi_uldivmod>
 80052cc:	4602      	mov	r2, r0
 80052ce:	460b      	mov	r3, r1
 80052d0:	4610      	mov	r0, r2
 80052d2:	4619      	mov	r1, r3
 80052d4:	f04f 0200 	mov.w	r2, #0
 80052d8:	f04f 0300 	mov.w	r3, #0
 80052dc:	020b      	lsls	r3, r1, #8
 80052de:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80052e2:	0202      	lsls	r2, r0, #8
 80052e4:	6979      	ldr	r1, [r7, #20]
 80052e6:	6849      	ldr	r1, [r1, #4]
 80052e8:	0849      	lsrs	r1, r1, #1
 80052ea:	2000      	movs	r0, #0
 80052ec:	460c      	mov	r4, r1
 80052ee:	4605      	mov	r5, r0
 80052f0:	eb12 0804 	adds.w	r8, r2, r4
 80052f4:	eb43 0905 	adc.w	r9, r3, r5
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	469a      	mov	sl, r3
 8005300:	4693      	mov	fp, r2
 8005302:	4652      	mov	r2, sl
 8005304:	465b      	mov	r3, fp
 8005306:	4640      	mov	r0, r8
 8005308:	4649      	mov	r1, r9
 800530a:	f7fa ffe9 	bl	80002e0 <__aeabi_uldivmod>
 800530e:	4602      	mov	r2, r0
 8005310:	460b      	mov	r3, r1
 8005312:	4613      	mov	r3, r2
 8005314:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005316:	6a3b      	ldr	r3, [r7, #32]
 8005318:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800531c:	d308      	bcc.n	8005330 <UART_SetConfig+0x430>
 800531e:	6a3b      	ldr	r3, [r7, #32]
 8005320:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005324:	d204      	bcs.n	8005330 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	6a3a      	ldr	r2, [r7, #32]
 800532c:	60da      	str	r2, [r3, #12]
 800532e:	e0ce      	b.n	80054ce <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005336:	e0ca      	b.n	80054ce <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	69db      	ldr	r3, [r3, #28]
 800533c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005340:	d166      	bne.n	8005410 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005342:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005346:	2b08      	cmp	r3, #8
 8005348:	d827      	bhi.n	800539a <UART_SetConfig+0x49a>
 800534a:	a201      	add	r2, pc, #4	; (adr r2, 8005350 <UART_SetConfig+0x450>)
 800534c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005350:	08005375 	.word	0x08005375
 8005354:	0800537d 	.word	0x0800537d
 8005358:	08005385 	.word	0x08005385
 800535c:	0800539b 	.word	0x0800539b
 8005360:	0800538b 	.word	0x0800538b
 8005364:	0800539b 	.word	0x0800539b
 8005368:	0800539b 	.word	0x0800539b
 800536c:	0800539b 	.word	0x0800539b
 8005370:	08005393 	.word	0x08005393
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005374:	f7fd f93e 	bl	80025f4 <HAL_RCC_GetPCLK1Freq>
 8005378:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800537a:	e014      	b.n	80053a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800537c:	f7fd f950 	bl	8002620 <HAL_RCC_GetPCLK2Freq>
 8005380:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005382:	e010      	b.n	80053a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005384:	4b4e      	ldr	r3, [pc, #312]	; (80054c0 <UART_SetConfig+0x5c0>)
 8005386:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005388:	e00d      	b.n	80053a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800538a:	f7fd f8c5 	bl	8002518 <HAL_RCC_GetSysClockFreq>
 800538e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005390:	e009      	b.n	80053a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005392:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005396:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005398:	e005      	b.n	80053a6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800539a:	2300      	movs	r3, #0
 800539c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80053a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80053a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	f000 8090 	beq.w	80054ce <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b2:	4a44      	ldr	r2, [pc, #272]	; (80054c4 <UART_SetConfig+0x5c4>)
 80053b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80053b8:	461a      	mov	r2, r3
 80053ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80053c0:	005a      	lsls	r2, r3, #1
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	085b      	lsrs	r3, r3, #1
 80053c8:	441a      	add	r2, r3
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80053d2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053d4:	6a3b      	ldr	r3, [r7, #32]
 80053d6:	2b0f      	cmp	r3, #15
 80053d8:	d916      	bls.n	8005408 <UART_SetConfig+0x508>
 80053da:	6a3b      	ldr	r3, [r7, #32]
 80053dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053e0:	d212      	bcs.n	8005408 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80053e2:	6a3b      	ldr	r3, [r7, #32]
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	f023 030f 	bic.w	r3, r3, #15
 80053ea:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80053ec:	6a3b      	ldr	r3, [r7, #32]
 80053ee:	085b      	lsrs	r3, r3, #1
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	f003 0307 	and.w	r3, r3, #7
 80053f6:	b29a      	uxth	r2, r3
 80053f8:	8bfb      	ldrh	r3, [r7, #30]
 80053fa:	4313      	orrs	r3, r2
 80053fc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	8bfa      	ldrh	r2, [r7, #30]
 8005404:	60da      	str	r2, [r3, #12]
 8005406:	e062      	b.n	80054ce <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800540e:	e05e      	b.n	80054ce <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005410:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005414:	2b08      	cmp	r3, #8
 8005416:	d828      	bhi.n	800546a <UART_SetConfig+0x56a>
 8005418:	a201      	add	r2, pc, #4	; (adr r2, 8005420 <UART_SetConfig+0x520>)
 800541a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800541e:	bf00      	nop
 8005420:	08005445 	.word	0x08005445
 8005424:	0800544d 	.word	0x0800544d
 8005428:	08005455 	.word	0x08005455
 800542c:	0800546b 	.word	0x0800546b
 8005430:	0800545b 	.word	0x0800545b
 8005434:	0800546b 	.word	0x0800546b
 8005438:	0800546b 	.word	0x0800546b
 800543c:	0800546b 	.word	0x0800546b
 8005440:	08005463 	.word	0x08005463
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005444:	f7fd f8d6 	bl	80025f4 <HAL_RCC_GetPCLK1Freq>
 8005448:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800544a:	e014      	b.n	8005476 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800544c:	f7fd f8e8 	bl	8002620 <HAL_RCC_GetPCLK2Freq>
 8005450:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005452:	e010      	b.n	8005476 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005454:	4b1a      	ldr	r3, [pc, #104]	; (80054c0 <UART_SetConfig+0x5c0>)
 8005456:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005458:	e00d      	b.n	8005476 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800545a:	f7fd f85d 	bl	8002518 <HAL_RCC_GetSysClockFreq>
 800545e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005460:	e009      	b.n	8005476 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005462:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005466:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005468:	e005      	b.n	8005476 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800546a:	2300      	movs	r3, #0
 800546c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005474:	bf00      	nop
    }

    if (pclk != 0U)
 8005476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005478:	2b00      	cmp	r3, #0
 800547a:	d028      	beq.n	80054ce <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005480:	4a10      	ldr	r2, [pc, #64]	; (80054c4 <UART_SetConfig+0x5c4>)
 8005482:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005486:	461a      	mov	r2, r3
 8005488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548a:	fbb3 f2f2 	udiv	r2, r3, r2
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	085b      	lsrs	r3, r3, #1
 8005494:	441a      	add	r2, r3
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	fbb2 f3f3 	udiv	r3, r2, r3
 800549e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054a0:	6a3b      	ldr	r3, [r7, #32]
 80054a2:	2b0f      	cmp	r3, #15
 80054a4:	d910      	bls.n	80054c8 <UART_SetConfig+0x5c8>
 80054a6:	6a3b      	ldr	r3, [r7, #32]
 80054a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054ac:	d20c      	bcs.n	80054c8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80054ae:	6a3b      	ldr	r3, [r7, #32]
 80054b0:	b29a      	uxth	r2, r3
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	60da      	str	r2, [r3, #12]
 80054b8:	e009      	b.n	80054ce <UART_SetConfig+0x5ce>
 80054ba:	bf00      	nop
 80054bc:	40008000 	.word	0x40008000
 80054c0:	00f42400 	.word	0x00f42400
 80054c4:	080080ac 	.word	0x080080ac
      }
      else
      {
        ret = HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	2201      	movs	r2, #1
 80054d2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	2201      	movs	r2, #1
 80054da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	2200      	movs	r2, #0
 80054e2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	2200      	movs	r2, #0
 80054e8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80054ea:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3730      	adds	r7, #48	; 0x30
 80054f2:	46bd      	mov	sp, r7
 80054f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080054f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005504:	f003 0301 	and.w	r3, r3, #1
 8005508:	2b00      	cmp	r3, #0
 800550a:	d00a      	beq.n	8005522 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	430a      	orrs	r2, r1
 8005520:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005526:	f003 0302 	and.w	r3, r3, #2
 800552a:	2b00      	cmp	r3, #0
 800552c:	d00a      	beq.n	8005544 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	430a      	orrs	r2, r1
 8005542:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005548:	f003 0304 	and.w	r3, r3, #4
 800554c:	2b00      	cmp	r3, #0
 800554e:	d00a      	beq.n	8005566 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	430a      	orrs	r2, r1
 8005564:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800556a:	f003 0308 	and.w	r3, r3, #8
 800556e:	2b00      	cmp	r3, #0
 8005570:	d00a      	beq.n	8005588 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	430a      	orrs	r2, r1
 8005586:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800558c:	f003 0310 	and.w	r3, r3, #16
 8005590:	2b00      	cmp	r3, #0
 8005592:	d00a      	beq.n	80055aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	430a      	orrs	r2, r1
 80055a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ae:	f003 0320 	and.w	r3, r3, #32
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d00a      	beq.n	80055cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	430a      	orrs	r2, r1
 80055ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d01a      	beq.n	800560e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	430a      	orrs	r2, r1
 80055ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055f6:	d10a      	bne.n	800560e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	430a      	orrs	r2, r1
 800560c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005616:	2b00      	cmp	r3, #0
 8005618:	d00a      	beq.n	8005630 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	430a      	orrs	r2, r1
 800562e:	605a      	str	r2, [r3, #4]
  }
}
 8005630:	bf00      	nop
 8005632:	370c      	adds	r7, #12
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr

0800563c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b086      	sub	sp, #24
 8005640:	af02      	add	r7, sp, #8
 8005642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800564c:	f7fb fec2 	bl	80013d4 <HAL_GetTick>
 8005650:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 0308 	and.w	r3, r3, #8
 800565c:	2b08      	cmp	r3, #8
 800565e:	d10e      	bne.n	800567e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005660:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005664:	9300      	str	r3, [sp, #0]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2200      	movs	r2, #0
 800566a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f000 f82f 	bl	80056d2 <UART_WaitOnFlagUntilTimeout>
 8005674:	4603      	mov	r3, r0
 8005676:	2b00      	cmp	r3, #0
 8005678:	d001      	beq.n	800567e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800567a:	2303      	movs	r3, #3
 800567c:	e025      	b.n	80056ca <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f003 0304 	and.w	r3, r3, #4
 8005688:	2b04      	cmp	r3, #4
 800568a:	d10e      	bne.n	80056aa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800568c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005690:	9300      	str	r3, [sp, #0]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2200      	movs	r2, #0
 8005696:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f000 f819 	bl	80056d2 <UART_WaitOnFlagUntilTimeout>
 80056a0:	4603      	mov	r3, r0
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d001      	beq.n	80056aa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056a6:	2303      	movs	r3, #3
 80056a8:	e00f      	b.n	80056ca <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2220      	movs	r2, #32
 80056ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2220      	movs	r2, #32
 80056b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80056c8:	2300      	movs	r3, #0
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3710      	adds	r7, #16
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}

080056d2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80056d2:	b580      	push	{r7, lr}
 80056d4:	b09c      	sub	sp, #112	; 0x70
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	60f8      	str	r0, [r7, #12]
 80056da:	60b9      	str	r1, [r7, #8]
 80056dc:	603b      	str	r3, [r7, #0]
 80056de:	4613      	mov	r3, r2
 80056e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056e2:	e0a9      	b.n	8005838 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ea:	f000 80a5 	beq.w	8005838 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056ee:	f7fb fe71 	bl	80013d4 <HAL_GetTick>
 80056f2:	4602      	mov	r2, r0
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	1ad3      	subs	r3, r2, r3
 80056f8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d302      	bcc.n	8005704 <UART_WaitOnFlagUntilTimeout+0x32>
 80056fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005700:	2b00      	cmp	r3, #0
 8005702:	d140      	bne.n	8005786 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800570a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800570c:	e853 3f00 	ldrex	r3, [r3]
 8005710:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005712:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005714:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005718:	667b      	str	r3, [r7, #100]	; 0x64
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	461a      	mov	r2, r3
 8005720:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005722:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005724:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005726:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005728:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800572a:	e841 2300 	strex	r3, r2, [r1]
 800572e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005730:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005732:	2b00      	cmp	r3, #0
 8005734:	d1e6      	bne.n	8005704 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	3308      	adds	r3, #8
 800573c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800573e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005740:	e853 3f00 	ldrex	r3, [r3]
 8005744:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005748:	f023 0301 	bic.w	r3, r3, #1
 800574c:	663b      	str	r3, [r7, #96]	; 0x60
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	3308      	adds	r3, #8
 8005754:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005756:	64ba      	str	r2, [r7, #72]	; 0x48
 8005758:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800575a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800575c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800575e:	e841 2300 	strex	r3, r2, [r1]
 8005762:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005764:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005766:	2b00      	cmp	r3, #0
 8005768:	d1e5      	bne.n	8005736 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2220      	movs	r2, #32
 800576e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2220      	movs	r2, #32
 8005776:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2200      	movs	r2, #0
 800577e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005782:	2303      	movs	r3, #3
 8005784:	e069      	b.n	800585a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f003 0304 	and.w	r3, r3, #4
 8005790:	2b00      	cmp	r3, #0
 8005792:	d051      	beq.n	8005838 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	69db      	ldr	r3, [r3, #28]
 800579a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800579e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057a2:	d149      	bne.n	8005838 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80057ac:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b6:	e853 3f00 	ldrex	r3, [r3]
 80057ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80057bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057be:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80057c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	461a      	mov	r2, r3
 80057ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057cc:	637b      	str	r3, [r7, #52]	; 0x34
 80057ce:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80057d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80057d4:	e841 2300 	strex	r3, r2, [r1]
 80057d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80057da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d1e6      	bne.n	80057ae <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	3308      	adds	r3, #8
 80057e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	e853 3f00 	ldrex	r3, [r3]
 80057ee:	613b      	str	r3, [r7, #16]
   return(result);
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	f023 0301 	bic.w	r3, r3, #1
 80057f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	3308      	adds	r3, #8
 80057fe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005800:	623a      	str	r2, [r7, #32]
 8005802:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005804:	69f9      	ldr	r1, [r7, #28]
 8005806:	6a3a      	ldr	r2, [r7, #32]
 8005808:	e841 2300 	strex	r3, r2, [r1]
 800580c:	61bb      	str	r3, [r7, #24]
   return(result);
 800580e:	69bb      	ldr	r3, [r7, #24]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d1e5      	bne.n	80057e0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2220      	movs	r2, #32
 8005818:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2220      	movs	r2, #32
 8005820:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2220      	movs	r2, #32
 8005828:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2200      	movs	r2, #0
 8005830:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005834:	2303      	movs	r3, #3
 8005836:	e010      	b.n	800585a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	69da      	ldr	r2, [r3, #28]
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	4013      	ands	r3, r2
 8005842:	68ba      	ldr	r2, [r7, #8]
 8005844:	429a      	cmp	r2, r3
 8005846:	bf0c      	ite	eq
 8005848:	2301      	moveq	r3, #1
 800584a:	2300      	movne	r3, #0
 800584c:	b2db      	uxtb	r3, r3
 800584e:	461a      	mov	r2, r3
 8005850:	79fb      	ldrb	r3, [r7, #7]
 8005852:	429a      	cmp	r2, r3
 8005854:	f43f af46 	beq.w	80056e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005858:	2300      	movs	r3, #0
}
 800585a:	4618      	mov	r0, r3
 800585c:	3770      	adds	r7, #112	; 0x70
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}
	...

08005864 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005864:	b480      	push	{r7}
 8005866:	b0a3      	sub	sp, #140	; 0x8c
 8005868:	af00      	add	r7, sp, #0
 800586a:	60f8      	str	r0, [r7, #12]
 800586c:	60b9      	str	r1, [r7, #8]
 800586e:	4613      	mov	r3, r2
 8005870:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	68ba      	ldr	r2, [r7, #8]
 8005876:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	88fa      	ldrh	r2, [r7, #6]
 800587c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	88fa      	ldrh	r2, [r7, #6]
 8005884:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2200      	movs	r2, #0
 800588c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005896:	d10e      	bne.n	80058b6 <UART_Start_Receive_IT+0x52>
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	691b      	ldr	r3, [r3, #16]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d105      	bne.n	80058ac <UART_Start_Receive_IT+0x48>
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80058a6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80058aa:	e02d      	b.n	8005908 <UART_Start_Receive_IT+0xa4>
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	22ff      	movs	r2, #255	; 0xff
 80058b0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80058b4:	e028      	b.n	8005908 <UART_Start_Receive_IT+0xa4>
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d10d      	bne.n	80058da <UART_Start_Receive_IT+0x76>
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	691b      	ldr	r3, [r3, #16]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d104      	bne.n	80058d0 <UART_Start_Receive_IT+0x6c>
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	22ff      	movs	r2, #255	; 0xff
 80058ca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80058ce:	e01b      	b.n	8005908 <UART_Start_Receive_IT+0xa4>
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	227f      	movs	r2, #127	; 0x7f
 80058d4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80058d8:	e016      	b.n	8005908 <UART_Start_Receive_IT+0xa4>
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80058e2:	d10d      	bne.n	8005900 <UART_Start_Receive_IT+0x9c>
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	691b      	ldr	r3, [r3, #16]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d104      	bne.n	80058f6 <UART_Start_Receive_IT+0x92>
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	227f      	movs	r2, #127	; 0x7f
 80058f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80058f4:	e008      	b.n	8005908 <UART_Start_Receive_IT+0xa4>
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	223f      	movs	r2, #63	; 0x3f
 80058fa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80058fe:	e003      	b.n	8005908 <UART_Start_Receive_IT+0xa4>
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2200      	movs	r2, #0
 8005904:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2200      	movs	r2, #0
 800590c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2222      	movs	r2, #34	; 0x22
 8005914:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	3308      	adds	r3, #8
 800591e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005920:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005922:	e853 3f00 	ldrex	r3, [r3]
 8005926:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8005928:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800592a:	f043 0301 	orr.w	r3, r3, #1
 800592e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	3308      	adds	r3, #8
 8005938:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800593c:	673a      	str	r2, [r7, #112]	; 0x70
 800593e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005940:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8005942:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005944:	e841 2300 	strex	r3, r2, [r1]
 8005948:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800594a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800594c:	2b00      	cmp	r3, #0
 800594e:	d1e3      	bne.n	8005918 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005954:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005958:	d153      	bne.n	8005a02 <UART_Start_Receive_IT+0x19e>
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005960:	88fa      	ldrh	r2, [r7, #6]
 8005962:	429a      	cmp	r2, r3
 8005964:	d34d      	bcc.n	8005a02 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800596e:	d107      	bne.n	8005980 <UART_Start_Receive_IT+0x11c>
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	691b      	ldr	r3, [r3, #16]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d103      	bne.n	8005980 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	4a4b      	ldr	r2, [pc, #300]	; (8005aa8 <UART_Start_Receive_IT+0x244>)
 800597c:	671a      	str	r2, [r3, #112]	; 0x70
 800597e:	e002      	b.n	8005986 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	4a4a      	ldr	r2, [pc, #296]	; (8005aac <UART_Start_Receive_IT+0x248>)
 8005984:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2200      	movs	r2, #0
 800598a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	691b      	ldr	r3, [r3, #16]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d01a      	beq.n	80059cc <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800599c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800599e:	e853 3f00 	ldrex	r3, [r3]
 80059a2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80059a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	461a      	mov	r2, r3
 80059b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80059b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059ba:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059bc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80059be:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80059c0:	e841 2300 	strex	r3, r2, [r1]
 80059c4:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80059c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d1e4      	bne.n	8005996 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	3308      	adds	r3, #8
 80059d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059d6:	e853 3f00 	ldrex	r3, [r3]
 80059da:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80059dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059e2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	3308      	adds	r3, #8
 80059ea:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80059ec:	64ba      	str	r2, [r7, #72]	; 0x48
 80059ee:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80059f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059f4:	e841 2300 	strex	r3, r2, [r1]
 80059f8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80059fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d1e5      	bne.n	80059cc <UART_Start_Receive_IT+0x168>
 8005a00:	e04a      	b.n	8005a98 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a0a:	d107      	bne.n	8005a1c <UART_Start_Receive_IT+0x1b8>
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	691b      	ldr	r3, [r3, #16]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d103      	bne.n	8005a1c <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	4a26      	ldr	r2, [pc, #152]	; (8005ab0 <UART_Start_Receive_IT+0x24c>)
 8005a18:	671a      	str	r2, [r3, #112]	; 0x70
 8005a1a:	e002      	b.n	8005a22 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	4a25      	ldr	r2, [pc, #148]	; (8005ab4 <UART_Start_Receive_IT+0x250>)
 8005a20:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2200      	movs	r2, #0
 8005a26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	691b      	ldr	r3, [r3, #16]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d019      	beq.n	8005a66 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a3a:	e853 3f00 	ldrex	r3, [r3]
 8005a3e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a42:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005a46:	677b      	str	r3, [r7, #116]	; 0x74
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	461a      	mov	r2, r3
 8005a4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a50:	637b      	str	r3, [r7, #52]	; 0x34
 8005a52:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a54:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a58:	e841 2300 	strex	r3, r2, [r1]
 8005a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d1e6      	bne.n	8005a32 <UART_Start_Receive_IT+0x1ce>
 8005a64:	e018      	b.n	8005a98 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	e853 3f00 	ldrex	r3, [r3]
 8005a72:	613b      	str	r3, [r7, #16]
   return(result);
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	f043 0320 	orr.w	r3, r3, #32
 8005a7a:	67bb      	str	r3, [r7, #120]	; 0x78
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	461a      	mov	r2, r3
 8005a82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a84:	623b      	str	r3, [r7, #32]
 8005a86:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a88:	69f9      	ldr	r1, [r7, #28]
 8005a8a:	6a3a      	ldr	r2, [r7, #32]
 8005a8c:	e841 2300 	strex	r3, r2, [r1]
 8005a90:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a92:	69bb      	ldr	r3, [r7, #24]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d1e6      	bne.n	8005a66 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8005a98:	2300      	movs	r3, #0
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	378c      	adds	r7, #140	; 0x8c
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr
 8005aa6:	bf00      	nop
 8005aa8:	080061c1 	.word	0x080061c1
 8005aac:	08005ec9 	.word	0x08005ec9
 8005ab0:	08005d67 	.word	0x08005d67
 8005ab4:	08005c07 	.word	0x08005c07

08005ab8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b095      	sub	sp, #84	; 0x54
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ac8:	e853 3f00 	ldrex	r3, [r3]
 8005acc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ad4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	461a      	mov	r2, r3
 8005adc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ade:	643b      	str	r3, [r7, #64]	; 0x40
 8005ae0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ae2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005ae4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ae6:	e841 2300 	strex	r3, r2, [r1]
 8005aea:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d1e6      	bne.n	8005ac0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	3308      	adds	r3, #8
 8005af8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005afa:	6a3b      	ldr	r3, [r7, #32]
 8005afc:	e853 3f00 	ldrex	r3, [r3]
 8005b00:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b02:	69fb      	ldr	r3, [r7, #28]
 8005b04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b08:	f023 0301 	bic.w	r3, r3, #1
 8005b0c:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	3308      	adds	r3, #8
 8005b14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b18:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b1e:	e841 2300 	strex	r3, r2, [r1]
 8005b22:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d1e3      	bne.n	8005af2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d118      	bne.n	8005b64 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	e853 3f00 	ldrex	r3, [r3]
 8005b3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	f023 0310 	bic.w	r3, r3, #16
 8005b46:	647b      	str	r3, [r7, #68]	; 0x44
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b50:	61bb      	str	r3, [r7, #24]
 8005b52:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b54:	6979      	ldr	r1, [r7, #20]
 8005b56:	69ba      	ldr	r2, [r7, #24]
 8005b58:	e841 2300 	strex	r3, r2, [r1]
 8005b5c:	613b      	str	r3, [r7, #16]
   return(result);
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d1e6      	bne.n	8005b32 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2220      	movs	r2, #32
 8005b68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2200      	movs	r2, #0
 8005b76:	671a      	str	r2, [r3, #112]	; 0x70
}
 8005b78:	bf00      	nop
 8005b7a:	3754      	adds	r7, #84	; 0x54
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr

08005b84 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b084      	sub	sp, #16
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b90:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2200      	movs	r2, #0
 8005b96:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ba2:	68f8      	ldr	r0, [r7, #12]
 8005ba4:	f7ff f996 	bl	8004ed4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ba8:	bf00      	nop
 8005baa:	3710      	adds	r7, #16
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}

08005bb0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b088      	sub	sp, #32
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	e853 3f00 	ldrex	r3, [r3]
 8005bc4:	60bb      	str	r3, [r7, #8]
   return(result);
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bcc:	61fb      	str	r3, [r7, #28]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	69fb      	ldr	r3, [r7, #28]
 8005bd6:	61bb      	str	r3, [r7, #24]
 8005bd8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bda:	6979      	ldr	r1, [r7, #20]
 8005bdc:	69ba      	ldr	r2, [r7, #24]
 8005bde:	e841 2300 	strex	r3, r2, [r1]
 8005be2:	613b      	str	r3, [r7, #16]
   return(result);
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d1e6      	bne.n	8005bb8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2220      	movs	r2, #32
 8005bee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f7ff f961 	bl	8004ec0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005bfe:	bf00      	nop
 8005c00:	3720      	adds	r7, #32
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}

08005c06 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005c06:	b580      	push	{r7, lr}
 8005c08:	b096      	sub	sp, #88	; 0x58
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005c14:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c1e:	2b22      	cmp	r3, #34	; 0x22
 8005c20:	f040 8095 	bne.w	8005d4e <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005c2e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005c32:	b2d9      	uxtb	r1, r3
 8005c34:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005c38:	b2da      	uxtb	r2, r3
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c3e:	400a      	ands	r2, r1
 8005c40:	b2d2      	uxtb	r2, r2
 8005c42:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c48:	1c5a      	adds	r2, r3, #1
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	3b01      	subs	r3, #1
 8005c58:	b29a      	uxth	r2, r3
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d178      	bne.n	8005d5e <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c74:	e853 3f00 	ldrex	r3, [r3]
 8005c78:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005c7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c7c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c80:	653b      	str	r3, [r7, #80]	; 0x50
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	461a      	mov	r2, r3
 8005c88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c8a:	647b      	str	r3, [r7, #68]	; 0x44
 8005c8c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c8e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005c90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c92:	e841 2300 	strex	r3, r2, [r1]
 8005c96:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005c98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d1e6      	bne.n	8005c6c <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	3308      	adds	r3, #8
 8005ca4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca8:	e853 3f00 	ldrex	r3, [r3]
 8005cac:	623b      	str	r3, [r7, #32]
   return(result);
 8005cae:	6a3b      	ldr	r3, [r7, #32]
 8005cb0:	f023 0301 	bic.w	r3, r3, #1
 8005cb4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	3308      	adds	r3, #8
 8005cbc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005cbe:	633a      	str	r2, [r7, #48]	; 0x30
 8005cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cc2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005cc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cc6:	e841 2300 	strex	r3, r2, [r1]
 8005cca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d1e5      	bne.n	8005c9e <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2220      	movs	r2, #32
 8005cd6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d12e      	bne.n	8005d46 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	e853 3f00 	ldrex	r3, [r3]
 8005cfa:	60fb      	str	r3, [r7, #12]
   return(result);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f023 0310 	bic.w	r3, r3, #16
 8005d02:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	461a      	mov	r2, r3
 8005d0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d0c:	61fb      	str	r3, [r7, #28]
 8005d0e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d10:	69b9      	ldr	r1, [r7, #24]
 8005d12:	69fa      	ldr	r2, [r7, #28]
 8005d14:	e841 2300 	strex	r3, r2, [r1]
 8005d18:	617b      	str	r3, [r7, #20]
   return(result);
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d1e6      	bne.n	8005cee <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	69db      	ldr	r3, [r3, #28]
 8005d26:	f003 0310 	and.w	r3, r3, #16
 8005d2a:	2b10      	cmp	r3, #16
 8005d2c:	d103      	bne.n	8005d36 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	2210      	movs	r2, #16
 8005d34:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005d3c:	4619      	mov	r1, r3
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f7ff f8d2 	bl	8004ee8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005d44:	e00b      	b.n	8005d5e <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f7fb fa2e 	bl	80011a8 <HAL_UART_RxCpltCallback>
}
 8005d4c:	e007      	b.n	8005d5e <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	699a      	ldr	r2, [r3, #24]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f042 0208 	orr.w	r2, r2, #8
 8005d5c:	619a      	str	r2, [r3, #24]
}
 8005d5e:	bf00      	nop
 8005d60:	3758      	adds	r7, #88	; 0x58
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}

08005d66 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005d66:	b580      	push	{r7, lr}
 8005d68:	b096      	sub	sp, #88	; 0x58
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005d74:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d7e:	2b22      	cmp	r3, #34	; 0x22
 8005d80:	f040 8095 	bne.w	8005eae <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d92:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8005d94:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8005d98:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	b29a      	uxth	r2, r3
 8005da0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005da2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005da8:	1c9a      	adds	r2, r3, #2
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	3b01      	subs	r3, #1
 8005db8:	b29a      	uxth	r2, r3
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d178      	bne.n	8005ebe <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dd4:	e853 3f00 	ldrex	r3, [r3]
 8005dd8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ddc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005de0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	461a      	mov	r2, r3
 8005de8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dea:	643b      	str	r3, [r7, #64]	; 0x40
 8005dec:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005df0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005df2:	e841 2300 	strex	r3, r2, [r1]
 8005df6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d1e6      	bne.n	8005dcc <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	3308      	adds	r3, #8
 8005e04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e06:	6a3b      	ldr	r3, [r7, #32]
 8005e08:	e853 3f00 	ldrex	r3, [r3]
 8005e0c:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e0e:	69fb      	ldr	r3, [r7, #28]
 8005e10:	f023 0301 	bic.w	r3, r3, #1
 8005e14:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	3308      	adds	r3, #8
 8005e1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e20:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e26:	e841 2300 	strex	r3, r2, [r1]
 8005e2a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d1e5      	bne.n	8005dfe <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2220      	movs	r2, #32
 8005e36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d12e      	bne.n	8005ea6 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	e853 3f00 	ldrex	r3, [r3]
 8005e5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	f023 0310 	bic.w	r3, r3, #16
 8005e62:	647b      	str	r3, [r7, #68]	; 0x44
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	461a      	mov	r2, r3
 8005e6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e6c:	61bb      	str	r3, [r7, #24]
 8005e6e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e70:	6979      	ldr	r1, [r7, #20]
 8005e72:	69ba      	ldr	r2, [r7, #24]
 8005e74:	e841 2300 	strex	r3, r2, [r1]
 8005e78:	613b      	str	r3, [r7, #16]
   return(result);
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d1e6      	bne.n	8005e4e <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	69db      	ldr	r3, [r3, #28]
 8005e86:	f003 0310 	and.w	r3, r3, #16
 8005e8a:	2b10      	cmp	r3, #16
 8005e8c:	d103      	bne.n	8005e96 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	2210      	movs	r2, #16
 8005e94:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005e9c:	4619      	mov	r1, r3
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f7ff f822 	bl	8004ee8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005ea4:	e00b      	b.n	8005ebe <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f7fb f97e 	bl	80011a8 <HAL_UART_RxCpltCallback>
}
 8005eac:	e007      	b.n	8005ebe <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	699a      	ldr	r2, [r3, #24]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f042 0208 	orr.w	r2, r2, #8
 8005ebc:	619a      	str	r2, [r3, #24]
}
 8005ebe:	bf00      	nop
 8005ec0:	3758      	adds	r7, #88	; 0x58
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}
	...

08005ec8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b0a6      	sub	sp, #152	; 0x98
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005ed6:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	69db      	ldr	r3, [r3, #28]
 8005ee0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005efe:	2b22      	cmp	r3, #34	; 0x22
 8005f00:	f040 814f 	bne.w	80061a2 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005f0a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005f0e:	e0f6      	b.n	80060fe <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f16:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005f1a:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8005f1e:	b2d9      	uxtb	r1, r3
 8005f20:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8005f24:	b2da      	uxtb	r2, r3
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f2a:	400a      	ands	r2, r1
 8005f2c:	b2d2      	uxtb	r2, r2
 8005f2e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f34:	1c5a      	adds	r2, r3, #1
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	3b01      	subs	r3, #1
 8005f44:	b29a      	uxth	r2, r3
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	69db      	ldr	r3, [r3, #28]
 8005f52:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005f56:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005f5a:	f003 0307 	and.w	r3, r3, #7
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d053      	beq.n	800600a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005f62:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005f66:	f003 0301 	and.w	r3, r3, #1
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d011      	beq.n	8005f92 <UART_RxISR_8BIT_FIFOEN+0xca>
 8005f6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d00b      	beq.n	8005f92 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f88:	f043 0201 	orr.w	r2, r3, #1
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f92:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005f96:	f003 0302 	and.w	r3, r3, #2
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d011      	beq.n	8005fc2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8005f9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005fa2:	f003 0301 	and.w	r3, r3, #1
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d00b      	beq.n	8005fc2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	2202      	movs	r2, #2
 8005fb0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fb8:	f043 0204 	orr.w	r2, r3, #4
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005fc2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005fc6:	f003 0304 	and.w	r3, r3, #4
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d011      	beq.n	8005ff2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8005fce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005fd2:	f003 0301 	and.w	r3, r3, #1
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d00b      	beq.n	8005ff2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	2204      	movs	r2, #4
 8005fe0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fe8:	f043 0202 	orr.w	r2, r3, #2
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d006      	beq.n	800600a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f7fe ff69 	bl	8004ed4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2200      	movs	r2, #0
 8006006:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006010:	b29b      	uxth	r3, r3
 8006012:	2b00      	cmp	r3, #0
 8006014:	d173      	bne.n	80060fe <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800601c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800601e:	e853 3f00 	ldrex	r3, [r3]
 8006022:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8006024:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006026:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800602a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	461a      	mov	r2, r3
 8006034:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006038:	66bb      	str	r3, [r7, #104]	; 0x68
 800603a:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800603c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800603e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006040:	e841 2300 	strex	r3, r2, [r1]
 8006044:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006046:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006048:	2b00      	cmp	r3, #0
 800604a:	d1e4      	bne.n	8006016 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	3308      	adds	r3, #8
 8006052:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006054:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006056:	e853 3f00 	ldrex	r3, [r3]
 800605a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800605c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800605e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006062:	f023 0301 	bic.w	r3, r3, #1
 8006066:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	3308      	adds	r3, #8
 800606e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006070:	657a      	str	r2, [r7, #84]	; 0x54
 8006072:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006074:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006076:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006078:	e841 2300 	strex	r3, r2, [r1]
 800607c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800607e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006080:	2b00      	cmp	r3, #0
 8006082:	d1e3      	bne.n	800604c <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2220      	movs	r2, #32
 8006088:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2200      	movs	r2, #0
 8006090:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006096:	2b01      	cmp	r3, #1
 8006098:	d12e      	bne.n	80060f8 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2200      	movs	r2, #0
 800609e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060a8:	e853 3f00 	ldrex	r3, [r3]
 80060ac:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80060ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b0:	f023 0310 	bic.w	r3, r3, #16
 80060b4:	67bb      	str	r3, [r7, #120]	; 0x78
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	461a      	mov	r2, r3
 80060bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80060be:	643b      	str	r3, [r7, #64]	; 0x40
 80060c0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060c2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80060c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80060c6:	e841 2300 	strex	r3, r2, [r1]
 80060ca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80060cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d1e6      	bne.n	80060a0 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	69db      	ldr	r3, [r3, #28]
 80060d8:	f003 0310 	and.w	r3, r3, #16
 80060dc:	2b10      	cmp	r3, #16
 80060de:	d103      	bne.n	80060e8 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	2210      	movs	r2, #16
 80060e6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80060ee:	4619      	mov	r1, r3
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f7fe fef9 	bl	8004ee8 <HAL_UARTEx_RxEventCallback>
 80060f6:	e002      	b.n	80060fe <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f7fb f855 	bl	80011a8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80060fe:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006102:	2b00      	cmp	r3, #0
 8006104:	d006      	beq.n	8006114 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8006106:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800610a:	f003 0320 	and.w	r3, r3, #32
 800610e:	2b00      	cmp	r3, #0
 8006110:	f47f aefe 	bne.w	8005f10 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800611a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800611e:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8006122:	2b00      	cmp	r3, #0
 8006124:	d045      	beq.n	80061b2 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800612c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006130:	429a      	cmp	r2, r3
 8006132:	d23e      	bcs.n	80061b2 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	3308      	adds	r3, #8
 800613a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800613c:	6a3b      	ldr	r3, [r7, #32]
 800613e:	e853 3f00 	ldrex	r3, [r3]
 8006142:	61fb      	str	r3, [r7, #28]
   return(result);
 8006144:	69fb      	ldr	r3, [r7, #28]
 8006146:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800614a:	673b      	str	r3, [r7, #112]	; 0x70
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	3308      	adds	r3, #8
 8006152:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006154:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006156:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006158:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800615a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800615c:	e841 2300 	strex	r3, r2, [r1]
 8006160:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006164:	2b00      	cmp	r3, #0
 8006166:	d1e5      	bne.n	8006134 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	4a14      	ldr	r2, [pc, #80]	; (80061bc <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800616c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	e853 3f00 	ldrex	r3, [r3]
 800617a:	60bb      	str	r3, [r7, #8]
   return(result);
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	f043 0320 	orr.w	r3, r3, #32
 8006182:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	461a      	mov	r2, r3
 800618a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800618c:	61bb      	str	r3, [r7, #24]
 800618e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006190:	6979      	ldr	r1, [r7, #20]
 8006192:	69ba      	ldr	r2, [r7, #24]
 8006194:	e841 2300 	strex	r3, r2, [r1]
 8006198:	613b      	str	r3, [r7, #16]
   return(result);
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d1e6      	bne.n	800616e <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80061a0:	e007      	b.n	80061b2 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	699a      	ldr	r2, [r3, #24]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f042 0208 	orr.w	r2, r2, #8
 80061b0:	619a      	str	r2, [r3, #24]
}
 80061b2:	bf00      	nop
 80061b4:	3798      	adds	r7, #152	; 0x98
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}
 80061ba:	bf00      	nop
 80061bc:	08005c07 	.word	0x08005c07

080061c0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b0a8      	sub	sp, #160	; 0xa0
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80061ce:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	69db      	ldr	r3, [r3, #28]
 80061d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061f6:	2b22      	cmp	r3, #34	; 0x22
 80061f8:	f040 8153 	bne.w	80064a2 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006202:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006206:	e0fa      	b.n	80063fe <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800620e:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006216:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800621a:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800621e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006222:	4013      	ands	r3, r2
 8006224:	b29a      	uxth	r2, r3
 8006226:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800622a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006230:	1c9a      	adds	r2, r3, #2
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800623c:	b29b      	uxth	r3, r3
 800623e:	3b01      	subs	r3, #1
 8006240:	b29a      	uxth	r2, r3
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	69db      	ldr	r3, [r3, #28]
 800624e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006252:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006256:	f003 0307 	and.w	r3, r3, #7
 800625a:	2b00      	cmp	r3, #0
 800625c:	d053      	beq.n	8006306 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800625e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006262:	f003 0301 	and.w	r3, r3, #1
 8006266:	2b00      	cmp	r3, #0
 8006268:	d011      	beq.n	800628e <UART_RxISR_16BIT_FIFOEN+0xce>
 800626a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800626e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006272:	2b00      	cmp	r3, #0
 8006274:	d00b      	beq.n	800628e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	2201      	movs	r2, #1
 800627c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006284:	f043 0201 	orr.w	r2, r3, #1
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800628e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006292:	f003 0302 	and.w	r3, r3, #2
 8006296:	2b00      	cmp	r3, #0
 8006298:	d011      	beq.n	80062be <UART_RxISR_16BIT_FIFOEN+0xfe>
 800629a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800629e:	f003 0301 	and.w	r3, r3, #1
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d00b      	beq.n	80062be <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	2202      	movs	r2, #2
 80062ac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062b4:	f043 0204 	orr.w	r2, r3, #4
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80062be:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80062c2:	f003 0304 	and.w	r3, r3, #4
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d011      	beq.n	80062ee <UART_RxISR_16BIT_FIFOEN+0x12e>
 80062ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80062ce:	f003 0301 	and.w	r3, r3, #1
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d00b      	beq.n	80062ee <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	2204      	movs	r2, #4
 80062dc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062e4:	f043 0202 	orr.w	r2, r3, #2
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d006      	beq.n	8006306 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f7fe fdeb 	bl	8004ed4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2200      	movs	r2, #0
 8006302:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800630c:	b29b      	uxth	r3, r3
 800630e:	2b00      	cmp	r3, #0
 8006310:	d175      	bne.n	80063fe <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006318:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800631a:	e853 3f00 	ldrex	r3, [r3]
 800631e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006320:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006322:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006326:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	461a      	mov	r2, r3
 8006330:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006334:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006336:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006338:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800633a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800633c:	e841 2300 	strex	r3, r2, [r1]
 8006340:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006342:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006344:	2b00      	cmp	r3, #0
 8006346:	d1e4      	bne.n	8006312 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	3308      	adds	r3, #8
 800634e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006350:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006352:	e853 3f00 	ldrex	r3, [r3]
 8006356:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006358:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800635a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800635e:	f023 0301 	bic.w	r3, r3, #1
 8006362:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	3308      	adds	r3, #8
 800636c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006370:	65ba      	str	r2, [r7, #88]	; 0x58
 8006372:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006374:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006376:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006378:	e841 2300 	strex	r3, r2, [r1]
 800637c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800637e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006380:	2b00      	cmp	r3, #0
 8006382:	d1e1      	bne.n	8006348 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2220      	movs	r2, #32
 8006388:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2200      	movs	r2, #0
 8006390:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006396:	2b01      	cmp	r3, #1
 8006398:	d12e      	bne.n	80063f8 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2200      	movs	r2, #0
 800639e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063a8:	e853 3f00 	ldrex	r3, [r3]
 80063ac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80063ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063b0:	f023 0310 	bic.w	r3, r3, #16
 80063b4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	461a      	mov	r2, r3
 80063bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80063be:	647b      	str	r3, [r7, #68]	; 0x44
 80063c0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80063c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80063c6:	e841 2300 	strex	r3, r2, [r1]
 80063ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80063cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d1e6      	bne.n	80063a0 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	69db      	ldr	r3, [r3, #28]
 80063d8:	f003 0310 	and.w	r3, r3, #16
 80063dc:	2b10      	cmp	r3, #16
 80063de:	d103      	bne.n	80063e8 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	2210      	movs	r2, #16
 80063e6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80063ee:	4619      	mov	r1, r3
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f7fe fd79 	bl	8004ee8 <HAL_UARTEx_RxEventCallback>
 80063f6:	e002      	b.n	80063fe <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f7fa fed5 	bl	80011a8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80063fe:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006402:	2b00      	cmp	r3, #0
 8006404:	d006      	beq.n	8006414 <UART_RxISR_16BIT_FIFOEN+0x254>
 8006406:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800640a:	f003 0320 	and.w	r3, r3, #32
 800640e:	2b00      	cmp	r3, #0
 8006410:	f47f aefa 	bne.w	8006208 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800641a:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800641e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8006422:	2b00      	cmp	r3, #0
 8006424:	d045      	beq.n	80064b2 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800642c:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8006430:	429a      	cmp	r2, r3
 8006432:	d23e      	bcs.n	80064b2 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	3308      	adds	r3, #8
 800643a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800643c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643e:	e853 3f00 	ldrex	r3, [r3]
 8006442:	623b      	str	r3, [r7, #32]
   return(result);
 8006444:	6a3b      	ldr	r3, [r7, #32]
 8006446:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800644a:	677b      	str	r3, [r7, #116]	; 0x74
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	3308      	adds	r3, #8
 8006452:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006454:	633a      	str	r2, [r7, #48]	; 0x30
 8006456:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006458:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800645a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800645c:	e841 2300 	strex	r3, r2, [r1]
 8006460:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006464:	2b00      	cmp	r3, #0
 8006466:	d1e5      	bne.n	8006434 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	4a14      	ldr	r2, [pc, #80]	; (80064bc <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800646c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	e853 3f00 	ldrex	r3, [r3]
 800647a:	60fb      	str	r3, [r7, #12]
   return(result);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f043 0320 	orr.w	r3, r3, #32
 8006482:	673b      	str	r3, [r7, #112]	; 0x70
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	461a      	mov	r2, r3
 800648a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800648c:	61fb      	str	r3, [r7, #28]
 800648e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006490:	69b9      	ldr	r1, [r7, #24]
 8006492:	69fa      	ldr	r2, [r7, #28]
 8006494:	e841 2300 	strex	r3, r2, [r1]
 8006498:	617b      	str	r3, [r7, #20]
   return(result);
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d1e6      	bne.n	800646e <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80064a0:	e007      	b.n	80064b2 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	699a      	ldr	r2, [r3, #24]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f042 0208 	orr.w	r2, r2, #8
 80064b0:	619a      	str	r2, [r3, #24]
}
 80064b2:	bf00      	nop
 80064b4:	37a0      	adds	r7, #160	; 0xa0
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}
 80064ba:	bf00      	nop
 80064bc:	08005d67 	.word	0x08005d67

080064c0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b083      	sub	sp, #12
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80064c8:	bf00      	nop
 80064ca:	370c      	adds	r7, #12
 80064cc:	46bd      	mov	sp, r7
 80064ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d2:	4770      	bx	lr

080064d4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b083      	sub	sp, #12
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80064dc:	bf00      	nop
 80064de:	370c      	adds	r7, #12
 80064e0:	46bd      	mov	sp, r7
 80064e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e6:	4770      	bx	lr

080064e8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b083      	sub	sp, #12
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80064f0:	bf00      	nop
 80064f2:	370c      	adds	r7, #12
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr

080064fc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b085      	sub	sp, #20
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800650a:	2b01      	cmp	r3, #1
 800650c:	d101      	bne.n	8006512 <HAL_UARTEx_DisableFifoMode+0x16>
 800650e:	2302      	movs	r3, #2
 8006510:	e027      	b.n	8006562 <HAL_UARTEx_DisableFifoMode+0x66>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2201      	movs	r2, #1
 8006516:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2224      	movs	r2, #36	; 0x24
 800651e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f022 0201 	bic.w	r2, r2, #1
 8006538:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006540:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2200      	movs	r2, #0
 8006546:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	68fa      	ldr	r2, [r7, #12]
 800654e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2220      	movs	r2, #32
 8006554:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2200      	movs	r2, #0
 800655c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006560:	2300      	movs	r3, #0
}
 8006562:	4618      	mov	r0, r3
 8006564:	3714      	adds	r7, #20
 8006566:	46bd      	mov	sp, r7
 8006568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656c:	4770      	bx	lr

0800656e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800656e:	b580      	push	{r7, lr}
 8006570:	b084      	sub	sp, #16
 8006572:	af00      	add	r7, sp, #0
 8006574:	6078      	str	r0, [r7, #4]
 8006576:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800657e:	2b01      	cmp	r3, #1
 8006580:	d101      	bne.n	8006586 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006582:	2302      	movs	r3, #2
 8006584:	e02d      	b.n	80065e2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2201      	movs	r2, #1
 800658a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2224      	movs	r2, #36	; 0x24
 8006592:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	681a      	ldr	r2, [r3, #0]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f022 0201 	bic.w	r2, r2, #1
 80065ac:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	683a      	ldr	r2, [r7, #0]
 80065be:	430a      	orrs	r2, r1
 80065c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f000 f850 	bl	8006668 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	68fa      	ldr	r2, [r7, #12]
 80065ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2220      	movs	r2, #32
 80065d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2200      	movs	r2, #0
 80065dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80065e0:	2300      	movs	r3, #0
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3710      	adds	r7, #16
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}

080065ea <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80065ea:	b580      	push	{r7, lr}
 80065ec:	b084      	sub	sp, #16
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	6078      	str	r0, [r7, #4]
 80065f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	d101      	bne.n	8006602 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80065fe:	2302      	movs	r3, #2
 8006600:	e02d      	b.n	800665e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2201      	movs	r2, #1
 8006606:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2224      	movs	r2, #36	; 0x24
 800660e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f022 0201 	bic.w	r2, r2, #1
 8006628:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	683a      	ldr	r2, [r7, #0]
 800663a:	430a      	orrs	r2, r1
 800663c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f000 f812 	bl	8006668 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	68fa      	ldr	r2, [r7, #12]
 800664a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2220      	movs	r2, #32
 8006650:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2200      	movs	r2, #0
 8006658:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800665c:	2300      	movs	r3, #0
}
 800665e:	4618      	mov	r0, r3
 8006660:	3710      	adds	r7, #16
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}
	...

08006668 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006668:	b480      	push	{r7}
 800666a:	b085      	sub	sp, #20
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006674:	2b00      	cmp	r3, #0
 8006676:	d108      	bne.n	800668a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2201      	movs	r2, #1
 800667c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2201      	movs	r2, #1
 8006684:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006688:	e031      	b.n	80066ee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800668a:	2308      	movs	r3, #8
 800668c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800668e:	2308      	movs	r3, #8
 8006690:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	0e5b      	lsrs	r3, r3, #25
 800669a:	b2db      	uxtb	r3, r3
 800669c:	f003 0307 	and.w	r3, r3, #7
 80066a0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	689b      	ldr	r3, [r3, #8]
 80066a8:	0f5b      	lsrs	r3, r3, #29
 80066aa:	b2db      	uxtb	r3, r3
 80066ac:	f003 0307 	and.w	r3, r3, #7
 80066b0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80066b2:	7bbb      	ldrb	r3, [r7, #14]
 80066b4:	7b3a      	ldrb	r2, [r7, #12]
 80066b6:	4911      	ldr	r1, [pc, #68]	; (80066fc <UARTEx_SetNbDataToProcess+0x94>)
 80066b8:	5c8a      	ldrb	r2, [r1, r2]
 80066ba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80066be:	7b3a      	ldrb	r2, [r7, #12]
 80066c0:	490f      	ldr	r1, [pc, #60]	; (8006700 <UARTEx_SetNbDataToProcess+0x98>)
 80066c2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80066c4:	fb93 f3f2 	sdiv	r3, r3, r2
 80066c8:	b29a      	uxth	r2, r3
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80066d0:	7bfb      	ldrb	r3, [r7, #15]
 80066d2:	7b7a      	ldrb	r2, [r7, #13]
 80066d4:	4909      	ldr	r1, [pc, #36]	; (80066fc <UARTEx_SetNbDataToProcess+0x94>)
 80066d6:	5c8a      	ldrb	r2, [r1, r2]
 80066d8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80066dc:	7b7a      	ldrb	r2, [r7, #13]
 80066de:	4908      	ldr	r1, [pc, #32]	; (8006700 <UARTEx_SetNbDataToProcess+0x98>)
 80066e0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80066e2:	fb93 f3f2 	sdiv	r3, r3, r2
 80066e6:	b29a      	uxth	r2, r3
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80066ee:	bf00      	nop
 80066f0:	3714      	adds	r7, #20
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr
 80066fa:	bf00      	nop
 80066fc:	080080c4 	.word	0x080080c4
 8006700:	080080cc 	.word	0x080080cc

08006704 <atoi>:
 8006704:	220a      	movs	r2, #10
 8006706:	2100      	movs	r1, #0
 8006708:	f000 b944 	b.w	8006994 <strtol>

0800670c <__errno>:
 800670c:	4b01      	ldr	r3, [pc, #4]	; (8006714 <__errno+0x8>)
 800670e:	6818      	ldr	r0, [r3, #0]
 8006710:	4770      	bx	lr
 8006712:	bf00      	nop
 8006714:	2000000c 	.word	0x2000000c

08006718 <__libc_init_array>:
 8006718:	b570      	push	{r4, r5, r6, lr}
 800671a:	4d0d      	ldr	r5, [pc, #52]	; (8006750 <__libc_init_array+0x38>)
 800671c:	4c0d      	ldr	r4, [pc, #52]	; (8006754 <__libc_init_array+0x3c>)
 800671e:	1b64      	subs	r4, r4, r5
 8006720:	10a4      	asrs	r4, r4, #2
 8006722:	2600      	movs	r6, #0
 8006724:	42a6      	cmp	r6, r4
 8006726:	d109      	bne.n	800673c <__libc_init_array+0x24>
 8006728:	4d0b      	ldr	r5, [pc, #44]	; (8006758 <__libc_init_array+0x40>)
 800672a:	4c0c      	ldr	r4, [pc, #48]	; (800675c <__libc_init_array+0x44>)
 800672c:	f001 faf2 	bl	8007d14 <_init>
 8006730:	1b64      	subs	r4, r4, r5
 8006732:	10a4      	asrs	r4, r4, #2
 8006734:	2600      	movs	r6, #0
 8006736:	42a6      	cmp	r6, r4
 8006738:	d105      	bne.n	8006746 <__libc_init_array+0x2e>
 800673a:	bd70      	pop	{r4, r5, r6, pc}
 800673c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006740:	4798      	blx	r3
 8006742:	3601      	adds	r6, #1
 8006744:	e7ee      	b.n	8006724 <__libc_init_array+0xc>
 8006746:	f855 3b04 	ldr.w	r3, [r5], #4
 800674a:	4798      	blx	r3
 800674c:	3601      	adds	r6, #1
 800674e:	e7f2      	b.n	8006736 <__libc_init_array+0x1e>
 8006750:	08008324 	.word	0x08008324
 8006754:	08008324 	.word	0x08008324
 8006758:	08008324 	.word	0x08008324
 800675c:	08008328 	.word	0x08008328

08006760 <memset>:
 8006760:	4402      	add	r2, r0
 8006762:	4603      	mov	r3, r0
 8006764:	4293      	cmp	r3, r2
 8006766:	d100      	bne.n	800676a <memset+0xa>
 8006768:	4770      	bx	lr
 800676a:	f803 1b01 	strb.w	r1, [r3], #1
 800676e:	e7f9      	b.n	8006764 <memset+0x4>

08006770 <sniprintf>:
 8006770:	b40c      	push	{r2, r3}
 8006772:	b530      	push	{r4, r5, lr}
 8006774:	4b17      	ldr	r3, [pc, #92]	; (80067d4 <sniprintf+0x64>)
 8006776:	1e0c      	subs	r4, r1, #0
 8006778:	681d      	ldr	r5, [r3, #0]
 800677a:	b09d      	sub	sp, #116	; 0x74
 800677c:	da08      	bge.n	8006790 <sniprintf+0x20>
 800677e:	238b      	movs	r3, #139	; 0x8b
 8006780:	602b      	str	r3, [r5, #0]
 8006782:	f04f 30ff 	mov.w	r0, #4294967295
 8006786:	b01d      	add	sp, #116	; 0x74
 8006788:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800678c:	b002      	add	sp, #8
 800678e:	4770      	bx	lr
 8006790:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006794:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006798:	bf14      	ite	ne
 800679a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800679e:	4623      	moveq	r3, r4
 80067a0:	9304      	str	r3, [sp, #16]
 80067a2:	9307      	str	r3, [sp, #28]
 80067a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80067a8:	9002      	str	r0, [sp, #8]
 80067aa:	9006      	str	r0, [sp, #24]
 80067ac:	f8ad 3016 	strh.w	r3, [sp, #22]
 80067b0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80067b2:	ab21      	add	r3, sp, #132	; 0x84
 80067b4:	a902      	add	r1, sp, #8
 80067b6:	4628      	mov	r0, r5
 80067b8:	9301      	str	r3, [sp, #4]
 80067ba:	f000 fa69 	bl	8006c90 <_svfiprintf_r>
 80067be:	1c43      	adds	r3, r0, #1
 80067c0:	bfbc      	itt	lt
 80067c2:	238b      	movlt	r3, #139	; 0x8b
 80067c4:	602b      	strlt	r3, [r5, #0]
 80067c6:	2c00      	cmp	r4, #0
 80067c8:	d0dd      	beq.n	8006786 <sniprintf+0x16>
 80067ca:	9b02      	ldr	r3, [sp, #8]
 80067cc:	2200      	movs	r2, #0
 80067ce:	701a      	strb	r2, [r3, #0]
 80067d0:	e7d9      	b.n	8006786 <sniprintf+0x16>
 80067d2:	bf00      	nop
 80067d4:	2000000c 	.word	0x2000000c

080067d8 <strtok>:
 80067d8:	4b16      	ldr	r3, [pc, #88]	; (8006834 <strtok+0x5c>)
 80067da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80067dc:	681e      	ldr	r6, [r3, #0]
 80067de:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80067e0:	4605      	mov	r5, r0
 80067e2:	b9fc      	cbnz	r4, 8006824 <strtok+0x4c>
 80067e4:	2050      	movs	r0, #80	; 0x50
 80067e6:	9101      	str	r1, [sp, #4]
 80067e8:	f000 f90e 	bl	8006a08 <malloc>
 80067ec:	9901      	ldr	r1, [sp, #4]
 80067ee:	65b0      	str	r0, [r6, #88]	; 0x58
 80067f0:	4602      	mov	r2, r0
 80067f2:	b920      	cbnz	r0, 80067fe <strtok+0x26>
 80067f4:	4b10      	ldr	r3, [pc, #64]	; (8006838 <strtok+0x60>)
 80067f6:	4811      	ldr	r0, [pc, #68]	; (800683c <strtok+0x64>)
 80067f8:	2157      	movs	r1, #87	; 0x57
 80067fa:	f000 f8d5 	bl	80069a8 <__assert_func>
 80067fe:	e9c0 4400 	strd	r4, r4, [r0]
 8006802:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8006806:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800680a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800680e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8006812:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8006816:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800681a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800681e:	6184      	str	r4, [r0, #24]
 8006820:	7704      	strb	r4, [r0, #28]
 8006822:	6244      	str	r4, [r0, #36]	; 0x24
 8006824:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8006826:	2301      	movs	r3, #1
 8006828:	4628      	mov	r0, r5
 800682a:	b002      	add	sp, #8
 800682c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006830:	f000 b806 	b.w	8006840 <__strtok_r>
 8006834:	2000000c 	.word	0x2000000c
 8006838:	080080d8 	.word	0x080080d8
 800683c:	080080ef 	.word	0x080080ef

08006840 <__strtok_r>:
 8006840:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006842:	b908      	cbnz	r0, 8006848 <__strtok_r+0x8>
 8006844:	6810      	ldr	r0, [r2, #0]
 8006846:	b188      	cbz	r0, 800686c <__strtok_r+0x2c>
 8006848:	4604      	mov	r4, r0
 800684a:	4620      	mov	r0, r4
 800684c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006850:	460f      	mov	r7, r1
 8006852:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006856:	b91e      	cbnz	r6, 8006860 <__strtok_r+0x20>
 8006858:	b965      	cbnz	r5, 8006874 <__strtok_r+0x34>
 800685a:	6015      	str	r5, [r2, #0]
 800685c:	4628      	mov	r0, r5
 800685e:	e005      	b.n	800686c <__strtok_r+0x2c>
 8006860:	42b5      	cmp	r5, r6
 8006862:	d1f6      	bne.n	8006852 <__strtok_r+0x12>
 8006864:	2b00      	cmp	r3, #0
 8006866:	d1f0      	bne.n	800684a <__strtok_r+0xa>
 8006868:	6014      	str	r4, [r2, #0]
 800686a:	7003      	strb	r3, [r0, #0]
 800686c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800686e:	461c      	mov	r4, r3
 8006870:	e00c      	b.n	800688c <__strtok_r+0x4c>
 8006872:	b915      	cbnz	r5, 800687a <__strtok_r+0x3a>
 8006874:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006878:	460e      	mov	r6, r1
 800687a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800687e:	42ab      	cmp	r3, r5
 8006880:	d1f7      	bne.n	8006872 <__strtok_r+0x32>
 8006882:	2b00      	cmp	r3, #0
 8006884:	d0f3      	beq.n	800686e <__strtok_r+0x2e>
 8006886:	2300      	movs	r3, #0
 8006888:	f804 3c01 	strb.w	r3, [r4, #-1]
 800688c:	6014      	str	r4, [r2, #0]
 800688e:	e7ed      	b.n	800686c <__strtok_r+0x2c>

08006890 <_strtol_l.constprop.0>:
 8006890:	2b01      	cmp	r3, #1
 8006892:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006896:	d001      	beq.n	800689c <_strtol_l.constprop.0+0xc>
 8006898:	2b24      	cmp	r3, #36	; 0x24
 800689a:	d906      	bls.n	80068aa <_strtol_l.constprop.0+0x1a>
 800689c:	f7ff ff36 	bl	800670c <__errno>
 80068a0:	2316      	movs	r3, #22
 80068a2:	6003      	str	r3, [r0, #0]
 80068a4:	2000      	movs	r0, #0
 80068a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068aa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006990 <_strtol_l.constprop.0+0x100>
 80068ae:	460d      	mov	r5, r1
 80068b0:	462e      	mov	r6, r5
 80068b2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80068b6:	f814 700c 	ldrb.w	r7, [r4, ip]
 80068ba:	f017 0708 	ands.w	r7, r7, #8
 80068be:	d1f7      	bne.n	80068b0 <_strtol_l.constprop.0+0x20>
 80068c0:	2c2d      	cmp	r4, #45	; 0x2d
 80068c2:	d132      	bne.n	800692a <_strtol_l.constprop.0+0x9a>
 80068c4:	782c      	ldrb	r4, [r5, #0]
 80068c6:	2701      	movs	r7, #1
 80068c8:	1cb5      	adds	r5, r6, #2
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d05b      	beq.n	8006986 <_strtol_l.constprop.0+0xf6>
 80068ce:	2b10      	cmp	r3, #16
 80068d0:	d109      	bne.n	80068e6 <_strtol_l.constprop.0+0x56>
 80068d2:	2c30      	cmp	r4, #48	; 0x30
 80068d4:	d107      	bne.n	80068e6 <_strtol_l.constprop.0+0x56>
 80068d6:	782c      	ldrb	r4, [r5, #0]
 80068d8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80068dc:	2c58      	cmp	r4, #88	; 0x58
 80068de:	d14d      	bne.n	800697c <_strtol_l.constprop.0+0xec>
 80068e0:	786c      	ldrb	r4, [r5, #1]
 80068e2:	2310      	movs	r3, #16
 80068e4:	3502      	adds	r5, #2
 80068e6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80068ea:	f108 38ff 	add.w	r8, r8, #4294967295
 80068ee:	f04f 0c00 	mov.w	ip, #0
 80068f2:	fbb8 f9f3 	udiv	r9, r8, r3
 80068f6:	4666      	mov	r6, ip
 80068f8:	fb03 8a19 	mls	sl, r3, r9, r8
 80068fc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006900:	f1be 0f09 	cmp.w	lr, #9
 8006904:	d816      	bhi.n	8006934 <_strtol_l.constprop.0+0xa4>
 8006906:	4674      	mov	r4, lr
 8006908:	42a3      	cmp	r3, r4
 800690a:	dd24      	ble.n	8006956 <_strtol_l.constprop.0+0xc6>
 800690c:	f1bc 0f00 	cmp.w	ip, #0
 8006910:	db1e      	blt.n	8006950 <_strtol_l.constprop.0+0xc0>
 8006912:	45b1      	cmp	r9, r6
 8006914:	d31c      	bcc.n	8006950 <_strtol_l.constprop.0+0xc0>
 8006916:	d101      	bne.n	800691c <_strtol_l.constprop.0+0x8c>
 8006918:	45a2      	cmp	sl, r4
 800691a:	db19      	blt.n	8006950 <_strtol_l.constprop.0+0xc0>
 800691c:	fb06 4603 	mla	r6, r6, r3, r4
 8006920:	f04f 0c01 	mov.w	ip, #1
 8006924:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006928:	e7e8      	b.n	80068fc <_strtol_l.constprop.0+0x6c>
 800692a:	2c2b      	cmp	r4, #43	; 0x2b
 800692c:	bf04      	itt	eq
 800692e:	782c      	ldrbeq	r4, [r5, #0]
 8006930:	1cb5      	addeq	r5, r6, #2
 8006932:	e7ca      	b.n	80068ca <_strtol_l.constprop.0+0x3a>
 8006934:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8006938:	f1be 0f19 	cmp.w	lr, #25
 800693c:	d801      	bhi.n	8006942 <_strtol_l.constprop.0+0xb2>
 800693e:	3c37      	subs	r4, #55	; 0x37
 8006940:	e7e2      	b.n	8006908 <_strtol_l.constprop.0+0x78>
 8006942:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8006946:	f1be 0f19 	cmp.w	lr, #25
 800694a:	d804      	bhi.n	8006956 <_strtol_l.constprop.0+0xc6>
 800694c:	3c57      	subs	r4, #87	; 0x57
 800694e:	e7db      	b.n	8006908 <_strtol_l.constprop.0+0x78>
 8006950:	f04f 3cff 	mov.w	ip, #4294967295
 8006954:	e7e6      	b.n	8006924 <_strtol_l.constprop.0+0x94>
 8006956:	f1bc 0f00 	cmp.w	ip, #0
 800695a:	da05      	bge.n	8006968 <_strtol_l.constprop.0+0xd8>
 800695c:	2322      	movs	r3, #34	; 0x22
 800695e:	6003      	str	r3, [r0, #0]
 8006960:	4646      	mov	r6, r8
 8006962:	b942      	cbnz	r2, 8006976 <_strtol_l.constprop.0+0xe6>
 8006964:	4630      	mov	r0, r6
 8006966:	e79e      	b.n	80068a6 <_strtol_l.constprop.0+0x16>
 8006968:	b107      	cbz	r7, 800696c <_strtol_l.constprop.0+0xdc>
 800696a:	4276      	negs	r6, r6
 800696c:	2a00      	cmp	r2, #0
 800696e:	d0f9      	beq.n	8006964 <_strtol_l.constprop.0+0xd4>
 8006970:	f1bc 0f00 	cmp.w	ip, #0
 8006974:	d000      	beq.n	8006978 <_strtol_l.constprop.0+0xe8>
 8006976:	1e69      	subs	r1, r5, #1
 8006978:	6011      	str	r1, [r2, #0]
 800697a:	e7f3      	b.n	8006964 <_strtol_l.constprop.0+0xd4>
 800697c:	2430      	movs	r4, #48	; 0x30
 800697e:	2b00      	cmp	r3, #0
 8006980:	d1b1      	bne.n	80068e6 <_strtol_l.constprop.0+0x56>
 8006982:	2308      	movs	r3, #8
 8006984:	e7af      	b.n	80068e6 <_strtol_l.constprop.0+0x56>
 8006986:	2c30      	cmp	r4, #48	; 0x30
 8006988:	d0a5      	beq.n	80068d6 <_strtol_l.constprop.0+0x46>
 800698a:	230a      	movs	r3, #10
 800698c:	e7ab      	b.n	80068e6 <_strtol_l.constprop.0+0x56>
 800698e:	bf00      	nop
 8006990:	08008189 	.word	0x08008189

08006994 <strtol>:
 8006994:	4613      	mov	r3, r2
 8006996:	460a      	mov	r2, r1
 8006998:	4601      	mov	r1, r0
 800699a:	4802      	ldr	r0, [pc, #8]	; (80069a4 <strtol+0x10>)
 800699c:	6800      	ldr	r0, [r0, #0]
 800699e:	f7ff bf77 	b.w	8006890 <_strtol_l.constprop.0>
 80069a2:	bf00      	nop
 80069a4:	2000000c 	.word	0x2000000c

080069a8 <__assert_func>:
 80069a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80069aa:	4614      	mov	r4, r2
 80069ac:	461a      	mov	r2, r3
 80069ae:	4b09      	ldr	r3, [pc, #36]	; (80069d4 <__assert_func+0x2c>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4605      	mov	r5, r0
 80069b4:	68d8      	ldr	r0, [r3, #12]
 80069b6:	b14c      	cbz	r4, 80069cc <__assert_func+0x24>
 80069b8:	4b07      	ldr	r3, [pc, #28]	; (80069d8 <__assert_func+0x30>)
 80069ba:	9100      	str	r1, [sp, #0]
 80069bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80069c0:	4906      	ldr	r1, [pc, #24]	; (80069dc <__assert_func+0x34>)
 80069c2:	462b      	mov	r3, r5
 80069c4:	f000 f80e 	bl	80069e4 <fiprintf>
 80069c8:	f000 fe20 	bl	800760c <abort>
 80069cc:	4b04      	ldr	r3, [pc, #16]	; (80069e0 <__assert_func+0x38>)
 80069ce:	461c      	mov	r4, r3
 80069d0:	e7f3      	b.n	80069ba <__assert_func+0x12>
 80069d2:	bf00      	nop
 80069d4:	2000000c 	.word	0x2000000c
 80069d8:	0800814c 	.word	0x0800814c
 80069dc:	08008159 	.word	0x08008159
 80069e0:	08008187 	.word	0x08008187

080069e4 <fiprintf>:
 80069e4:	b40e      	push	{r1, r2, r3}
 80069e6:	b503      	push	{r0, r1, lr}
 80069e8:	4601      	mov	r1, r0
 80069ea:	ab03      	add	r3, sp, #12
 80069ec:	4805      	ldr	r0, [pc, #20]	; (8006a04 <fiprintf+0x20>)
 80069ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80069f2:	6800      	ldr	r0, [r0, #0]
 80069f4:	9301      	str	r3, [sp, #4]
 80069f6:	f000 fa75 	bl	8006ee4 <_vfiprintf_r>
 80069fa:	b002      	add	sp, #8
 80069fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a00:	b003      	add	sp, #12
 8006a02:	4770      	bx	lr
 8006a04:	2000000c 	.word	0x2000000c

08006a08 <malloc>:
 8006a08:	4b02      	ldr	r3, [pc, #8]	; (8006a14 <malloc+0xc>)
 8006a0a:	4601      	mov	r1, r0
 8006a0c:	6818      	ldr	r0, [r3, #0]
 8006a0e:	f000 b86f 	b.w	8006af0 <_malloc_r>
 8006a12:	bf00      	nop
 8006a14:	2000000c 	.word	0x2000000c

08006a18 <_free_r>:
 8006a18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006a1a:	2900      	cmp	r1, #0
 8006a1c:	d044      	beq.n	8006aa8 <_free_r+0x90>
 8006a1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a22:	9001      	str	r0, [sp, #4]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	f1a1 0404 	sub.w	r4, r1, #4
 8006a2a:	bfb8      	it	lt
 8006a2c:	18e4      	addlt	r4, r4, r3
 8006a2e:	f001 f83d 	bl	8007aac <__malloc_lock>
 8006a32:	4a1e      	ldr	r2, [pc, #120]	; (8006aac <_free_r+0x94>)
 8006a34:	9801      	ldr	r0, [sp, #4]
 8006a36:	6813      	ldr	r3, [r2, #0]
 8006a38:	b933      	cbnz	r3, 8006a48 <_free_r+0x30>
 8006a3a:	6063      	str	r3, [r4, #4]
 8006a3c:	6014      	str	r4, [r2, #0]
 8006a3e:	b003      	add	sp, #12
 8006a40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006a44:	f001 b838 	b.w	8007ab8 <__malloc_unlock>
 8006a48:	42a3      	cmp	r3, r4
 8006a4a:	d908      	bls.n	8006a5e <_free_r+0x46>
 8006a4c:	6825      	ldr	r5, [r4, #0]
 8006a4e:	1961      	adds	r1, r4, r5
 8006a50:	428b      	cmp	r3, r1
 8006a52:	bf01      	itttt	eq
 8006a54:	6819      	ldreq	r1, [r3, #0]
 8006a56:	685b      	ldreq	r3, [r3, #4]
 8006a58:	1949      	addeq	r1, r1, r5
 8006a5a:	6021      	streq	r1, [r4, #0]
 8006a5c:	e7ed      	b.n	8006a3a <_free_r+0x22>
 8006a5e:	461a      	mov	r2, r3
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	b10b      	cbz	r3, 8006a68 <_free_r+0x50>
 8006a64:	42a3      	cmp	r3, r4
 8006a66:	d9fa      	bls.n	8006a5e <_free_r+0x46>
 8006a68:	6811      	ldr	r1, [r2, #0]
 8006a6a:	1855      	adds	r5, r2, r1
 8006a6c:	42a5      	cmp	r5, r4
 8006a6e:	d10b      	bne.n	8006a88 <_free_r+0x70>
 8006a70:	6824      	ldr	r4, [r4, #0]
 8006a72:	4421      	add	r1, r4
 8006a74:	1854      	adds	r4, r2, r1
 8006a76:	42a3      	cmp	r3, r4
 8006a78:	6011      	str	r1, [r2, #0]
 8006a7a:	d1e0      	bne.n	8006a3e <_free_r+0x26>
 8006a7c:	681c      	ldr	r4, [r3, #0]
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	6053      	str	r3, [r2, #4]
 8006a82:	4421      	add	r1, r4
 8006a84:	6011      	str	r1, [r2, #0]
 8006a86:	e7da      	b.n	8006a3e <_free_r+0x26>
 8006a88:	d902      	bls.n	8006a90 <_free_r+0x78>
 8006a8a:	230c      	movs	r3, #12
 8006a8c:	6003      	str	r3, [r0, #0]
 8006a8e:	e7d6      	b.n	8006a3e <_free_r+0x26>
 8006a90:	6825      	ldr	r5, [r4, #0]
 8006a92:	1961      	adds	r1, r4, r5
 8006a94:	428b      	cmp	r3, r1
 8006a96:	bf04      	itt	eq
 8006a98:	6819      	ldreq	r1, [r3, #0]
 8006a9a:	685b      	ldreq	r3, [r3, #4]
 8006a9c:	6063      	str	r3, [r4, #4]
 8006a9e:	bf04      	itt	eq
 8006aa0:	1949      	addeq	r1, r1, r5
 8006aa2:	6021      	streq	r1, [r4, #0]
 8006aa4:	6054      	str	r4, [r2, #4]
 8006aa6:	e7ca      	b.n	8006a3e <_free_r+0x26>
 8006aa8:	b003      	add	sp, #12
 8006aaa:	bd30      	pop	{r4, r5, pc}
 8006aac:	20000278 	.word	0x20000278

08006ab0 <sbrk_aligned>:
 8006ab0:	b570      	push	{r4, r5, r6, lr}
 8006ab2:	4e0e      	ldr	r6, [pc, #56]	; (8006aec <sbrk_aligned+0x3c>)
 8006ab4:	460c      	mov	r4, r1
 8006ab6:	6831      	ldr	r1, [r6, #0]
 8006ab8:	4605      	mov	r5, r0
 8006aba:	b911      	cbnz	r1, 8006ac2 <sbrk_aligned+0x12>
 8006abc:	f000 fcd6 	bl	800746c <_sbrk_r>
 8006ac0:	6030      	str	r0, [r6, #0]
 8006ac2:	4621      	mov	r1, r4
 8006ac4:	4628      	mov	r0, r5
 8006ac6:	f000 fcd1 	bl	800746c <_sbrk_r>
 8006aca:	1c43      	adds	r3, r0, #1
 8006acc:	d00a      	beq.n	8006ae4 <sbrk_aligned+0x34>
 8006ace:	1cc4      	adds	r4, r0, #3
 8006ad0:	f024 0403 	bic.w	r4, r4, #3
 8006ad4:	42a0      	cmp	r0, r4
 8006ad6:	d007      	beq.n	8006ae8 <sbrk_aligned+0x38>
 8006ad8:	1a21      	subs	r1, r4, r0
 8006ada:	4628      	mov	r0, r5
 8006adc:	f000 fcc6 	bl	800746c <_sbrk_r>
 8006ae0:	3001      	adds	r0, #1
 8006ae2:	d101      	bne.n	8006ae8 <sbrk_aligned+0x38>
 8006ae4:	f04f 34ff 	mov.w	r4, #4294967295
 8006ae8:	4620      	mov	r0, r4
 8006aea:	bd70      	pop	{r4, r5, r6, pc}
 8006aec:	2000027c 	.word	0x2000027c

08006af0 <_malloc_r>:
 8006af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006af4:	1ccd      	adds	r5, r1, #3
 8006af6:	f025 0503 	bic.w	r5, r5, #3
 8006afa:	3508      	adds	r5, #8
 8006afc:	2d0c      	cmp	r5, #12
 8006afe:	bf38      	it	cc
 8006b00:	250c      	movcc	r5, #12
 8006b02:	2d00      	cmp	r5, #0
 8006b04:	4607      	mov	r7, r0
 8006b06:	db01      	blt.n	8006b0c <_malloc_r+0x1c>
 8006b08:	42a9      	cmp	r1, r5
 8006b0a:	d905      	bls.n	8006b18 <_malloc_r+0x28>
 8006b0c:	230c      	movs	r3, #12
 8006b0e:	603b      	str	r3, [r7, #0]
 8006b10:	2600      	movs	r6, #0
 8006b12:	4630      	mov	r0, r6
 8006b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b18:	4e2e      	ldr	r6, [pc, #184]	; (8006bd4 <_malloc_r+0xe4>)
 8006b1a:	f000 ffc7 	bl	8007aac <__malloc_lock>
 8006b1e:	6833      	ldr	r3, [r6, #0]
 8006b20:	461c      	mov	r4, r3
 8006b22:	bb34      	cbnz	r4, 8006b72 <_malloc_r+0x82>
 8006b24:	4629      	mov	r1, r5
 8006b26:	4638      	mov	r0, r7
 8006b28:	f7ff ffc2 	bl	8006ab0 <sbrk_aligned>
 8006b2c:	1c43      	adds	r3, r0, #1
 8006b2e:	4604      	mov	r4, r0
 8006b30:	d14d      	bne.n	8006bce <_malloc_r+0xde>
 8006b32:	6834      	ldr	r4, [r6, #0]
 8006b34:	4626      	mov	r6, r4
 8006b36:	2e00      	cmp	r6, #0
 8006b38:	d140      	bne.n	8006bbc <_malloc_r+0xcc>
 8006b3a:	6823      	ldr	r3, [r4, #0]
 8006b3c:	4631      	mov	r1, r6
 8006b3e:	4638      	mov	r0, r7
 8006b40:	eb04 0803 	add.w	r8, r4, r3
 8006b44:	f000 fc92 	bl	800746c <_sbrk_r>
 8006b48:	4580      	cmp	r8, r0
 8006b4a:	d13a      	bne.n	8006bc2 <_malloc_r+0xd2>
 8006b4c:	6821      	ldr	r1, [r4, #0]
 8006b4e:	3503      	adds	r5, #3
 8006b50:	1a6d      	subs	r5, r5, r1
 8006b52:	f025 0503 	bic.w	r5, r5, #3
 8006b56:	3508      	adds	r5, #8
 8006b58:	2d0c      	cmp	r5, #12
 8006b5a:	bf38      	it	cc
 8006b5c:	250c      	movcc	r5, #12
 8006b5e:	4629      	mov	r1, r5
 8006b60:	4638      	mov	r0, r7
 8006b62:	f7ff ffa5 	bl	8006ab0 <sbrk_aligned>
 8006b66:	3001      	adds	r0, #1
 8006b68:	d02b      	beq.n	8006bc2 <_malloc_r+0xd2>
 8006b6a:	6823      	ldr	r3, [r4, #0]
 8006b6c:	442b      	add	r3, r5
 8006b6e:	6023      	str	r3, [r4, #0]
 8006b70:	e00e      	b.n	8006b90 <_malloc_r+0xa0>
 8006b72:	6822      	ldr	r2, [r4, #0]
 8006b74:	1b52      	subs	r2, r2, r5
 8006b76:	d41e      	bmi.n	8006bb6 <_malloc_r+0xc6>
 8006b78:	2a0b      	cmp	r2, #11
 8006b7a:	d916      	bls.n	8006baa <_malloc_r+0xba>
 8006b7c:	1961      	adds	r1, r4, r5
 8006b7e:	42a3      	cmp	r3, r4
 8006b80:	6025      	str	r5, [r4, #0]
 8006b82:	bf18      	it	ne
 8006b84:	6059      	strne	r1, [r3, #4]
 8006b86:	6863      	ldr	r3, [r4, #4]
 8006b88:	bf08      	it	eq
 8006b8a:	6031      	streq	r1, [r6, #0]
 8006b8c:	5162      	str	r2, [r4, r5]
 8006b8e:	604b      	str	r3, [r1, #4]
 8006b90:	4638      	mov	r0, r7
 8006b92:	f104 060b 	add.w	r6, r4, #11
 8006b96:	f000 ff8f 	bl	8007ab8 <__malloc_unlock>
 8006b9a:	f026 0607 	bic.w	r6, r6, #7
 8006b9e:	1d23      	adds	r3, r4, #4
 8006ba0:	1af2      	subs	r2, r6, r3
 8006ba2:	d0b6      	beq.n	8006b12 <_malloc_r+0x22>
 8006ba4:	1b9b      	subs	r3, r3, r6
 8006ba6:	50a3      	str	r3, [r4, r2]
 8006ba8:	e7b3      	b.n	8006b12 <_malloc_r+0x22>
 8006baa:	6862      	ldr	r2, [r4, #4]
 8006bac:	42a3      	cmp	r3, r4
 8006bae:	bf0c      	ite	eq
 8006bb0:	6032      	streq	r2, [r6, #0]
 8006bb2:	605a      	strne	r2, [r3, #4]
 8006bb4:	e7ec      	b.n	8006b90 <_malloc_r+0xa0>
 8006bb6:	4623      	mov	r3, r4
 8006bb8:	6864      	ldr	r4, [r4, #4]
 8006bba:	e7b2      	b.n	8006b22 <_malloc_r+0x32>
 8006bbc:	4634      	mov	r4, r6
 8006bbe:	6876      	ldr	r6, [r6, #4]
 8006bc0:	e7b9      	b.n	8006b36 <_malloc_r+0x46>
 8006bc2:	230c      	movs	r3, #12
 8006bc4:	603b      	str	r3, [r7, #0]
 8006bc6:	4638      	mov	r0, r7
 8006bc8:	f000 ff76 	bl	8007ab8 <__malloc_unlock>
 8006bcc:	e7a1      	b.n	8006b12 <_malloc_r+0x22>
 8006bce:	6025      	str	r5, [r4, #0]
 8006bd0:	e7de      	b.n	8006b90 <_malloc_r+0xa0>
 8006bd2:	bf00      	nop
 8006bd4:	20000278 	.word	0x20000278

08006bd8 <__ssputs_r>:
 8006bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bdc:	688e      	ldr	r6, [r1, #8]
 8006bde:	429e      	cmp	r6, r3
 8006be0:	4682      	mov	sl, r0
 8006be2:	460c      	mov	r4, r1
 8006be4:	4690      	mov	r8, r2
 8006be6:	461f      	mov	r7, r3
 8006be8:	d838      	bhi.n	8006c5c <__ssputs_r+0x84>
 8006bea:	898a      	ldrh	r2, [r1, #12]
 8006bec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006bf0:	d032      	beq.n	8006c58 <__ssputs_r+0x80>
 8006bf2:	6825      	ldr	r5, [r4, #0]
 8006bf4:	6909      	ldr	r1, [r1, #16]
 8006bf6:	eba5 0901 	sub.w	r9, r5, r1
 8006bfa:	6965      	ldr	r5, [r4, #20]
 8006bfc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006c00:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006c04:	3301      	adds	r3, #1
 8006c06:	444b      	add	r3, r9
 8006c08:	106d      	asrs	r5, r5, #1
 8006c0a:	429d      	cmp	r5, r3
 8006c0c:	bf38      	it	cc
 8006c0e:	461d      	movcc	r5, r3
 8006c10:	0553      	lsls	r3, r2, #21
 8006c12:	d531      	bpl.n	8006c78 <__ssputs_r+0xa0>
 8006c14:	4629      	mov	r1, r5
 8006c16:	f7ff ff6b 	bl	8006af0 <_malloc_r>
 8006c1a:	4606      	mov	r6, r0
 8006c1c:	b950      	cbnz	r0, 8006c34 <__ssputs_r+0x5c>
 8006c1e:	230c      	movs	r3, #12
 8006c20:	f8ca 3000 	str.w	r3, [sl]
 8006c24:	89a3      	ldrh	r3, [r4, #12]
 8006c26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c2a:	81a3      	strh	r3, [r4, #12]
 8006c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8006c30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c34:	6921      	ldr	r1, [r4, #16]
 8006c36:	464a      	mov	r2, r9
 8006c38:	f000 ff10 	bl	8007a5c <memcpy>
 8006c3c:	89a3      	ldrh	r3, [r4, #12]
 8006c3e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006c42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c46:	81a3      	strh	r3, [r4, #12]
 8006c48:	6126      	str	r6, [r4, #16]
 8006c4a:	6165      	str	r5, [r4, #20]
 8006c4c:	444e      	add	r6, r9
 8006c4e:	eba5 0509 	sub.w	r5, r5, r9
 8006c52:	6026      	str	r6, [r4, #0]
 8006c54:	60a5      	str	r5, [r4, #8]
 8006c56:	463e      	mov	r6, r7
 8006c58:	42be      	cmp	r6, r7
 8006c5a:	d900      	bls.n	8006c5e <__ssputs_r+0x86>
 8006c5c:	463e      	mov	r6, r7
 8006c5e:	6820      	ldr	r0, [r4, #0]
 8006c60:	4632      	mov	r2, r6
 8006c62:	4641      	mov	r1, r8
 8006c64:	f000 ff08 	bl	8007a78 <memmove>
 8006c68:	68a3      	ldr	r3, [r4, #8]
 8006c6a:	1b9b      	subs	r3, r3, r6
 8006c6c:	60a3      	str	r3, [r4, #8]
 8006c6e:	6823      	ldr	r3, [r4, #0]
 8006c70:	4433      	add	r3, r6
 8006c72:	6023      	str	r3, [r4, #0]
 8006c74:	2000      	movs	r0, #0
 8006c76:	e7db      	b.n	8006c30 <__ssputs_r+0x58>
 8006c78:	462a      	mov	r2, r5
 8006c7a:	f000 ff23 	bl	8007ac4 <_realloc_r>
 8006c7e:	4606      	mov	r6, r0
 8006c80:	2800      	cmp	r0, #0
 8006c82:	d1e1      	bne.n	8006c48 <__ssputs_r+0x70>
 8006c84:	6921      	ldr	r1, [r4, #16]
 8006c86:	4650      	mov	r0, sl
 8006c88:	f7ff fec6 	bl	8006a18 <_free_r>
 8006c8c:	e7c7      	b.n	8006c1e <__ssputs_r+0x46>
	...

08006c90 <_svfiprintf_r>:
 8006c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c94:	4698      	mov	r8, r3
 8006c96:	898b      	ldrh	r3, [r1, #12]
 8006c98:	061b      	lsls	r3, r3, #24
 8006c9a:	b09d      	sub	sp, #116	; 0x74
 8006c9c:	4607      	mov	r7, r0
 8006c9e:	460d      	mov	r5, r1
 8006ca0:	4614      	mov	r4, r2
 8006ca2:	d50e      	bpl.n	8006cc2 <_svfiprintf_r+0x32>
 8006ca4:	690b      	ldr	r3, [r1, #16]
 8006ca6:	b963      	cbnz	r3, 8006cc2 <_svfiprintf_r+0x32>
 8006ca8:	2140      	movs	r1, #64	; 0x40
 8006caa:	f7ff ff21 	bl	8006af0 <_malloc_r>
 8006cae:	6028      	str	r0, [r5, #0]
 8006cb0:	6128      	str	r0, [r5, #16]
 8006cb2:	b920      	cbnz	r0, 8006cbe <_svfiprintf_r+0x2e>
 8006cb4:	230c      	movs	r3, #12
 8006cb6:	603b      	str	r3, [r7, #0]
 8006cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8006cbc:	e0d1      	b.n	8006e62 <_svfiprintf_r+0x1d2>
 8006cbe:	2340      	movs	r3, #64	; 0x40
 8006cc0:	616b      	str	r3, [r5, #20]
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	9309      	str	r3, [sp, #36]	; 0x24
 8006cc6:	2320      	movs	r3, #32
 8006cc8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006ccc:	f8cd 800c 	str.w	r8, [sp, #12]
 8006cd0:	2330      	movs	r3, #48	; 0x30
 8006cd2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006e7c <_svfiprintf_r+0x1ec>
 8006cd6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006cda:	f04f 0901 	mov.w	r9, #1
 8006cde:	4623      	mov	r3, r4
 8006ce0:	469a      	mov	sl, r3
 8006ce2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ce6:	b10a      	cbz	r2, 8006cec <_svfiprintf_r+0x5c>
 8006ce8:	2a25      	cmp	r2, #37	; 0x25
 8006cea:	d1f9      	bne.n	8006ce0 <_svfiprintf_r+0x50>
 8006cec:	ebba 0b04 	subs.w	fp, sl, r4
 8006cf0:	d00b      	beq.n	8006d0a <_svfiprintf_r+0x7a>
 8006cf2:	465b      	mov	r3, fp
 8006cf4:	4622      	mov	r2, r4
 8006cf6:	4629      	mov	r1, r5
 8006cf8:	4638      	mov	r0, r7
 8006cfa:	f7ff ff6d 	bl	8006bd8 <__ssputs_r>
 8006cfe:	3001      	adds	r0, #1
 8006d00:	f000 80aa 	beq.w	8006e58 <_svfiprintf_r+0x1c8>
 8006d04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d06:	445a      	add	r2, fp
 8006d08:	9209      	str	r2, [sp, #36]	; 0x24
 8006d0a:	f89a 3000 	ldrb.w	r3, [sl]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	f000 80a2 	beq.w	8006e58 <_svfiprintf_r+0x1c8>
 8006d14:	2300      	movs	r3, #0
 8006d16:	f04f 32ff 	mov.w	r2, #4294967295
 8006d1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d1e:	f10a 0a01 	add.w	sl, sl, #1
 8006d22:	9304      	str	r3, [sp, #16]
 8006d24:	9307      	str	r3, [sp, #28]
 8006d26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006d2a:	931a      	str	r3, [sp, #104]	; 0x68
 8006d2c:	4654      	mov	r4, sl
 8006d2e:	2205      	movs	r2, #5
 8006d30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d34:	4851      	ldr	r0, [pc, #324]	; (8006e7c <_svfiprintf_r+0x1ec>)
 8006d36:	f7f9 fa83 	bl	8000240 <memchr>
 8006d3a:	9a04      	ldr	r2, [sp, #16]
 8006d3c:	b9d8      	cbnz	r0, 8006d76 <_svfiprintf_r+0xe6>
 8006d3e:	06d0      	lsls	r0, r2, #27
 8006d40:	bf44      	itt	mi
 8006d42:	2320      	movmi	r3, #32
 8006d44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d48:	0711      	lsls	r1, r2, #28
 8006d4a:	bf44      	itt	mi
 8006d4c:	232b      	movmi	r3, #43	; 0x2b
 8006d4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d52:	f89a 3000 	ldrb.w	r3, [sl]
 8006d56:	2b2a      	cmp	r3, #42	; 0x2a
 8006d58:	d015      	beq.n	8006d86 <_svfiprintf_r+0xf6>
 8006d5a:	9a07      	ldr	r2, [sp, #28]
 8006d5c:	4654      	mov	r4, sl
 8006d5e:	2000      	movs	r0, #0
 8006d60:	f04f 0c0a 	mov.w	ip, #10
 8006d64:	4621      	mov	r1, r4
 8006d66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d6a:	3b30      	subs	r3, #48	; 0x30
 8006d6c:	2b09      	cmp	r3, #9
 8006d6e:	d94e      	bls.n	8006e0e <_svfiprintf_r+0x17e>
 8006d70:	b1b0      	cbz	r0, 8006da0 <_svfiprintf_r+0x110>
 8006d72:	9207      	str	r2, [sp, #28]
 8006d74:	e014      	b.n	8006da0 <_svfiprintf_r+0x110>
 8006d76:	eba0 0308 	sub.w	r3, r0, r8
 8006d7a:	fa09 f303 	lsl.w	r3, r9, r3
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	9304      	str	r3, [sp, #16]
 8006d82:	46a2      	mov	sl, r4
 8006d84:	e7d2      	b.n	8006d2c <_svfiprintf_r+0x9c>
 8006d86:	9b03      	ldr	r3, [sp, #12]
 8006d88:	1d19      	adds	r1, r3, #4
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	9103      	str	r1, [sp, #12]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	bfbb      	ittet	lt
 8006d92:	425b      	neglt	r3, r3
 8006d94:	f042 0202 	orrlt.w	r2, r2, #2
 8006d98:	9307      	strge	r3, [sp, #28]
 8006d9a:	9307      	strlt	r3, [sp, #28]
 8006d9c:	bfb8      	it	lt
 8006d9e:	9204      	strlt	r2, [sp, #16]
 8006da0:	7823      	ldrb	r3, [r4, #0]
 8006da2:	2b2e      	cmp	r3, #46	; 0x2e
 8006da4:	d10c      	bne.n	8006dc0 <_svfiprintf_r+0x130>
 8006da6:	7863      	ldrb	r3, [r4, #1]
 8006da8:	2b2a      	cmp	r3, #42	; 0x2a
 8006daa:	d135      	bne.n	8006e18 <_svfiprintf_r+0x188>
 8006dac:	9b03      	ldr	r3, [sp, #12]
 8006dae:	1d1a      	adds	r2, r3, #4
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	9203      	str	r2, [sp, #12]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	bfb8      	it	lt
 8006db8:	f04f 33ff 	movlt.w	r3, #4294967295
 8006dbc:	3402      	adds	r4, #2
 8006dbe:	9305      	str	r3, [sp, #20]
 8006dc0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006e8c <_svfiprintf_r+0x1fc>
 8006dc4:	7821      	ldrb	r1, [r4, #0]
 8006dc6:	2203      	movs	r2, #3
 8006dc8:	4650      	mov	r0, sl
 8006dca:	f7f9 fa39 	bl	8000240 <memchr>
 8006dce:	b140      	cbz	r0, 8006de2 <_svfiprintf_r+0x152>
 8006dd0:	2340      	movs	r3, #64	; 0x40
 8006dd2:	eba0 000a 	sub.w	r0, r0, sl
 8006dd6:	fa03 f000 	lsl.w	r0, r3, r0
 8006dda:	9b04      	ldr	r3, [sp, #16]
 8006ddc:	4303      	orrs	r3, r0
 8006dde:	3401      	adds	r4, #1
 8006de0:	9304      	str	r3, [sp, #16]
 8006de2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006de6:	4826      	ldr	r0, [pc, #152]	; (8006e80 <_svfiprintf_r+0x1f0>)
 8006de8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006dec:	2206      	movs	r2, #6
 8006dee:	f7f9 fa27 	bl	8000240 <memchr>
 8006df2:	2800      	cmp	r0, #0
 8006df4:	d038      	beq.n	8006e68 <_svfiprintf_r+0x1d8>
 8006df6:	4b23      	ldr	r3, [pc, #140]	; (8006e84 <_svfiprintf_r+0x1f4>)
 8006df8:	bb1b      	cbnz	r3, 8006e42 <_svfiprintf_r+0x1b2>
 8006dfa:	9b03      	ldr	r3, [sp, #12]
 8006dfc:	3307      	adds	r3, #7
 8006dfe:	f023 0307 	bic.w	r3, r3, #7
 8006e02:	3308      	adds	r3, #8
 8006e04:	9303      	str	r3, [sp, #12]
 8006e06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e08:	4433      	add	r3, r6
 8006e0a:	9309      	str	r3, [sp, #36]	; 0x24
 8006e0c:	e767      	b.n	8006cde <_svfiprintf_r+0x4e>
 8006e0e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e12:	460c      	mov	r4, r1
 8006e14:	2001      	movs	r0, #1
 8006e16:	e7a5      	b.n	8006d64 <_svfiprintf_r+0xd4>
 8006e18:	2300      	movs	r3, #0
 8006e1a:	3401      	adds	r4, #1
 8006e1c:	9305      	str	r3, [sp, #20]
 8006e1e:	4619      	mov	r1, r3
 8006e20:	f04f 0c0a 	mov.w	ip, #10
 8006e24:	4620      	mov	r0, r4
 8006e26:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e2a:	3a30      	subs	r2, #48	; 0x30
 8006e2c:	2a09      	cmp	r2, #9
 8006e2e:	d903      	bls.n	8006e38 <_svfiprintf_r+0x1a8>
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d0c5      	beq.n	8006dc0 <_svfiprintf_r+0x130>
 8006e34:	9105      	str	r1, [sp, #20]
 8006e36:	e7c3      	b.n	8006dc0 <_svfiprintf_r+0x130>
 8006e38:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e3c:	4604      	mov	r4, r0
 8006e3e:	2301      	movs	r3, #1
 8006e40:	e7f0      	b.n	8006e24 <_svfiprintf_r+0x194>
 8006e42:	ab03      	add	r3, sp, #12
 8006e44:	9300      	str	r3, [sp, #0]
 8006e46:	462a      	mov	r2, r5
 8006e48:	4b0f      	ldr	r3, [pc, #60]	; (8006e88 <_svfiprintf_r+0x1f8>)
 8006e4a:	a904      	add	r1, sp, #16
 8006e4c:	4638      	mov	r0, r7
 8006e4e:	f3af 8000 	nop.w
 8006e52:	1c42      	adds	r2, r0, #1
 8006e54:	4606      	mov	r6, r0
 8006e56:	d1d6      	bne.n	8006e06 <_svfiprintf_r+0x176>
 8006e58:	89ab      	ldrh	r3, [r5, #12]
 8006e5a:	065b      	lsls	r3, r3, #25
 8006e5c:	f53f af2c 	bmi.w	8006cb8 <_svfiprintf_r+0x28>
 8006e60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e62:	b01d      	add	sp, #116	; 0x74
 8006e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e68:	ab03      	add	r3, sp, #12
 8006e6a:	9300      	str	r3, [sp, #0]
 8006e6c:	462a      	mov	r2, r5
 8006e6e:	4b06      	ldr	r3, [pc, #24]	; (8006e88 <_svfiprintf_r+0x1f8>)
 8006e70:	a904      	add	r1, sp, #16
 8006e72:	4638      	mov	r0, r7
 8006e74:	f000 f9d4 	bl	8007220 <_printf_i>
 8006e78:	e7eb      	b.n	8006e52 <_svfiprintf_r+0x1c2>
 8006e7a:	bf00      	nop
 8006e7c:	08008289 	.word	0x08008289
 8006e80:	08008293 	.word	0x08008293
 8006e84:	00000000 	.word	0x00000000
 8006e88:	08006bd9 	.word	0x08006bd9
 8006e8c:	0800828f 	.word	0x0800828f

08006e90 <__sfputc_r>:
 8006e90:	6893      	ldr	r3, [r2, #8]
 8006e92:	3b01      	subs	r3, #1
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	b410      	push	{r4}
 8006e98:	6093      	str	r3, [r2, #8]
 8006e9a:	da08      	bge.n	8006eae <__sfputc_r+0x1e>
 8006e9c:	6994      	ldr	r4, [r2, #24]
 8006e9e:	42a3      	cmp	r3, r4
 8006ea0:	db01      	blt.n	8006ea6 <__sfputc_r+0x16>
 8006ea2:	290a      	cmp	r1, #10
 8006ea4:	d103      	bne.n	8006eae <__sfputc_r+0x1e>
 8006ea6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006eaa:	f000 baef 	b.w	800748c <__swbuf_r>
 8006eae:	6813      	ldr	r3, [r2, #0]
 8006eb0:	1c58      	adds	r0, r3, #1
 8006eb2:	6010      	str	r0, [r2, #0]
 8006eb4:	7019      	strb	r1, [r3, #0]
 8006eb6:	4608      	mov	r0, r1
 8006eb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ebc:	4770      	bx	lr

08006ebe <__sfputs_r>:
 8006ebe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ec0:	4606      	mov	r6, r0
 8006ec2:	460f      	mov	r7, r1
 8006ec4:	4614      	mov	r4, r2
 8006ec6:	18d5      	adds	r5, r2, r3
 8006ec8:	42ac      	cmp	r4, r5
 8006eca:	d101      	bne.n	8006ed0 <__sfputs_r+0x12>
 8006ecc:	2000      	movs	r0, #0
 8006ece:	e007      	b.n	8006ee0 <__sfputs_r+0x22>
 8006ed0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ed4:	463a      	mov	r2, r7
 8006ed6:	4630      	mov	r0, r6
 8006ed8:	f7ff ffda 	bl	8006e90 <__sfputc_r>
 8006edc:	1c43      	adds	r3, r0, #1
 8006ede:	d1f3      	bne.n	8006ec8 <__sfputs_r+0xa>
 8006ee0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006ee4 <_vfiprintf_r>:
 8006ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ee8:	460d      	mov	r5, r1
 8006eea:	b09d      	sub	sp, #116	; 0x74
 8006eec:	4614      	mov	r4, r2
 8006eee:	4698      	mov	r8, r3
 8006ef0:	4606      	mov	r6, r0
 8006ef2:	b118      	cbz	r0, 8006efc <_vfiprintf_r+0x18>
 8006ef4:	6983      	ldr	r3, [r0, #24]
 8006ef6:	b90b      	cbnz	r3, 8006efc <_vfiprintf_r+0x18>
 8006ef8:	f000 fcaa 	bl	8007850 <__sinit>
 8006efc:	4b89      	ldr	r3, [pc, #548]	; (8007124 <_vfiprintf_r+0x240>)
 8006efe:	429d      	cmp	r5, r3
 8006f00:	d11b      	bne.n	8006f3a <_vfiprintf_r+0x56>
 8006f02:	6875      	ldr	r5, [r6, #4]
 8006f04:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f06:	07d9      	lsls	r1, r3, #31
 8006f08:	d405      	bmi.n	8006f16 <_vfiprintf_r+0x32>
 8006f0a:	89ab      	ldrh	r3, [r5, #12]
 8006f0c:	059a      	lsls	r2, r3, #22
 8006f0e:	d402      	bmi.n	8006f16 <_vfiprintf_r+0x32>
 8006f10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f12:	f000 fd3b 	bl	800798c <__retarget_lock_acquire_recursive>
 8006f16:	89ab      	ldrh	r3, [r5, #12]
 8006f18:	071b      	lsls	r3, r3, #28
 8006f1a:	d501      	bpl.n	8006f20 <_vfiprintf_r+0x3c>
 8006f1c:	692b      	ldr	r3, [r5, #16]
 8006f1e:	b9eb      	cbnz	r3, 8006f5c <_vfiprintf_r+0x78>
 8006f20:	4629      	mov	r1, r5
 8006f22:	4630      	mov	r0, r6
 8006f24:	f000 fb04 	bl	8007530 <__swsetup_r>
 8006f28:	b1c0      	cbz	r0, 8006f5c <_vfiprintf_r+0x78>
 8006f2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f2c:	07dc      	lsls	r4, r3, #31
 8006f2e:	d50e      	bpl.n	8006f4e <_vfiprintf_r+0x6a>
 8006f30:	f04f 30ff 	mov.w	r0, #4294967295
 8006f34:	b01d      	add	sp, #116	; 0x74
 8006f36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f3a:	4b7b      	ldr	r3, [pc, #492]	; (8007128 <_vfiprintf_r+0x244>)
 8006f3c:	429d      	cmp	r5, r3
 8006f3e:	d101      	bne.n	8006f44 <_vfiprintf_r+0x60>
 8006f40:	68b5      	ldr	r5, [r6, #8]
 8006f42:	e7df      	b.n	8006f04 <_vfiprintf_r+0x20>
 8006f44:	4b79      	ldr	r3, [pc, #484]	; (800712c <_vfiprintf_r+0x248>)
 8006f46:	429d      	cmp	r5, r3
 8006f48:	bf08      	it	eq
 8006f4a:	68f5      	ldreq	r5, [r6, #12]
 8006f4c:	e7da      	b.n	8006f04 <_vfiprintf_r+0x20>
 8006f4e:	89ab      	ldrh	r3, [r5, #12]
 8006f50:	0598      	lsls	r0, r3, #22
 8006f52:	d4ed      	bmi.n	8006f30 <_vfiprintf_r+0x4c>
 8006f54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f56:	f000 fd1a 	bl	800798e <__retarget_lock_release_recursive>
 8006f5a:	e7e9      	b.n	8006f30 <_vfiprintf_r+0x4c>
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	9309      	str	r3, [sp, #36]	; 0x24
 8006f60:	2320      	movs	r3, #32
 8006f62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006f66:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f6a:	2330      	movs	r3, #48	; 0x30
 8006f6c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007130 <_vfiprintf_r+0x24c>
 8006f70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006f74:	f04f 0901 	mov.w	r9, #1
 8006f78:	4623      	mov	r3, r4
 8006f7a:	469a      	mov	sl, r3
 8006f7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f80:	b10a      	cbz	r2, 8006f86 <_vfiprintf_r+0xa2>
 8006f82:	2a25      	cmp	r2, #37	; 0x25
 8006f84:	d1f9      	bne.n	8006f7a <_vfiprintf_r+0x96>
 8006f86:	ebba 0b04 	subs.w	fp, sl, r4
 8006f8a:	d00b      	beq.n	8006fa4 <_vfiprintf_r+0xc0>
 8006f8c:	465b      	mov	r3, fp
 8006f8e:	4622      	mov	r2, r4
 8006f90:	4629      	mov	r1, r5
 8006f92:	4630      	mov	r0, r6
 8006f94:	f7ff ff93 	bl	8006ebe <__sfputs_r>
 8006f98:	3001      	adds	r0, #1
 8006f9a:	f000 80aa 	beq.w	80070f2 <_vfiprintf_r+0x20e>
 8006f9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006fa0:	445a      	add	r2, fp
 8006fa2:	9209      	str	r2, [sp, #36]	; 0x24
 8006fa4:	f89a 3000 	ldrb.w	r3, [sl]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	f000 80a2 	beq.w	80070f2 <_vfiprintf_r+0x20e>
 8006fae:	2300      	movs	r3, #0
 8006fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8006fb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006fb8:	f10a 0a01 	add.w	sl, sl, #1
 8006fbc:	9304      	str	r3, [sp, #16]
 8006fbe:	9307      	str	r3, [sp, #28]
 8006fc0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006fc4:	931a      	str	r3, [sp, #104]	; 0x68
 8006fc6:	4654      	mov	r4, sl
 8006fc8:	2205      	movs	r2, #5
 8006fca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fce:	4858      	ldr	r0, [pc, #352]	; (8007130 <_vfiprintf_r+0x24c>)
 8006fd0:	f7f9 f936 	bl	8000240 <memchr>
 8006fd4:	9a04      	ldr	r2, [sp, #16]
 8006fd6:	b9d8      	cbnz	r0, 8007010 <_vfiprintf_r+0x12c>
 8006fd8:	06d1      	lsls	r1, r2, #27
 8006fda:	bf44      	itt	mi
 8006fdc:	2320      	movmi	r3, #32
 8006fde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006fe2:	0713      	lsls	r3, r2, #28
 8006fe4:	bf44      	itt	mi
 8006fe6:	232b      	movmi	r3, #43	; 0x2b
 8006fe8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006fec:	f89a 3000 	ldrb.w	r3, [sl]
 8006ff0:	2b2a      	cmp	r3, #42	; 0x2a
 8006ff2:	d015      	beq.n	8007020 <_vfiprintf_r+0x13c>
 8006ff4:	9a07      	ldr	r2, [sp, #28]
 8006ff6:	4654      	mov	r4, sl
 8006ff8:	2000      	movs	r0, #0
 8006ffa:	f04f 0c0a 	mov.w	ip, #10
 8006ffe:	4621      	mov	r1, r4
 8007000:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007004:	3b30      	subs	r3, #48	; 0x30
 8007006:	2b09      	cmp	r3, #9
 8007008:	d94e      	bls.n	80070a8 <_vfiprintf_r+0x1c4>
 800700a:	b1b0      	cbz	r0, 800703a <_vfiprintf_r+0x156>
 800700c:	9207      	str	r2, [sp, #28]
 800700e:	e014      	b.n	800703a <_vfiprintf_r+0x156>
 8007010:	eba0 0308 	sub.w	r3, r0, r8
 8007014:	fa09 f303 	lsl.w	r3, r9, r3
 8007018:	4313      	orrs	r3, r2
 800701a:	9304      	str	r3, [sp, #16]
 800701c:	46a2      	mov	sl, r4
 800701e:	e7d2      	b.n	8006fc6 <_vfiprintf_r+0xe2>
 8007020:	9b03      	ldr	r3, [sp, #12]
 8007022:	1d19      	adds	r1, r3, #4
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	9103      	str	r1, [sp, #12]
 8007028:	2b00      	cmp	r3, #0
 800702a:	bfbb      	ittet	lt
 800702c:	425b      	neglt	r3, r3
 800702e:	f042 0202 	orrlt.w	r2, r2, #2
 8007032:	9307      	strge	r3, [sp, #28]
 8007034:	9307      	strlt	r3, [sp, #28]
 8007036:	bfb8      	it	lt
 8007038:	9204      	strlt	r2, [sp, #16]
 800703a:	7823      	ldrb	r3, [r4, #0]
 800703c:	2b2e      	cmp	r3, #46	; 0x2e
 800703e:	d10c      	bne.n	800705a <_vfiprintf_r+0x176>
 8007040:	7863      	ldrb	r3, [r4, #1]
 8007042:	2b2a      	cmp	r3, #42	; 0x2a
 8007044:	d135      	bne.n	80070b2 <_vfiprintf_r+0x1ce>
 8007046:	9b03      	ldr	r3, [sp, #12]
 8007048:	1d1a      	adds	r2, r3, #4
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	9203      	str	r2, [sp, #12]
 800704e:	2b00      	cmp	r3, #0
 8007050:	bfb8      	it	lt
 8007052:	f04f 33ff 	movlt.w	r3, #4294967295
 8007056:	3402      	adds	r4, #2
 8007058:	9305      	str	r3, [sp, #20]
 800705a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007140 <_vfiprintf_r+0x25c>
 800705e:	7821      	ldrb	r1, [r4, #0]
 8007060:	2203      	movs	r2, #3
 8007062:	4650      	mov	r0, sl
 8007064:	f7f9 f8ec 	bl	8000240 <memchr>
 8007068:	b140      	cbz	r0, 800707c <_vfiprintf_r+0x198>
 800706a:	2340      	movs	r3, #64	; 0x40
 800706c:	eba0 000a 	sub.w	r0, r0, sl
 8007070:	fa03 f000 	lsl.w	r0, r3, r0
 8007074:	9b04      	ldr	r3, [sp, #16]
 8007076:	4303      	orrs	r3, r0
 8007078:	3401      	adds	r4, #1
 800707a:	9304      	str	r3, [sp, #16]
 800707c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007080:	482c      	ldr	r0, [pc, #176]	; (8007134 <_vfiprintf_r+0x250>)
 8007082:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007086:	2206      	movs	r2, #6
 8007088:	f7f9 f8da 	bl	8000240 <memchr>
 800708c:	2800      	cmp	r0, #0
 800708e:	d03f      	beq.n	8007110 <_vfiprintf_r+0x22c>
 8007090:	4b29      	ldr	r3, [pc, #164]	; (8007138 <_vfiprintf_r+0x254>)
 8007092:	bb1b      	cbnz	r3, 80070dc <_vfiprintf_r+0x1f8>
 8007094:	9b03      	ldr	r3, [sp, #12]
 8007096:	3307      	adds	r3, #7
 8007098:	f023 0307 	bic.w	r3, r3, #7
 800709c:	3308      	adds	r3, #8
 800709e:	9303      	str	r3, [sp, #12]
 80070a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070a2:	443b      	add	r3, r7
 80070a4:	9309      	str	r3, [sp, #36]	; 0x24
 80070a6:	e767      	b.n	8006f78 <_vfiprintf_r+0x94>
 80070a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80070ac:	460c      	mov	r4, r1
 80070ae:	2001      	movs	r0, #1
 80070b0:	e7a5      	b.n	8006ffe <_vfiprintf_r+0x11a>
 80070b2:	2300      	movs	r3, #0
 80070b4:	3401      	adds	r4, #1
 80070b6:	9305      	str	r3, [sp, #20]
 80070b8:	4619      	mov	r1, r3
 80070ba:	f04f 0c0a 	mov.w	ip, #10
 80070be:	4620      	mov	r0, r4
 80070c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80070c4:	3a30      	subs	r2, #48	; 0x30
 80070c6:	2a09      	cmp	r2, #9
 80070c8:	d903      	bls.n	80070d2 <_vfiprintf_r+0x1ee>
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d0c5      	beq.n	800705a <_vfiprintf_r+0x176>
 80070ce:	9105      	str	r1, [sp, #20]
 80070d0:	e7c3      	b.n	800705a <_vfiprintf_r+0x176>
 80070d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80070d6:	4604      	mov	r4, r0
 80070d8:	2301      	movs	r3, #1
 80070da:	e7f0      	b.n	80070be <_vfiprintf_r+0x1da>
 80070dc:	ab03      	add	r3, sp, #12
 80070de:	9300      	str	r3, [sp, #0]
 80070e0:	462a      	mov	r2, r5
 80070e2:	4b16      	ldr	r3, [pc, #88]	; (800713c <_vfiprintf_r+0x258>)
 80070e4:	a904      	add	r1, sp, #16
 80070e6:	4630      	mov	r0, r6
 80070e8:	f3af 8000 	nop.w
 80070ec:	4607      	mov	r7, r0
 80070ee:	1c78      	adds	r0, r7, #1
 80070f0:	d1d6      	bne.n	80070a0 <_vfiprintf_r+0x1bc>
 80070f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80070f4:	07d9      	lsls	r1, r3, #31
 80070f6:	d405      	bmi.n	8007104 <_vfiprintf_r+0x220>
 80070f8:	89ab      	ldrh	r3, [r5, #12]
 80070fa:	059a      	lsls	r2, r3, #22
 80070fc:	d402      	bmi.n	8007104 <_vfiprintf_r+0x220>
 80070fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007100:	f000 fc45 	bl	800798e <__retarget_lock_release_recursive>
 8007104:	89ab      	ldrh	r3, [r5, #12]
 8007106:	065b      	lsls	r3, r3, #25
 8007108:	f53f af12 	bmi.w	8006f30 <_vfiprintf_r+0x4c>
 800710c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800710e:	e711      	b.n	8006f34 <_vfiprintf_r+0x50>
 8007110:	ab03      	add	r3, sp, #12
 8007112:	9300      	str	r3, [sp, #0]
 8007114:	462a      	mov	r2, r5
 8007116:	4b09      	ldr	r3, [pc, #36]	; (800713c <_vfiprintf_r+0x258>)
 8007118:	a904      	add	r1, sp, #16
 800711a:	4630      	mov	r0, r6
 800711c:	f000 f880 	bl	8007220 <_printf_i>
 8007120:	e7e4      	b.n	80070ec <_vfiprintf_r+0x208>
 8007122:	bf00      	nop
 8007124:	080082dc 	.word	0x080082dc
 8007128:	080082fc 	.word	0x080082fc
 800712c:	080082bc 	.word	0x080082bc
 8007130:	08008289 	.word	0x08008289
 8007134:	08008293 	.word	0x08008293
 8007138:	00000000 	.word	0x00000000
 800713c:	08006ebf 	.word	0x08006ebf
 8007140:	0800828f 	.word	0x0800828f

08007144 <_printf_common>:
 8007144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007148:	4616      	mov	r6, r2
 800714a:	4699      	mov	r9, r3
 800714c:	688a      	ldr	r2, [r1, #8]
 800714e:	690b      	ldr	r3, [r1, #16]
 8007150:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007154:	4293      	cmp	r3, r2
 8007156:	bfb8      	it	lt
 8007158:	4613      	movlt	r3, r2
 800715a:	6033      	str	r3, [r6, #0]
 800715c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007160:	4607      	mov	r7, r0
 8007162:	460c      	mov	r4, r1
 8007164:	b10a      	cbz	r2, 800716a <_printf_common+0x26>
 8007166:	3301      	adds	r3, #1
 8007168:	6033      	str	r3, [r6, #0]
 800716a:	6823      	ldr	r3, [r4, #0]
 800716c:	0699      	lsls	r1, r3, #26
 800716e:	bf42      	ittt	mi
 8007170:	6833      	ldrmi	r3, [r6, #0]
 8007172:	3302      	addmi	r3, #2
 8007174:	6033      	strmi	r3, [r6, #0]
 8007176:	6825      	ldr	r5, [r4, #0]
 8007178:	f015 0506 	ands.w	r5, r5, #6
 800717c:	d106      	bne.n	800718c <_printf_common+0x48>
 800717e:	f104 0a19 	add.w	sl, r4, #25
 8007182:	68e3      	ldr	r3, [r4, #12]
 8007184:	6832      	ldr	r2, [r6, #0]
 8007186:	1a9b      	subs	r3, r3, r2
 8007188:	42ab      	cmp	r3, r5
 800718a:	dc26      	bgt.n	80071da <_printf_common+0x96>
 800718c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007190:	1e13      	subs	r3, r2, #0
 8007192:	6822      	ldr	r2, [r4, #0]
 8007194:	bf18      	it	ne
 8007196:	2301      	movne	r3, #1
 8007198:	0692      	lsls	r2, r2, #26
 800719a:	d42b      	bmi.n	80071f4 <_printf_common+0xb0>
 800719c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80071a0:	4649      	mov	r1, r9
 80071a2:	4638      	mov	r0, r7
 80071a4:	47c0      	blx	r8
 80071a6:	3001      	adds	r0, #1
 80071a8:	d01e      	beq.n	80071e8 <_printf_common+0xa4>
 80071aa:	6823      	ldr	r3, [r4, #0]
 80071ac:	68e5      	ldr	r5, [r4, #12]
 80071ae:	6832      	ldr	r2, [r6, #0]
 80071b0:	f003 0306 	and.w	r3, r3, #6
 80071b4:	2b04      	cmp	r3, #4
 80071b6:	bf08      	it	eq
 80071b8:	1aad      	subeq	r5, r5, r2
 80071ba:	68a3      	ldr	r3, [r4, #8]
 80071bc:	6922      	ldr	r2, [r4, #16]
 80071be:	bf0c      	ite	eq
 80071c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80071c4:	2500      	movne	r5, #0
 80071c6:	4293      	cmp	r3, r2
 80071c8:	bfc4      	itt	gt
 80071ca:	1a9b      	subgt	r3, r3, r2
 80071cc:	18ed      	addgt	r5, r5, r3
 80071ce:	2600      	movs	r6, #0
 80071d0:	341a      	adds	r4, #26
 80071d2:	42b5      	cmp	r5, r6
 80071d4:	d11a      	bne.n	800720c <_printf_common+0xc8>
 80071d6:	2000      	movs	r0, #0
 80071d8:	e008      	b.n	80071ec <_printf_common+0xa8>
 80071da:	2301      	movs	r3, #1
 80071dc:	4652      	mov	r2, sl
 80071de:	4649      	mov	r1, r9
 80071e0:	4638      	mov	r0, r7
 80071e2:	47c0      	blx	r8
 80071e4:	3001      	adds	r0, #1
 80071e6:	d103      	bne.n	80071f0 <_printf_common+0xac>
 80071e8:	f04f 30ff 	mov.w	r0, #4294967295
 80071ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071f0:	3501      	adds	r5, #1
 80071f2:	e7c6      	b.n	8007182 <_printf_common+0x3e>
 80071f4:	18e1      	adds	r1, r4, r3
 80071f6:	1c5a      	adds	r2, r3, #1
 80071f8:	2030      	movs	r0, #48	; 0x30
 80071fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80071fe:	4422      	add	r2, r4
 8007200:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007204:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007208:	3302      	adds	r3, #2
 800720a:	e7c7      	b.n	800719c <_printf_common+0x58>
 800720c:	2301      	movs	r3, #1
 800720e:	4622      	mov	r2, r4
 8007210:	4649      	mov	r1, r9
 8007212:	4638      	mov	r0, r7
 8007214:	47c0      	blx	r8
 8007216:	3001      	adds	r0, #1
 8007218:	d0e6      	beq.n	80071e8 <_printf_common+0xa4>
 800721a:	3601      	adds	r6, #1
 800721c:	e7d9      	b.n	80071d2 <_printf_common+0x8e>
	...

08007220 <_printf_i>:
 8007220:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007224:	7e0f      	ldrb	r7, [r1, #24]
 8007226:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007228:	2f78      	cmp	r7, #120	; 0x78
 800722a:	4691      	mov	r9, r2
 800722c:	4680      	mov	r8, r0
 800722e:	460c      	mov	r4, r1
 8007230:	469a      	mov	sl, r3
 8007232:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007236:	d807      	bhi.n	8007248 <_printf_i+0x28>
 8007238:	2f62      	cmp	r7, #98	; 0x62
 800723a:	d80a      	bhi.n	8007252 <_printf_i+0x32>
 800723c:	2f00      	cmp	r7, #0
 800723e:	f000 80d8 	beq.w	80073f2 <_printf_i+0x1d2>
 8007242:	2f58      	cmp	r7, #88	; 0x58
 8007244:	f000 80a3 	beq.w	800738e <_printf_i+0x16e>
 8007248:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800724c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007250:	e03a      	b.n	80072c8 <_printf_i+0xa8>
 8007252:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007256:	2b15      	cmp	r3, #21
 8007258:	d8f6      	bhi.n	8007248 <_printf_i+0x28>
 800725a:	a101      	add	r1, pc, #4	; (adr r1, 8007260 <_printf_i+0x40>)
 800725c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007260:	080072b9 	.word	0x080072b9
 8007264:	080072cd 	.word	0x080072cd
 8007268:	08007249 	.word	0x08007249
 800726c:	08007249 	.word	0x08007249
 8007270:	08007249 	.word	0x08007249
 8007274:	08007249 	.word	0x08007249
 8007278:	080072cd 	.word	0x080072cd
 800727c:	08007249 	.word	0x08007249
 8007280:	08007249 	.word	0x08007249
 8007284:	08007249 	.word	0x08007249
 8007288:	08007249 	.word	0x08007249
 800728c:	080073d9 	.word	0x080073d9
 8007290:	080072fd 	.word	0x080072fd
 8007294:	080073bb 	.word	0x080073bb
 8007298:	08007249 	.word	0x08007249
 800729c:	08007249 	.word	0x08007249
 80072a0:	080073fb 	.word	0x080073fb
 80072a4:	08007249 	.word	0x08007249
 80072a8:	080072fd 	.word	0x080072fd
 80072ac:	08007249 	.word	0x08007249
 80072b0:	08007249 	.word	0x08007249
 80072b4:	080073c3 	.word	0x080073c3
 80072b8:	682b      	ldr	r3, [r5, #0]
 80072ba:	1d1a      	adds	r2, r3, #4
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	602a      	str	r2, [r5, #0]
 80072c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80072c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80072c8:	2301      	movs	r3, #1
 80072ca:	e0a3      	b.n	8007414 <_printf_i+0x1f4>
 80072cc:	6820      	ldr	r0, [r4, #0]
 80072ce:	6829      	ldr	r1, [r5, #0]
 80072d0:	0606      	lsls	r6, r0, #24
 80072d2:	f101 0304 	add.w	r3, r1, #4
 80072d6:	d50a      	bpl.n	80072ee <_printf_i+0xce>
 80072d8:	680e      	ldr	r6, [r1, #0]
 80072da:	602b      	str	r3, [r5, #0]
 80072dc:	2e00      	cmp	r6, #0
 80072de:	da03      	bge.n	80072e8 <_printf_i+0xc8>
 80072e0:	232d      	movs	r3, #45	; 0x2d
 80072e2:	4276      	negs	r6, r6
 80072e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072e8:	485e      	ldr	r0, [pc, #376]	; (8007464 <_printf_i+0x244>)
 80072ea:	230a      	movs	r3, #10
 80072ec:	e019      	b.n	8007322 <_printf_i+0x102>
 80072ee:	680e      	ldr	r6, [r1, #0]
 80072f0:	602b      	str	r3, [r5, #0]
 80072f2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80072f6:	bf18      	it	ne
 80072f8:	b236      	sxthne	r6, r6
 80072fa:	e7ef      	b.n	80072dc <_printf_i+0xbc>
 80072fc:	682b      	ldr	r3, [r5, #0]
 80072fe:	6820      	ldr	r0, [r4, #0]
 8007300:	1d19      	adds	r1, r3, #4
 8007302:	6029      	str	r1, [r5, #0]
 8007304:	0601      	lsls	r1, r0, #24
 8007306:	d501      	bpl.n	800730c <_printf_i+0xec>
 8007308:	681e      	ldr	r6, [r3, #0]
 800730a:	e002      	b.n	8007312 <_printf_i+0xf2>
 800730c:	0646      	lsls	r6, r0, #25
 800730e:	d5fb      	bpl.n	8007308 <_printf_i+0xe8>
 8007310:	881e      	ldrh	r6, [r3, #0]
 8007312:	4854      	ldr	r0, [pc, #336]	; (8007464 <_printf_i+0x244>)
 8007314:	2f6f      	cmp	r7, #111	; 0x6f
 8007316:	bf0c      	ite	eq
 8007318:	2308      	moveq	r3, #8
 800731a:	230a      	movne	r3, #10
 800731c:	2100      	movs	r1, #0
 800731e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007322:	6865      	ldr	r5, [r4, #4]
 8007324:	60a5      	str	r5, [r4, #8]
 8007326:	2d00      	cmp	r5, #0
 8007328:	bfa2      	ittt	ge
 800732a:	6821      	ldrge	r1, [r4, #0]
 800732c:	f021 0104 	bicge.w	r1, r1, #4
 8007330:	6021      	strge	r1, [r4, #0]
 8007332:	b90e      	cbnz	r6, 8007338 <_printf_i+0x118>
 8007334:	2d00      	cmp	r5, #0
 8007336:	d04d      	beq.n	80073d4 <_printf_i+0x1b4>
 8007338:	4615      	mov	r5, r2
 800733a:	fbb6 f1f3 	udiv	r1, r6, r3
 800733e:	fb03 6711 	mls	r7, r3, r1, r6
 8007342:	5dc7      	ldrb	r7, [r0, r7]
 8007344:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007348:	4637      	mov	r7, r6
 800734a:	42bb      	cmp	r3, r7
 800734c:	460e      	mov	r6, r1
 800734e:	d9f4      	bls.n	800733a <_printf_i+0x11a>
 8007350:	2b08      	cmp	r3, #8
 8007352:	d10b      	bne.n	800736c <_printf_i+0x14c>
 8007354:	6823      	ldr	r3, [r4, #0]
 8007356:	07de      	lsls	r6, r3, #31
 8007358:	d508      	bpl.n	800736c <_printf_i+0x14c>
 800735a:	6923      	ldr	r3, [r4, #16]
 800735c:	6861      	ldr	r1, [r4, #4]
 800735e:	4299      	cmp	r1, r3
 8007360:	bfde      	ittt	le
 8007362:	2330      	movle	r3, #48	; 0x30
 8007364:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007368:	f105 35ff 	addle.w	r5, r5, #4294967295
 800736c:	1b52      	subs	r2, r2, r5
 800736e:	6122      	str	r2, [r4, #16]
 8007370:	f8cd a000 	str.w	sl, [sp]
 8007374:	464b      	mov	r3, r9
 8007376:	aa03      	add	r2, sp, #12
 8007378:	4621      	mov	r1, r4
 800737a:	4640      	mov	r0, r8
 800737c:	f7ff fee2 	bl	8007144 <_printf_common>
 8007380:	3001      	adds	r0, #1
 8007382:	d14c      	bne.n	800741e <_printf_i+0x1fe>
 8007384:	f04f 30ff 	mov.w	r0, #4294967295
 8007388:	b004      	add	sp, #16
 800738a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800738e:	4835      	ldr	r0, [pc, #212]	; (8007464 <_printf_i+0x244>)
 8007390:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007394:	6829      	ldr	r1, [r5, #0]
 8007396:	6823      	ldr	r3, [r4, #0]
 8007398:	f851 6b04 	ldr.w	r6, [r1], #4
 800739c:	6029      	str	r1, [r5, #0]
 800739e:	061d      	lsls	r5, r3, #24
 80073a0:	d514      	bpl.n	80073cc <_printf_i+0x1ac>
 80073a2:	07df      	lsls	r7, r3, #31
 80073a4:	bf44      	itt	mi
 80073a6:	f043 0320 	orrmi.w	r3, r3, #32
 80073aa:	6023      	strmi	r3, [r4, #0]
 80073ac:	b91e      	cbnz	r6, 80073b6 <_printf_i+0x196>
 80073ae:	6823      	ldr	r3, [r4, #0]
 80073b0:	f023 0320 	bic.w	r3, r3, #32
 80073b4:	6023      	str	r3, [r4, #0]
 80073b6:	2310      	movs	r3, #16
 80073b8:	e7b0      	b.n	800731c <_printf_i+0xfc>
 80073ba:	6823      	ldr	r3, [r4, #0]
 80073bc:	f043 0320 	orr.w	r3, r3, #32
 80073c0:	6023      	str	r3, [r4, #0]
 80073c2:	2378      	movs	r3, #120	; 0x78
 80073c4:	4828      	ldr	r0, [pc, #160]	; (8007468 <_printf_i+0x248>)
 80073c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80073ca:	e7e3      	b.n	8007394 <_printf_i+0x174>
 80073cc:	0659      	lsls	r1, r3, #25
 80073ce:	bf48      	it	mi
 80073d0:	b2b6      	uxthmi	r6, r6
 80073d2:	e7e6      	b.n	80073a2 <_printf_i+0x182>
 80073d4:	4615      	mov	r5, r2
 80073d6:	e7bb      	b.n	8007350 <_printf_i+0x130>
 80073d8:	682b      	ldr	r3, [r5, #0]
 80073da:	6826      	ldr	r6, [r4, #0]
 80073dc:	6961      	ldr	r1, [r4, #20]
 80073de:	1d18      	adds	r0, r3, #4
 80073e0:	6028      	str	r0, [r5, #0]
 80073e2:	0635      	lsls	r5, r6, #24
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	d501      	bpl.n	80073ec <_printf_i+0x1cc>
 80073e8:	6019      	str	r1, [r3, #0]
 80073ea:	e002      	b.n	80073f2 <_printf_i+0x1d2>
 80073ec:	0670      	lsls	r0, r6, #25
 80073ee:	d5fb      	bpl.n	80073e8 <_printf_i+0x1c8>
 80073f0:	8019      	strh	r1, [r3, #0]
 80073f2:	2300      	movs	r3, #0
 80073f4:	6123      	str	r3, [r4, #16]
 80073f6:	4615      	mov	r5, r2
 80073f8:	e7ba      	b.n	8007370 <_printf_i+0x150>
 80073fa:	682b      	ldr	r3, [r5, #0]
 80073fc:	1d1a      	adds	r2, r3, #4
 80073fe:	602a      	str	r2, [r5, #0]
 8007400:	681d      	ldr	r5, [r3, #0]
 8007402:	6862      	ldr	r2, [r4, #4]
 8007404:	2100      	movs	r1, #0
 8007406:	4628      	mov	r0, r5
 8007408:	f7f8 ff1a 	bl	8000240 <memchr>
 800740c:	b108      	cbz	r0, 8007412 <_printf_i+0x1f2>
 800740e:	1b40      	subs	r0, r0, r5
 8007410:	6060      	str	r0, [r4, #4]
 8007412:	6863      	ldr	r3, [r4, #4]
 8007414:	6123      	str	r3, [r4, #16]
 8007416:	2300      	movs	r3, #0
 8007418:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800741c:	e7a8      	b.n	8007370 <_printf_i+0x150>
 800741e:	6923      	ldr	r3, [r4, #16]
 8007420:	462a      	mov	r2, r5
 8007422:	4649      	mov	r1, r9
 8007424:	4640      	mov	r0, r8
 8007426:	47d0      	blx	sl
 8007428:	3001      	adds	r0, #1
 800742a:	d0ab      	beq.n	8007384 <_printf_i+0x164>
 800742c:	6823      	ldr	r3, [r4, #0]
 800742e:	079b      	lsls	r3, r3, #30
 8007430:	d413      	bmi.n	800745a <_printf_i+0x23a>
 8007432:	68e0      	ldr	r0, [r4, #12]
 8007434:	9b03      	ldr	r3, [sp, #12]
 8007436:	4298      	cmp	r0, r3
 8007438:	bfb8      	it	lt
 800743a:	4618      	movlt	r0, r3
 800743c:	e7a4      	b.n	8007388 <_printf_i+0x168>
 800743e:	2301      	movs	r3, #1
 8007440:	4632      	mov	r2, r6
 8007442:	4649      	mov	r1, r9
 8007444:	4640      	mov	r0, r8
 8007446:	47d0      	blx	sl
 8007448:	3001      	adds	r0, #1
 800744a:	d09b      	beq.n	8007384 <_printf_i+0x164>
 800744c:	3501      	adds	r5, #1
 800744e:	68e3      	ldr	r3, [r4, #12]
 8007450:	9903      	ldr	r1, [sp, #12]
 8007452:	1a5b      	subs	r3, r3, r1
 8007454:	42ab      	cmp	r3, r5
 8007456:	dcf2      	bgt.n	800743e <_printf_i+0x21e>
 8007458:	e7eb      	b.n	8007432 <_printf_i+0x212>
 800745a:	2500      	movs	r5, #0
 800745c:	f104 0619 	add.w	r6, r4, #25
 8007460:	e7f5      	b.n	800744e <_printf_i+0x22e>
 8007462:	bf00      	nop
 8007464:	0800829a 	.word	0x0800829a
 8007468:	080082ab 	.word	0x080082ab

0800746c <_sbrk_r>:
 800746c:	b538      	push	{r3, r4, r5, lr}
 800746e:	4d06      	ldr	r5, [pc, #24]	; (8007488 <_sbrk_r+0x1c>)
 8007470:	2300      	movs	r3, #0
 8007472:	4604      	mov	r4, r0
 8007474:	4608      	mov	r0, r1
 8007476:	602b      	str	r3, [r5, #0]
 8007478:	f7f9 fd36 	bl	8000ee8 <_sbrk>
 800747c:	1c43      	adds	r3, r0, #1
 800747e:	d102      	bne.n	8007486 <_sbrk_r+0x1a>
 8007480:	682b      	ldr	r3, [r5, #0]
 8007482:	b103      	cbz	r3, 8007486 <_sbrk_r+0x1a>
 8007484:	6023      	str	r3, [r4, #0]
 8007486:	bd38      	pop	{r3, r4, r5, pc}
 8007488:	20000284 	.word	0x20000284

0800748c <__swbuf_r>:
 800748c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800748e:	460e      	mov	r6, r1
 8007490:	4614      	mov	r4, r2
 8007492:	4605      	mov	r5, r0
 8007494:	b118      	cbz	r0, 800749e <__swbuf_r+0x12>
 8007496:	6983      	ldr	r3, [r0, #24]
 8007498:	b90b      	cbnz	r3, 800749e <__swbuf_r+0x12>
 800749a:	f000 f9d9 	bl	8007850 <__sinit>
 800749e:	4b21      	ldr	r3, [pc, #132]	; (8007524 <__swbuf_r+0x98>)
 80074a0:	429c      	cmp	r4, r3
 80074a2:	d12b      	bne.n	80074fc <__swbuf_r+0x70>
 80074a4:	686c      	ldr	r4, [r5, #4]
 80074a6:	69a3      	ldr	r3, [r4, #24]
 80074a8:	60a3      	str	r3, [r4, #8]
 80074aa:	89a3      	ldrh	r3, [r4, #12]
 80074ac:	071a      	lsls	r2, r3, #28
 80074ae:	d52f      	bpl.n	8007510 <__swbuf_r+0x84>
 80074b0:	6923      	ldr	r3, [r4, #16]
 80074b2:	b36b      	cbz	r3, 8007510 <__swbuf_r+0x84>
 80074b4:	6923      	ldr	r3, [r4, #16]
 80074b6:	6820      	ldr	r0, [r4, #0]
 80074b8:	1ac0      	subs	r0, r0, r3
 80074ba:	6963      	ldr	r3, [r4, #20]
 80074bc:	b2f6      	uxtb	r6, r6
 80074be:	4283      	cmp	r3, r0
 80074c0:	4637      	mov	r7, r6
 80074c2:	dc04      	bgt.n	80074ce <__swbuf_r+0x42>
 80074c4:	4621      	mov	r1, r4
 80074c6:	4628      	mov	r0, r5
 80074c8:	f000 f92e 	bl	8007728 <_fflush_r>
 80074cc:	bb30      	cbnz	r0, 800751c <__swbuf_r+0x90>
 80074ce:	68a3      	ldr	r3, [r4, #8]
 80074d0:	3b01      	subs	r3, #1
 80074d2:	60a3      	str	r3, [r4, #8]
 80074d4:	6823      	ldr	r3, [r4, #0]
 80074d6:	1c5a      	adds	r2, r3, #1
 80074d8:	6022      	str	r2, [r4, #0]
 80074da:	701e      	strb	r6, [r3, #0]
 80074dc:	6963      	ldr	r3, [r4, #20]
 80074de:	3001      	adds	r0, #1
 80074e0:	4283      	cmp	r3, r0
 80074e2:	d004      	beq.n	80074ee <__swbuf_r+0x62>
 80074e4:	89a3      	ldrh	r3, [r4, #12]
 80074e6:	07db      	lsls	r3, r3, #31
 80074e8:	d506      	bpl.n	80074f8 <__swbuf_r+0x6c>
 80074ea:	2e0a      	cmp	r6, #10
 80074ec:	d104      	bne.n	80074f8 <__swbuf_r+0x6c>
 80074ee:	4621      	mov	r1, r4
 80074f0:	4628      	mov	r0, r5
 80074f2:	f000 f919 	bl	8007728 <_fflush_r>
 80074f6:	b988      	cbnz	r0, 800751c <__swbuf_r+0x90>
 80074f8:	4638      	mov	r0, r7
 80074fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074fc:	4b0a      	ldr	r3, [pc, #40]	; (8007528 <__swbuf_r+0x9c>)
 80074fe:	429c      	cmp	r4, r3
 8007500:	d101      	bne.n	8007506 <__swbuf_r+0x7a>
 8007502:	68ac      	ldr	r4, [r5, #8]
 8007504:	e7cf      	b.n	80074a6 <__swbuf_r+0x1a>
 8007506:	4b09      	ldr	r3, [pc, #36]	; (800752c <__swbuf_r+0xa0>)
 8007508:	429c      	cmp	r4, r3
 800750a:	bf08      	it	eq
 800750c:	68ec      	ldreq	r4, [r5, #12]
 800750e:	e7ca      	b.n	80074a6 <__swbuf_r+0x1a>
 8007510:	4621      	mov	r1, r4
 8007512:	4628      	mov	r0, r5
 8007514:	f000 f80c 	bl	8007530 <__swsetup_r>
 8007518:	2800      	cmp	r0, #0
 800751a:	d0cb      	beq.n	80074b4 <__swbuf_r+0x28>
 800751c:	f04f 37ff 	mov.w	r7, #4294967295
 8007520:	e7ea      	b.n	80074f8 <__swbuf_r+0x6c>
 8007522:	bf00      	nop
 8007524:	080082dc 	.word	0x080082dc
 8007528:	080082fc 	.word	0x080082fc
 800752c:	080082bc 	.word	0x080082bc

08007530 <__swsetup_r>:
 8007530:	4b32      	ldr	r3, [pc, #200]	; (80075fc <__swsetup_r+0xcc>)
 8007532:	b570      	push	{r4, r5, r6, lr}
 8007534:	681d      	ldr	r5, [r3, #0]
 8007536:	4606      	mov	r6, r0
 8007538:	460c      	mov	r4, r1
 800753a:	b125      	cbz	r5, 8007546 <__swsetup_r+0x16>
 800753c:	69ab      	ldr	r3, [r5, #24]
 800753e:	b913      	cbnz	r3, 8007546 <__swsetup_r+0x16>
 8007540:	4628      	mov	r0, r5
 8007542:	f000 f985 	bl	8007850 <__sinit>
 8007546:	4b2e      	ldr	r3, [pc, #184]	; (8007600 <__swsetup_r+0xd0>)
 8007548:	429c      	cmp	r4, r3
 800754a:	d10f      	bne.n	800756c <__swsetup_r+0x3c>
 800754c:	686c      	ldr	r4, [r5, #4]
 800754e:	89a3      	ldrh	r3, [r4, #12]
 8007550:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007554:	0719      	lsls	r1, r3, #28
 8007556:	d42c      	bmi.n	80075b2 <__swsetup_r+0x82>
 8007558:	06dd      	lsls	r5, r3, #27
 800755a:	d411      	bmi.n	8007580 <__swsetup_r+0x50>
 800755c:	2309      	movs	r3, #9
 800755e:	6033      	str	r3, [r6, #0]
 8007560:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007564:	81a3      	strh	r3, [r4, #12]
 8007566:	f04f 30ff 	mov.w	r0, #4294967295
 800756a:	e03e      	b.n	80075ea <__swsetup_r+0xba>
 800756c:	4b25      	ldr	r3, [pc, #148]	; (8007604 <__swsetup_r+0xd4>)
 800756e:	429c      	cmp	r4, r3
 8007570:	d101      	bne.n	8007576 <__swsetup_r+0x46>
 8007572:	68ac      	ldr	r4, [r5, #8]
 8007574:	e7eb      	b.n	800754e <__swsetup_r+0x1e>
 8007576:	4b24      	ldr	r3, [pc, #144]	; (8007608 <__swsetup_r+0xd8>)
 8007578:	429c      	cmp	r4, r3
 800757a:	bf08      	it	eq
 800757c:	68ec      	ldreq	r4, [r5, #12]
 800757e:	e7e6      	b.n	800754e <__swsetup_r+0x1e>
 8007580:	0758      	lsls	r0, r3, #29
 8007582:	d512      	bpl.n	80075aa <__swsetup_r+0x7a>
 8007584:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007586:	b141      	cbz	r1, 800759a <__swsetup_r+0x6a>
 8007588:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800758c:	4299      	cmp	r1, r3
 800758e:	d002      	beq.n	8007596 <__swsetup_r+0x66>
 8007590:	4630      	mov	r0, r6
 8007592:	f7ff fa41 	bl	8006a18 <_free_r>
 8007596:	2300      	movs	r3, #0
 8007598:	6363      	str	r3, [r4, #52]	; 0x34
 800759a:	89a3      	ldrh	r3, [r4, #12]
 800759c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80075a0:	81a3      	strh	r3, [r4, #12]
 80075a2:	2300      	movs	r3, #0
 80075a4:	6063      	str	r3, [r4, #4]
 80075a6:	6923      	ldr	r3, [r4, #16]
 80075a8:	6023      	str	r3, [r4, #0]
 80075aa:	89a3      	ldrh	r3, [r4, #12]
 80075ac:	f043 0308 	orr.w	r3, r3, #8
 80075b0:	81a3      	strh	r3, [r4, #12]
 80075b2:	6923      	ldr	r3, [r4, #16]
 80075b4:	b94b      	cbnz	r3, 80075ca <__swsetup_r+0x9a>
 80075b6:	89a3      	ldrh	r3, [r4, #12]
 80075b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80075bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075c0:	d003      	beq.n	80075ca <__swsetup_r+0x9a>
 80075c2:	4621      	mov	r1, r4
 80075c4:	4630      	mov	r0, r6
 80075c6:	f000 fa09 	bl	80079dc <__smakebuf_r>
 80075ca:	89a0      	ldrh	r0, [r4, #12]
 80075cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80075d0:	f010 0301 	ands.w	r3, r0, #1
 80075d4:	d00a      	beq.n	80075ec <__swsetup_r+0xbc>
 80075d6:	2300      	movs	r3, #0
 80075d8:	60a3      	str	r3, [r4, #8]
 80075da:	6963      	ldr	r3, [r4, #20]
 80075dc:	425b      	negs	r3, r3
 80075de:	61a3      	str	r3, [r4, #24]
 80075e0:	6923      	ldr	r3, [r4, #16]
 80075e2:	b943      	cbnz	r3, 80075f6 <__swsetup_r+0xc6>
 80075e4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80075e8:	d1ba      	bne.n	8007560 <__swsetup_r+0x30>
 80075ea:	bd70      	pop	{r4, r5, r6, pc}
 80075ec:	0781      	lsls	r1, r0, #30
 80075ee:	bf58      	it	pl
 80075f0:	6963      	ldrpl	r3, [r4, #20]
 80075f2:	60a3      	str	r3, [r4, #8]
 80075f4:	e7f4      	b.n	80075e0 <__swsetup_r+0xb0>
 80075f6:	2000      	movs	r0, #0
 80075f8:	e7f7      	b.n	80075ea <__swsetup_r+0xba>
 80075fa:	bf00      	nop
 80075fc:	2000000c 	.word	0x2000000c
 8007600:	080082dc 	.word	0x080082dc
 8007604:	080082fc 	.word	0x080082fc
 8007608:	080082bc 	.word	0x080082bc

0800760c <abort>:
 800760c:	b508      	push	{r3, lr}
 800760e:	2006      	movs	r0, #6
 8007610:	f000 fab0 	bl	8007b74 <raise>
 8007614:	2001      	movs	r0, #1
 8007616:	f7f9 fbef 	bl	8000df8 <_exit>
	...

0800761c <__sflush_r>:
 800761c:	898a      	ldrh	r2, [r1, #12]
 800761e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007622:	4605      	mov	r5, r0
 8007624:	0710      	lsls	r0, r2, #28
 8007626:	460c      	mov	r4, r1
 8007628:	d458      	bmi.n	80076dc <__sflush_r+0xc0>
 800762a:	684b      	ldr	r3, [r1, #4]
 800762c:	2b00      	cmp	r3, #0
 800762e:	dc05      	bgt.n	800763c <__sflush_r+0x20>
 8007630:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007632:	2b00      	cmp	r3, #0
 8007634:	dc02      	bgt.n	800763c <__sflush_r+0x20>
 8007636:	2000      	movs	r0, #0
 8007638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800763c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800763e:	2e00      	cmp	r6, #0
 8007640:	d0f9      	beq.n	8007636 <__sflush_r+0x1a>
 8007642:	2300      	movs	r3, #0
 8007644:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007648:	682f      	ldr	r7, [r5, #0]
 800764a:	602b      	str	r3, [r5, #0]
 800764c:	d032      	beq.n	80076b4 <__sflush_r+0x98>
 800764e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007650:	89a3      	ldrh	r3, [r4, #12]
 8007652:	075a      	lsls	r2, r3, #29
 8007654:	d505      	bpl.n	8007662 <__sflush_r+0x46>
 8007656:	6863      	ldr	r3, [r4, #4]
 8007658:	1ac0      	subs	r0, r0, r3
 800765a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800765c:	b10b      	cbz	r3, 8007662 <__sflush_r+0x46>
 800765e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007660:	1ac0      	subs	r0, r0, r3
 8007662:	2300      	movs	r3, #0
 8007664:	4602      	mov	r2, r0
 8007666:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007668:	6a21      	ldr	r1, [r4, #32]
 800766a:	4628      	mov	r0, r5
 800766c:	47b0      	blx	r6
 800766e:	1c43      	adds	r3, r0, #1
 8007670:	89a3      	ldrh	r3, [r4, #12]
 8007672:	d106      	bne.n	8007682 <__sflush_r+0x66>
 8007674:	6829      	ldr	r1, [r5, #0]
 8007676:	291d      	cmp	r1, #29
 8007678:	d82c      	bhi.n	80076d4 <__sflush_r+0xb8>
 800767a:	4a2a      	ldr	r2, [pc, #168]	; (8007724 <__sflush_r+0x108>)
 800767c:	40ca      	lsrs	r2, r1
 800767e:	07d6      	lsls	r6, r2, #31
 8007680:	d528      	bpl.n	80076d4 <__sflush_r+0xb8>
 8007682:	2200      	movs	r2, #0
 8007684:	6062      	str	r2, [r4, #4]
 8007686:	04d9      	lsls	r1, r3, #19
 8007688:	6922      	ldr	r2, [r4, #16]
 800768a:	6022      	str	r2, [r4, #0]
 800768c:	d504      	bpl.n	8007698 <__sflush_r+0x7c>
 800768e:	1c42      	adds	r2, r0, #1
 8007690:	d101      	bne.n	8007696 <__sflush_r+0x7a>
 8007692:	682b      	ldr	r3, [r5, #0]
 8007694:	b903      	cbnz	r3, 8007698 <__sflush_r+0x7c>
 8007696:	6560      	str	r0, [r4, #84]	; 0x54
 8007698:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800769a:	602f      	str	r7, [r5, #0]
 800769c:	2900      	cmp	r1, #0
 800769e:	d0ca      	beq.n	8007636 <__sflush_r+0x1a>
 80076a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80076a4:	4299      	cmp	r1, r3
 80076a6:	d002      	beq.n	80076ae <__sflush_r+0x92>
 80076a8:	4628      	mov	r0, r5
 80076aa:	f7ff f9b5 	bl	8006a18 <_free_r>
 80076ae:	2000      	movs	r0, #0
 80076b0:	6360      	str	r0, [r4, #52]	; 0x34
 80076b2:	e7c1      	b.n	8007638 <__sflush_r+0x1c>
 80076b4:	6a21      	ldr	r1, [r4, #32]
 80076b6:	2301      	movs	r3, #1
 80076b8:	4628      	mov	r0, r5
 80076ba:	47b0      	blx	r6
 80076bc:	1c41      	adds	r1, r0, #1
 80076be:	d1c7      	bne.n	8007650 <__sflush_r+0x34>
 80076c0:	682b      	ldr	r3, [r5, #0]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d0c4      	beq.n	8007650 <__sflush_r+0x34>
 80076c6:	2b1d      	cmp	r3, #29
 80076c8:	d001      	beq.n	80076ce <__sflush_r+0xb2>
 80076ca:	2b16      	cmp	r3, #22
 80076cc:	d101      	bne.n	80076d2 <__sflush_r+0xb6>
 80076ce:	602f      	str	r7, [r5, #0]
 80076d0:	e7b1      	b.n	8007636 <__sflush_r+0x1a>
 80076d2:	89a3      	ldrh	r3, [r4, #12]
 80076d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076d8:	81a3      	strh	r3, [r4, #12]
 80076da:	e7ad      	b.n	8007638 <__sflush_r+0x1c>
 80076dc:	690f      	ldr	r7, [r1, #16]
 80076de:	2f00      	cmp	r7, #0
 80076e0:	d0a9      	beq.n	8007636 <__sflush_r+0x1a>
 80076e2:	0793      	lsls	r3, r2, #30
 80076e4:	680e      	ldr	r6, [r1, #0]
 80076e6:	bf08      	it	eq
 80076e8:	694b      	ldreq	r3, [r1, #20]
 80076ea:	600f      	str	r7, [r1, #0]
 80076ec:	bf18      	it	ne
 80076ee:	2300      	movne	r3, #0
 80076f0:	eba6 0807 	sub.w	r8, r6, r7
 80076f4:	608b      	str	r3, [r1, #8]
 80076f6:	f1b8 0f00 	cmp.w	r8, #0
 80076fa:	dd9c      	ble.n	8007636 <__sflush_r+0x1a>
 80076fc:	6a21      	ldr	r1, [r4, #32]
 80076fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007700:	4643      	mov	r3, r8
 8007702:	463a      	mov	r2, r7
 8007704:	4628      	mov	r0, r5
 8007706:	47b0      	blx	r6
 8007708:	2800      	cmp	r0, #0
 800770a:	dc06      	bgt.n	800771a <__sflush_r+0xfe>
 800770c:	89a3      	ldrh	r3, [r4, #12]
 800770e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007712:	81a3      	strh	r3, [r4, #12]
 8007714:	f04f 30ff 	mov.w	r0, #4294967295
 8007718:	e78e      	b.n	8007638 <__sflush_r+0x1c>
 800771a:	4407      	add	r7, r0
 800771c:	eba8 0800 	sub.w	r8, r8, r0
 8007720:	e7e9      	b.n	80076f6 <__sflush_r+0xda>
 8007722:	bf00      	nop
 8007724:	20400001 	.word	0x20400001

08007728 <_fflush_r>:
 8007728:	b538      	push	{r3, r4, r5, lr}
 800772a:	690b      	ldr	r3, [r1, #16]
 800772c:	4605      	mov	r5, r0
 800772e:	460c      	mov	r4, r1
 8007730:	b913      	cbnz	r3, 8007738 <_fflush_r+0x10>
 8007732:	2500      	movs	r5, #0
 8007734:	4628      	mov	r0, r5
 8007736:	bd38      	pop	{r3, r4, r5, pc}
 8007738:	b118      	cbz	r0, 8007742 <_fflush_r+0x1a>
 800773a:	6983      	ldr	r3, [r0, #24]
 800773c:	b90b      	cbnz	r3, 8007742 <_fflush_r+0x1a>
 800773e:	f000 f887 	bl	8007850 <__sinit>
 8007742:	4b14      	ldr	r3, [pc, #80]	; (8007794 <_fflush_r+0x6c>)
 8007744:	429c      	cmp	r4, r3
 8007746:	d11b      	bne.n	8007780 <_fflush_r+0x58>
 8007748:	686c      	ldr	r4, [r5, #4]
 800774a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d0ef      	beq.n	8007732 <_fflush_r+0xa>
 8007752:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007754:	07d0      	lsls	r0, r2, #31
 8007756:	d404      	bmi.n	8007762 <_fflush_r+0x3a>
 8007758:	0599      	lsls	r1, r3, #22
 800775a:	d402      	bmi.n	8007762 <_fflush_r+0x3a>
 800775c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800775e:	f000 f915 	bl	800798c <__retarget_lock_acquire_recursive>
 8007762:	4628      	mov	r0, r5
 8007764:	4621      	mov	r1, r4
 8007766:	f7ff ff59 	bl	800761c <__sflush_r>
 800776a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800776c:	07da      	lsls	r2, r3, #31
 800776e:	4605      	mov	r5, r0
 8007770:	d4e0      	bmi.n	8007734 <_fflush_r+0xc>
 8007772:	89a3      	ldrh	r3, [r4, #12]
 8007774:	059b      	lsls	r3, r3, #22
 8007776:	d4dd      	bmi.n	8007734 <_fflush_r+0xc>
 8007778:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800777a:	f000 f908 	bl	800798e <__retarget_lock_release_recursive>
 800777e:	e7d9      	b.n	8007734 <_fflush_r+0xc>
 8007780:	4b05      	ldr	r3, [pc, #20]	; (8007798 <_fflush_r+0x70>)
 8007782:	429c      	cmp	r4, r3
 8007784:	d101      	bne.n	800778a <_fflush_r+0x62>
 8007786:	68ac      	ldr	r4, [r5, #8]
 8007788:	e7df      	b.n	800774a <_fflush_r+0x22>
 800778a:	4b04      	ldr	r3, [pc, #16]	; (800779c <_fflush_r+0x74>)
 800778c:	429c      	cmp	r4, r3
 800778e:	bf08      	it	eq
 8007790:	68ec      	ldreq	r4, [r5, #12]
 8007792:	e7da      	b.n	800774a <_fflush_r+0x22>
 8007794:	080082dc 	.word	0x080082dc
 8007798:	080082fc 	.word	0x080082fc
 800779c:	080082bc 	.word	0x080082bc

080077a0 <std>:
 80077a0:	2300      	movs	r3, #0
 80077a2:	b510      	push	{r4, lr}
 80077a4:	4604      	mov	r4, r0
 80077a6:	e9c0 3300 	strd	r3, r3, [r0]
 80077aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80077ae:	6083      	str	r3, [r0, #8]
 80077b0:	8181      	strh	r1, [r0, #12]
 80077b2:	6643      	str	r3, [r0, #100]	; 0x64
 80077b4:	81c2      	strh	r2, [r0, #14]
 80077b6:	6183      	str	r3, [r0, #24]
 80077b8:	4619      	mov	r1, r3
 80077ba:	2208      	movs	r2, #8
 80077bc:	305c      	adds	r0, #92	; 0x5c
 80077be:	f7fe ffcf 	bl	8006760 <memset>
 80077c2:	4b05      	ldr	r3, [pc, #20]	; (80077d8 <std+0x38>)
 80077c4:	6263      	str	r3, [r4, #36]	; 0x24
 80077c6:	4b05      	ldr	r3, [pc, #20]	; (80077dc <std+0x3c>)
 80077c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80077ca:	4b05      	ldr	r3, [pc, #20]	; (80077e0 <std+0x40>)
 80077cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80077ce:	4b05      	ldr	r3, [pc, #20]	; (80077e4 <std+0x44>)
 80077d0:	6224      	str	r4, [r4, #32]
 80077d2:	6323      	str	r3, [r4, #48]	; 0x30
 80077d4:	bd10      	pop	{r4, pc}
 80077d6:	bf00      	nop
 80077d8:	08007bad 	.word	0x08007bad
 80077dc:	08007bcf 	.word	0x08007bcf
 80077e0:	08007c07 	.word	0x08007c07
 80077e4:	08007c2b 	.word	0x08007c2b

080077e8 <_cleanup_r>:
 80077e8:	4901      	ldr	r1, [pc, #4]	; (80077f0 <_cleanup_r+0x8>)
 80077ea:	f000 b8af 	b.w	800794c <_fwalk_reent>
 80077ee:	bf00      	nop
 80077f0:	08007729 	.word	0x08007729

080077f4 <__sfmoreglue>:
 80077f4:	b570      	push	{r4, r5, r6, lr}
 80077f6:	2268      	movs	r2, #104	; 0x68
 80077f8:	1e4d      	subs	r5, r1, #1
 80077fa:	4355      	muls	r5, r2
 80077fc:	460e      	mov	r6, r1
 80077fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007802:	f7ff f975 	bl	8006af0 <_malloc_r>
 8007806:	4604      	mov	r4, r0
 8007808:	b140      	cbz	r0, 800781c <__sfmoreglue+0x28>
 800780a:	2100      	movs	r1, #0
 800780c:	e9c0 1600 	strd	r1, r6, [r0]
 8007810:	300c      	adds	r0, #12
 8007812:	60a0      	str	r0, [r4, #8]
 8007814:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007818:	f7fe ffa2 	bl	8006760 <memset>
 800781c:	4620      	mov	r0, r4
 800781e:	bd70      	pop	{r4, r5, r6, pc}

08007820 <__sfp_lock_acquire>:
 8007820:	4801      	ldr	r0, [pc, #4]	; (8007828 <__sfp_lock_acquire+0x8>)
 8007822:	f000 b8b3 	b.w	800798c <__retarget_lock_acquire_recursive>
 8007826:	bf00      	nop
 8007828:	20000281 	.word	0x20000281

0800782c <__sfp_lock_release>:
 800782c:	4801      	ldr	r0, [pc, #4]	; (8007834 <__sfp_lock_release+0x8>)
 800782e:	f000 b8ae 	b.w	800798e <__retarget_lock_release_recursive>
 8007832:	bf00      	nop
 8007834:	20000281 	.word	0x20000281

08007838 <__sinit_lock_acquire>:
 8007838:	4801      	ldr	r0, [pc, #4]	; (8007840 <__sinit_lock_acquire+0x8>)
 800783a:	f000 b8a7 	b.w	800798c <__retarget_lock_acquire_recursive>
 800783e:	bf00      	nop
 8007840:	20000282 	.word	0x20000282

08007844 <__sinit_lock_release>:
 8007844:	4801      	ldr	r0, [pc, #4]	; (800784c <__sinit_lock_release+0x8>)
 8007846:	f000 b8a2 	b.w	800798e <__retarget_lock_release_recursive>
 800784a:	bf00      	nop
 800784c:	20000282 	.word	0x20000282

08007850 <__sinit>:
 8007850:	b510      	push	{r4, lr}
 8007852:	4604      	mov	r4, r0
 8007854:	f7ff fff0 	bl	8007838 <__sinit_lock_acquire>
 8007858:	69a3      	ldr	r3, [r4, #24]
 800785a:	b11b      	cbz	r3, 8007864 <__sinit+0x14>
 800785c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007860:	f7ff bff0 	b.w	8007844 <__sinit_lock_release>
 8007864:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007868:	6523      	str	r3, [r4, #80]	; 0x50
 800786a:	4b13      	ldr	r3, [pc, #76]	; (80078b8 <__sinit+0x68>)
 800786c:	4a13      	ldr	r2, [pc, #76]	; (80078bc <__sinit+0x6c>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	62a2      	str	r2, [r4, #40]	; 0x28
 8007872:	42a3      	cmp	r3, r4
 8007874:	bf04      	itt	eq
 8007876:	2301      	moveq	r3, #1
 8007878:	61a3      	streq	r3, [r4, #24]
 800787a:	4620      	mov	r0, r4
 800787c:	f000 f820 	bl	80078c0 <__sfp>
 8007880:	6060      	str	r0, [r4, #4]
 8007882:	4620      	mov	r0, r4
 8007884:	f000 f81c 	bl	80078c0 <__sfp>
 8007888:	60a0      	str	r0, [r4, #8]
 800788a:	4620      	mov	r0, r4
 800788c:	f000 f818 	bl	80078c0 <__sfp>
 8007890:	2200      	movs	r2, #0
 8007892:	60e0      	str	r0, [r4, #12]
 8007894:	2104      	movs	r1, #4
 8007896:	6860      	ldr	r0, [r4, #4]
 8007898:	f7ff ff82 	bl	80077a0 <std>
 800789c:	68a0      	ldr	r0, [r4, #8]
 800789e:	2201      	movs	r2, #1
 80078a0:	2109      	movs	r1, #9
 80078a2:	f7ff ff7d 	bl	80077a0 <std>
 80078a6:	68e0      	ldr	r0, [r4, #12]
 80078a8:	2202      	movs	r2, #2
 80078aa:	2112      	movs	r1, #18
 80078ac:	f7ff ff78 	bl	80077a0 <std>
 80078b0:	2301      	movs	r3, #1
 80078b2:	61a3      	str	r3, [r4, #24]
 80078b4:	e7d2      	b.n	800785c <__sinit+0xc>
 80078b6:	bf00      	nop
 80078b8:	080080d4 	.word	0x080080d4
 80078bc:	080077e9 	.word	0x080077e9

080078c0 <__sfp>:
 80078c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078c2:	4607      	mov	r7, r0
 80078c4:	f7ff ffac 	bl	8007820 <__sfp_lock_acquire>
 80078c8:	4b1e      	ldr	r3, [pc, #120]	; (8007944 <__sfp+0x84>)
 80078ca:	681e      	ldr	r6, [r3, #0]
 80078cc:	69b3      	ldr	r3, [r6, #24]
 80078ce:	b913      	cbnz	r3, 80078d6 <__sfp+0x16>
 80078d0:	4630      	mov	r0, r6
 80078d2:	f7ff ffbd 	bl	8007850 <__sinit>
 80078d6:	3648      	adds	r6, #72	; 0x48
 80078d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80078dc:	3b01      	subs	r3, #1
 80078de:	d503      	bpl.n	80078e8 <__sfp+0x28>
 80078e0:	6833      	ldr	r3, [r6, #0]
 80078e2:	b30b      	cbz	r3, 8007928 <__sfp+0x68>
 80078e4:	6836      	ldr	r6, [r6, #0]
 80078e6:	e7f7      	b.n	80078d8 <__sfp+0x18>
 80078e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80078ec:	b9d5      	cbnz	r5, 8007924 <__sfp+0x64>
 80078ee:	4b16      	ldr	r3, [pc, #88]	; (8007948 <__sfp+0x88>)
 80078f0:	60e3      	str	r3, [r4, #12]
 80078f2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80078f6:	6665      	str	r5, [r4, #100]	; 0x64
 80078f8:	f000 f847 	bl	800798a <__retarget_lock_init_recursive>
 80078fc:	f7ff ff96 	bl	800782c <__sfp_lock_release>
 8007900:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007904:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007908:	6025      	str	r5, [r4, #0]
 800790a:	61a5      	str	r5, [r4, #24]
 800790c:	2208      	movs	r2, #8
 800790e:	4629      	mov	r1, r5
 8007910:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007914:	f7fe ff24 	bl	8006760 <memset>
 8007918:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800791c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007920:	4620      	mov	r0, r4
 8007922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007924:	3468      	adds	r4, #104	; 0x68
 8007926:	e7d9      	b.n	80078dc <__sfp+0x1c>
 8007928:	2104      	movs	r1, #4
 800792a:	4638      	mov	r0, r7
 800792c:	f7ff ff62 	bl	80077f4 <__sfmoreglue>
 8007930:	4604      	mov	r4, r0
 8007932:	6030      	str	r0, [r6, #0]
 8007934:	2800      	cmp	r0, #0
 8007936:	d1d5      	bne.n	80078e4 <__sfp+0x24>
 8007938:	f7ff ff78 	bl	800782c <__sfp_lock_release>
 800793c:	230c      	movs	r3, #12
 800793e:	603b      	str	r3, [r7, #0]
 8007940:	e7ee      	b.n	8007920 <__sfp+0x60>
 8007942:	bf00      	nop
 8007944:	080080d4 	.word	0x080080d4
 8007948:	ffff0001 	.word	0xffff0001

0800794c <_fwalk_reent>:
 800794c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007950:	4606      	mov	r6, r0
 8007952:	4688      	mov	r8, r1
 8007954:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007958:	2700      	movs	r7, #0
 800795a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800795e:	f1b9 0901 	subs.w	r9, r9, #1
 8007962:	d505      	bpl.n	8007970 <_fwalk_reent+0x24>
 8007964:	6824      	ldr	r4, [r4, #0]
 8007966:	2c00      	cmp	r4, #0
 8007968:	d1f7      	bne.n	800795a <_fwalk_reent+0xe>
 800796a:	4638      	mov	r0, r7
 800796c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007970:	89ab      	ldrh	r3, [r5, #12]
 8007972:	2b01      	cmp	r3, #1
 8007974:	d907      	bls.n	8007986 <_fwalk_reent+0x3a>
 8007976:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800797a:	3301      	adds	r3, #1
 800797c:	d003      	beq.n	8007986 <_fwalk_reent+0x3a>
 800797e:	4629      	mov	r1, r5
 8007980:	4630      	mov	r0, r6
 8007982:	47c0      	blx	r8
 8007984:	4307      	orrs	r7, r0
 8007986:	3568      	adds	r5, #104	; 0x68
 8007988:	e7e9      	b.n	800795e <_fwalk_reent+0x12>

0800798a <__retarget_lock_init_recursive>:
 800798a:	4770      	bx	lr

0800798c <__retarget_lock_acquire_recursive>:
 800798c:	4770      	bx	lr

0800798e <__retarget_lock_release_recursive>:
 800798e:	4770      	bx	lr

08007990 <__swhatbuf_r>:
 8007990:	b570      	push	{r4, r5, r6, lr}
 8007992:	460e      	mov	r6, r1
 8007994:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007998:	2900      	cmp	r1, #0
 800799a:	b096      	sub	sp, #88	; 0x58
 800799c:	4614      	mov	r4, r2
 800799e:	461d      	mov	r5, r3
 80079a0:	da08      	bge.n	80079b4 <__swhatbuf_r+0x24>
 80079a2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80079a6:	2200      	movs	r2, #0
 80079a8:	602a      	str	r2, [r5, #0]
 80079aa:	061a      	lsls	r2, r3, #24
 80079ac:	d410      	bmi.n	80079d0 <__swhatbuf_r+0x40>
 80079ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079b2:	e00e      	b.n	80079d2 <__swhatbuf_r+0x42>
 80079b4:	466a      	mov	r2, sp
 80079b6:	f000 f95f 	bl	8007c78 <_fstat_r>
 80079ba:	2800      	cmp	r0, #0
 80079bc:	dbf1      	blt.n	80079a2 <__swhatbuf_r+0x12>
 80079be:	9a01      	ldr	r2, [sp, #4]
 80079c0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80079c4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80079c8:	425a      	negs	r2, r3
 80079ca:	415a      	adcs	r2, r3
 80079cc:	602a      	str	r2, [r5, #0]
 80079ce:	e7ee      	b.n	80079ae <__swhatbuf_r+0x1e>
 80079d0:	2340      	movs	r3, #64	; 0x40
 80079d2:	2000      	movs	r0, #0
 80079d4:	6023      	str	r3, [r4, #0]
 80079d6:	b016      	add	sp, #88	; 0x58
 80079d8:	bd70      	pop	{r4, r5, r6, pc}
	...

080079dc <__smakebuf_r>:
 80079dc:	898b      	ldrh	r3, [r1, #12]
 80079de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80079e0:	079d      	lsls	r5, r3, #30
 80079e2:	4606      	mov	r6, r0
 80079e4:	460c      	mov	r4, r1
 80079e6:	d507      	bpl.n	80079f8 <__smakebuf_r+0x1c>
 80079e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80079ec:	6023      	str	r3, [r4, #0]
 80079ee:	6123      	str	r3, [r4, #16]
 80079f0:	2301      	movs	r3, #1
 80079f2:	6163      	str	r3, [r4, #20]
 80079f4:	b002      	add	sp, #8
 80079f6:	bd70      	pop	{r4, r5, r6, pc}
 80079f8:	ab01      	add	r3, sp, #4
 80079fa:	466a      	mov	r2, sp
 80079fc:	f7ff ffc8 	bl	8007990 <__swhatbuf_r>
 8007a00:	9900      	ldr	r1, [sp, #0]
 8007a02:	4605      	mov	r5, r0
 8007a04:	4630      	mov	r0, r6
 8007a06:	f7ff f873 	bl	8006af0 <_malloc_r>
 8007a0a:	b948      	cbnz	r0, 8007a20 <__smakebuf_r+0x44>
 8007a0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a10:	059a      	lsls	r2, r3, #22
 8007a12:	d4ef      	bmi.n	80079f4 <__smakebuf_r+0x18>
 8007a14:	f023 0303 	bic.w	r3, r3, #3
 8007a18:	f043 0302 	orr.w	r3, r3, #2
 8007a1c:	81a3      	strh	r3, [r4, #12]
 8007a1e:	e7e3      	b.n	80079e8 <__smakebuf_r+0xc>
 8007a20:	4b0d      	ldr	r3, [pc, #52]	; (8007a58 <__smakebuf_r+0x7c>)
 8007a22:	62b3      	str	r3, [r6, #40]	; 0x28
 8007a24:	89a3      	ldrh	r3, [r4, #12]
 8007a26:	6020      	str	r0, [r4, #0]
 8007a28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a2c:	81a3      	strh	r3, [r4, #12]
 8007a2e:	9b00      	ldr	r3, [sp, #0]
 8007a30:	6163      	str	r3, [r4, #20]
 8007a32:	9b01      	ldr	r3, [sp, #4]
 8007a34:	6120      	str	r0, [r4, #16]
 8007a36:	b15b      	cbz	r3, 8007a50 <__smakebuf_r+0x74>
 8007a38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a3c:	4630      	mov	r0, r6
 8007a3e:	f000 f92d 	bl	8007c9c <_isatty_r>
 8007a42:	b128      	cbz	r0, 8007a50 <__smakebuf_r+0x74>
 8007a44:	89a3      	ldrh	r3, [r4, #12]
 8007a46:	f023 0303 	bic.w	r3, r3, #3
 8007a4a:	f043 0301 	orr.w	r3, r3, #1
 8007a4e:	81a3      	strh	r3, [r4, #12]
 8007a50:	89a0      	ldrh	r0, [r4, #12]
 8007a52:	4305      	orrs	r5, r0
 8007a54:	81a5      	strh	r5, [r4, #12]
 8007a56:	e7cd      	b.n	80079f4 <__smakebuf_r+0x18>
 8007a58:	080077e9 	.word	0x080077e9

08007a5c <memcpy>:
 8007a5c:	440a      	add	r2, r1
 8007a5e:	4291      	cmp	r1, r2
 8007a60:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a64:	d100      	bne.n	8007a68 <memcpy+0xc>
 8007a66:	4770      	bx	lr
 8007a68:	b510      	push	{r4, lr}
 8007a6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a72:	4291      	cmp	r1, r2
 8007a74:	d1f9      	bne.n	8007a6a <memcpy+0xe>
 8007a76:	bd10      	pop	{r4, pc}

08007a78 <memmove>:
 8007a78:	4288      	cmp	r0, r1
 8007a7a:	b510      	push	{r4, lr}
 8007a7c:	eb01 0402 	add.w	r4, r1, r2
 8007a80:	d902      	bls.n	8007a88 <memmove+0x10>
 8007a82:	4284      	cmp	r4, r0
 8007a84:	4623      	mov	r3, r4
 8007a86:	d807      	bhi.n	8007a98 <memmove+0x20>
 8007a88:	1e43      	subs	r3, r0, #1
 8007a8a:	42a1      	cmp	r1, r4
 8007a8c:	d008      	beq.n	8007aa0 <memmove+0x28>
 8007a8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007a92:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007a96:	e7f8      	b.n	8007a8a <memmove+0x12>
 8007a98:	4402      	add	r2, r0
 8007a9a:	4601      	mov	r1, r0
 8007a9c:	428a      	cmp	r2, r1
 8007a9e:	d100      	bne.n	8007aa2 <memmove+0x2a>
 8007aa0:	bd10      	pop	{r4, pc}
 8007aa2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007aa6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007aaa:	e7f7      	b.n	8007a9c <memmove+0x24>

08007aac <__malloc_lock>:
 8007aac:	4801      	ldr	r0, [pc, #4]	; (8007ab4 <__malloc_lock+0x8>)
 8007aae:	f7ff bf6d 	b.w	800798c <__retarget_lock_acquire_recursive>
 8007ab2:	bf00      	nop
 8007ab4:	20000280 	.word	0x20000280

08007ab8 <__malloc_unlock>:
 8007ab8:	4801      	ldr	r0, [pc, #4]	; (8007ac0 <__malloc_unlock+0x8>)
 8007aba:	f7ff bf68 	b.w	800798e <__retarget_lock_release_recursive>
 8007abe:	bf00      	nop
 8007ac0:	20000280 	.word	0x20000280

08007ac4 <_realloc_r>:
 8007ac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ac8:	4680      	mov	r8, r0
 8007aca:	4614      	mov	r4, r2
 8007acc:	460e      	mov	r6, r1
 8007ace:	b921      	cbnz	r1, 8007ada <_realloc_r+0x16>
 8007ad0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ad4:	4611      	mov	r1, r2
 8007ad6:	f7ff b80b 	b.w	8006af0 <_malloc_r>
 8007ada:	b92a      	cbnz	r2, 8007ae8 <_realloc_r+0x24>
 8007adc:	f7fe ff9c 	bl	8006a18 <_free_r>
 8007ae0:	4625      	mov	r5, r4
 8007ae2:	4628      	mov	r0, r5
 8007ae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ae8:	f000 f8fa 	bl	8007ce0 <_malloc_usable_size_r>
 8007aec:	4284      	cmp	r4, r0
 8007aee:	4607      	mov	r7, r0
 8007af0:	d802      	bhi.n	8007af8 <_realloc_r+0x34>
 8007af2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007af6:	d812      	bhi.n	8007b1e <_realloc_r+0x5a>
 8007af8:	4621      	mov	r1, r4
 8007afa:	4640      	mov	r0, r8
 8007afc:	f7fe fff8 	bl	8006af0 <_malloc_r>
 8007b00:	4605      	mov	r5, r0
 8007b02:	2800      	cmp	r0, #0
 8007b04:	d0ed      	beq.n	8007ae2 <_realloc_r+0x1e>
 8007b06:	42bc      	cmp	r4, r7
 8007b08:	4622      	mov	r2, r4
 8007b0a:	4631      	mov	r1, r6
 8007b0c:	bf28      	it	cs
 8007b0e:	463a      	movcs	r2, r7
 8007b10:	f7ff ffa4 	bl	8007a5c <memcpy>
 8007b14:	4631      	mov	r1, r6
 8007b16:	4640      	mov	r0, r8
 8007b18:	f7fe ff7e 	bl	8006a18 <_free_r>
 8007b1c:	e7e1      	b.n	8007ae2 <_realloc_r+0x1e>
 8007b1e:	4635      	mov	r5, r6
 8007b20:	e7df      	b.n	8007ae2 <_realloc_r+0x1e>

08007b22 <_raise_r>:
 8007b22:	291f      	cmp	r1, #31
 8007b24:	b538      	push	{r3, r4, r5, lr}
 8007b26:	4604      	mov	r4, r0
 8007b28:	460d      	mov	r5, r1
 8007b2a:	d904      	bls.n	8007b36 <_raise_r+0x14>
 8007b2c:	2316      	movs	r3, #22
 8007b2e:	6003      	str	r3, [r0, #0]
 8007b30:	f04f 30ff 	mov.w	r0, #4294967295
 8007b34:	bd38      	pop	{r3, r4, r5, pc}
 8007b36:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007b38:	b112      	cbz	r2, 8007b40 <_raise_r+0x1e>
 8007b3a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007b3e:	b94b      	cbnz	r3, 8007b54 <_raise_r+0x32>
 8007b40:	4620      	mov	r0, r4
 8007b42:	f000 f831 	bl	8007ba8 <_getpid_r>
 8007b46:	462a      	mov	r2, r5
 8007b48:	4601      	mov	r1, r0
 8007b4a:	4620      	mov	r0, r4
 8007b4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b50:	f000 b818 	b.w	8007b84 <_kill_r>
 8007b54:	2b01      	cmp	r3, #1
 8007b56:	d00a      	beq.n	8007b6e <_raise_r+0x4c>
 8007b58:	1c59      	adds	r1, r3, #1
 8007b5a:	d103      	bne.n	8007b64 <_raise_r+0x42>
 8007b5c:	2316      	movs	r3, #22
 8007b5e:	6003      	str	r3, [r0, #0]
 8007b60:	2001      	movs	r0, #1
 8007b62:	e7e7      	b.n	8007b34 <_raise_r+0x12>
 8007b64:	2400      	movs	r4, #0
 8007b66:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007b6a:	4628      	mov	r0, r5
 8007b6c:	4798      	blx	r3
 8007b6e:	2000      	movs	r0, #0
 8007b70:	e7e0      	b.n	8007b34 <_raise_r+0x12>
	...

08007b74 <raise>:
 8007b74:	4b02      	ldr	r3, [pc, #8]	; (8007b80 <raise+0xc>)
 8007b76:	4601      	mov	r1, r0
 8007b78:	6818      	ldr	r0, [r3, #0]
 8007b7a:	f7ff bfd2 	b.w	8007b22 <_raise_r>
 8007b7e:	bf00      	nop
 8007b80:	2000000c 	.word	0x2000000c

08007b84 <_kill_r>:
 8007b84:	b538      	push	{r3, r4, r5, lr}
 8007b86:	4d07      	ldr	r5, [pc, #28]	; (8007ba4 <_kill_r+0x20>)
 8007b88:	2300      	movs	r3, #0
 8007b8a:	4604      	mov	r4, r0
 8007b8c:	4608      	mov	r0, r1
 8007b8e:	4611      	mov	r1, r2
 8007b90:	602b      	str	r3, [r5, #0]
 8007b92:	f7f9 f921 	bl	8000dd8 <_kill>
 8007b96:	1c43      	adds	r3, r0, #1
 8007b98:	d102      	bne.n	8007ba0 <_kill_r+0x1c>
 8007b9a:	682b      	ldr	r3, [r5, #0]
 8007b9c:	b103      	cbz	r3, 8007ba0 <_kill_r+0x1c>
 8007b9e:	6023      	str	r3, [r4, #0]
 8007ba0:	bd38      	pop	{r3, r4, r5, pc}
 8007ba2:	bf00      	nop
 8007ba4:	20000284 	.word	0x20000284

08007ba8 <_getpid_r>:
 8007ba8:	f7f9 b90e 	b.w	8000dc8 <_getpid>

08007bac <__sread>:
 8007bac:	b510      	push	{r4, lr}
 8007bae:	460c      	mov	r4, r1
 8007bb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bb4:	f000 f89c 	bl	8007cf0 <_read_r>
 8007bb8:	2800      	cmp	r0, #0
 8007bba:	bfab      	itete	ge
 8007bbc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007bbe:	89a3      	ldrhlt	r3, [r4, #12]
 8007bc0:	181b      	addge	r3, r3, r0
 8007bc2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007bc6:	bfac      	ite	ge
 8007bc8:	6563      	strge	r3, [r4, #84]	; 0x54
 8007bca:	81a3      	strhlt	r3, [r4, #12]
 8007bcc:	bd10      	pop	{r4, pc}

08007bce <__swrite>:
 8007bce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bd2:	461f      	mov	r7, r3
 8007bd4:	898b      	ldrh	r3, [r1, #12]
 8007bd6:	05db      	lsls	r3, r3, #23
 8007bd8:	4605      	mov	r5, r0
 8007bda:	460c      	mov	r4, r1
 8007bdc:	4616      	mov	r6, r2
 8007bde:	d505      	bpl.n	8007bec <__swrite+0x1e>
 8007be0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007be4:	2302      	movs	r3, #2
 8007be6:	2200      	movs	r2, #0
 8007be8:	f000 f868 	bl	8007cbc <_lseek_r>
 8007bec:	89a3      	ldrh	r3, [r4, #12]
 8007bee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007bf2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007bf6:	81a3      	strh	r3, [r4, #12]
 8007bf8:	4632      	mov	r2, r6
 8007bfa:	463b      	mov	r3, r7
 8007bfc:	4628      	mov	r0, r5
 8007bfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c02:	f000 b817 	b.w	8007c34 <_write_r>

08007c06 <__sseek>:
 8007c06:	b510      	push	{r4, lr}
 8007c08:	460c      	mov	r4, r1
 8007c0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c0e:	f000 f855 	bl	8007cbc <_lseek_r>
 8007c12:	1c43      	adds	r3, r0, #1
 8007c14:	89a3      	ldrh	r3, [r4, #12]
 8007c16:	bf15      	itete	ne
 8007c18:	6560      	strne	r0, [r4, #84]	; 0x54
 8007c1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007c1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007c22:	81a3      	strheq	r3, [r4, #12]
 8007c24:	bf18      	it	ne
 8007c26:	81a3      	strhne	r3, [r4, #12]
 8007c28:	bd10      	pop	{r4, pc}

08007c2a <__sclose>:
 8007c2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c2e:	f000 b813 	b.w	8007c58 <_close_r>
	...

08007c34 <_write_r>:
 8007c34:	b538      	push	{r3, r4, r5, lr}
 8007c36:	4d07      	ldr	r5, [pc, #28]	; (8007c54 <_write_r+0x20>)
 8007c38:	4604      	mov	r4, r0
 8007c3a:	4608      	mov	r0, r1
 8007c3c:	4611      	mov	r1, r2
 8007c3e:	2200      	movs	r2, #0
 8007c40:	602a      	str	r2, [r5, #0]
 8007c42:	461a      	mov	r2, r3
 8007c44:	f7f9 f8ff 	bl	8000e46 <_write>
 8007c48:	1c43      	adds	r3, r0, #1
 8007c4a:	d102      	bne.n	8007c52 <_write_r+0x1e>
 8007c4c:	682b      	ldr	r3, [r5, #0]
 8007c4e:	b103      	cbz	r3, 8007c52 <_write_r+0x1e>
 8007c50:	6023      	str	r3, [r4, #0]
 8007c52:	bd38      	pop	{r3, r4, r5, pc}
 8007c54:	20000284 	.word	0x20000284

08007c58 <_close_r>:
 8007c58:	b538      	push	{r3, r4, r5, lr}
 8007c5a:	4d06      	ldr	r5, [pc, #24]	; (8007c74 <_close_r+0x1c>)
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	4604      	mov	r4, r0
 8007c60:	4608      	mov	r0, r1
 8007c62:	602b      	str	r3, [r5, #0]
 8007c64:	f7f9 f90b 	bl	8000e7e <_close>
 8007c68:	1c43      	adds	r3, r0, #1
 8007c6a:	d102      	bne.n	8007c72 <_close_r+0x1a>
 8007c6c:	682b      	ldr	r3, [r5, #0]
 8007c6e:	b103      	cbz	r3, 8007c72 <_close_r+0x1a>
 8007c70:	6023      	str	r3, [r4, #0]
 8007c72:	bd38      	pop	{r3, r4, r5, pc}
 8007c74:	20000284 	.word	0x20000284

08007c78 <_fstat_r>:
 8007c78:	b538      	push	{r3, r4, r5, lr}
 8007c7a:	4d07      	ldr	r5, [pc, #28]	; (8007c98 <_fstat_r+0x20>)
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	4604      	mov	r4, r0
 8007c80:	4608      	mov	r0, r1
 8007c82:	4611      	mov	r1, r2
 8007c84:	602b      	str	r3, [r5, #0]
 8007c86:	f7f9 f906 	bl	8000e96 <_fstat>
 8007c8a:	1c43      	adds	r3, r0, #1
 8007c8c:	d102      	bne.n	8007c94 <_fstat_r+0x1c>
 8007c8e:	682b      	ldr	r3, [r5, #0]
 8007c90:	b103      	cbz	r3, 8007c94 <_fstat_r+0x1c>
 8007c92:	6023      	str	r3, [r4, #0]
 8007c94:	bd38      	pop	{r3, r4, r5, pc}
 8007c96:	bf00      	nop
 8007c98:	20000284 	.word	0x20000284

08007c9c <_isatty_r>:
 8007c9c:	b538      	push	{r3, r4, r5, lr}
 8007c9e:	4d06      	ldr	r5, [pc, #24]	; (8007cb8 <_isatty_r+0x1c>)
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	4604      	mov	r4, r0
 8007ca4:	4608      	mov	r0, r1
 8007ca6:	602b      	str	r3, [r5, #0]
 8007ca8:	f7f9 f905 	bl	8000eb6 <_isatty>
 8007cac:	1c43      	adds	r3, r0, #1
 8007cae:	d102      	bne.n	8007cb6 <_isatty_r+0x1a>
 8007cb0:	682b      	ldr	r3, [r5, #0]
 8007cb2:	b103      	cbz	r3, 8007cb6 <_isatty_r+0x1a>
 8007cb4:	6023      	str	r3, [r4, #0]
 8007cb6:	bd38      	pop	{r3, r4, r5, pc}
 8007cb8:	20000284 	.word	0x20000284

08007cbc <_lseek_r>:
 8007cbc:	b538      	push	{r3, r4, r5, lr}
 8007cbe:	4d07      	ldr	r5, [pc, #28]	; (8007cdc <_lseek_r+0x20>)
 8007cc0:	4604      	mov	r4, r0
 8007cc2:	4608      	mov	r0, r1
 8007cc4:	4611      	mov	r1, r2
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	602a      	str	r2, [r5, #0]
 8007cca:	461a      	mov	r2, r3
 8007ccc:	f7f9 f8fe 	bl	8000ecc <_lseek>
 8007cd0:	1c43      	adds	r3, r0, #1
 8007cd2:	d102      	bne.n	8007cda <_lseek_r+0x1e>
 8007cd4:	682b      	ldr	r3, [r5, #0]
 8007cd6:	b103      	cbz	r3, 8007cda <_lseek_r+0x1e>
 8007cd8:	6023      	str	r3, [r4, #0]
 8007cda:	bd38      	pop	{r3, r4, r5, pc}
 8007cdc:	20000284 	.word	0x20000284

08007ce0 <_malloc_usable_size_r>:
 8007ce0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ce4:	1f18      	subs	r0, r3, #4
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	bfbc      	itt	lt
 8007cea:	580b      	ldrlt	r3, [r1, r0]
 8007cec:	18c0      	addlt	r0, r0, r3
 8007cee:	4770      	bx	lr

08007cf0 <_read_r>:
 8007cf0:	b538      	push	{r3, r4, r5, lr}
 8007cf2:	4d07      	ldr	r5, [pc, #28]	; (8007d10 <_read_r+0x20>)
 8007cf4:	4604      	mov	r4, r0
 8007cf6:	4608      	mov	r0, r1
 8007cf8:	4611      	mov	r1, r2
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	602a      	str	r2, [r5, #0]
 8007cfe:	461a      	mov	r2, r3
 8007d00:	f7f9 f884 	bl	8000e0c <_read>
 8007d04:	1c43      	adds	r3, r0, #1
 8007d06:	d102      	bne.n	8007d0e <_read_r+0x1e>
 8007d08:	682b      	ldr	r3, [r5, #0]
 8007d0a:	b103      	cbz	r3, 8007d0e <_read_r+0x1e>
 8007d0c:	6023      	str	r3, [r4, #0]
 8007d0e:	bd38      	pop	{r3, r4, r5, pc}
 8007d10:	20000284 	.word	0x20000284

08007d14 <_init>:
 8007d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d16:	bf00      	nop
 8007d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d1a:	bc08      	pop	{r3}
 8007d1c:	469e      	mov	lr, r3
 8007d1e:	4770      	bx	lr

08007d20 <_fini>:
 8007d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d22:	bf00      	nop
 8007d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d26:	bc08      	pop	{r3}
 8007d28:	469e      	mov	lr, r3
 8007d2a:	4770      	bx	lr
